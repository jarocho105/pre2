/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.activosfijos.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.activosfijos.util.MovimientoActivoFijoConstantesFunciones;
import com.bydan.erp.activosfijos.util.MovimientoActivoFijoParameterReturnGeneral;
//import com.bydan.erp.activosfijos.util.MovimientoActivoFijoParameterGeneral;
//import com.bydan.erp.activosfijos.presentation.report.source.MovimientoActivoFijoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.activosfijos.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.activosfijos.resources.reportes.AuxiliarReportes;


import com.bydan.erp.activosfijos.util.*;
import com.bydan.erp.activosfijos.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.activosfijos.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.activosfijos.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class MovimientoActivoFijoBeanSwingJInternalFrame extends MovimientoActivoFijoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(MovimientoActivoFijoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<MovimientoActivoFijo> movimientoactivofijoValidator = new ClassValidator<MovimientoActivoFijo>(MovimientoActivoFijo.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public MovimientoActivoFijo movimientoactivofijo;	
	public MovimientoActivoFijo movimientoactivofijoAux;
	public MovimientoActivoFijo movimientoactivofijoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public MovimientoActivoFijo movimientoactivofijoTotales;
	public Long idMovimientoActivoFijoActual;
	public Long iIdNuevoMovimientoActivoFijo=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboEmpresaOrigen="";

	public List<Empresa> empresaorigensForeignKey;

	public List<Empresa> getempresaorigensForeignKey() {
		return empresaorigensForeignKey;
	}

	public void setempresaorigensForeignKey(List<Empresa> empresaorigensForeignKey) {
		this.empresaorigensForeignKey = empresaorigensForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaorigenForeignKey;

	public Empresa getempresaorigenForeignKey() {
		return empresaorigenForeignKey;
	}

	public void setempresaorigenForeignKey(Empresa empresaorigenForeignKey) {
		this.empresaorigenForeignKey = empresaorigenForeignKey;
	}

	public String sFinalQueryComboSucursalOrigen="";

	public List<Sucursal> sucursalorigensForeignKey;

	public List<Sucursal> getsucursalorigensForeignKey() {
		return sucursalorigensForeignKey;
	}

	public void setsucursalorigensForeignKey(List<Sucursal> sucursalorigensForeignKey) {
		this.sucursalorigensForeignKey = sucursalorigensForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalorigenForeignKey;

	public Sucursal getsucursalorigenForeignKey() {
		return sucursalorigenForeignKey;
	}

	public void setsucursalorigenForeignKey(Sucursal sucursalorigenForeignKey) {
		this.sucursalorigenForeignKey = sucursalorigenForeignKey;
	}

	public String sFinalQueryComboDetalleActivoFijoOrigen="";

	public List<DetalleActivoFijo> detalleactivofijoorigensForeignKey;

	public List<DetalleActivoFijo> getdetalleactivofijoorigensForeignKey() {
		return detalleactivofijoorigensForeignKey;
	}

	public void setdetalleactivofijoorigensForeignKey(List<DetalleActivoFijo> detalleactivofijoorigensForeignKey) {
		this.detalleactivofijoorigensForeignKey = detalleactivofijoorigensForeignKey;
	}

	//OBJETO FK ACTUAL
	public DetalleActivoFijo detalleactivofijoorigenForeignKey;

	public DetalleActivoFijo getdetalleactivofijoorigenForeignKey() {
		return detalleactivofijoorigenForeignKey;
	}

	public void setdetalleactivofijoorigenForeignKey(DetalleActivoFijo detalleactivofijoorigenForeignKey) {
		this.detalleactivofijoorigenForeignKey = detalleactivofijoorigenForeignKey;
	}

	public String sFinalQueryComboEmpresaDestino="";

	public List<Empresa> empresadestinosForeignKey;

	public List<Empresa> getempresadestinosForeignKey() {
		return empresadestinosForeignKey;
	}

	public void setempresadestinosForeignKey(List<Empresa> empresadestinosForeignKey) {
		this.empresadestinosForeignKey = empresadestinosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresadestinoForeignKey;

	public Empresa getempresadestinoForeignKey() {
		return empresadestinoForeignKey;
	}

	public void setempresadestinoForeignKey(Empresa empresadestinoForeignKey) {
		this.empresadestinoForeignKey = empresadestinoForeignKey;
	}

	public String sFinalQueryComboSucursalDestino="";

	public List<Sucursal> sucursaldestinosForeignKey;

	public List<Sucursal> getsucursaldestinosForeignKey() {
		return sucursaldestinosForeignKey;
	}

	public void setsucursaldestinosForeignKey(List<Sucursal> sucursaldestinosForeignKey) {
		this.sucursaldestinosForeignKey = sucursaldestinosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursaldestinoForeignKey;

	public Sucursal getsucursaldestinoForeignKey() {
		return sucursaldestinoForeignKey;
	}

	public void setsucursaldestinoForeignKey(Sucursal sucursaldestinoForeignKey) {
		this.sucursaldestinoForeignKey = sucursaldestinoForeignKey;
	}

	public String sFinalQueryComboDetalleActivoFijoDestino="";

	public List<DetalleActivoFijo> detalleactivofijodestinosForeignKey;

	public List<DetalleActivoFijo> getdetalleactivofijodestinosForeignKey() {
		return detalleactivofijodestinosForeignKey;
	}

	public void setdetalleactivofijodestinosForeignKey(List<DetalleActivoFijo> detalleactivofijodestinosForeignKey) {
		this.detalleactivofijodestinosForeignKey = detalleactivofijodestinosForeignKey;
	}

	//OBJETO FK ACTUAL
	public DetalleActivoFijo detalleactivofijodestinoForeignKey;

	public DetalleActivoFijo getdetalleactivofijodestinoForeignKey() {
		return detalleactivofijodestinoForeignKey;
	}

	public void setdetalleactivofijodestinoForeignKey(DetalleActivoFijo detalleactivofijodestinoForeignKey) {
		this.detalleactivofijodestinoForeignKey = detalleactivofijodestinoForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoMovimientoActivoFijo;
	public Boolean isPermisoNuevoMovimientoActivoFijo;
	public Boolean isPermisoActualizarMovimientoActivoFijo;
	public Boolean isPermisoActualizarOriginalMovimientoActivoFijo;
	public Boolean isPermisoEliminarMovimientoActivoFijo;
	public Boolean isPermisoGuardarCambiosMovimientoActivoFijo;
	public Boolean isPermisoConsultaMovimientoActivoFijo;
	public Boolean isPermisoBusquedaMovimientoActivoFijo;
	public Boolean isPermisoReporteMovimientoActivoFijo;
	public Boolean isPermisoPaginacionMedioMovimientoActivoFijo;
	public Boolean isPermisoPaginacionAltoMovimientoActivoFijo;
	public Boolean isPermisoPaginacionTodoMovimientoActivoFijo;
	public Boolean isPermisoCopiarMovimientoActivoFijo;
	public Boolean isPermisoVerFormMovimientoActivoFijo;
	public Boolean isPermisoDuplicarMovimientoActivoFijo;
	public Boolean isPermisoOrdenMovimientoActivoFijo;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoReturnGeneral;
	public MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoMovimientoActivoFijo=false;
	public Boolean esParaAccionDesdeFormularioMovimientoActivoFijo=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected MovimientoActivoFijoSessionBeanAdditional movimientoactivofijoSessionBeanAdditional=null;
	
	public MovimientoActivoFijoSessionBeanAdditional getMovimientoActivoFijoSessionBeanAdditional() {
		return this.movimientoactivofijoSessionBeanAdditional;
	}
	
	public void setMovimientoActivoFijoSessionBeanAdditional(MovimientoActivoFijoSessionBeanAdditional movimientoactivofijoSessionBeanAdditional) {
		try {
			this.movimientoactivofijoSessionBeanAdditional=movimientoactivofijoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected MovimientoActivoFijoBeanSwingJInternalFrameAdditional movimientoactivofijoBeanSwingJInternalFrameAdditional=null;
	//public class MovimientoActivoFijoBeanSwingJInternalFrame
	
	public MovimientoActivoFijoBeanSwingJInternalFrameAdditional getMovimientoActivoFijoBeanSwingJInternalFrameAdditional() {
		return this.movimientoactivofijoBeanSwingJInternalFrameAdditional;
	}
	
	public void setMovimientoActivoFijoBeanSwingJInternalFrameAdditional(MovimientoActivoFijoBeanSwingJInternalFrameAdditional movimientoactivofijoBeanSwingJInternalFrameAdditional) {
		try {
			this.movimientoactivofijoBeanSwingJInternalFrameAdditional=movimientoactivofijoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public MovimientoActivoFijoLogic movimientoactivofijoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public MovimientoActivoFijo movimientoactivofijoBean;
	public MovimientoActivoFijoConstantesFunciones movimientoactivofijoConstantesFunciones;
	//public MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public UsuarioLogic usuarioLogic;
	public EmpresaLogic empresaorigenLogic;
	public SucursalLogic sucursalorigenLogic;
	public DetalleActivoFijoLogic detalleactivofijoorigenLogic;
	public EmpresaLogic empresadestinoLogic;
	public SucursalLogic sucursaldestinoLogic;
	public DetalleActivoFijoLogic detalleactivofijodestinoLogic;
	
	//PARAMETROS
	
	
	//public List<MovimientoActivoFijo> movimientoactivofijos;	
	//public List<MovimientoActivoFijo> movimientoactivofijosEliminados;
	//public List<MovimientoActivoFijo> movimientoactivofijosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaDuplicarMovimientoActivoFijo=true;
	public Boolean isVisibilidadCeldaCopiarMovimientoActivoFijo=true;
	public Boolean isVisibilidadCeldaVerFormMovimientoActivoFijo=true;
	public Boolean isVisibilidadCeldaOrdenMovimientoActivoFijo=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaModificarMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaCancelarMovimientoActivoFijo=false;
	public Boolean isVisibilidadCeldaGuardarMovimientoActivoFijo=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;	
	
	
	public Boolean isVisibilidadFK_IdDetalleActivoFijoDestino=false;
	public Boolean isVisibilidadFK_IdDetalleActivoFijoOrigen=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEmpresaDestino=false;
	public Boolean isVisibilidadFK_IdEmpresaOrigen=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdSucursalDestino=false;
	public Boolean isVisibilidadFK_IdSucursalOrigen=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	
	public Long getiIdNuevoMovimientoActivoFijo() {
		return this.iIdNuevoMovimientoActivoFijo;
	}

	public void setiIdNuevoMovimientoActivoFijo(Long iIdNuevoMovimientoActivoFijo) {
		this.iIdNuevoMovimientoActivoFijo = iIdNuevoMovimientoActivoFijo;
	}
	
	public Long getidMovimientoActivoFijoActual() {
		return this.idMovimientoActivoFijoActual;
	}

	public void setidMovimientoActivoFijoActual(Long idMovimientoActivoFijoActual) {
		this.idMovimientoActivoFijoActual = idMovimientoActivoFijoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public MovimientoActivoFijo getmovimientoactivofijo() {
		return this.movimientoactivofijo;
	}

	public void setmovimientoactivofijo(MovimientoActivoFijo movimientoactivofijo) {
		this.movimientoactivofijo = movimientoactivofijo;
	}
	
	public MovimientoActivoFijo getmovimientoactivofijoAux() {
		return this.movimientoactivofijoAux;
	}

	public void setmovimientoactivofijoAux(MovimientoActivoFijo movimientoactivofijoAux) {
		this.movimientoactivofijoAux = movimientoactivofijoAux;
	}				
	
	public MovimientoActivoFijo getmovimientoactivofijoAnterior() {
		return this.movimientoactivofijoAnterior;
	}

	public void setmovimientoactivofijoAnterior(MovimientoActivoFijo movimientoactivofijoAnterior) {
		this.movimientoactivofijoAnterior = movimientoactivofijoAnterior;
	}	
	
	public MovimientoActivoFijo getmovimientoactivofijoTotales() {
		return this.movimientoactivofijoTotales;
	}

	public void setmovimientoactivofijoTotales(MovimientoActivoFijo movimientoactivofijoTotales) {
		this.movimientoactivofijoTotales = movimientoactivofijoTotales;
	}	
	
	public MovimientoActivoFijo getmovimientoactivofijoBean() {
		return this.movimientoactivofijoBean;
	}

	public void setmovimientoactivofijoBean(MovimientoActivoFijo movimientoactivofijoBean) {
		this.movimientoactivofijoBean = movimientoactivofijoBean;
	}	
	
	public MovimientoActivoFijoParameterReturnGeneral getmovimientoactivofijoReturnGeneral() {
		return this.movimientoactivofijoReturnGeneral;
	}

	public void setmovimientoactivofijoReturnGeneral(MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoReturnGeneral) {
		this.movimientoactivofijoReturnGeneral = movimientoactivofijoReturnGeneral;
	}	
	
	
	public Long id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino=-1L;

	public Long getid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino() {
		return this.id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino;
	}

	public void setid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino(Long id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino) {
		this.id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino = id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino;
	}

	public Long id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen=-1L;

	public Long getid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen() {
		return this.id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen;
	}

	public void setid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen(Long id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen) {
		this.id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen = id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_empresa_destinoFK_IdEmpresaDestino=-1L;

	public Long getid_empresa_destinoFK_IdEmpresaDestino() {
		return this.id_empresa_destinoFK_IdEmpresaDestino;
	}

	public void setid_empresa_destinoFK_IdEmpresaDestino(Long id_empresa_destinoFK_IdEmpresaDestino) {
		this.id_empresa_destinoFK_IdEmpresaDestino = id_empresa_destinoFK_IdEmpresaDestino;
	}

	public Long id_empresa_origenFK_IdEmpresaOrigen=-1L;

	public Long getid_empresa_origenFK_IdEmpresaOrigen() {
		return this.id_empresa_origenFK_IdEmpresaOrigen;
	}

	public void setid_empresa_origenFK_IdEmpresaOrigen(Long id_empresa_origenFK_IdEmpresaOrigen) {
		this.id_empresa_origenFK_IdEmpresaOrigen = id_empresa_origenFK_IdEmpresaOrigen;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_sucursal_destinoFK_IdSucursalDestino=-1L;

	public Long getid_sucursal_destinoFK_IdSucursalDestino() {
		return this.id_sucursal_destinoFK_IdSucursalDestino;
	}

	public void setid_sucursal_destinoFK_IdSucursalDestino(Long id_sucursal_destinoFK_IdSucursalDestino) {
		this.id_sucursal_destinoFK_IdSucursalDestino = id_sucursal_destinoFK_IdSucursalDestino;
	}

	public Long id_sucursal_origenFK_IdSucursalOrigen=-1L;

	public Long getid_sucursal_origenFK_IdSucursalOrigen() {
		return this.id_sucursal_origenFK_IdSucursalOrigen;
	}

	public void setid_sucursal_origenFK_IdSucursalOrigen(Long id_sucursal_origenFK_IdSucursalOrigen) {
		this.id_sucursal_origenFK_IdSucursalOrigen = id_sucursal_origenFK_IdSucursalOrigen;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public MovimientoActivoFijoLogic getMovimientoActivoFijoLogic()	{		
		return movimientoactivofijoLogic;
	}

	public void setMovimientoActivoFijoLogic(MovimientoActivoFijoLogic movimientoactivofijoLogic) {
		this.movimientoactivofijoLogic = movimientoactivofijoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoMovimientoActivoFijo() {
		return isEsNuevoMovimientoActivoFijo;
	}

	public void setIsEsNuevoMovimientoActivoFijo(Boolean isEsNuevoMovimientoActivoFijo) {
		this.isEsNuevoMovimientoActivoFijo = isEsNuevoMovimientoActivoFijo;
	}

	public Boolean getEsParaAccionDesdeFormularioMovimientoActivoFijo() {
		return esParaAccionDesdeFormularioMovimientoActivoFijo;
	}
	
	public void setEsParaAccionDesdeFormularioMovimientoActivoFijo(Boolean esParaAccionDesdeFormularioMovimientoActivoFijo) {
		this.esParaAccionDesdeFormularioMovimientoActivoFijo = esParaAccionDesdeFormularioMovimientoActivoFijo;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresaOrigensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresaorigensForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaOrigen()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaorigenLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresaorigensForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresaOrigen(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidEmpresaOrigenActual());
					this.empresaorigensForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalOrigensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalorigensForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalOrigen()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalorigenLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalorigensForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursalOrigen(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidSucursalOrigenActual());
					this.sucursalorigensForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosDetalleActivoFijoOrigensForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.detalleactivofijoorigensForeignKey=new ArrayList<DetalleActivoFijo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			DetalleActivoFijoLogic detalleactivofijoLogic=new DetalleActivoFijoLogic();

			//detalleactivofijoLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoOrigen()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//detalleactivofijoorigenLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

					detalleactivofijoLogic.getTodosDetalleActivoFijosWithConnection(sFinalQuery,new Pagination());

					this.detalleactivofijoorigensForeignKey=detalleactivofijoLogic.getDetalleActivoFijos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaDetalleActivoFijoOrigen(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleactivofijoLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidDetalleActivoFijoOrigenActual());
					this.detalleactivofijoorigensForeignKey.add(detalleactivofijoLogic.getDetalleActivoFijo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresaDestinosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresadestinosForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaDestino()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresadestinoLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresadestinosForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresaDestino(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidEmpresaDestinoActual());
					this.empresadestinosForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalDestinosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursaldestinosForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalDestino()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursaldestinoLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursaldestinosForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursalDestino(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidSucursalDestinoActual());
					this.sucursaldestinosForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosDetalleActivoFijoDestinosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.detalleactivofijodestinosForeignKey=new ArrayList<DetalleActivoFijo>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			DetalleActivoFijoLogic detalleactivofijoLogic=new DetalleActivoFijoLogic();

			//detalleactivofijoLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoDestino()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//detalleactivofijodestinoLogic.getDetalleActivoFijoDataAccess().setIsForForeingKeyData(true);

					detalleactivofijoLogic.getTodosDetalleActivoFijosWithConnection(sFinalQuery,new Pagination());

					this.detalleactivofijodestinosForeignKey=detalleactivofijoLogic.getDetalleActivoFijos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaDetalleActivoFijoDestino(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					detalleactivofijoLogic.getEntityWithConnection(movimientoactivofijoSessionBean.getlidDetalleActivoFijoDestinoActual());
					this.detalleactivofijodestinosForeignKey.add(detalleactivofijoLogic.getDetalleActivoFijo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaMovimientoActivoFijo.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaMovimientoActivoFijoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaMovimientoActivoFijoGenerico!=null && jComboBoxid_empresaMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_empresaMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalMovimientoActivoFijo.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalMovimientoActivoFijoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalMovimientoActivoFijoGenerico!=null && jComboBoxid_sucursalMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioMovimientoActivoFijo.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioMovimientoActivoFijoGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioMovimientoActivoFijoGenerico!=null && jComboBoxid_usuarioMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_usuarioMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaOrigenForeignKey(Long idEmpresaOrigenSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaorigenTemp=null;

			for(Empresa empresaorigenAux:empresaorigensForeignKey) {
				if(empresaorigenAux.getId()!=null && empresaorigenAux.getId().equals(idEmpresaOrigenSeleccionado)) {
					empresaorigenTemp=empresaorigenAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaorigenTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setEmpresaOrigen(empresaorigenTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedItem(empresaorigenTemp);
					}
				} else {
					//jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedItem(empresaorigenTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpresaOrigen") || sFormularioTipoBusqueda.equals("Todos")){
					if(empresaorigenTemp!=null && jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo!=null) {
						jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.setSelectedItem(empresaorigenTemp);
					} else {
						if(jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo!=null) {
							//jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.setSelectedItem(empresaorigenTemp);
							if(jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaOrigenForeignKeyDescripcion(Long idEmpresaOrigenSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaorigenTemp=null;

			for(Empresa empresaorigenAux:empresaorigensForeignKey) {
				if(empresaorigenAux.getId()!=null && empresaorigenAux.getId().equals(idEmpresaOrigenSeleccionado)) {
					empresaorigenTemp=empresaorigenAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaorigenTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaOrigenForeignKeyGenerico(Long idEmpresaOrigenSeleccionado,JComboBox jComboBoxid_empresa_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaorigenTemp=null;

			for(Empresa empresaorigenAux:empresaorigensForeignKey) {
				if(empresaorigenAux.getId()!=null && empresaorigenAux.getId().equals(idEmpresaOrigenSeleccionado)) {
					empresaorigenTemp=empresaorigenAux;
					break;
				}
			}

			if(empresaorigenTemp!=null) {
				jComboBoxid_empresa_origenMovimientoActivoFijoGenerico.setSelectedItem(empresaorigenTemp);
			} else {
				if(jComboBoxid_empresa_origenMovimientoActivoFijoGenerico!=null && jComboBoxid_empresa_origenMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_empresa_origenMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalOrigenForeignKey(Long idSucursalOrigenSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalorigenTemp=null;

			for(Sucursal sucursalorigenAux:sucursalorigensForeignKey) {
				if(sucursalorigenAux.getId()!=null && sucursalorigenAux.getId().equals(idSucursalOrigenSeleccionado)) {
					sucursalorigenTemp=sucursalorigenAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalorigenTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setSucursalOrigen(sucursalorigenTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedItem(sucursalorigenTemp);
					}
				} else {
					//jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedItem(sucursalorigenTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdSucursalOrigen") || sFormularioTipoBusqueda.equals("Todos")){
					if(sucursalorigenTemp!=null && jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo!=null) {
						jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.setSelectedItem(sucursalorigenTemp);
					} else {
						if(jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo!=null) {
							//jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.setSelectedItem(sucursalorigenTemp);
							if(jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalOrigenForeignKeyDescripcion(Long idSucursalOrigenSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalorigenTemp=null;

			for(Sucursal sucursalorigenAux:sucursalorigensForeignKey) {
				if(sucursalorigenAux.getId()!=null && sucursalorigenAux.getId().equals(idSucursalOrigenSeleccionado)) {
					sucursalorigenTemp=sucursalorigenAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalorigenTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalOrigenForeignKeyGenerico(Long idSucursalOrigenSeleccionado,JComboBox jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalorigenTemp=null;

			for(Sucursal sucursalorigenAux:sucursalorigensForeignKey) {
				if(sucursalorigenAux.getId()!=null && sucursalorigenAux.getId().equals(idSucursalOrigenSeleccionado)) {
					sucursalorigenTemp=sucursalorigenAux;
					break;
				}
			}

			if(sucursalorigenTemp!=null) {
				jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico.setSelectedItem(sucursalorigenTemp);
			} else {
				if(jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico!=null && jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualDetalleActivoFijoOrigenForeignKey(Long idDetalleActivoFijoOrigenSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoorigenTemp=null;

			for(DetalleActivoFijo detalleactivofijoorigenAux:detalleactivofijoorigensForeignKey) {
				if(detalleactivofijoorigenAux.getId()!=null && detalleactivofijoorigenAux.getId().equals(idDetalleActivoFijoOrigenSeleccionado)) {
					detalleactivofijoorigenTemp=detalleactivofijoorigenAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(detalleactivofijoorigenTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setDetalleActivoFijoOrigen(detalleactivofijoorigenTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigenTemp);
					}
				} else {
					//jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigenTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijoOrigen") || sFormularioTipoBusqueda.equals("Todos")){
					if(detalleactivofijoorigenTemp!=null && jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo!=null) {
						jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigenTemp);
					} else {
						if(jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo!=null) {
							//jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigenTemp);
							if(jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualDetalleActivoFijoOrigenForeignKeyDescripcion(Long idDetalleActivoFijoOrigenSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			DetalleActivoFijo  detalleactivofijoorigenTemp=null;

			for(DetalleActivoFijo detalleactivofijoorigenAux:detalleactivofijoorigensForeignKey) {
				if(detalleactivofijoorigenAux.getId()!=null && detalleactivofijoorigenAux.getId().equals(idDetalleActivoFijoOrigenSeleccionado)) {
					detalleactivofijoorigenTemp=detalleactivofijoorigenAux;
					break;
				}
			}


			sDescripcion=DetalleActivoFijoConstantesFunciones.getDetalleActivoFijoDescripcion(detalleactivofijoorigenTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualDetalleActivoFijoOrigenForeignKeyGenerico(Long idDetalleActivoFijoOrigenSeleccionado,JComboBox jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoorigenTemp=null;

			for(DetalleActivoFijo detalleactivofijoorigenAux:detalleactivofijoorigensForeignKey) {
				if(detalleactivofijoorigenAux.getId()!=null && detalleactivofijoorigenAux.getId().equals(idDetalleActivoFijoOrigenSeleccionado)) {
					detalleactivofijoorigenTemp=detalleactivofijoorigenAux;
					break;
				}
			}

			if(detalleactivofijoorigenTemp!=null) {
				jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico.setSelectedItem(detalleactivofijoorigenTemp);
			} else {
				if(jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico!=null && jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaDestinoForeignKey(Long idEmpresaDestinoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresadestinoTemp=null;

			for(Empresa empresadestinoAux:empresadestinosForeignKey) {
				if(empresadestinoAux.getId()!=null && empresadestinoAux.getId().equals(idEmpresaDestinoSeleccionado)) {
					empresadestinoTemp=empresadestinoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresadestinoTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setEmpresaDestino(empresadestinoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedItem(empresadestinoTemp);
					}
				} else {
					//jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedItem(empresadestinoTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpresaDestino") || sFormularioTipoBusqueda.equals("Todos")){
					if(empresadestinoTemp!=null && jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo!=null) {
						jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.setSelectedItem(empresadestinoTemp);
					} else {
						if(jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo!=null) {
							//jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.setSelectedItem(empresadestinoTemp);
							if(jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaDestinoForeignKeyDescripcion(Long idEmpresaDestinoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresadestinoTemp=null;

			for(Empresa empresadestinoAux:empresadestinosForeignKey) {
				if(empresadestinoAux.getId()!=null && empresadestinoAux.getId().equals(idEmpresaDestinoSeleccionado)) {
					empresadestinoTemp=empresadestinoAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresadestinoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaDestinoForeignKeyGenerico(Long idEmpresaDestinoSeleccionado,JComboBox jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresadestinoTemp=null;

			for(Empresa empresadestinoAux:empresadestinosForeignKey) {
				if(empresadestinoAux.getId()!=null && empresadestinoAux.getId().equals(idEmpresaDestinoSeleccionado)) {
					empresadestinoTemp=empresadestinoAux;
					break;
				}
			}

			if(empresadestinoTemp!=null) {
				jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico.setSelectedItem(empresadestinoTemp);
			} else {
				if(jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico!=null && jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalDestinoForeignKey(Long idSucursalDestinoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursaldestinoTemp=null;

			for(Sucursal sucursaldestinoAux:sucursaldestinosForeignKey) {
				if(sucursaldestinoAux.getId()!=null && sucursaldestinoAux.getId().equals(idSucursalDestinoSeleccionado)) {
					sucursaldestinoTemp=sucursaldestinoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursaldestinoTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setSucursalDestino(sucursaldestinoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedItem(sucursaldestinoTemp);
					}
				} else {
					//jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedItem(sucursaldestinoTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdSucursalDestino") || sFormularioTipoBusqueda.equals("Todos")){
					if(sucursaldestinoTemp!=null && jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo!=null) {
						jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.setSelectedItem(sucursaldestinoTemp);
					} else {
						if(jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo!=null) {
							//jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.setSelectedItem(sucursaldestinoTemp);
							if(jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalDestinoForeignKeyDescripcion(Long idSucursalDestinoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursaldestinoTemp=null;

			for(Sucursal sucursaldestinoAux:sucursaldestinosForeignKey) {
				if(sucursaldestinoAux.getId()!=null && sucursaldestinoAux.getId().equals(idSucursalDestinoSeleccionado)) {
					sucursaldestinoTemp=sucursaldestinoAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursaldestinoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalDestinoForeignKeyGenerico(Long idSucursalDestinoSeleccionado,JComboBox jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursaldestinoTemp=null;

			for(Sucursal sucursaldestinoAux:sucursaldestinosForeignKey) {
				if(sucursaldestinoAux.getId()!=null && sucursaldestinoAux.getId().equals(idSucursalDestinoSeleccionado)) {
					sucursaldestinoTemp=sucursaldestinoAux;
					break;
				}
			}

			if(sucursaldestinoTemp!=null) {
				jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico.setSelectedItem(sucursaldestinoTemp);
			} else {
				if(jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico!=null && jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualDetalleActivoFijoDestinoForeignKey(Long idDetalleActivoFijoDestinoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijodestinoTemp=null;

			for(DetalleActivoFijo detalleactivofijodestinoAux:detalleactivofijodestinosForeignKey) {
				if(detalleactivofijodestinoAux.getId()!=null && detalleactivofijodestinoAux.getId().equals(idDetalleActivoFijoDestinoSeleccionado)) {
					detalleactivofijodestinoTemp=detalleactivofijodestinoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(detalleactivofijodestinoTemp!=null) {

					if(this.movimientoactivofijo!=null) {
						this.movimientoactivofijo.setDetalleActivoFijoDestino(detalleactivofijodestinoTemp);
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestinoTemp);
					}
				} else {
					//jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestinoTemp);
					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.getItemCount()>0) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijoDestino") || sFormularioTipoBusqueda.equals("Todos")){
					if(detalleactivofijodestinoTemp!=null && jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo!=null) {
						jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestinoTemp);
					} else {
						if(jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo!=null) {
							//jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestinoTemp);
							if(jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.getItemCount()>0) {
								jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualDetalleActivoFijoDestinoForeignKeyDescripcion(Long idDetalleActivoFijoDestinoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			DetalleActivoFijo  detalleactivofijodestinoTemp=null;

			for(DetalleActivoFijo detalleactivofijodestinoAux:detalleactivofijodestinosForeignKey) {
				if(detalleactivofijodestinoAux.getId()!=null && detalleactivofijodestinoAux.getId().equals(idDetalleActivoFijoDestinoSeleccionado)) {
					detalleactivofijodestinoTemp=detalleactivofijodestinoAux;
					break;
				}
			}


			sDescripcion=DetalleActivoFijoConstantesFunciones.getDetalleActivoFijoDescripcion(detalleactivofijodestinoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualDetalleActivoFijoDestinoForeignKeyGenerico(Long idDetalleActivoFijoDestinoSeleccionado,JComboBox jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijodestinoTemp=null;

			for(DetalleActivoFijo detalleactivofijodestinoAux:detalleactivofijodestinosForeignKey) {
				if(detalleactivofijodestinoAux.getId()!=null && detalleactivofijodestinoAux.getId().equals(idDetalleActivoFijoDestinoSeleccionado)) {
					detalleactivofijodestinoTemp=detalleactivofijodestinoAux;
					break;
				}
			}

			if(detalleactivofijodestinoTemp!=null) {
				jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico.setSelectedItem(detalleactivofijodestinoTemp);
			} else {
				if(jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico!=null && jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico.getItemCount()>0) {
					jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_empresaMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaMovimientoActivoFijoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				movimientoactivofijo.setid_empresa(empresaAux.getId());
				movimientoactivofijo.setempresa_descripcion(MovimientoActivoFijoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				movimientoactivofijo.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_sucursalMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalMovimientoActivoFijoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				movimientoactivofijo.setid_sucursal(sucursalAux.getId());
				movimientoactivofijo.setsucursal_descripcion(MovimientoActivoFijoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				movimientoactivofijo.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_usuarioMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioMovimientoActivoFijoGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				movimientoactivofijo.setid_usuario(usuarioAux.getId());
				movimientoactivofijo.setusuario_descripcion(MovimientoActivoFijoConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				movimientoactivofijo.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaOrigenForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_empresa_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresa_origenMovimientoActivoFijoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresa_origenMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				movimientoactivofijo.setid_empresa_origen(empresaAux.getId());
				movimientoactivofijo.setempresaorigen_descripcion(MovimientoActivoFijoConstantesFunciones.getEmpresaOrigenDescripcion(empresaAux));
				movimientoactivofijo.setEmpresaOrigen(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalOrigenForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursal_origenMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				movimientoactivofijo.setid_sucursal_origen(sucursalAux.getId());
				movimientoactivofijo.setsucursalorigen_descripcion(MovimientoActivoFijoConstantesFunciones.getSucursalOrigenDescripcion(sucursalAux));
				movimientoactivofijo.setSucursalOrigen(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarDetalleActivoFijoOrigenForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoAux=new DetalleActivoFijo();

			if(jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico==null) {
				detalleactivofijoAux=(DetalleActivoFijo)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.getSelectedItem();
			} else {
				detalleactivofijoAux=(DetalleActivoFijo)jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(detalleactivofijoAux!=null && detalleactivofijoAux.getId()!=null) {
				movimientoactivofijo.setid_detalle_activo_fijo_origen(detalleactivofijoAux.getId());
				movimientoactivofijo.setdetalleactivofijoorigen_descripcion(MovimientoActivoFijoConstantesFunciones.getDetalleActivoFijoOrigenDescripcion(detalleactivofijoAux));
				movimientoactivofijo.setDetalleActivoFijoOrigen(detalleactivofijoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaDestinoForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresa_destinoMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				movimientoactivofijo.setid_empresa_destino(empresaAux.getId());
				movimientoactivofijo.setempresadestino_descripcion(MovimientoActivoFijoConstantesFunciones.getEmpresaDestinoDescripcion(empresaAux));
				movimientoactivofijo.setEmpresaDestino(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalDestinoForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursal_destinoMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				movimientoactivofijo.setid_sucursal_destino(sucursalAux.getId());
				movimientoactivofijo.setsucursaldestino_descripcion(MovimientoActivoFijoConstantesFunciones.getSucursalDestinoDescripcion(sucursalAux));
				movimientoactivofijo.setSucursalDestino(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarDetalleActivoFijoDestinoForeignKey(MovimientoActivoFijo movimientoactivofijo,JComboBox jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico)throws Exception
	{
		try
		{
			DetalleActivoFijo  detalleactivofijoAux=new DetalleActivoFijo();

			if(jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico==null) {
				detalleactivofijoAux=(DetalleActivoFijo)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.getSelectedItem();
			} else {
				detalleactivofijoAux=(DetalleActivoFijo)jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijoGenerico.getSelectedItem();
			}

			if(detalleactivofijoAux!=null && detalleactivofijoAux.getId()!=null) {
				movimientoactivofijo.setid_detalle_activo_fijo_destino(detalleactivofijoAux.getId());
				movimientoactivofijo.setdetalleactivofijodestino_descripcion(MovimientoActivoFijoConstantesFunciones.getDetalleActivoFijoDestinoDescripcion(detalleactivofijoAux));
				movimientoactivofijo.setDetalleActivoFijoDestino(detalleactivofijoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresaOrigensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.removeAllItems();

							for(Empresa empresaorigen:this.empresaorigensForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.addItem(empresaorigen);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpresaOrigen") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.removeAllItems();

							for(Empresa empresaorigen:this.empresaorigensForeignKey) {
								this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.addItem(empresaorigen);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalOrigensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.removeAllItems();

							for(Sucursal sucursalorigen:this.sucursalorigensForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.addItem(sucursalorigen);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdSucursalOrigen") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.removeAllItems();

							for(Sucursal sucursalorigen:this.sucursalorigensForeignKey) {
								this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.addItem(sucursalorigen);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameDetalleActivoFijoOrigensForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingDetalleActivoFijo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.removeAllItems();

							for(DetalleActivoFijo detalleactivofijoorigen:this.detalleactivofijoorigensForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.addItem(detalleactivofijoorigen);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijoOrigen") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.removeAllItems();

							for(DetalleActivoFijo detalleactivofijoorigen:this.detalleactivofijoorigensForeignKey) {
								this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.addItem(detalleactivofijoorigen);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresaDestinosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.removeAllItems();

							for(Empresa empresadestino:this.empresadestinosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.addItem(empresadestino);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpresaDestino") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.removeAllItems();

							for(Empresa empresadestino:this.empresadestinosForeignKey) {
								this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.addItem(empresadestino);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalDestinosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.removeAllItems();

							for(Sucursal sucursaldestino:this.sucursaldestinosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.addItem(sucursaldestino);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdSucursalDestino") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.removeAllItems();

							for(Sucursal sucursaldestino:this.sucursaldestinosForeignKey) {
								this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.addItem(sucursaldestino);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameDetalleActivoFijoDestinosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingDetalleActivoFijo=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.removeAllItems();

							for(DetalleActivoFijo detalleactivofijodestino:this.detalleactivofijodestinosForeignKey) {
								this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.addItem(detalleactivofijodestino);
							}
						}
					}

					if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { 
					}

					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdDetalleActivoFijoDestino") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.removeAllItems();

							for(DetalleActivoFijo detalleactivofijodestino:this.detalleactivofijodestinosForeignKey) {
								this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.addItem(detalleactivofijodestino);
							}
						}

						if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaOrigenForeignKey(Empresa empresaorigen,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedItem(empresaorigen);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.setSelectedItem(empresaorigen);
						} else {
							this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalOrigenForeignKey(Sucursal sucursalorigen,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedItem(sucursalorigen);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.setSelectedItem(sucursalorigen);
						} else {
							this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameDetalleActivoFijoOrigenForeignKey(DetalleActivoFijo detalleactivofijoorigen,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigen);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.setSelectedItem(detalleactivofijoorigen);
						} else {
							this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaDestinoForeignKey(Empresa empresadestino,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedItem(empresadestino);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.setSelectedItem(empresadestino);
						} else {
							this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalDestinoForeignKey(Sucursal sucursaldestino,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedItem(sucursaldestino);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.setSelectedItem(sucursaldestino);
						} else {
							this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameDetalleActivoFijoDestinoForeignKey(DetalleActivoFijo detalleactivofijodestino,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestino);
						}
					} else {
						if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.setSelectedItem(detalleactivofijodestino);
						} else {
							this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesMovimientoActivoFijo() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			MovimientoActivoFijoConstantesFunciones.refrescarForeignKeysDescripcionesMovimientoActivoFijo(this.movimientoactivofijoLogic.getMovimientoActivoFijos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			MovimientoActivoFijoConstantesFunciones.refrescarForeignKeysDescripcionesMovimientoActivoFijo(this.movimientoactivofijos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(DetalleActivoFijo.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//movimientoactivofijoLogic.setMovimientoActivoFijos(this.movimientoactivofijos);
			movimientoactivofijoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public MovimientoActivoFijoParameterReturnGeneral getMovimientoActivoFijoParameterGeneral() {
		return this.movimientoactivofijoParameterGeneral;
	}
	
	public void setMovimientoActivoFijoParameterGeneral(MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoParameterGeneral) {
		this.movimientoactivofijoParameterGeneral = movimientoactivofijoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoMovimientoActivoFijo() {
		return isPermisoTodoMovimientoActivoFijo;
	}

	public void setIsPermisoTodoMovimientoActivoFijo(Boolean isPermisoTodoMovimientoActivoFijo) {
		this.isPermisoTodoMovimientoActivoFijo = isPermisoTodoMovimientoActivoFijo;
	}

	public Boolean getIsPermisoNuevoMovimientoActivoFijo() {
		return isPermisoNuevoMovimientoActivoFijo;
	}

	public void setIsPermisoNuevoMovimientoActivoFijo(Boolean isPermisoNuevoMovimientoActivoFijo) {
		this.isPermisoNuevoMovimientoActivoFijo = isPermisoNuevoMovimientoActivoFijo;
	}

	public Boolean getIsPermisoActualizarMovimientoActivoFijo() {
		return isPermisoActualizarMovimientoActivoFijo;
	}

	public void setIsPermisoActualizarMovimientoActivoFijo(Boolean isPermisoActualizarMovimientoActivoFijo) {
		this.isPermisoActualizarMovimientoActivoFijo = isPermisoActualizarMovimientoActivoFijo;
	}

	public Boolean getIsPermisoEliminarMovimientoActivoFijo() {
		return isPermisoEliminarMovimientoActivoFijo;
	}

	public void setIsPermisoEliminarMovimientoActivoFijo(Boolean isPermisoEliminarMovimientoActivoFijo) {
		this.isPermisoEliminarMovimientoActivoFijo = isPermisoEliminarMovimientoActivoFijo;
	}

	public Boolean getIsPermisoGuardarCambiosMovimientoActivoFijo() {
		return isPermisoGuardarCambiosMovimientoActivoFijo;
	}

	public void setIsPermisoGuardarCambiosMovimientoActivoFijo(Boolean isPermisoGuardarCambiosMovimientoActivoFijo) {
		this.isPermisoGuardarCambiosMovimientoActivoFijo = isPermisoGuardarCambiosMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoConsultaMovimientoActivoFijo() {
		return isPermisoConsultaMovimientoActivoFijo;
	}

	public void setIsPermisoConsultaMovimientoActivoFijo(Boolean isPermisoConsultaMovimientoActivoFijo) {
		this.isPermisoConsultaMovimientoActivoFijo = isPermisoConsultaMovimientoActivoFijo;
	}

	public Boolean getIsPermisoBusquedaMovimientoActivoFijo() {
		return isPermisoBusquedaMovimientoActivoFijo;
	}

	public void setIsPermisoBusquedaMovimientoActivoFijo(Boolean isPermisoBusquedaMovimientoActivoFijo) {
		this.isPermisoBusquedaMovimientoActivoFijo = isPermisoBusquedaMovimientoActivoFijo;
	}

	public Boolean getIsPermisoReporteMovimientoActivoFijo() {
		return isPermisoReporteMovimientoActivoFijo;
	}

	public void setIsPermisoReporteMovimientoActivoFijo(Boolean isPermisoReporteMovimientoActivoFijo) {
		this.isPermisoReporteMovimientoActivoFijo = isPermisoReporteMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoPaginacionMedioMovimientoActivoFijo() {
		return isPermisoPaginacionMedioMovimientoActivoFijo;
	}

	public void setIsPermisoPaginacionMedioMovimientoActivoFijo(Boolean isPermisoPaginacionMedioMovimientoActivoFijo) {
		this.isPermisoPaginacionMedioMovimientoActivoFijo = isPermisoPaginacionMedioMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoPaginacionTodoMovimientoActivoFijo() {
		return isPermisoPaginacionTodoMovimientoActivoFijo;
	}

	public void setIsPermisoPaginacionTodoMovimientoActivoFijo(Boolean isPermisoPaginacionTodoMovimientoActivoFijo) {
		this.isPermisoPaginacionTodoMovimientoActivoFijo = isPermisoPaginacionTodoMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoPaginacionAltoMovimientoActivoFijo() {
		return isPermisoPaginacionAltoMovimientoActivoFijo;
	}

	public void setIsPermisoPaginacionAltoMovimientoActivoFijo(Boolean isPermisoPaginacionAltoMovimientoActivoFijo) {
		this.isPermisoPaginacionAltoMovimientoActivoFijo = isPermisoPaginacionAltoMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoCopiarMovimientoActivoFijo() {
		return isPermisoCopiarMovimientoActivoFijo;
	}

	public void setIsPermisoCopiarMovimientoActivoFijo(Boolean isPermisoCopiarMovimientoActivoFijo) {
		this.isPermisoCopiarMovimientoActivoFijo = isPermisoCopiarMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoVerFormMovimientoActivoFijo() {
		return isPermisoVerFormMovimientoActivoFijo;
	}

	public void setIsPermisoVerFormMovimientoActivoFijo(Boolean isPermisoVerFormMovimientoActivoFijo) {
		this.isPermisoVerFormMovimientoActivoFijo = isPermisoVerFormMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoDuplicarMovimientoActivoFijo() {
		return isPermisoDuplicarMovimientoActivoFijo;
	}

	public void setIsPermisoDuplicarMovimientoActivoFijo(Boolean isPermisoDuplicarMovimientoActivoFijo) {
		this.isPermisoDuplicarMovimientoActivoFijo = isPermisoDuplicarMovimientoActivoFijo;
	}
	
	public Boolean getIsPermisoOrdenMovimientoActivoFijo() {
		return isPermisoOrdenMovimientoActivoFijo;
	}

	public void setIsPermisoOrdenMovimientoActivoFijo(Boolean isPermisoOrdenMovimientoActivoFijo) {
		this.isPermisoOrdenMovimientoActivoFijo = isPermisoOrdenMovimientoActivoFijo;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoMovimientoActivoFijo() {
		return isVisibilidadCeldaNuevoMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaNuevoMovimientoActivoFijo(Boolean isVisibilidadCeldaNuevoMovimientoActivoFijo) {
		this.isVisibilidadCeldaNuevoMovimientoActivoFijo = isVisibilidadCeldaNuevoMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarMovimientoActivoFijo() {
		return isVisibilidadCeldaDuplicarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaDuplicarMovimientoActivoFijo(Boolean isVisibilidadCeldaDuplicarMovimientoActivoFijo) {
		this.isVisibilidadCeldaDuplicarMovimientoActivoFijo = isVisibilidadCeldaDuplicarMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarMovimientoActivoFijo() {
		return isVisibilidadCeldaCopiarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaCopiarMovimientoActivoFijo(Boolean isVisibilidadCeldaCopiarMovimientoActivoFijo) {
		this.isVisibilidadCeldaCopiarMovimientoActivoFijo = isVisibilidadCeldaCopiarMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormMovimientoActivoFijo() {
		return isVisibilidadCeldaVerFormMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaVerFormMovimientoActivoFijo(Boolean isVisibilidadCeldaVerFormMovimientoActivoFijo) {
		this.isVisibilidadCeldaVerFormMovimientoActivoFijo = isVisibilidadCeldaVerFormMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenMovimientoActivoFijo() {
		return isVisibilidadCeldaOrdenMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaOrdenMovimientoActivoFijo(Boolean isVisibilidadCeldaOrdenMovimientoActivoFijo) {
		this.isVisibilidadCeldaOrdenMovimientoActivoFijo = isVisibilidadCeldaOrdenMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo() {
		return isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo(Boolean isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo) {
		this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo = isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaModificarMovimientoActivoFijo() {
		return isVisibilidadCeldaModificarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaModificarMovimientoActivoFijo(Boolean isVisibilidadCeldaModificarMovimientoActivoFijo) {
		this.isVisibilidadCeldaModificarMovimientoActivoFijo = isVisibilidadCeldaModificarMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarMovimientoActivoFijo() {
		return isVisibilidadCeldaActualizarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaActualizarMovimientoActivoFijo(Boolean isVisibilidadCeldaActualizarMovimientoActivoFijo) {
		this.isVisibilidadCeldaActualizarMovimientoActivoFijo = isVisibilidadCeldaActualizarMovimientoActivoFijo;
	}

	public Boolean getIsVisibilidadCeldaEliminarMovimientoActivoFijo() {
		return isVisibilidadCeldaEliminarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaEliminarMovimientoActivoFijo(Boolean isVisibilidadCeldaEliminarMovimientoActivoFijo) {
		this.isVisibilidadCeldaEliminarMovimientoActivoFijo = isVisibilidadCeldaEliminarMovimientoActivoFijo;
	}

	public Boolean getIsVisibilidadCeldaCancelarMovimientoActivoFijo() {
		return isVisibilidadCeldaCancelarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaCancelarMovimientoActivoFijo(Boolean isVisibilidadCeldaCancelarMovimientoActivoFijo) {
		this.isVisibilidadCeldaCancelarMovimientoActivoFijo = isVisibilidadCeldaCancelarMovimientoActivoFijo;
	}

	public Boolean getIsVisibilidadCeldaGuardarMovimientoActivoFijo() {
		return isVisibilidadCeldaGuardarMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaGuardarMovimientoActivoFijo(Boolean isVisibilidadCeldaGuardarMovimientoActivoFijo) {
		this.isVisibilidadCeldaGuardarMovimientoActivoFijo = isVisibilidadCeldaGuardarMovimientoActivoFijo;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosMovimientoActivoFijo() {
		return isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo;
	}

	public void setIsVisibilidadCeldaGuardarCambiosMovimientoActivoFijo(Boolean isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo) {
		this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo = isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo;
	}
		
	public MovimientoActivoFijoSessionBean getmovimientoactivofijoSessionBean() {
		return this.movimientoactivofijoSessionBean;
	}
	
	public void setmovimientoactivofijoSessionBean(MovimientoActivoFijoSessionBean movimientoactivofijoSessionBean) {
		this.movimientoactivofijoSessionBean=movimientoactivofijoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdDetalleActivoFijoDestino() {
		return this.isVisibilidadFK_IdDetalleActivoFijoDestino;
	}

	public void setisVisibilidadFK_IdDetalleActivoFijoDestino(Boolean isVisibilidadFK_IdDetalleActivoFijoDestino) {
		this.isVisibilidadFK_IdDetalleActivoFijoDestino=isVisibilidadFK_IdDetalleActivoFijoDestino;
	}

	public Boolean getisVisibilidadFK_IdDetalleActivoFijoOrigen() {
		return this.isVisibilidadFK_IdDetalleActivoFijoOrigen;
	}

	public void setisVisibilidadFK_IdDetalleActivoFijoOrigen(Boolean isVisibilidadFK_IdDetalleActivoFijoOrigen) {
		this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isVisibilidadFK_IdDetalleActivoFijoOrigen;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEmpresaDestino() {
		return this.isVisibilidadFK_IdEmpresaDestino;
	}

	public void setisVisibilidadFK_IdEmpresaDestino(Boolean isVisibilidadFK_IdEmpresaDestino) {
		this.isVisibilidadFK_IdEmpresaDestino=isVisibilidadFK_IdEmpresaDestino;
	}

	public Boolean getisVisibilidadFK_IdEmpresaOrigen() {
		return this.isVisibilidadFK_IdEmpresaOrigen;
	}

	public void setisVisibilidadFK_IdEmpresaOrigen(Boolean isVisibilidadFK_IdEmpresaOrigen) {
		this.isVisibilidadFK_IdEmpresaOrigen=isVisibilidadFK_IdEmpresaOrigen;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdSucursalDestino() {
		return this.isVisibilidadFK_IdSucursalDestino;
	}

	public void setisVisibilidadFK_IdSucursalDestino(Boolean isVisibilidadFK_IdSucursalDestino) {
		this.isVisibilidadFK_IdSucursalDestino=isVisibilidadFK_IdSucursalDestino;
	}

	public Boolean getisVisibilidadFK_IdSucursalOrigen() {
		return this.isVisibilidadFK_IdSucursalOrigen;
	}

	public void setisVisibilidadFK_IdSucursalOrigen(Boolean isVisibilidadFK_IdSucursalOrigen) {
		this.isVisibilidadFK_IdSucursalOrigen=isVisibilidadFK_IdSucursalOrigen;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarSucursalForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarUsuarioForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarEmpresaOrigenForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarSucursalOrigenForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarDetalleActivoFijoOrigenForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarEmpresaDestinoForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarSucursalDestinoForeignKey(movimientoactivofijo,null);
				this.setActualParaGuardarDetalleActivoFijoDestinoForeignKey(movimientoactivofijo,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(MovimientoActivoFijo movimientoactivofijo,MovimientoActivoFijo movimientoactivofijoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalMovimientoActivoFijo(movimientoactivofijo);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		movimientoactivofijoAux.setId(movimientoactivofijo.getId());
		movimientoactivofijoAux.setVersionRow(movimientoactivofijo.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessMovimientoActivoFijo();
		
			int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = movimientoactivofijoValidator.getInvalidValues(this.movimientoactivofijo);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			movimientoactivofijoLogic.setDatosCliente(datosCliente);
			movimientoactivofijoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				movimientoactivofijoAux=new  MovimientoActivoFijo();
				
				movimientoactivofijoAux.setIsNew(true);
				movimientoactivofijoAux.setIsChanged(true);
				
				movimientoactivofijoAux.setMovimientoActivoFijoOriginal(this.movimientoactivofijo);
				
				movimientoactivofijoAux.setId(this.movimientoactivofijo.getId());	
				movimientoactivofijoAux.setVersionRow(this.movimientoactivofijo.getVersionRow());	
				movimientoactivofijoAux.setid_empresa(this.movimientoactivofijo.getid_empresa());	
				movimientoactivofijoAux.setid_sucursal(this.movimientoactivofijo.getid_sucursal());	
				movimientoactivofijoAux.setid_usuario(this.movimientoactivofijo.getid_usuario());	
				movimientoactivofijoAux.setsecuencial(this.movimientoactivofijo.getsecuencial());	
				movimientoactivofijoAux.setid_empresa_origen(this.movimientoactivofijo.getid_empresa_origen());	
				movimientoactivofijoAux.setid_sucursal_origen(this.movimientoactivofijo.getid_sucursal_origen());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_origen(this.movimientoactivofijo.getid_detalle_activo_fijo_origen());	
				movimientoactivofijoAux.setid_empresa_destino(this.movimientoactivofijo.getid_empresa_destino());	
				movimientoactivofijoAux.setid_sucursal_destino(this.movimientoactivofijo.getid_sucursal_destino());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_destino(this.movimientoactivofijo.getid_detalle_activo_fijo_destino());	
				movimientoactivofijoAux.setfecha(this.movimientoactivofijo.getfecha());	
				movimientoactivofijoAux.setnumero_documento(this.movimientoactivofijo.getnumero_documento());	
				movimientoactivofijoAux.setcosto(this.movimientoactivofijo.getcosto());	
				movimientoactivofijoAux.setdepreciacion(this.movimientoactivofijo.getdepreciacion());	
				movimientoactivofijoAux.setcosto_origen(this.movimientoactivofijo.getcosto_origen());	
				movimientoactivofijoAux.setdepreciacion_origen(this.movimientoactivofijo.getdepreciacion_origen());	
				movimientoactivofijoAux.setrazon(this.movimientoactivofijo.getrazon());	
				movimientoactivofijoAux.setdescripcion(this.movimientoactivofijo.getdescripcion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.saveMovimientoActivoFijos();//WithConnection
						//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);
					
					this.refrescarForeignKeysDescripcionesMovimientoActivoFijo();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoactivofijoLogic.saveMovimientoActivoFijoRelaciones(movimientoactivofijoAux);//WithConnection
								//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				movimientoactivofijoAux=new  MovimientoActivoFijo();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado() 
					|| (this.movimientoactivofijoSessionBean.getEsGuardarRelacionado() && this.movimientoactivofijo.getId()>=0)) {
						
					movimientoactivofijoAux.setIsNew(false);
				}
				
				movimientoactivofijoAux.setIsDeleted(false);
			
				movimientoactivofijoAux.setId(this.movimientoactivofijo.getId());	
				movimientoactivofijoAux.setVersionRow(this.movimientoactivofijo.getVersionRow());	
				movimientoactivofijoAux.setid_empresa(this.movimientoactivofijo.getid_empresa());	
				movimientoactivofijoAux.setid_sucursal(this.movimientoactivofijo.getid_sucursal());	
				movimientoactivofijoAux.setid_usuario(this.movimientoactivofijo.getid_usuario());	
				movimientoactivofijoAux.setsecuencial(this.movimientoactivofijo.getsecuencial());	
				movimientoactivofijoAux.setid_empresa_origen(this.movimientoactivofijo.getid_empresa_origen());	
				movimientoactivofijoAux.setid_sucursal_origen(this.movimientoactivofijo.getid_sucursal_origen());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_origen(this.movimientoactivofijo.getid_detalle_activo_fijo_origen());	
				movimientoactivofijoAux.setid_empresa_destino(this.movimientoactivofijo.getid_empresa_destino());	
				movimientoactivofijoAux.setid_sucursal_destino(this.movimientoactivofijo.getid_sucursal_destino());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_destino(this.movimientoactivofijo.getid_detalle_activo_fijo_destino());	
				movimientoactivofijoAux.setfecha(this.movimientoactivofijo.getfecha());	
				movimientoactivofijoAux.setnumero_documento(this.movimientoactivofijo.getnumero_documento());	
				movimientoactivofijoAux.setcosto(this.movimientoactivofijo.getcosto());	
				movimientoactivofijoAux.setdepreciacion(this.movimientoactivofijo.getdepreciacion());	
				movimientoactivofijoAux.setcosto_origen(this.movimientoactivofijo.getcosto_origen());	
				movimientoactivofijoAux.setdepreciacion_origen(this.movimientoactivofijo.getdepreciacion_origen());	
				movimientoactivofijoAux.setrazon(this.movimientoactivofijo.getrazon());	
				movimientoactivofijoAux.setdescripcion(this.movimientoactivofijo.getdescripcion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.saveMovimientoActivoFijos();//WithConnection
						//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);
					
					this.refrescarForeignKeysDescripcionesMovimientoActivoFijo();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoactivofijoLogic.saveMovimientoActivoFijoRelaciones(movimientoactivofijoAux);//WithConnection
								//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.movimientoactivofijo,movimientoactivofijoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				movimientoactivofijoAux=new  MovimientoActivoFijo();
				
				movimientoactivofijoAux.setIsNew(false);
				movimientoactivofijoAux.setIsChanged(false);
				
				movimientoactivofijoAux.setIsDeleted(true);
				
				movimientoactivofijoAux.setId(this.movimientoactivofijo.getId());	
				movimientoactivofijoAux.setVersionRow(this.movimientoactivofijo.getVersionRow());	
				movimientoactivofijoAux.setid_empresa(this.movimientoactivofijo.getid_empresa());	
				movimientoactivofijoAux.setid_sucursal(this.movimientoactivofijo.getid_sucursal());	
				movimientoactivofijoAux.setid_usuario(this.movimientoactivofijo.getid_usuario());	
				movimientoactivofijoAux.setsecuencial(this.movimientoactivofijo.getsecuencial());	
				movimientoactivofijoAux.setid_empresa_origen(this.movimientoactivofijo.getid_empresa_origen());	
				movimientoactivofijoAux.setid_sucursal_origen(this.movimientoactivofijo.getid_sucursal_origen());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_origen(this.movimientoactivofijo.getid_detalle_activo_fijo_origen());	
				movimientoactivofijoAux.setid_empresa_destino(this.movimientoactivofijo.getid_empresa_destino());	
				movimientoactivofijoAux.setid_sucursal_destino(this.movimientoactivofijo.getid_sucursal_destino());	
				movimientoactivofijoAux.setid_detalle_activo_fijo_destino(this.movimientoactivofijo.getid_detalle_activo_fijo_destino());	
				movimientoactivofijoAux.setfecha(this.movimientoactivofijo.getfecha());	
				movimientoactivofijoAux.setnumero_documento(this.movimientoactivofijo.getnumero_documento());	
				movimientoactivofijoAux.setcosto(this.movimientoactivofijo.getcosto());	
				movimientoactivofijoAux.setdepreciacion(this.movimientoactivofijo.getdepreciacion());	
				movimientoactivofijoAux.setcosto_origen(this.movimientoactivofijo.getcosto_origen());	
				movimientoactivofijoAux.setdepreciacion_origen(this.movimientoactivofijo.getdepreciacion_origen());	
				movimientoactivofijoAux.setrazon(this.movimientoactivofijo.getrazon());	
				movimientoactivofijoAux.setdescripcion(this.movimientoactivofijo.getdescripcion());	
				
				if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.movimientoactivofijoAux.getId()>=0) {	
						this.movimientoactivofijosEliminados.add(movimientoactivofijoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.saveMovimientoActivoFijos();//WithConnection
						//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								movimientoactivofijoLogic.saveMovimientoActivoFijoRelaciones(movimientoactivofijoAux);//WithConnection
								//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(movimientoactivofijoAux,movimientoactivofijoLogic.getMovimientoActivoFijos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(movimientoactivofijoAux,movimientoactivofijos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(this.movimientoactivofijosEliminados);
					
					movimientoactivofijoLogic.saveMovimientoActivoFijos();//WithConnection
					//movimientoactivofijoLogic.getSetVersionRowMovimientoActivoFijos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesMovimientoActivoFijo();
				
				this.movimientoactivofijosEliminados= new ArrayList<MovimientoActivoFijo>();		
			}
			
			if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Movimiento Activo Fijo GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.movimientoactivofijo=movimientoactivofijoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessMovimientoActivoFijo();
      	}
		
	}	
	
	public void actualizarRelaciones(MovimientoActivoFijo movimientoactivofijoLocal) throws Exception {
		
		if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(MovimientoActivoFijo movimientoactivofijoLocal) throws Exception {	
		if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				movimientoactivofijoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				movimientoactivofijoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				movimientoactivofijoLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaorigenBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaorigenBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaorigenBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaorigenBeanSwingJInternalFrameLocal.actualizarLista(empresaorigenBeanSwingJInternalFrameLocal.empresa,this.empresaorigensForeignKey);

				empresaorigenBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaorigenBeanSwingJInternalFrameLocal.empresa);

				movimientoactivofijoLocal.setEmpresaOrigen(empresaorigenBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresaOrigen();
				this.cargarCombosFrameEmpresaOrigensForeignKey("Formulario");
				this.setActualEmpresaOrigenForeignKey(empresaorigenBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalorigenBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalorigenBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalorigenBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalorigenBeanSwingJInternalFrameLocal.actualizarLista(sucursalorigenBeanSwingJInternalFrameLocal.sucursal,this.sucursalorigensForeignKey);

				sucursalorigenBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalorigenBeanSwingJInternalFrameLocal.sucursal);

				movimientoactivofijoLocal.setSucursalOrigen(sucursalorigenBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursalOrigen();
				this.cargarCombosFrameSucursalOrigensForeignKey("Formulario");
				this.setActualSucursalOrigenForeignKey(sucursalorigenBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(DetalleActivoFijoDetalleFormJInternalFrame.class)) {
				DetalleActivoFijoBeanSwingJInternalFrame detalleactivofijoorigenBeanSwingJInternalFrameLocal=(DetalleActivoFijoBeanSwingJInternalFrame) ((DetalleActivoFijoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				detalleactivofijoorigenBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoDetalleActivoFijo(detalleactivofijoorigenBeanSwingJInternalFrameLocal.getdetalleactivofijo(),true);
				detalleactivofijoorigenBeanSwingJInternalFrameLocal.actualizarLista(detalleactivofijoorigenBeanSwingJInternalFrameLocal.detalleactivofijo,this.detalleactivofijoorigensForeignKey);

				detalleactivofijoorigenBeanSwingJInternalFrameLocal.actualizarRelaciones(detalleactivofijoorigenBeanSwingJInternalFrameLocal.detalleactivofijo);

				movimientoactivofijoLocal.setDetalleActivoFijoOrigen(detalleactivofijoorigenBeanSwingJInternalFrameLocal.detalleactivofijo);

				this.addItemDefectoCombosForeignKeyDetalleActivoFijoOrigen();
				this.cargarCombosFrameDetalleActivoFijoOrigensForeignKey("Formulario");
				this.setActualDetalleActivoFijoOrigenForeignKey(detalleactivofijoorigenBeanSwingJInternalFrameLocal.detalleactivofijo.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresadestinoBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresadestinoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresadestinoBeanSwingJInternalFrameLocal.getempresa(),true);
				empresadestinoBeanSwingJInternalFrameLocal.actualizarLista(empresadestinoBeanSwingJInternalFrameLocal.empresa,this.empresadestinosForeignKey);

				empresadestinoBeanSwingJInternalFrameLocal.actualizarRelaciones(empresadestinoBeanSwingJInternalFrameLocal.empresa);

				movimientoactivofijoLocal.setEmpresaDestino(empresadestinoBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresaDestino();
				this.cargarCombosFrameEmpresaDestinosForeignKey("Formulario");
				this.setActualEmpresaDestinoForeignKey(empresadestinoBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursaldestinoBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursaldestinoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursaldestinoBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursaldestinoBeanSwingJInternalFrameLocal.actualizarLista(sucursaldestinoBeanSwingJInternalFrameLocal.sucursal,this.sucursaldestinosForeignKey);

				sucursaldestinoBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursaldestinoBeanSwingJInternalFrameLocal.sucursal);

				movimientoactivofijoLocal.setSucursalDestino(sucursaldestinoBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursalDestino();
				this.cargarCombosFrameSucursalDestinosForeignKey("Formulario");
				this.setActualSucursalDestinoForeignKey(sucursaldestinoBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(DetalleActivoFijoDetalleFormJInternalFrame.class)) {
				DetalleActivoFijoBeanSwingJInternalFrame detalleactivofijodestinoBeanSwingJInternalFrameLocal=(DetalleActivoFijoBeanSwingJInternalFrame) ((DetalleActivoFijoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				detalleactivofijodestinoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoDetalleActivoFijo(detalleactivofijodestinoBeanSwingJInternalFrameLocal.getdetalleactivofijo(),true);
				detalleactivofijodestinoBeanSwingJInternalFrameLocal.actualizarLista(detalleactivofijodestinoBeanSwingJInternalFrameLocal.detalleactivofijo,this.detalleactivofijodestinosForeignKey);

				detalleactivofijodestinoBeanSwingJInternalFrameLocal.actualizarRelaciones(detalleactivofijodestinoBeanSwingJInternalFrameLocal.detalleactivofijo);

				movimientoactivofijoLocal.setDetalleActivoFijoDestino(detalleactivofijodestinoBeanSwingJInternalFrameLocal.detalleactivofijo);

				this.addItemDefectoCombosForeignKeyDetalleActivoFijoDestino();
				this.cargarCombosFrameDetalleActivoFijoDestinosForeignKey("Formulario");
				this.setActualDetalleActivoFijoDestinoForeignKey(detalleactivofijodestinoBeanSwingJInternalFrameLocal.detalleactivofijo.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarMovimientoActivoFijoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = movimientoactivofijoValidator.getInvalidValues(this.movimientoactivofijo);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(MovimientoActivoFijo movimientoactivofijo,List<MovimientoActivoFijo> movimientoactivofijos) throws Exception {
		try	{		
			MovimientoActivoFijoConstantesFunciones.actualizarLista(movimientoactivofijo,movimientoactivofijos,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(MovimientoActivoFijo movimientoactivofijo,List<MovimientoActivoFijo> movimientoactivofijos) throws Exception {
		try	{			
			MovimientoActivoFijoConstantesFunciones.actualizarSelectedLista(movimientoactivofijo,movimientoactivofijos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<MovimientoActivoFijo> movimientoactivofijosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				movimientoactivofijosLocal=this.movimientoactivofijoLogic.getMovimientoActivoFijos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				movimientoactivofijosLocal=this.movimientoactivofijos;
			}
			//ARCHITECTURE
		
			for(MovimientoActivoFijo movimientoactivofijoLocal:movimientoactivofijosLocal) {
				if(this.permiteMantenimiento(movimientoactivofijoLocal) && movimientoactivofijoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+MovimientoActivoFijoConstantesFunciones.getMovimientoActivoFijoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresaMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursalMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_usuarioMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.SECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelsecuencialMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDEMPRESAORIGEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresa_origenMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDSUCURSALORIGEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursal_origenMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDDETALLEACTIVOFIJOORIGEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_detalle_activo_fijo_origenMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDEMPRESADESTINO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresa_destinoMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDSUCURSALDESTINO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursal_destinoMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.IDDETALLEACTIVOFIJODESTINO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_detalle_activo_fijo_destinoMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelfechaMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.NUMERODOCUMENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelnumero_documentoMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.COSTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcostoMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.DEPRECIACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacionMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.COSTOORIGEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcosto_origenMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.DEPRECIACIONORIGEN)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacion_origenMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.RAZON)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelrazonMovimientoActivoFijo,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(MovimientoActivoFijoConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldescripcionMovimientoActivoFijo,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresaMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursalMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_usuarioMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelsecuencialMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresa_origenMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursal_origenMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_detalle_activo_fijo_origenMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_empresa_destinoMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_sucursal_destinoMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelid_detalle_activo_fijo_destinoMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelfechaMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelnumero_documentoMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcostoMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacionMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcosto_origenMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacion_origenMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelrazonMovimientoActivoFijo,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldescripcionMovimientoActivoFijo,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoMovimientoActivoFijo--;	
		
		
		this.movimientoactivofijoAux=new MovimientoActivoFijo();
		
		this.movimientoactivofijoAux.setId(this.iIdNuevoMovimientoActivoFijo);
		this.movimientoactivofijoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.movimientoactivofijoLogic.getMovimientoActivoFijos().add(this.movimientoactivofijoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.movimientoactivofijos.add(this.movimientoactivofijoAux);
		}
		//ARCHITECTURE
		
		this.movimientoactivofijo=this.movimientoactivofijoAux;
		
		if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijo);
			this.setVariablesObjetoActualToFormularioForeignKeyMovimientoActivoFijo(this.movimientoactivofijo);
		}
				
		//this.setDefaultControlesMovimientoActivoFijo();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyMovimientoActivoFijo();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyMovimientoActivoFijo();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoActivoFijo();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualMovimientoActivoFijo(this.movimientoactivofijoBean,this.movimientoactivofijo,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
			classes=MovimientoActivoFijoConstantesFunciones.getClassesRelationshipsOfMovimientoActivoFijo(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.procesarEventosMovimientoActivoFijosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this.movimientoactivofijo,this.movimientoactivofijoParameterGeneral,this.isEsNuevoMovimientoActivoFijo,classes);//this.movimientoactivofijoLogic.getMovimientoActivoFijo()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral,this.movimientoactivofijoBean,false);
		
		if(this.movimientoactivofijoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo());
		}
		
		if(this.movimientoactivofijoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo(),classes);//this.movimientoactivofijoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyMovimientoActivoFijo();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyMovimientoActivoFijo();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.RecargarFormMovimientoActivoFijo(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
						
			if(movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoActivoFijo();
			}
			
			this.actualizarVisualTableDatosMovimientoActivoFijo();
			
			this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(this.getIndiceNuevoMovimientoActivoFijo(), this.getIndiceNuevoMovimientoActivoFijo());
			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
						
			this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesMovimientoActivoFijo(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarsecuencialMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarfechaMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarnumero_documentoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarcostoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activardepreciacionMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarcosto_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activardepreciacion_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarrazonMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activardescripcionMovimientoActivoFijo);	
		//
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_empresaMovimientoActivoFijo);//
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_sucursalMovimientoActivoFijo);//
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_usuarioMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_empresa_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_sucursal_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_empresa_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_sucursal_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setEnabled(isHabilitar && this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_destinoMovimientoActivoFijo);
	};
	
	public void setDefaultControlesMovimientoActivoFijo() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoMovimientoActivoFijo(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.movimientoactivofijoSessionBean.setConGuardarRelaciones(true);			
			this.movimientoactivofijoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.setVisible(true);
			
					
		} else {
			//this.movimientoactivofijoSessionBean.setConGuardarRelaciones(false);			
			this.movimientoactivofijoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoMovimientoActivoFijo() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				if(movimientoactivofijoAux.getId().equals(this.iIdNuevoMovimientoActivoFijo)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijos) {
				if(movimientoactivofijoAux.getId().equals(this.iIdNuevoMovimientoActivoFijo)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				if(movimientoactivofijoAux.getId().equals(movimientoactivofijo.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijos) {
				if(movimientoactivofijoAux.getId().equals(movimientoactivofijo.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				if(movimientoactivofijoAux.getMovimientoActivoFijoOriginal().getId().equals(movimientoactivofijoOriginal.getId())) {
					existe=true;
					movimientoactivofijoOriginal.setId(movimientoactivofijoAux.getId());
					movimientoactivofijoOriginal.setVersionRow(movimientoactivofijoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijos) {
				if(movimientoactivofijoAux.getMovimientoActivoFijoOriginal().getId().equals(movimientoactivofijoOriginal.getId())) {
					existe=true;
					movimientoactivofijoOriginal.setId(movimientoactivofijoAux.getId());
					movimientoactivofijoOriginal.setVersionRow(movimientoactivofijoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosMovimientoActivoFijo(Boolean esParaCancelar) throws Exception {
		movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
		movimientoactivofijoAux=new MovimientoActivoFijo();
		
		if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
					if(movimientoactivofijoAux.getId()<0) {
						movimientoactivofijosAux.add(movimientoactivofijoAux);
					}		
				}
				this.iIdNuevoMovimientoActivoFijo=0L;
				this.movimientoactivofijoLogic.getMovimientoActivoFijos().removeAll(movimientoactivofijosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijos) {
					if(movimientoactivofijoAux.getId()<0) {
						movimientoactivofijosAux.add(movimientoactivofijoAux);
					}		
				}
				this.iIdNuevoMovimientoActivoFijo=0L;
				this.movimientoactivofijos.removeAll(movimientoactivofijosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoMovimientoActivoFijo 
					&& this.movimientoactivofijoLogic.getMovimientoActivoFijos().size()>0
					) {
					movimientoactivofijoAux=this.movimientoactivofijoLogic.getMovimientoActivoFijos().get(this.movimientoactivofijoLogic.getMovimientoActivoFijos().size() - 1);
				
					if(movimientoactivofijoAux.getId()<0) {
						this.movimientoactivofijoLogic.getMovimientoActivoFijos().remove(movimientoactivofijoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoMovimientoActivoFijo && this.movimientoactivofijos.size()>0) {
					movimientoactivofijoAux=this.movimientoactivofijos.get(this.movimientoactivofijos.size() - 1);
				
					if(movimientoactivofijoAux.getId()<0) {
						this.movimientoactivofijos.remove(movimientoactivofijoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoMovimientoActivoFijo(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(movimientoactivofijo.getId()<0) {
				this.movimientoactivofijoLogic.getMovimientoActivoFijos().remove(this.movimientoactivofijo);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(movimientoactivofijo.getId()<0) {
				this.movimientoactivofijos.remove(this.movimientoactivofijo);
			}
		}			
	}
	
	public void setEstadosInicialesMovimientoActivoFijo(List<MovimientoActivoFijo> movimientoactivofijosAux) throws Exception {
		MovimientoActivoFijoConstantesFunciones.setEstadosInicialesMovimientoActivoFijo(movimientoactivofijosAux);
	}
	
	public void setEstadosInicialesMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijoAux) throws Exception {
		MovimientoActivoFijoConstantesFunciones.setEstadosInicialesMovimientoActivoFijo(movimientoactivofijoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarMovimientoActivoFijoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarMovimientoActivoFijoActual()) {
				if(!this.isEsNuevoMovimientoActivoFijo) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoMovimientoActivoFijo=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarMovimientoActivoFijoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Movimiento Activo Fijo ?", "MANTENIMIENTO DE Movimiento Activo Fijo", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(MovimientoActivoFijo movimientoactivofijo) throws Exception {
		MovimientoActivoFijoConstantesFunciones.seleccionarAsignar(this.movimientoactivofijo,movimientoactivofijo);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarMovimientoActivoFijo=this.isPermisoActualizarOriginalMovimientoActivoFijo;
			
			
			this.seleccionarAsignar(movimientoactivofijo);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			MovimientoActivoFijoConstantesFunciones.quitarEspaciosMovimientoActivoFijo(this.movimientoactivofijo,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.movimientoactivofijoSessionBean.setsFuncionBusquedaRapida(this.movimientoactivofijoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoMovimientoActivoFijo) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosMovimientoActivoFijo(esParaCancelar);				
				this.cancelarNuevoMovimientoActivoFijo(esParaCancelar);								
			}
			
			this.movimientoactivofijo=new MovimientoActivoFijo();
			
			this.inicializarMovimientoActivoFijo();
			
			this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarMovimientoActivoFijo() throws Exception {
		try {
			MovimientoActivoFijoConstantesFunciones.inicializarMovimientoActivoFijo(this.movimientoactivofijo);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.movimientoactivofijoLogic.getMovimientoActivoFijos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteMovimientoActivoFijos(String sAccionBusqueda,List<MovimientoActivoFijo> movimientoactivofijosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="MovimientoActivoFijo"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="MovimientoActivoFijoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("MovimientoActivoFijoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="MovimientoActivoFijo"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Movimiento Activo Fijos");		
		parameters.put("busquedapor", MovimientoActivoFijoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceMovimientoActivoFijo=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			MovimientoActivoFijoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			MovimientoActivoFijoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceMovimientoActivoFijo=new JRBeanArrayDataSource(MovimientoActivoFijoJInternalFrame.TraerMovimientoActivoFijoBeans(movimientoactivofijosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceMovimientoActivoFijo);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+MovimientoActivoFijoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+MovimientoActivoFijoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(MovimientoActivoFijoBean.TraerMovimientoActivoFijoBeans(movimientoactivofijosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoMovimientoActivoFijoActionPerformed(null);
					//this.generarExcelReporteMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesMovimientoActivoFijos(sAccionBusqueda,sTipoArchivoReporte,movimientoactivofijosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteMovimientoActivoFijos(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoActivoFijo> movimientoactivofijosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoActivoFijos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderMovimientoActivoFijo("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(MovimientoActivoFijo movimientoactivofijo : movimientoactivofijosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			MovimientoActivoFijoConstantesFunciones.generarExcelReporteDataMovimientoActivoFijo("NORMAL",row,workbook,movimientoactivofijo,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderMovimientoActivoFijo(String sTipo,Row row,Workbook workbook) {
		
		MovimientoActivoFijoConstantesFunciones.generarExcelReporteHeaderMovimientoActivoFijo(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalMovimientoActivoFijos(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoActivoFijo> movimientoactivofijosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoActivoFijos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(MovimientoActivoFijo movimientoactivofijo : movimientoactivofijosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(MovimientoActivoFijoConstantesFunciones.getMovimientoActivoFijoDescripcion(movimientoactivofijo));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getsecuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getempresaorigen_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getsucursalorigen_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getdetalleactivofijoorigen_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getempresadestino_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getsucursaldestino_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getdetalleactivofijodestino_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getnumero_documento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getcosto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getdepreciacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getcosto_origen());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getdepreciacion_origen());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getrazon());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(movimientoactivofijo.getdescripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesMovimientoActivoFijos(String sAccionBusqueda,String sTipoArchivoReporte,List<MovimientoActivoFijo> movimientoactivofijosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<MovimientoActivoFijo> movimientoactivofijosRespaldo=null;
		
		classes=MovimientoActivoFijoConstantesFunciones.getClassesRelationshipsOfMovimientoActivoFijo(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.movimientoactivofijoLogic.setDatosCliente(this.datosCliente);
		this.movimientoactivofijoLogic.setDatosDeep(this.datosDeep);
		this.movimientoactivofijoLogic.setIsConDeep(true);
		
		movimientoactivofijosRespaldo=this.movimientoactivofijoLogic.getMovimientoActivoFijos();
		
		this.movimientoactivofijoLogic.setMovimientoActivoFijos(movimientoactivofijosParaReportes);	
		this.movimientoactivofijoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		movimientoactivofijosParaReportes=this.movimientoactivofijoLogic.getMovimientoActivoFijos();
		this.movimientoactivofijoLogic.setMovimientoActivoFijos(movimientoactivofijosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("MovimientoActivoFijos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderMovimientoActivoFijo("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(MovimientoActivoFijo movimientoactivofijo : movimientoactivofijosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderMovimientoActivoFijo("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			MovimientoActivoFijoConstantesFunciones.generarExcelReporteDataMovimientoActivoFijo("NORMAL",row,workbook,movimientoactivofijo,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(MovimientoActivoFijoConstantesFunciones.getMovimientoActivoFijoDescripcion(movimientoactivofijo));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessMovimientoActivoFijo() throws Exception {		
		this.startProcessMovimientoActivoFijo(true);
	}
	
	public void startProcessMovimientoActivoFijo(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasMovimientoActivoFijo ,this.jPanelParametrosReportesMovimientoActivoFijo, this.jScrollPanelDatosMovimientoActivoFijo,this.jPanelPaginacionMovimientoActivoFijo, this.jScrollPanelDatosEdicionMovimientoActivoFijo, this.jPanelAccionesMovimientoActivoFijo,this.jPanelAccionesFormularioMovimientoActivoFijo,this.jmenuBarMovimientoActivoFijo,this.jmenuBarDetalleMovimientoActivoFijo,this.jTtoolBarMovimientoActivoFijo,this.jTtoolBarDetalleMovimientoActivoFijo);		
		
		final JTabbedPane jTabbedPaneBusquedasMovimientoActivoFijo=this.jTabbedPaneBusquedasMovimientoActivoFijo; 
		
		final JPanel jPanelParametrosReportesMovimientoActivoFijo=this.jPanelParametrosReportesMovimientoActivoFijo;
		//final JScrollPane jScrollPanelDatosMovimientoActivoFijo=this.jScrollPanelDatosMovimientoActivoFijo;
		final JTable jTableDatosMovimientoActivoFijo=this.jTableDatosMovimientoActivoFijo;		
		final JPanel jPanelPaginacionMovimientoActivoFijo=this.jPanelPaginacionMovimientoActivoFijo;
		//final JScrollPane jScrollPanelDatosEdicionMovimientoActivoFijo=this.jScrollPanelDatosEdicionMovimientoActivoFijo;
		final JPanel jPanelAccionesMovimientoActivoFijo=this.jPanelAccionesMovimientoActivoFijo;
		
		JPanel jPanelCamposAuxiliarMovimientoActivoFijo=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarMovimientoActivoFijo=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			jPanelCamposAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelCamposMovimientoActivoFijo;
			jPanelAccionesFormularioAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelAccionesFormularioMovimientoActivoFijo;
		}
		
		final JPanel jPanelCamposMovimientoActivoFijo=jPanelCamposAuxiliarMovimientoActivoFijo;
		final JPanel jPanelAccionesFormularioMovimientoActivoFijo=jPanelAccionesFormularioAuxiliarMovimientoActivoFijo;
		
		
		final JMenuBar jmenuBarMovimientoActivoFijo=this.jmenuBarMovimientoActivoFijo;
		final JToolBar jTtoolBarMovimientoActivoFijo=this.jTtoolBarMovimientoActivoFijo;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarMovimientoActivoFijo=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarMovimientoActivoFijo=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			jmenuBarDetalleAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jmenuBarDetalleMovimientoActivoFijo;
			jTtoolBarDetalleAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jTtoolBarDetalleMovimientoActivoFijo;
		}
		
		final JMenuBar jmenuBarDetalleMovimientoActivoFijo=jmenuBarDetalleAuxiliarMovimientoActivoFijo;
		final JToolBar jTtoolBarDetalleMovimientoActivoFijo=jTtoolBarDetalleAuxiliarMovimientoActivoFijo;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasMovimientoActivoFijo;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesMovimientoActivoFijo;
			processRunnable.jTableDatos=jTableDatosMovimientoActivoFijo;
			processRunnable.jPanelCampos=jPanelCamposMovimientoActivoFijo;
			processRunnable.jPanelPaginacion=jPanelPaginacionMovimientoActivoFijo;
			processRunnable.jPanelAcciones=jPanelAccionesMovimientoActivoFijo;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioMovimientoActivoFijo;
			
			
			processRunnable.jmenuBar=jmenuBarMovimientoActivoFijo;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleMovimientoActivoFijo;
			processRunnable.jTtoolBar=jTtoolBarMovimientoActivoFijo;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleMovimientoActivoFijo;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasMovimientoActivoFijo ,jPanelParametrosReportesMovimientoActivoFijo,jTableDatosMovimientoActivoFijo, /*jScrollPanelDatosMovimientoActivoFijo,*/jPanelCamposMovimientoActivoFijo,jPanelPaginacionMovimientoActivoFijo, /*jScrollPanelDatosEdicionMovimientoActivoFijo,*/ jPanelAccionesMovimientoActivoFijo,jPanelAccionesFormularioMovimientoActivoFijo,jmenuBarMovimientoActivoFijo,jmenuBarDetalleMovimientoActivoFijo,jTtoolBarMovimientoActivoFijo,jTtoolBarDetalleMovimientoActivoFijo);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasMovimientoActivoFijo ,jPanelParametrosReportesMovimientoActivoFijo, jScrollPanelDatosMovimientoActivoFijo,jPanelPaginacionMovimientoActivoFijo, jScrollPanelDatosEdicionMovimientoActivoFijo, jPanelAccionesMovimientoActivoFijo,jPanelAccionesFormularioMovimientoActivoFijo,jmenuBarMovimientoActivoFijo,jmenuBarDetalleMovimientoActivoFijo,jTtoolBarMovimientoActivoFijo,jTtoolBarDetalleMovimientoActivoFijo);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessMovimientoActivoFijo() {// throws Exception 
		this.finishProcessMovimientoActivoFijo(true);
	}
	
	public void finishProcessMovimientoActivoFijo(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasMovimientoActivoFijo ,this.jPanelParametrosReportesMovimientoActivoFijo, this.jScrollPanelDatosMovimientoActivoFijo,this.jPanelPaginacionMovimientoActivoFijo, this.jScrollPanelDatosEdicionMovimientoActivoFijo, this.jPanelAccionesMovimientoActivoFijo,this.jPanelAccionesFormularioMovimientoActivoFijo,this.jmenuBarMovimientoActivoFijo,this.jmenuBarDetalleMovimientoActivoFijo,this.jTtoolBarMovimientoActivoFijo,this.jTtoolBarDetalleMovimientoActivoFijo);		
		
		final JTabbedPane jTabbedPaneBusquedasMovimientoActivoFijo=this.jTabbedPaneBusquedasMovimientoActivoFijo; 
		
		final JPanel jPanelParametrosReportesMovimientoActivoFijo=this.jPanelParametrosReportesMovimientoActivoFijo;
		//final JScrollPane jScrollPanelDatosMovimientoActivoFijo=this.jScrollPanelDatosMovimientoActivoFijo;
		final JTable jTableDatosMovimientoActivoFijo=this.jTableDatosMovimientoActivoFijo;		
		final JPanel jPanelPaginacionMovimientoActivoFijo=this.jPanelPaginacionMovimientoActivoFijo;
		//final JScrollPane jScrollPanelDatosEdicionMovimientoActivoFijo=this.jScrollPanelDatosEdicionMovimientoActivoFijo;
		final JPanel jPanelAccionesMovimientoActivoFijo=this.jPanelAccionesMovimientoActivoFijo;
		
		JPanel jPanelCamposAuxiliarMovimientoActivoFijo=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarMovimientoActivoFijo=new JPanel();
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			jPanelCamposAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelCamposMovimientoActivoFijo;
			jPanelAccionesFormularioAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelAccionesFormularioMovimientoActivoFijo;
		}
		
		final JPanel jPanelCamposMovimientoActivoFijo=jPanelCamposAuxiliarMovimientoActivoFijo;
		final JPanel jPanelAccionesFormularioMovimientoActivoFijo=jPanelAccionesFormularioAuxiliarMovimientoActivoFijo;
		
		
		final JMenuBar jmenuBarMovimientoActivoFijo=this.jmenuBarMovimientoActivoFijo;		
		final JToolBar jTtoolBarMovimientoActivoFijo=this.jTtoolBarMovimientoActivoFijo;
				
		JMenuBar jmenuBarDetalleAuxiliarMovimientoActivoFijo=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarMovimientoActivoFijo=new JToolBar();
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			jmenuBarDetalleAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jmenuBarDetalleMovimientoActivoFijo;
			jTtoolBarDetalleAuxiliarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jTtoolBarDetalleMovimientoActivoFijo;		
		}
		
		final JMenuBar jmenuBarDetalleMovimientoActivoFijo=jmenuBarDetalleAuxiliarMovimientoActivoFijo;
		final JToolBar jTtoolBarDetalleMovimientoActivoFijo=jTtoolBarDetalleAuxiliarMovimientoActivoFijo;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasMovimientoActivoFijo;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesMovimientoActivoFijo;
			processRunnable.jTableDatos=jTableDatosMovimientoActivoFijo;
			processRunnable.jPanelCampos=jPanelCamposMovimientoActivoFijo;
			processRunnable.jPanelPaginacion=jPanelPaginacionMovimientoActivoFijo;
			processRunnable.jPanelAcciones=jPanelAccionesMovimientoActivoFijo;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioMovimientoActivoFijo;
			
			
			processRunnable.jmenuBar=jmenuBarMovimientoActivoFijo;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleMovimientoActivoFijo;
			processRunnable.jTtoolBar=jTtoolBarMovimientoActivoFijo;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleMovimientoActivoFijo;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasMovimientoActivoFijo ,jPanelParametrosReportesMovimientoActivoFijo, jTableDatosMovimientoActivoFijo,/*jScrollPanelDatosMovimientoActivoFijo,*/jPanelCamposMovimientoActivoFijo,jPanelPaginacionMovimientoActivoFijo, /*jScrollPanelDatosEdicionMovimientoActivoFijo,*/ jPanelAccionesMovimientoActivoFijo,jPanelAccionesFormularioMovimientoActivoFijo,jmenuBarMovimientoActivoFijo,jmenuBarDetalleMovimientoActivoFijo,jTtoolBarMovimientoActivoFijo,jTtoolBarDetalleMovimientoActivoFijo));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesMovimientoActivoFijo(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarMovimientoActivoFijo(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuMovimientoActivoFijo(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarMovimientoActivoFijo(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarMovimientoActivoFijo,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleMovimientoActivoFijo,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuMovimientoActivoFijo(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarMovimientoActivoFijo,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleMovimientoActivoFijo,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.movimientoactivofijoConstantesFunciones.getsFinalQueryMovimientoActivoFijo();
		String  finalQueryPaginacionTodos=this.movimientoactivofijoConstantesFunciones.getsFinalQueryMovimientoActivoFijo();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=MovimientoActivoFijoConstantesFunciones.getArrayColumnasGlobalesNoMovimientoActivoFijo(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=MovimientoActivoFijoConstantesFunciones.getArrayColumnasGlobalesMovimientoActivoFijo(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,MovimientoActivoFijoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.movimientoactivofijosEliminados= new ArrayList<MovimientoActivoFijo>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessMovimientoActivoFijo();
		
				///*MovimientoActivoFijoSessionBean*/this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			
			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=MovimientoActivoFijoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=MovimientoActivoFijoConstantesFunciones.getClassesForeignKeysOfMovimientoActivoFijo(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/movimientoactivofijo."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			movimientoactivofijosAux= new ArrayList<MovimientoActivoFijo>();
			
				
			movimientoactivofijoLogic.setDatosCliente(this.datosCliente);
			movimientoactivofijoLogic.setDatosDeep(this.datosDeep);
			movimientoactivofijoLogic.setIsConDeep(true);
			
			
			movimientoactivofijoLogic.getMovimientoActivoFijoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					movimientoactivofijoLogic.getTodosMovimientoActivoFijos(finalQueryGlobal,pagination);
					
					//movimientoactivofijoLogic.getTodosMovimientoActivoFijosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(movimientoactivofijoLogic.getMovimientoActivoFijos()==null|| movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoactivofijosAux= new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux= new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoactivofijoLogic.getTodosMovimientoActivoFijos(finalQueryGlobal+"",this.pagination);												
							
							//movimientoactivofijoLogic.getTodosMovimientoActivoFijosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijoLogic.getMovimientoActivoFijos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());					
							movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idMovimientoActivoFijo=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idMovimientoActivoFijo=this.idActual;
				
				} else if(this.idMovimientoActivoFijoActual!=null && this.idMovimientoActivoFijoActual!=0L) {
					idMovimientoActivoFijo=idMovimientoActivoFijoActual;
				}
				
					
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndicePorId(idMovimientoActivoFijo);
				
				this.movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					movimientoactivofijoLogic.getEntity(idMovimientoActivoFijo);
					
					//movimientoactivofijoLogic.getEntityWithConnection(idMovimientoActivoFijo);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
					movimientoactivofijoLogic.getMovimientoActivoFijos().add(movimientoactivofijoLogic.getMovimientoActivoFijo());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
					this.movimientoactivofijos.add(movimientoactivofijo);
				}
				
				if(movimientoactivofijoLogic.getMovimientoActivoFijo()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdDetalleActivoFijoDestino")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoDestino(id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino(finalQueryGlobal,pagination,id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoDestino(id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoDestino(id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino(finalQueryGlobal,pagination,id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoDestino(id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoDestino(id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdDetalleActivoFijoDestino",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdDetalleActivoFijoDestino",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdDetalleActivoFijoOrigen")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoOrigen(id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen(finalQueryGlobal,pagination,id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoOrigen(id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoOrigen(id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen(finalQueryGlobal,pagination,id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoOrigen(id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdDetalleActivoFijoOrigen(id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdDetalleActivoFijoOrigen",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdDetalleActivoFijoOrigen",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresa",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresa",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresaDestino")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaDestino(id_empresa_destinoFK_IdEmpresaDestino);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaDestino(finalQueryGlobal,pagination,id_empresa_destinoFK_IdEmpresaDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaDestino(id_empresa_destinoFK_IdEmpresaDestino);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaDestino(id_empresa_destinoFK_IdEmpresaDestino);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaDestino(finalQueryGlobal,pagination,id_empresa_destinoFK_IdEmpresaDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaDestino(id_empresa_destinoFK_IdEmpresaDestino);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaDestino(id_empresa_destinoFK_IdEmpresaDestino);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresaDestino",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresaDestino",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresaOrigen")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaOrigen(id_empresa_origenFK_IdEmpresaOrigen);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaOrigen(finalQueryGlobal,pagination,id_empresa_origenFK_IdEmpresaOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaOrigen(id_empresa_origenFK_IdEmpresaOrigen);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaOrigen(id_empresa_origenFK_IdEmpresaOrigen);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaOrigen(finalQueryGlobal,pagination,id_empresa_origenFK_IdEmpresaOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaOrigen(id_empresa_origenFK_IdEmpresaOrigen);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdEmpresaOrigen(id_empresa_origenFK_IdEmpresaOrigen);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresaOrigen",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdEmpresaOrigen",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdSucursal",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdSucursal",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursalDestino")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalDestino(id_sucursal_destinoFK_IdSucursalDestino);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalDestino(finalQueryGlobal,pagination,id_sucursal_destinoFK_IdSucursalDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalDestino(id_sucursal_destinoFK_IdSucursalDestino);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalDestino(id_sucursal_destinoFK_IdSucursalDestino);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalDestino(finalQueryGlobal,pagination,id_sucursal_destinoFK_IdSucursalDestino);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalDestino(id_sucursal_destinoFK_IdSucursalDestino);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalDestino(id_sucursal_destinoFK_IdSucursalDestino);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdSucursalDestino",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdSucursalDestino",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursalOrigen")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalOrigen(id_sucursal_origenFK_IdSucursalOrigen);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalOrigen(finalQueryGlobal,pagination,id_sucursal_origenFK_IdSucursalOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalOrigen(id_sucursal_origenFK_IdSucursalOrigen);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalOrigen(id_sucursal_origenFK_IdSucursalOrigen);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalOrigen(finalQueryGlobal,pagination,id_sucursal_origenFK_IdSucursalOrigen);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalOrigen(id_sucursal_origenFK_IdSucursalOrigen);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdSucursalOrigen(id_sucursal_origenFK_IdSucursalOrigen);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdSucursalOrigen",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdSucursalOrigen",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos()==null||movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=movimientoactivofijos==null|| movimientoactivofijos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
						movimientoactivofijosAux.addAll(movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijosAux=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijosAux.addAll(movimientoactivofijos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=MovimientoActivoFijoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteMovimientoActivoFijos("FK_IdUsuario",movimientoactivofijoLogic.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteMovimientoActivoFijos("FK_IdUsuario",movimientoactivofijos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoLogic.setMovimientoActivoFijos(new ArrayList<MovimientoActivoFijo>());
						movimientoactivofijoLogic.getMovimientoActivoFijos().addAll(movimientoactivofijosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijos=new ArrayList<MovimientoActivoFijo>();
							movimientoactivofijos.addAll(movimientoactivofijosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesMovimientoActivoFijo();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessMovimientoActivoFijo();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=movimientoactivofijoLogic.getMovimientoActivoFijos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=movimientoactivofijos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=movimientoactivofijoLogic.getMovimientoActivoFijos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=movimientoactivofijos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(MovimientoActivoFijo movimientoactivofijo) {
		Boolean permite=true;
		
		if(this.movimientoactivofijo.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=MovimientoActivoFijoConstantesFunciones.getOrderByListaMovimientoActivoFijo();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=MovimientoActivoFijoConstantesFunciones.getOrderByListaMovimientoActivoFijo();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				if(movimientoactivofijo.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoactivofijoTotales=movimientoactivofijo;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoActivoFijo movimientoactivofijo:this.movimientoactivofijos) {
				if(movimientoactivofijo.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoactivofijoTotales=movimientoactivofijo;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.movimientoactivofijoAux=new MovimientoActivoFijo();
			this.movimientoactivofijoAux.setsType(Constantes2.S_TOTALES);
			this.movimientoactivofijoAux.setIsNew(false);
			this.movimientoactivofijoAux.setIsChanged(false);
			this.movimientoactivofijoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				MovimientoActivoFijoConstantesFunciones.TotalizarValoresFilaMovimientoActivoFijo(this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this.movimientoactivofijoAux);
				
				this.movimientoactivofijoLogic.getMovimientoActivoFijos().add(this.movimientoactivofijoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				MovimientoActivoFijoConstantesFunciones.TotalizarValoresFilaMovimientoActivoFijo(this.movimientoactivofijos,this.movimientoactivofijoAux);
				
				this.movimientoactivofijos.add(this.movimientoactivofijoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		movimientoactivofijoTotales=new MovimientoActivoFijo();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.movimientoactivofijoLogic.getMovimientoActivoFijos().remove(movimientoactivofijoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.movimientoactivofijos.remove(movimientoactivofijoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		movimientoactivofijoTotales=new MovimientoActivoFijo();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				if(movimientoactivofijo.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoactivofijoTotales=movimientoactivofijo;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				MovimientoActivoFijoConstantesFunciones.TotalizarValoresFilaMovimientoActivoFijo(this.movimientoactivofijoLogic.getMovimientoActivoFijos(),movimientoactivofijoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(MovimientoActivoFijo movimientoactivofijo:this.movimientoactivofijos) {
				if(movimientoactivofijo.getsType().equals(Constantes2.S_TOTALES)) {
					movimientoactivofijoTotales=movimientoactivofijo;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				MovimientoActivoFijoConstantesFunciones.TotalizarValoresFilaMovimientoActivoFijo(this.movimientoactivofijos,movimientoactivofijoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino()throws Exception {
		try {
			sAccionBusqueda="FK_IdDetalleActivoFijoDestino";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen()throws Exception {
		try {
			sAccionBusqueda="FK_IdDetalleActivoFijoOrigen";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresaDestino()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresaDestino";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresaOrigen()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresaOrigen";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursalDestino()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursalDestino";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursalOrigen()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursalOrigen";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getMovimientoActivoFijosFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino(String sFinalQuery,Long id_detalle_activo_fijo_destino)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino(sFinalQuery,this.pagination,id_detalle_activo_fijo_destino);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen(String sFinalQuery,Long id_detalle_activo_fijo_origen)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen(sFinalQuery,this.pagination,id_detalle_activo_fijo_origen);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresaDestino(String sFinalQuery,Long id_empresa_destino)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaDestino(sFinalQuery,this.pagination,id_empresa_destino);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdEmpresaOrigen(String sFinalQuery,Long id_empresa_origen)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdEmpresaOrigen(sFinalQuery,this.pagination,id_empresa_origen);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursalDestino(String sFinalQuery,Long id_sucursal_destino)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalDestino(sFinalQuery,this.pagination,id_sucursal_destino);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdSucursalOrigen(String sFinalQuery,Long id_sucursal_origen)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdSucursalOrigen(sFinalQuery,this.pagination,id_sucursal_origen);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getMovimientoActivoFijosFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLogic.getMovimientoActivoFijosFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosMovimientoActivoFijo() {
		this.isPermisoTodoMovimientoActivoFijo=false;
		this.isPermisoNuevoMovimientoActivoFijo=false;
		this.isPermisoActualizarMovimientoActivoFijo=false;
		this.isPermisoActualizarOriginalMovimientoActivoFijo=false;
		this.isPermisoEliminarMovimientoActivoFijo=false;
		this.isPermisoGuardarCambiosMovimientoActivoFijo=false;
		this.isPermisoConsultaMovimientoActivoFijo=false;
		this.isPermisoBusquedaMovimientoActivoFijo=false;
		this.isPermisoReporteMovimientoActivoFijo=false;		
		this.isPermisoOrdenMovimientoActivoFijo=false;		
		this.isPermisoPaginacionMedioMovimientoActivoFijo=false;		
		this.isPermisoPaginacionAltoMovimientoActivoFijo=false;
		this.isPermisoPaginacionTodoMovimientoActivoFijo=false;
		this.isPermisoCopiarMovimientoActivoFijo=false;		
		this.isPermisoVerFormMovimientoActivoFijo=false;		
		this.isPermisoDuplicarMovimientoActivoFijo=false;		
		this.isPermisoOrdenMovimientoActivoFijo=false;		
	}
	
	public void setPermisosUsuarioMovimientoActivoFijo(Boolean isPermiso) {
		this.isPermisoTodoMovimientoActivoFijo=isPermiso;
		this.isPermisoNuevoMovimientoActivoFijo=isPermiso;
		this.isPermisoActualizarMovimientoActivoFijo=isPermiso;
		this.isPermisoActualizarOriginalMovimientoActivoFijo=isPermiso;
		this.isPermisoEliminarMovimientoActivoFijo=isPermiso;
		this.isPermisoGuardarCambiosMovimientoActivoFijo=isPermiso;
		this.isPermisoConsultaMovimientoActivoFijo=isPermiso;
		this.isPermisoBusquedaMovimientoActivoFijo=isPermiso;
		this.isPermisoReporteMovimientoActivoFijo=isPermiso;
		this.isPermisoOrdenMovimientoActivoFijo=isPermiso;		
		this.isPermisoPaginacionMedioMovimientoActivoFijo=isPermiso;		
		this.isPermisoPaginacionAltoMovimientoActivoFijo=isPermiso;		
		this.isPermisoPaginacionTodoMovimientoActivoFijo=isPermiso;		
		this.isPermisoCopiarMovimientoActivoFijo=isPermiso;		
		this.isPermisoVerFormMovimientoActivoFijo=isPermiso;		
		this.isPermisoDuplicarMovimientoActivoFijo=isPermiso;
		this.isPermisoOrdenMovimientoActivoFijo=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioMovimientoActivoFijo(Boolean isPermiso) {
		//this.isPermisoTodoMovimientoActivoFijo=isPermiso;
		this.isPermisoNuevoMovimientoActivoFijo=isPermiso;
		this.isPermisoActualizarMovimientoActivoFijo=isPermiso;
		this.isPermisoActualizarOriginalMovimientoActivoFijo=isPermiso;
		this.isPermisoEliminarMovimientoActivoFijo=isPermiso;
		this.isPermisoGuardarCambiosMovimientoActivoFijo=isPermiso;
		//this.isPermisoConsultaMovimientoActivoFijo=isPermiso;
		//this.isPermisoBusquedaMovimientoActivoFijo=isPermiso;
		//this.isPermisoReporteMovimientoActivoFijo=isPermiso;
		//this.isPermisoOrdenMovimientoActivoFijo=isPermiso;		
		//this.isPermisoPaginacionMedioMovimientoActivoFijo=isPermiso;		
		//this.isPermisoPaginacionAltoMovimientoActivoFijo=isPermiso;		
		//this.isPermisoPaginacionTodoMovimientoActivoFijo=isPermiso;		
		//this.isPermisoCopiarMovimientoActivoFijo=isPermiso;		
		//this.isPermisoDuplicarMovimientoActivoFijo=isPermiso;
		//this.isPermisoOrdenMovimientoActivoFijo=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioMovimientoActivoFijoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(MovimientoActivoFijoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioMovimientoActivoFijoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioMovimientoActivoFijoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionMovimientoActivoFijoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioMovimientoActivoFijoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioMovimientoActivoFijo() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(MovimientoActivoFijoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, MovimientoActivoFijoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoMovimientoActivoFijo=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarMovimientoActivoFijo=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalMovimientoActivoFijo=this.isPermisoActualizarMovimientoActivoFijo;
			this.isPermisoEliminarMovimientoActivoFijo=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosMovimientoActivoFijo=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaMovimientoActivoFijo=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaMovimientoActivoFijo=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoMovimientoActivoFijo=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteMovimientoActivoFijo=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenMovimientoActivoFijo=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioMovimientoActivoFijo=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoMovimientoActivoFijo=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoMovimientoActivoFijo=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarMovimientoActivoFijo=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormMovimientoActivoFijo=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarMovimientoActivoFijo=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenMovimientoActivoFijo=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosMovimientoActivoFijo.setToolTipText(this.jTableDatosMovimientoActivoFijo.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioMovimientoActivoFijo(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioMovimientoActivoFijo(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(MovimientoActivoFijoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(MovimientoActivoFijoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioMovimientoActivoFijo() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyMovimientoActivoFijoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.empresaorigensForeignKey=new ArrayList();
				this.sucursalorigensForeignKey=new ArrayList();
				this.detalleactivofijoorigensForeignKey=new ArrayList();
				this.empresadestinosForeignKey=new ArrayList();
				this.sucursaldestinosForeignKey=new ArrayList();
				this.detalleactivofijodestinosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyMovimientoActivoFijoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(MovimientoActivoFijoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyMovimientoActivoFijoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyDetalleActivoFijoOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyDetalleActivoFijoDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaOrigenListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresaorigensForeignKey==null||this.empresaorigensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresaOrigensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalOrigenListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalorigensForeignKey==null||this.sucursalorigensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalOrigensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijoOrigenListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.detalleactivofijoorigensForeignKey==null||this.detalleactivofijoorigensForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

				this.cargarCombosDetalleActivoFijoOrigensForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaDestinoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresadestinosForeignKey==null||this.empresadestinosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresaDestinosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalDestinoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursaldestinosForeignKey==null||this.sucursaldestinosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalDestinosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijoDestinoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.detalleactivofijodestinosForeignKey==null||this.detalleactivofijodestinosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

				this.cargarCombosDetalleActivoFijoDestinosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyMovimientoActivoFijoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoReturnGeneral=new MovimientoActivoFijoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_empresaMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_empresaMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_sucursalMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_sucursalMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_usuarioMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_usuarioMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalEmpresaOrigen="";

				if(((this.empresaorigensForeignKey==null||this.empresaorigensForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_empresa_origenMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_empresa_origenMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaOrigen()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresaOrigen=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresaOrigen=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresaOrigen, "");
						finalQueryGlobalEmpresaOrigen+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresaOrigensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresaOrigen=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidEmpresaOrigenActual();
					}
				} else {
					finalQueryGlobalEmpresaOrigen="NONE";
				}


				String finalQueryGlobalSucursalOrigen="";

				if(((this.sucursalorigensForeignKey==null||this.sucursalorigensForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_origenMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_origenMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalOrigen()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursalOrigen=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursalOrigen=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursalOrigen, "");
						finalQueryGlobalSucursalOrigen+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalOrigensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursalOrigen=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidSucursalOrigenActual();
					}
				} else {
					finalQueryGlobalSucursalOrigen="NONE";
				}


				String finalQueryGlobalDetalleActivoFijoOrigen="";

				if(((this.detalleactivofijoorigensForeignKey==null||this.detalleactivofijoorigensForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_origenMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_origenMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoOrigen()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalDetalleActivoFijoOrigen=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

						finalQueryGlobalDetalleActivoFijoOrigen=Funciones.GetFinalQueryAppend(finalQueryGlobalDetalleActivoFijoOrigen, "");
						finalQueryGlobalDetalleActivoFijoOrigen+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosDetalleActivoFijoOrigensForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalDetalleActivoFijoOrigen=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidDetalleActivoFijoOrigenActual();
					}
				} else {
					finalQueryGlobalDetalleActivoFijoOrigen="NONE";
				}


				String finalQueryGlobalEmpresaDestino="";

				if(((this.empresadestinosForeignKey==null||this.empresadestinosForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_empresa_destinoMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_empresa_destinoMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaDestino()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresaDestino=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresaDestino=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresaDestino, "");
						finalQueryGlobalEmpresaDestino+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresaDestinosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresaDestino=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidEmpresaDestinoActual();
					}
				} else {
					finalQueryGlobalEmpresaDestino="NONE";
				}


				String finalQueryGlobalSucursalDestino="";

				if(((this.sucursaldestinosForeignKey==null||this.sucursaldestinosForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_destinoMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_destinoMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalDestino()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursalDestino=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursalDestino=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursalDestino, "");
						finalQueryGlobalSucursalDestino+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalDestinosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursalDestino=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidSucursalDestinoActual();
					}
				} else {
					finalQueryGlobalSucursalDestino="NONE";
				}


				String finalQueryGlobalDetalleActivoFijoDestino="";

				if(((this.detalleactivofijodestinosForeignKey==null||this.detalleactivofijodestinosForeignKey.size()<=0) && this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_destinoMovimientoActivoFijo)
					 || (this.esRecargarFks && this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_destinoMovimientoActivoFijo)) {

					if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoDestino()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=DetalleActivoFijoConstantesFunciones.getArrayColumnasGlobalesDetalleActivoFijo(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalDetalleActivoFijoDestino=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,DetalleActivoFijoConstantesFunciones.TABLENAME);

						finalQueryGlobalDetalleActivoFijoDestino=Funciones.GetFinalQueryAppend(finalQueryGlobalDetalleActivoFijoDestino, "");
						finalQueryGlobalDetalleActivoFijoDestino+=DetalleActivoFijoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosDetalleActivoFijoDestinosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalDetalleActivoFijoDestino=" WHERE " + ConstantesSql.ID + "="+movimientoactivofijoSessionBean.getlidDetalleActivoFijoDestinoActual();
					}
				} else {
					finalQueryGlobalDetalleActivoFijoDestino="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.cargarCombosLoteForeignKeyMovimientoActivoFijo(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalUsuario,finalQueryGlobalEmpresaOrigen,finalQueryGlobalSucursalOrigen,finalQueryGlobalDetalleActivoFijoOrigen,finalQueryGlobalEmpresaDestino,finalQueryGlobalSucursalDestino,finalQueryGlobalDetalleActivoFijoDestino);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=movimientoactivofijoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=movimientoactivofijoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=movimientoactivofijoReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalEmpresaOrigen.equals("NONE")) {
				this.empresaorigensForeignKey=movimientoactivofijoReturnGeneral.getempresaorigensForeignKey();
			}

			if(!finalQueryGlobalSucursalOrigen.equals("NONE")) {
				this.sucursalorigensForeignKey=movimientoactivofijoReturnGeneral.getsucursalorigensForeignKey();
			}

			if(!finalQueryGlobalDetalleActivoFijoOrigen.equals("NONE")) {
				this.detalleactivofijoorigensForeignKey=movimientoactivofijoReturnGeneral.getdetalleactivofijoorigensForeignKey();
			}

			if(!finalQueryGlobalEmpresaDestino.equals("NONE")) {
				this.empresadestinosForeignKey=movimientoactivofijoReturnGeneral.getempresadestinosForeignKey();
			}

			if(!finalQueryGlobalSucursalDestino.equals("NONE")) {
				this.sucursaldestinosForeignKey=movimientoactivofijoReturnGeneral.getsucursaldestinosForeignKey();
			}

			if(!finalQueryGlobalDetalleActivoFijoDestino.equals("NONE")) {
				this.detalleactivofijodestinosForeignKey=movimientoactivofijoReturnGeneral.getdetalleactivofijodestinosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyMovimientoActivoFijo()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyEmpresaOrigen();
			this.addItemDefectoCombosForeignKeySucursalOrigen();
			this.addItemDefectoCombosForeignKeyDetalleActivoFijoOrigen();
			this.addItemDefectoCombosForeignKeyEmpresaDestino();
			this.addItemDefectoCombosForeignKeySucursalDestino();
			this.addItemDefectoCombosForeignKeyDetalleActivoFijoDestino();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.movimientoactivofijoSessionBean==null) {
				this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
			}

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresaOrigen()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaOrigen()) {
				Empresa empresaorigen=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresaorigen,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresaorigen.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresaorigensForeignKey,empresaorigen,true)) {

					this.empresaorigensForeignKey.add(0,empresaorigen);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursalOrigen()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalOrigen()) {
				Sucursal sucursalorigen=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursalorigen,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursalorigen.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalorigensForeignKey,sucursalorigen,true)) {

					this.sucursalorigensForeignKey.add(0,sucursalorigen);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyDetalleActivoFijoOrigen()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoOrigen()) {
				DetalleActivoFijo detalleactivofijoorigen=new DetalleActivoFijo();
				DetalleActivoFijoConstantesFunciones.setDetalleActivoFijoDescripcion(detalleactivofijoorigen,Constantes.SMENSAJE_ESCOJA_OPCION);
				detalleactivofijoorigen.setId(null);

				if(!DetalleActivoFijoConstantesFunciones.ExisteEnLista(this.detalleactivofijoorigensForeignKey,detalleactivofijoorigen,true)) {

					this.detalleactivofijoorigensForeignKey.add(0,detalleactivofijoorigen);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresaDestino()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresaDestino()) {
				Empresa empresadestino=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresadestino,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresadestino.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresadestinosForeignKey,empresadestino,true)) {

					this.empresadestinosForeignKey.add(0,empresadestino);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursalDestino()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionSucursalDestino()) {
				Sucursal sucursaldestino=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursaldestino,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursaldestino.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursaldestinosForeignKey,sucursaldestino,true)) {

					this.sucursaldestinosForeignKey.add(0,sucursaldestino);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyDetalleActivoFijoDestino()throws Exception {
		try {

			if(!this.movimientoactivofijoSessionBean.getisBusquedaDesdeForeignKeySesionDetalleActivoFijoDestino()) {
				DetalleActivoFijo detalleactivofijodestino=new DetalleActivoFijo();
				DetalleActivoFijoConstantesFunciones.setDetalleActivoFijoDescripcion(detalleactivofijodestino,Constantes.SMENSAJE_ESCOJA_OPCION);
				detalleactivofijodestino.setId(null);

				if(!DetalleActivoFijoConstantesFunciones.ExisteEnLista(this.detalleactivofijodestinosForeignKey,detalleactivofijodestino,true)) {

					this.detalleactivofijodestinosForeignKey.add(0,detalleactivofijodestino);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyMovimientoActivoFijo()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyMovimientoActivoFijo(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyMovimientoActivoFijo()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
			
			
				this.movimientoactivofijo.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoActivoFijo();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo)throws Exception {	
		try {
			
			this.setActualEmpresaOrigenForeignKey(movimientoactivofijo.getid_empresa_origen(),false,"Formulario");
			this.setActualSucursalOrigenForeignKey(movimientoactivofijo.getid_sucursal_origen(),false,"Formulario");
			this.setActualDetalleActivoFijoOrigenForeignKey(movimientoactivofijo.getid_detalle_activo_fijo_origen(),false,"Formulario");
			this.setActualEmpresaDestinoForeignKey(movimientoactivofijo.getid_empresa_destino(),false,"Formulario");
			this.setActualSucursalDestinoForeignKey(movimientoactivofijo.getid_sucursal_destino(),false,"Formulario");
			this.setActualDetalleActivoFijoDestinoForeignKey(movimientoactivofijo.getid_detalle_activo_fijo_destino(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyMovimientoActivoFijo()throws Exception {	
		try {
			
			this.setActualEmpresaOrigenForeignKey(this.movimientoactivofijoConstantesFunciones.getid_empresa_origen(),false,"Formulario");
			this.setActualSucursalOrigenForeignKey(this.movimientoactivofijoConstantesFunciones.getid_sucursal_origen(),false,"Formulario");
			this.setActualDetalleActivoFijoOrigenForeignKey(this.movimientoactivofijoConstantesFunciones.getid_detalle_activo_fijo_origen(),false,"Formulario");
			this.setActualEmpresaDestinoForeignKey(this.movimientoactivofijoConstantesFunciones.getid_empresa_destino(),false,"Formulario");
			this.setActualSucursalDestinoForeignKey(this.movimientoactivofijoConstantesFunciones.getid_sucursal_destino(),false,"Formulario");
			this.setActualDetalleActivoFijoDestinoForeignKey(this.movimientoactivofijoConstantesFunciones.getid_detalle_activo_fijo_destino(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyMovimientoActivoFijo()throws Exception {	
		try {
			

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyMovimientoActivoFijo()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyMovimientoActivoFijo()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroMovimientoActivoFijo()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyMovimientoActivoFijo()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameEmpresaOrigensForeignKey("Todos");
			this.cargarCombosFrameSucursalOrigensForeignKey("Todos");
			this.cargarCombosFrameDetalleActivoFijoOrigensForeignKey("Todos");
			this.cargarCombosFrameEmpresaDestinosForeignKey("Todos");
			this.cargarCombosFrameSucursalDestinosForeignKey("Todos");
			this.cargarCombosFrameDetalleActivoFijoDestinosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyMovimientoActivoFijo(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresaOrigensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalOrigensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameDetalleActivoFijoOrigensForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresaDestinosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalDestinosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameDetalleActivoFijoDestinosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyMovimientoActivoFijo()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.getItemCount()>0) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	


















	
	

	public MovimientoActivoFijoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public MovimientoActivoFijoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public MovimientoActivoFijoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean(); 
		this.movimientoactivofijoConstantesFunciones=new MovimientoActivoFijoConstantesFunciones(); 
		this.movimientoactivofijoBean=new MovimientoActivoFijo();//(this.movimientoactivofijoConstantesFunciones); 		
		this.movimientoactivofijoReturnGeneral=new MovimientoActivoFijoParameterReturnGeneral(); 
		
		this.movimientoactivofijoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.movimientoactivofijoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public MovimientoActivoFijoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public MovimientoActivoFijoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public MovimientoActivoFijoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessMovimientoActivoFijo(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.movimientoactivofijoConstantesFunciones=new MovimientoActivoFijoConstantesFunciones(); 
			this.movimientoactivofijoBean=new MovimientoActivoFijo();//this.movimientoactivofijoConstantesFunciones); 			
			this.movimientoactivofijoReturnGeneral=new MovimientoActivoFijoParameterReturnGeneral(); 
		
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Movimiento Activo Fijo Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.movimientoactivofijo=new MovimientoActivoFijo();
			this.movimientoactivofijos = new ArrayList<MovimientoActivoFijo>();
			this.movimientoactivofijosAux = new ArrayList<MovimientoActivoFijo>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic=new MovimientoActivoFijoLogic();
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			//this.movimientoactivofijoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.movimientoactivofijoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormMovimientoActivoFijo);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoMovimientoActivoFijo);	
					}
					
					if(this.jInternalFrameImportacionMovimientoActivoFijo!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionMovimientoActivoFijo);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByMovimientoActivoFijo!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByMovimientoActivoFijo);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormMovimientoActivoFijo);
				this.jInternalFrameDetalleFormMovimientoActivoFijo.setVisible(false);
				this.jInternalFrameDetalleFormMovimientoActivoFijo.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoMovimientoActivoFijo);
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setVisible(false);
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionMovimientoActivoFijo!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionMovimientoActivoFijo);
					this.jInternalFrameImportacionMovimientoActivoFijo.setVisible(false);
					this.jInternalFrameImportacionMovimientoActivoFijo.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByMovimientoActivoFijo!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByMovimientoActivoFijo);
					this.jInternalFrameOrderByMovimientoActivoFijo.setVisible(false);
					this.jInternalFrameOrderByMovimientoActivoFijo.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idMovimientoActivoFijoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=MovimientoActivoFijoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.movimientoactivofijoReturnGeneral=new MovimientoActivoFijoParameterReturnGeneral();
			
			this.movimientoactivofijoParameterGeneral=new MovimientoActivoFijoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.movimientoactivofijoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(MovimientoActivoFijoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,MovimientoActivoFijoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),this.movimientoactivofijoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,MovimientoActivoFijoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),this.movimientoactivofijoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaDuplicarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaCopiarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaVerFormMovimientoActivoFijo=true;
			this.isVisibilidadCeldaOrdenMovimientoActivoFijo=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			
			
			this.isVisibilidadFK_IdDetalleActivoFijoDestino=true;
			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEmpresaDestino=true;
			this.isVisibilidadFK_IdEmpresaOrigen=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdSucursalDestino=true;
			this.isVisibilidadFK_IdSucursalOrigen=true;
			this.isVisibilidadFK_IdUsuario=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosMovimientoActivoFijo();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioMovimientoActivoFijo(false);
			
			this.setPermisosUsuarioMovimientoActivoFijo();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado() 
				|| (this.movimientoactivofijoSessionBean.getEsGuardarRelacionado() && this.movimientoactivofijoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioMovimientoActivoFijoClasesRelacionadas();
			}
			
			if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioMovimientoActivoFijoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosMovimientoActivoFijo();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualMovimientoActivoFijo();
			}
			
			if(!this.isPermisoBusquedaMovimientoActivoFijo) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioMovimientoActivoFijo,this.isPermisoPaginacionMedioMovimientoActivoFijo,this.isPermisoPaginacionTodoMovimientoActivoFijo);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(MovimientoActivoFijoConstantesFunciones.getTiposSeleccionarMovimientoActivoFijo());
				
				this.tiposColumnasSelect=MovimientoActivoFijoConstantesFunciones.getTiposSeleccionarMovimientoActivoFijo(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioMovimientoActivoFijo();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioMovimientoActivoFijo(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioMovimientoActivoFijo(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoActivoFijo() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.empresaorigenLogic=new EmpresaLogic();
			this.sucursalorigenLogic=new SucursalLogic();
			this.detalleactivofijoorigenLogic=new DetalleActivoFijoLogic();
			this.empresadestinoLogic=new EmpresaLogic();
			this.sucursaldestinoLogic=new SucursalLogic();
			this.detalleactivofijodestinoLogic=new DetalleActivoFijoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				movimientoactivofijoImplementable= (MovimientoActivoFijoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+MovimientoActivoFijoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				movimientoactivofijoImplementableHome= (MovimientoActivoFijoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+MovimientoActivoFijoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.movimientoactivofijos= new ArrayList<MovimientoActivoFijo>();
			this.movimientoactivofijosEliminados= new ArrayList<MovimientoActivoFijo>();
						
			this.isEsNuevoMovimientoActivoFijo=false;
			this.esParaAccionDesdeFormularioMovimientoActivoFijo=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.empresaorigensForeignKey=new ArrayList<Empresa>() ;
			this.sucursalorigensForeignKey=new ArrayList<Sucursal>() ;
			this.detalleactivofijoorigensForeignKey=new ArrayList<DetalleActivoFijo>() ;
			this.empresadestinosForeignKey=new ArrayList<Empresa>() ;
			this.sucursaldestinosForeignKey=new ArrayList<Sucursal>() ;
			this.detalleactivofijodestinosForeignKey=new ArrayList<DetalleActivoFijo>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyMovimientoActivoFijo(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroMovimientoActivoFijo();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=MovimientoActivoFijoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingMovimientoActivoFijo(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioMovimientoActivoFijo();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioMovimientoActivoFijo();
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasMovimientoActivoFijo.getTabCount(); i++) {
					this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessMovimientoActivoFijo(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga MovimientoActivoFijo: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectMovimientoActivoFijo() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesMovimientoActivoFijo")) {
				iIndex=this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessMovimientoActivoFijo();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyMovimientoActivoFijo(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyMovimientoActivoFijo(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyMovimientoActivoFijo(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyMovimientoActivoFijoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyMovimientoActivoFijo();
		
		this.cargarCombosFrameForeignKeyMovimientoActivoFijo();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyMovimientoActivoFijo();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyMovimientoActivoFijo();
		}
	}
	
	

	public void cargarCombosForeignKeyEmpresaOrigen(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpresaOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpresaOrigen();
				this.cargarCombosFrameEmpresaOrigensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpresaOrigen(this.empresaorigensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalOrigen(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySucursalOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySucursalOrigen();
				this.cargarCombosFrameSucursalOrigensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSucursalOrigen(this.sucursalorigensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijoOrigen(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyDetalleActivoFijoOrigenListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyDetalleActivoFijoOrigen();
				this.cargarCombosFrameDetalleActivoFijoOrigensForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaDetalleActivoFijoOrigen(this.detalleactivofijoorigensForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaDestino(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpresaDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpresaDestino();
				this.cargarCombosFrameEmpresaDestinosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpresaDestino(this.empresadestinosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalDestino(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeySucursalDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeySucursalDestino();
				this.cargarCombosFrameSucursalDestinosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaSucursalDestino(this.sucursaldestinosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyDetalleActivoFijoDestino(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyDetalleActivoFijoDestinoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyDetalleActivoFijoDestino();
				this.cargarCombosFrameDetalleActivoFijoDestinosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaDetalleActivoFijoDestino(this.detalleactivofijodestinosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoMovimientoActivoFijoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			
			if(jTableDatosMovimientoActivoFijo.getRowCount()>=1) {
				jTableDatosMovimientoActivoFijo.removeRowSelectionInterval(0, jTableDatosMovimientoActivoFijo.getRowCount()-1);						
			}
			
			this.isEsNuevoMovimientoActivoFijo=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoMovimientoActivoFijo(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesMovimientoActivoFijo(true);			
			//this.movimientoactivofijo=new MovimientoActivoFijo();
			//this.movimientoactivofijo.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo() ;
			
			if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoActivoFijo(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.movimientoactivofijo);	
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);				
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar MovimientoActivoFijo: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarMovimientoActivoFijoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosMovimientoActivoFijo.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosMovimientoActivoFijo.getSelectedRows().length;			
			}
			
			movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoMovimientoActivoFijo--;			
				//MovimientoActivoFijo movimientoactivofijoAux= new MovimientoActivoFijo();			
				//movimientoactivofijoAux.setId(this.iIdNuevoMovimientoActivoFijo);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//MovimientoActivoFijo movimientoactivofijoOrigen=new MovimientoActivoFijo();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(MovimientoActivoFijo movimientoactivofijoOrigen : movimientoactivofijosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							movimientoactivofijoOrigen =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							movimientoactivofijoOrigen =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaMovimientoActivoFijo();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.movimientoactivofijo.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosMovimientoActivoFijo(movimientoactivofijoOrigen,this.movimientoactivofijo,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.movimientoactivofijoLogic.getMovimientoActivoFijos().add(this.movimientoactivofijoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijos.add(this.movimientoactivofijoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
				
				this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(this.getIndiceNuevoMovimientoActivoFijo(), this.getIndiceNuevoMovimientoActivoFijo());
				
				int iLastRow =  this.jTableDatosMovimientoActivoFijo.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosMovimientoActivoFijo.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosMovimientoActivoFijo.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();									
		
			MovimientoActivoFijo movimientoactivofijoOrigen=new MovimientoActivoFijo();
			MovimientoActivoFijo movimientoactivofijoDestino=new MovimientoActivoFijo();
				
			movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosMovimientoActivoFijo.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || movimientoactivofijosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosMovimientoActivoFijo.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoOrigen =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						movimientoactivofijoOrigen =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						movimientoactivofijoDestino =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						movimientoactivofijoDestino =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				movimientoactivofijoOrigen =movimientoactivofijosSeleccionados.get(0);
				movimientoactivofijoDestino =movimientoactivofijosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosMovimientoActivoFijo(movimientoactivofijoOrigen,movimientoactivofijoDestino,true,false);
				
				movimientoactivofijoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(movimientoactivofijoDestino,movimientoactivofijoLogic.getMovimientoActivoFijos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(movimientoactivofijoDestino,movimientoactivofijos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
				
				//this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(this.getIndiceNuevoMovimientoActivoFijo(), this.getIndiceNuevoMovimientoActivoFijo());
				
				int iLastRow =  this.jTableDatosMovimientoActivoFijo.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosMovimientoActivoFijo.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosMovimientoActivoFijo.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesMovimientoActivoFijo.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(!isVisible);
			this.jPanelPaginacionMovimientoActivoFijo.setVisible(!isVisible);
			this.jPanelAccionesMovimientoActivoFijo.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameMovimientoActivoFijo();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoMovimientoActivoFijo();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionMovimientoActivoFijo();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByMovimientoActivoFijo();
			
			this.abrirFrameOrderByMovimientoActivoFijo();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByMovimientoActivoFijo();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleMovimientoActivoFijo(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormMovimientoActivoFijo);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormMovimientoActivoFijo.isMaximum()) {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormMovimientoActivoFijo.setSize(this.jInternalFrameDetalleFormMovimientoActivoFijo.iWidthFormulario,this.jInternalFrameDetalleFormMovimientoActivoFijo.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormMovimientoActivoFijo.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormMovimientoActivoFijo.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormMovimientoActivoFijo.isMaximum()) {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jContentPaneDetalleMovimientoActivoFijo.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormMovimientoActivoFijo.jContentPaneDetalleMovimientoActivoFijo.getWidth(),MovimientoActivoFijoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormMovimientoActivoFijo.jContentPaneDetalleMovimientoActivoFijo.getWidth(),MovimientoActivoFijoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormMovimientoActivoFijo.jContentPaneDetalleMovimientoActivoFijo.getWidth(),MovimientoActivoFijoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormMovimientoActivoFijo.setVisible(true);
	        this.jInternalFrameDetalleFormMovimientoActivoFijo.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByMovimientoActivoFijo() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByMovimientoActivoFijo==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByMovimientoActivoFijo=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByMovimientoActivoFijo,false,this);
				} else {
					this.jInternalFrameOrderByMovimientoActivoFijo=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByMovimientoActivoFijo,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByMovimientoActivoFijo);
				this.jInternalFrameOrderByMovimientoActivoFijo.setVisible(false);
				this.jInternalFrameOrderByMovimientoActivoFijo.setSelected(false);
				
				this.jInternalFrameOrderByMovimientoActivoFijo.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByMovimientoActivoFijo"));
				
				this.inicializarActualizarBindingTablaOrderByMovimientoActivoFijo();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionMovimientoActivoFijo() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionMovimientoActivoFijo==null) {
				
				this.jInternalFrameImportacionMovimientoActivoFijo=new ImportacionJInternalFrame(MovimientoActivoFijoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionMovimientoActivoFijo);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionMovimientoActivoFijo);
				this.jInternalFrameImportacionMovimientoActivoFijo.setVisible(false);
				this.jInternalFrameImportacionMovimientoActivoFijo.setSelected(false);


				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionMovimientoActivoFijo"));
				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionMovimientoActivoFijo"));
				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionMovimientoActivoFijo"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoMovimientoActivoFijo() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo==null) {
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo=new ReporteDinamicoJInternalFrame(MovimientoActivoFijoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoMovimientoActivoFijo);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoMovimientoActivoFijo);
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setVisible(false);
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoActivoFijo"));
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoActivoFijo"));
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoActivoFijo"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoActivoFijo();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleMovimientoActivoFijo() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormMovimientoActivoFijo);
			
	       	this.jInternalFrameDetalleFormMovimientoActivoFijo.setVisible(false);
	        this.jInternalFrameDetalleFormMovimientoActivoFijo.setSelected(false);
			
			//this.jInternalFrameDetalleFormMovimientoActivoFijo.dispose();
			//this.jInternalFrameDetalleFormMovimientoActivoFijo=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoMovimientoActivoFijo() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setVisible(true);
	        this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionMovimientoActivoFijo() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionMovimientoActivoFijo.setVisible(true);
	        this.jInternalFrameImportacionMovimientoActivoFijo.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByMovimientoActivoFijo() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByMovimientoActivoFijo.setVisible(true);
	        this.jInternalFrameOrderByMovimientoActivoFijo.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByMovimientoActivoFijo() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByMovimientoActivoFijo.setVisible(false);
	        this.jInternalFrameOrderByMovimientoActivoFijo.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoMovimientoActivoFijo() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setVisible(false);
	        this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionMovimientoActivoFijo() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionMovimientoActivoFijo.setVisible(false);
	        this.jInternalFrameImportacionMovimientoActivoFijo.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarMovimientoActivoFijo(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarMovimientoActivoFijo(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesMovimientoActivoFijo(true);
			//this.isEsNuevoMovimientoActivoFijo=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false) ;
			
			if(movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoActivoFijo(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaMovimientoActivoFijoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarMovimientoActivoFijo(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesMovimientoActivoFijo(true);
			//this.isEsNuevoMovimientoActivoFijo=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.movimientoactivofijo.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false) ;
			
			if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleMovimientoActivoFijo(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
				
	
	public void recargarComboTablaEmpresaOrigen(List<Empresa> empresaorigensForeignKey)throws Exception{
		TableColumn tableColumnEmpresaOrigen=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN));
		TableCellEditor tableCellEditorEmpresaOrigen =tableColumnEmpresaOrigen.getCellEditor();

		EmpresaTableCell empresaTableCellFk=(EmpresaTableCell)tableCellEditorEmpresaOrigen;

		if(empresaTableCellFk!=null) {
			empresaTableCellFk.setempresasForeignKey(empresaorigensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empresaTableCellFk.setRowActual(intSelectedRow);
			//empresaTableCellFk.setempresasForeignKeyActual(empresaorigensForeignKey);
		//}


		if(empresaTableCellFk!=null) {
			empresaTableCellFk.RecargarEmpresasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaSucursalOrigen(List<Sucursal> sucursalorigensForeignKey)throws Exception{
		TableColumn tableColumnSucursalOrigen=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN));
		TableCellEditor tableCellEditorSucursalOrigen =tableColumnSucursalOrigen.getCellEditor();

		SucursalTableCell sucursalTableCellFk=(SucursalTableCell)tableCellEditorSucursalOrigen;

		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.setsucursalsForeignKey(sucursalorigensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//sucursalTableCellFk.setRowActual(intSelectedRow);
			//sucursalTableCellFk.setsucursalsForeignKeyActual(sucursalorigensForeignKey);
		//}


		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.RecargarSucursalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaDetalleActivoFijoOrigen(List<DetalleActivoFijo> detalleactivofijoorigensForeignKey)throws Exception{
		TableColumn tableColumnDetalleActivoFijoOrigen=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN));
		TableCellEditor tableCellEditorDetalleActivoFijoOrigen =tableColumnDetalleActivoFijoOrigen.getCellEditor();

		DetalleActivoFijoTableCell detalleactivofijoTableCellFk=(DetalleActivoFijoTableCell)tableCellEditorDetalleActivoFijoOrigen;

		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.setdetalleactivofijosForeignKey(detalleactivofijoorigensForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//detalleactivofijoTableCellFk.setRowActual(intSelectedRow);
			//detalleactivofijoTableCellFk.setdetalleactivofijosForeignKeyActual(detalleactivofijoorigensForeignKey);
		//}


		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.RecargarDetalleActivoFijosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEmpresaDestino(List<Empresa> empresadestinosForeignKey)throws Exception{
		TableColumn tableColumnEmpresaDestino=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO));
		TableCellEditor tableCellEditorEmpresaDestino =tableColumnEmpresaDestino.getCellEditor();

		EmpresaTableCell empresaTableCellFk=(EmpresaTableCell)tableCellEditorEmpresaDestino;

		if(empresaTableCellFk!=null) {
			empresaTableCellFk.setempresasForeignKey(empresadestinosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empresaTableCellFk.setRowActual(intSelectedRow);
			//empresaTableCellFk.setempresasForeignKeyActual(empresadestinosForeignKey);
		//}


		if(empresaTableCellFk!=null) {
			empresaTableCellFk.RecargarEmpresasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaSucursalDestino(List<Sucursal> sucursaldestinosForeignKey)throws Exception{
		TableColumn tableColumnSucursalDestino=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO));
		TableCellEditor tableCellEditorSucursalDestino =tableColumnSucursalDestino.getCellEditor();

		SucursalTableCell sucursalTableCellFk=(SucursalTableCell)tableCellEditorSucursalDestino;

		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.setsucursalsForeignKey(sucursaldestinosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//sucursalTableCellFk.setRowActual(intSelectedRow);
			//sucursalTableCellFk.setsucursalsForeignKeyActual(sucursaldestinosForeignKey);
		//}


		if(sucursalTableCellFk!=null) {
			sucursalTableCellFk.RecargarSucursalsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaDetalleActivoFijoDestino(List<DetalleActivoFijo> detalleactivofijodestinosForeignKey)throws Exception{
		TableColumn tableColumnDetalleActivoFijoDestino=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO));
		TableCellEditor tableCellEditorDetalleActivoFijoDestino =tableColumnDetalleActivoFijoDestino.getCellEditor();

		DetalleActivoFijoTableCell detalleactivofijoTableCellFk=(DetalleActivoFijoTableCell)tableCellEditorDetalleActivoFijoDestino;

		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.setdetalleactivofijosForeignKey(detalleactivofijodestinosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();

		//if(intSelectedRow<=0) {
			//detalleactivofijoTableCellFk.setRowActual(intSelectedRow);
			//detalleactivofijoTableCellFk.setdetalleactivofijosForeignKeyActual(detalleactivofijodestinosForeignKey);
		//}


		if(detalleactivofijoTableCellFk!=null) {
			detalleactivofijoTableCellFk.RecargarDetalleActivoFijosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesMovimientoActivoFijo(false);
			
			//if(!this.isEsNuevoMovimientoActivoFijo) {								
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				
			}
			
			if(this.permiteMantenimiento(this.movimientoactivofijo)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoMovimientoActivoFijo=true;
					this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
					this.isEsNuevoMovimientoActivoFijo=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoMovimientoActivoFijo=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoMovimientoActivoFijo=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(false);
				
				this.habilitarDeshabilitarControlesMovimientoActivoFijo(false);
			
												
				
				if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleMovimientoActivoFijo();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoMovimientoActivoFijoActionPerformed(evt,movimientoactivofijoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualMovimientoActivoFijo(this.movimientoactivofijo,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,movimientoactivofijoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.movimientoactivofijo.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				this.movimientoactivofijo.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				this.movimientoactivofijo.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.movimientoactivofijo)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((MovimientoActivoFijoModel) this.jTableDatosMovimientoActivoFijo.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoMovimientoActivoFijo=true;
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
				this.isEsNuevoMovimientoActivoFijo=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(false);
				
				this.habilitarDeshabilitarControlesMovimientoActivoFijo(false);
				
				
				
				if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleMovimientoActivoFijo();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosMovimientoActivoFijo.getRowCount()>=1) {
				jTableDatosMovimientoActivoFijo.removeRowSelectionInterval(0, jTableDatosMovimientoActivoFijo.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesMovimientoActivoFijo(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(false) ;
			
			this.isEsNuevoMovimientoActivoFijo=false;
			
			if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleMovimientoActivoFijo();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingMovimientoActivoFijo(false);
				
				//SI ES MANUAL
				if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualMovimientoActivoFijo();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoMovimientoActivoFijo--;			
			//MovimientoActivoFijo movimientoactivofijoAux= new MovimientoActivoFijo();			
			//movimientoactivofijoAux.setId(this.iIdNuevoMovimientoActivoFijo);
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaMovimientoActivoFijo();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
			
			this.movimientoactivofijo.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.movimientoactivofijoLogic.getMovimientoActivoFijos().add(this.movimientoactivofijoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.movimientoactivofijos.add(this.movimientoactivofijoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			
			this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(this.getIndiceNuevoMovimientoActivoFijo(), this.getIndiceNuevoMovimientoActivoFijo());
			
			int iLastRow =  this.jTableDatosMovimientoActivoFijo.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosMovimientoActivoFijo.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosMovimientoActivoFijo.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
			
			//SI ES MANUAL
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoActivoFijo();
			}
			
			//this.abrirFrameTreeMovimientoActivoFijo();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Movimiento Activo FijoS ?", "MANTENIMIENTO DE Movimiento Activo Fijo", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionMovimientoActivoFijo.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralMovimientoActivoFijo();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.procesarImportacionMovimientoActivoFijosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.movimientoactivofijoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarMovimientoActivoFijoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionMovimientoActivoFijo.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionMovimientoActivoFijo.setFileImportacion(this.jInternalFrameImportacionMovimientoActivoFijo.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionMovimientoActivoFijo.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionMovimientoActivoFijo.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionMovimientoActivoFijo.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionMovimientoActivoFijo.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		

		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("MovimientoActivoFijoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"MovimientoActivoFijoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EmpresaOrigen_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EmpresaOrigen_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EmpresaOrigen_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EmpresaOrigen_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_SucursalOrigen_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_SucursalOrigen_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_SucursalOrigen_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_SucursalOrigen_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_DetalleActivoFijoOrigen_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_DetalleActivoFijoOrigen_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_DetalleActivoFijoOrigen_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_DetalleActivoFijoOrigen_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EmpresaDestino_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EmpresaDestino_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EmpresaDestino_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EmpresaDestino_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_SucursalDestino_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_SucursalDestino_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_SucursalDestino_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_SucursalDestino_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_DetalleActivoFijoDestino_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_DetalleActivoFijoDestino_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_DetalleActivoFijoDestino_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_DetalleActivoFijoDestino_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroDocumento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroDocumento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroDocumento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroDocumento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_sto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_sto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_sto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_sto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_preciacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_preciacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_preciacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_preciacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoOrigen_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoOrigen_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoOrigen_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoOrigen_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_preciacionOrigen_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_preciacionOrigen_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_preciacionOrigen_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_preciacionOrigen_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_RAZON:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_zon_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_zon_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_zon_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_zon_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoria="secuencial";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN:
					sNombreCampoCategoria="id_empresa_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN:
					sNombreCampoCategoria="id_sucursal_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN:
					sNombreCampoCategoria="id_detalle_activo_fijo_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO:
					sNombreCampoCategoria="id_empresa_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO:
					sNombreCampoCategoria="id_sucursal_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO:
					sNombreCampoCategoria="id_detalle_activo_fijo_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoria="numero_documento";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTO:
					sNombreCampoCategoria="costo";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION:
					sNombreCampoCategoria="depreciacion";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN:
					sNombreCampoCategoria="costo_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN:
					sNombreCampoCategoria="depreciacion_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_RAZON:
					sNombreCampoCategoria="razon";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL:
					sNombreCampoCategoriaValor="secuencial";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN:
					sNombreCampoCategoriaValor="id_empresa_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN:
					sNombreCampoCategoriaValor="id_sucursal_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN:
					sNombreCampoCategoriaValor="id_detalle_activo_fijo_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO:
					sNombreCampoCategoriaValor="id_empresa_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO:
					sNombreCampoCategoriaValor="id_sucursal_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO:
					sNombreCampoCategoriaValor="id_detalle_activo_fijo_destino";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO:
					sNombreCampoCategoriaValor="numero_documento";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTO:
					sNombreCampoCategoriaValor="costo";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION:
					sNombreCampoCategoriaValor="depreciacion";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN:
					sNombreCampoCategoriaValor="costo_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN:
					sNombreCampoCategoriaValor="depreciacion_origen";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_RAZON:
					sNombreCampoCategoriaValor="razon";
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa Origen",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa_origen");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal Origen",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal_origen");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle Activo Fijo Origen",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_detalle_activo_fijo_origen");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa Destino",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa_destino");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal Destino",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal_destino");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Detalle Activo Fijo Destino",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_detalle_activo_fijo_destino");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Numero Documento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_documento");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Depreciacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"depreciacion");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Costo Origen",sNombreCampoCategoria,sNombreCampoCategoriaValor,"costo_origen");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Depreciacion Origen",sNombreCampoCategoria,sNombreCampoCategoriaValor,"depreciacion_origen");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_RAZON:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Razon",sNombreCampoCategoria,sNombreCampoCategoriaValor,"razon");
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("MovimientoActivoFijos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getsecuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getempresaorigen_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getsucursalorigen_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getdetalleactivofijoorigen_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getempresadestino_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getsucursaldestino_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getdetalleactivofijodestino_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getnumero_documento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getcosto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getdepreciacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getcosto_origen());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getdepreciacion_origen());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_RAZON:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getrazon());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(MovimientoActivoFijo movimientoactivofijo:movimientoactivofijosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(movimientoactivofijo.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelMovimientoActivoFijo(row);				
			//	iRow++;
			//}				
			
			//for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelMovimientoActivoFijo(movimientoactivofijoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
			
			//SI ES MANUAL
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualMovimientoActivoFijo();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
			
			//SI ES MANUAL
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualMovimientoActivoFijo();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
			
			//SI ES MANUAL
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualMovimientoActivoFijo();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaMovimientoActivoFijo() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosMovimientoActivoFijo.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosMovimientoActivoFijo.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosMovimientoActivoFijo.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosMovimientoActivoFijo.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosMovimientoActivoFijo.setMinimumSize(dimensionMinimum);
		this.jTableDatosMovimientoActivoFijo.setMaximumSize(dimensionMaximum);
		this.jTableDatosMovimientoActivoFijo.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingMovimientoActivoFijo(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingMovimientoActivoFijo(esInicializar,true);
	}
	
	public void inicializarActualizarBindingMovimientoActivoFijo(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaMovimientoActivoFijo(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesMovimientoActivoFijo(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasMovimientoActivoFijo(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoActivoFijo(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesMovimientoActivoFijo(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualMovimientoActivoFijo() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaMovimientoActivoFijo();
		
		this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualMovimientoActivoFijo();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoActivoFijo() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoActivoFijo(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoActivoFijo(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosMovimientoActivoFijo.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosMovimientoActivoFijo.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteMovimientoActivoFijo.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionNuevoMovimientoActivoFijo.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionSinCerrarMovimientoActivoFijo.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionSinMensajeMovimientoActivoFijo.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosMovimientoActivoFijo.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosMovimientoActivoFijo.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteMovimientoActivoFijo.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionNuevoMovimientoActivoFijo.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionSinCerrarMovimientoActivoFijo.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jCheckBoxPostAccionSinMensajeMovimientoActivoFijo.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionMovimientoActivoFijo.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionMovimientoActivoFijo.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesMovimientoActivoFijo.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesMovimientoActivoFijo.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesMovimientoActivoFijo.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarMovimientoActivoFijo.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesMovimientoActivoFijo.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesMovimientoActivoFijo.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralMovimientoActivoFijo.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesMovimientoActivoFijo(Boolean esInicializar) throws Exception {
		try	{	
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualMovimientoActivoFijo(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesMovimientoActivoFijo() throws Exception {
		try	{
			if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualMovimientoActivoFijo();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleMovimientoActivoFijo() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualMovimientoActivoFijo() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesMovimientoActivoFijo.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesMovimientoActivoFijo.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesMovimientoActivoFijo.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionMovimientoActivoFijo.addItem(reporte);
			}
			
			
			if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionMovimientoActivoFijo.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionMovimientoActivoFijo.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesMovimientoActivoFijo.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesMovimientoActivoFijo.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarMovimientoActivoFijo.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarMovimientoActivoFijo.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarMovimientoActivoFijo.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoActivoFijo();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualMovimientoActivoFijo() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
				
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=MovimientoActivoFijoConstantesFunciones.getTiposSeleccionarMovimientoActivoFijo(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=MovimientoActivoFijoConstantesFunciones.getTiposSeleccionarMovimientoActivoFijo(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=MovimientoActivoFijoConstantesFunciones.getTiposSeleccionarMovimientoActivoFijo(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualMovimientoActivoFijo()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.getSelectedItem()!=null){this.id_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino=((DetalleActivoFijo)this.jComboBoxid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.getSelectedItem()).getId();}
		if(this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.getSelectedItem()!=null){this.id_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen=((DetalleActivoFijo)this.jComboBoxid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.getSelectedItem()).getId();}
		if(this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.getSelectedItem()!=null){this.id_empresa_destinoFK_IdEmpresaDestino=((Empresa)this.jComboBoxid_empresa_destinoFK_IdEmpresaDestinoMovimientoActivoFijo.getSelectedItem()).getId();}
		if(this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.getSelectedItem()!=null){this.id_empresa_origenFK_IdEmpresaOrigen=((Empresa)this.jComboBoxid_empresa_origenFK_IdEmpresaOrigenMovimientoActivoFijo.getSelectedItem()).getId();}
		if(this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.getSelectedItem()!=null){this.id_sucursal_destinoFK_IdSucursalDestino=((Sucursal)this.jComboBoxid_sucursal_destinoFK_IdSucursalDestinoMovimientoActivoFijo.getSelectedItem()).getId();}
		if(this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.getSelectedItem()!=null){this.id_sucursal_origenFK_IdSucursalOrigen=((Sucursal)this.jComboBoxid_sucursal_origenFK_IdSucursalOrigenMovimientoActivoFijo.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasMovimientoActivoFijo(Boolean esInicializar) throws Exception {				
		if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualMovimientoActivoFijo();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaMovimientoActivoFijo() throws Exception {
		this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByMovimientoActivoFijo() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosMovimientoActivoFijoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaMovimientoActivoFijo(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=movimientoactivofijoLogic.getMovimientoActivoFijos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=movimientoactivofijos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosMovimientoActivoFijo.setModel(new MovimientoActivoFijoModel(this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosMovimientoActivoFijo.setModel(new MovimientoActivoFijoModel(this.movimientoactivofijos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByMovimientoActivoFijo!=null && this.jInternalFrameOrderByMovimientoActivoFijo.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByMovimientoActivoFijo();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+MovimientoActivoFijoConstantesFunciones.SCLASSWEBTITULO,movimientoactivofijoConstantesFunciones.resaltarSeleccionarMovimientoActivoFijo,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+MovimientoActivoFijoConstantesFunciones.SCLASSWEBTITULO,movimientoactivofijoConstantesFunciones.resaltarSeleccionarMovimientoActivoFijo,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_ID));

		if(this.movimientoactivofijoConstantesFunciones.mostraridMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoactivofijoConstantesFunciones.resaltaridMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activaridMovimientoActivoFijo,iSizeTabla,this,true,"idMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltaridMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activaridMovimientoActivoFijo,this,true,"idMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_empresaMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresaMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresaMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresaMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresaMovimientoActivoFijo,false,"id_empresaMovimientoActivoFijo","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursalMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursalMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursalMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursalMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursalMovimientoActivoFijo,false,"id_sucursalMovimientoActivoFijo","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_usuarioMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_usuarioMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_usuarioMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_usuarioMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_usuarioMovimientoActivoFijo,false,"id_usuarioMovimientoActivoFijo","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL));

		if(this.movimientoactivofijoConstantesFunciones.mostrarsecuencialMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoactivofijoConstantesFunciones.resaltarsecuencialMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarsecuencialMovimientoActivoFijo,iSizeTabla,this,true,"secuencialMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarsecuencialMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarsecuencialMovimientoActivoFijo,this,true,"secuencialMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_origenMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresaorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresa_origenMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresaorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresa_origenMovimientoActivoFijo,true,"id_empresa_origenMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_origenMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursal_origenMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursal_origenMovimientoActivoFijo,true,"id_sucursal_origenMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_origenMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new DetalleActivoFijoTableCell(this.detalleactivofijoorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_origenMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new DetalleActivoFijoTableCell(this.detalleactivofijoorigensForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_origenMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_origenMovimientoActivoFijo,true,"id_detalle_activo_fijo_origenMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_destinoMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresadestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresa_destinoMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresadestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_empresa_destinoMovimientoActivoFijo,true,"id_empresa_destinoMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_destinoMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursaldestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursal_destinoMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursaldestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_sucursal_destinoMovimientoActivoFijo,true,"id_sucursal_destinoMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_destinoMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new DetalleActivoFijoTableCell(this.detalleactivofijodestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_destinoMovimientoActivoFijo,iSizeTabla));
			tableColumn.setCellEditor(new DetalleActivoFijoTableCell(this.detalleactivofijodestinosForeignKey,this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_destinoMovimientoActivoFijo,this,this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_destinoMovimientoActivoFijo,true,"id_detalle_activo_fijo_destinoMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_FECHA));

		if(this.movimientoactivofijoConstantesFunciones.mostrarfechaMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.movimientoactivofijoConstantesFunciones.resaltarfechaMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarfechaMovimientoActivoFijo,iSizeTabla,this,true,"fechaMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarfechaMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarfechaMovimientoActivoFijo,this,true,"fechaMovimientoActivoFijo","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarnumero_documentoMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoactivofijoConstantesFunciones.resaltarnumero_documentoMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarnumero_documentoMovimientoActivoFijo,iSizeTabla,this,true,"numero_documentoMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarnumero_documentoMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarnumero_documentoMovimientoActivoFijo,this,true,"numero_documentoMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_COSTO));

		if(this.movimientoactivofijoConstantesFunciones.mostrarcostoMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_COSTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoactivofijoConstantesFunciones.resaltarcostoMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarcostoMovimientoActivoFijo,iSizeTabla,this,true,"costoMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarcostoMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarcostoMovimientoActivoFijo,this,true,"costoMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION));

		if(this.movimientoactivofijoConstantesFunciones.mostrardepreciacionMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoactivofijoConstantesFunciones.resaltardepreciacionMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardepreciacionMovimientoActivoFijo,iSizeTabla,this,true,"depreciacionMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltardepreciacionMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardepreciacionMovimientoActivoFijo,this,true,"depreciacionMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN));

		if(this.movimientoactivofijoConstantesFunciones.mostrarcosto_origenMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoactivofijoConstantesFunciones.resaltarcosto_origenMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarcosto_origenMovimientoActivoFijo,iSizeTabla,this,true,"costo_origenMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarcosto_origenMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarcosto_origenMovimientoActivoFijo,this,true,"costo_origenMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN));

		if(this.movimientoactivofijoConstantesFunciones.mostrardepreciacion_origenMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.movimientoactivofijoConstantesFunciones.resaltardepreciacion_origenMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardepreciacion_origenMovimientoActivoFijo,iSizeTabla,this,true,"depreciacion_origenMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltardepreciacion_origenMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardepreciacion_origenMovimientoActivoFijo,this,true,"depreciacion_origenMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_RAZON));

		if(this.movimientoactivofijoConstantesFunciones.mostrarrazonMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_RAZON,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoactivofijoConstantesFunciones.resaltarrazonMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarrazonMovimientoActivoFijo,iSizeTabla,this,true,"razonMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltarrazonMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activarrazonMovimientoActivoFijo,this,true,"razonMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION));

		if(this.movimientoactivofijoConstantesFunciones.mostrardescripcionMovimientoActivoFijo && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.movimientoactivofijoConstantesFunciones.resaltardescripcionMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardescripcionMovimientoActivoFijo,iSizeTabla,this,true,"descripcionMovimientoActivoFijo","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.movimientoactivofijoConstantesFunciones.resaltardescripcionMovimientoActivoFijo,this.movimientoactivofijoConstantesFunciones.activardescripcionMovimientoActivoFijo,this,true,"descripcionMovimientoActivoFijo","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new MovimientoActivoFijoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosMovimientoActivoFijo.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosMovimientoActivoFijo.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosMovimientoActivoFijo.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosMovimientoActivoFijo.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosMovimientoActivoFijo.moveColumn(this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosMovimientoActivoFijo.moveColumn(this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosMovimientoActivoFijo.moveColumn(this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosMovimientoActivoFijo.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosMovimientoActivoFijo.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosMovimientoActivoFijo,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosMovimientoActivoFijo.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosMovimientoActivoFijo.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosMovimientoActivoFijo.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=movimientoactivofijoLogic.getMovimientoActivoFijos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=movimientoactivofijos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosMovimientoActivoFijo.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosMovimientoActivoFijo.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosMovimientoActivoFijo();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoMovimientoActivoFijo=false;
					
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
				if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosMovimientoActivoFijo.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.movimientoactivofijo.getsType().equals("DUPLICADO")
				   || this.movimientoactivofijo.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoMovimientoActivoFijo=true;
				
				} else {
					this.isEsNuevoMovimientoActivoFijo=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					if(this.movimientoactivofijo.getId()>=0 && !this.movimientoactivofijo.getIsNew()) {						
						this.isEsNuevoMovimientoActivoFijo=false;
						
					} else {
						this.isEsNuevoMovimientoActivoFijo=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoMovimientoActivoFijo(esRelaciones);						
				
				this.seleccionarMovimientoActivoFijo(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.movimientoactivofijo.getId()<0) {
					this.isEsNuevoMovimientoActivoFijo=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarMovimientoActivoFijo(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarMovimientoActivoFijo(evt,rowIndex);
				}	
				
				if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion MovimientoActivoFijo: " + this.dDif); 
					}
				}								
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarMovimientoActivoFijo(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.movimientoactivofijo)) {
					if(this.movimientoactivofijo.getId()>0) {
						this.movimientoactivofijo.setIsDeleted(true);
						
						this.movimientoactivofijosEliminados.add(this.movimientoactivofijo);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.movimientoactivofijoLogic.getMovimientoActivoFijos().remove(this.movimientoactivofijo);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijos.remove(this.movimientoactivofijo);				
					}
					
					
					((MovimientoActivoFijoModel) this.jTableDatosMovimientoActivoFijo.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarMovimientoActivoFijo(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoMovimientoActivoFijo) {
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosMovimientoActivoFijo.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosMovimientoActivoFijo.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijo);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_empresaMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_empresaMovimientoActivoFijo) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.movimientoactivofijo.getid_empresa());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(movimientoactivofijo.getEmpresa()!=null) {
							this.empresasForeignKey.add(movimientoactivofijo.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.movimientoactivofijo.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_sucursalMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_sucursalMovimientoActivoFijo) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.movimientoactivofijo.getid_sucursal());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(movimientoactivofijo.getSucursal()!=null) {
							this.sucursalsForeignKey.add(movimientoactivofijo.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.movimientoactivofijo.getid_sucursal(),false,"Formulario");

					//Usuario
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_usuarioMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_usuarioMovimientoActivoFijo) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.movimientoactivofijo.getid_usuario());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(movimientoactivofijo.getUsuario()!=null) {
							this.usuariosForeignKey.add(movimientoactivofijo.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.movimientoactivofijo.getid_usuario(),false,"Formulario");

					//EmpresaOrigen
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_empresa_origenMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_empresa_origenMovimientoActivoFijo) {
						//this.cargarCombosEmpresaOrigensForeignKeyLista(" where id="+this.movimientoactivofijo.getid_empresa_origen());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.empresaorigensForeignKey=new ArrayList<Empresa>();

						if(movimientoactivofijo.getEmpresaOrigen()!=null) {
							this.empresaorigensForeignKey.add(movimientoactivofijo.getEmpresaOrigen());
						}

						this.addItemDefectoCombosForeignKeyEmpresaOrigen();
						this.cargarCombosFrameEmpresaOrigensForeignKey("Todos");
					}
					this.setActualEmpresaOrigenForeignKey(this.movimientoactivofijo.getid_empresa_origen(),false,"Formulario");

					//SucursalOrigen
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_origenMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_sucursal_origenMovimientoActivoFijo) {
						//this.cargarCombosSucursalOrigensForeignKeyLista(" where id="+this.movimientoactivofijo.getid_sucursal_origen());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.sucursalorigensForeignKey=new ArrayList<Sucursal>();

						if(movimientoactivofijo.getSucursalOrigen()!=null) {
							this.sucursalorigensForeignKey.add(movimientoactivofijo.getSucursalOrigen());
						}

						this.addItemDefectoCombosForeignKeySucursalOrigen();
						this.cargarCombosFrameSucursalOrigensForeignKey("Todos");
					}
					this.setActualSucursalOrigenForeignKey(this.movimientoactivofijo.getid_sucursal_origen(),false,"Formulario");

					//DetalleActivoFijoOrigen
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_origenMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_detalle_activo_fijo_origenMovimientoActivoFijo) {
						//this.cargarCombosDetalleActivoFijoOrigensForeignKeyLista(" where id="+this.movimientoactivofijo.getid_detalle_activo_fijo_origen());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.detalleactivofijoorigensForeignKey=new ArrayList<DetalleActivoFijo>();

						if(movimientoactivofijo.getDetalleActivoFijoOrigen()!=null) {
							this.detalleactivofijoorigensForeignKey.add(movimientoactivofijo.getDetalleActivoFijoOrigen());
						}

						this.addItemDefectoCombosForeignKeyDetalleActivoFijoOrigen();
						this.cargarCombosFrameDetalleActivoFijoOrigensForeignKey("Todos");
					}
					this.setActualDetalleActivoFijoOrigenForeignKey(this.movimientoactivofijo.getid_detalle_activo_fijo_origen(),false,"Formulario");

					//EmpresaDestino
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_empresa_destinoMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_empresa_destinoMovimientoActivoFijo) {
						//this.cargarCombosEmpresaDestinosForeignKeyLista(" where id="+this.movimientoactivofijo.getid_empresa_destino());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.empresadestinosForeignKey=new ArrayList<Empresa>();

						if(movimientoactivofijo.getEmpresaDestino()!=null) {
							this.empresadestinosForeignKey.add(movimientoactivofijo.getEmpresaDestino());
						}

						this.addItemDefectoCombosForeignKeyEmpresaDestino();
						this.cargarCombosFrameEmpresaDestinosForeignKey("Todos");
					}
					this.setActualEmpresaDestinoForeignKey(this.movimientoactivofijo.getid_empresa_destino(),false,"Formulario");

					//SucursalDestino
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_sucursal_destinoMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_sucursal_destinoMovimientoActivoFijo) {
						//this.cargarCombosSucursalDestinosForeignKeyLista(" where id="+this.movimientoactivofijo.getid_sucursal_destino());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.sucursaldestinosForeignKey=new ArrayList<Sucursal>();

						if(movimientoactivofijo.getSucursalDestino()!=null) {
							this.sucursaldestinosForeignKey.add(movimientoactivofijo.getSucursalDestino());
						}

						this.addItemDefectoCombosForeignKeySucursalDestino();
						this.cargarCombosFrameSucursalDestinosForeignKey("Todos");
					}
					this.setActualSucursalDestinoForeignKey(this.movimientoactivofijo.getid_sucursal_destino(),false,"Formulario");

					//DetalleActivoFijoDestino
					if(!this.movimientoactivofijoConstantesFunciones.cargarid_detalle_activo_fijo_destinoMovimientoActivoFijo || this.movimientoactivofijoConstantesFunciones.event_dependid_detalle_activo_fijo_destinoMovimientoActivoFijo) {
						//this.cargarCombosDetalleActivoFijoDestinosForeignKeyLista(" where id="+this.movimientoactivofijo.getid_detalle_activo_fijo_destino());
									//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
						this.detalleactivofijodestinosForeignKey=new ArrayList<DetalleActivoFijo>();

						if(movimientoactivofijo.getDetalleActivoFijoDestino()!=null) {
							this.detalleactivofijodestinosForeignKey.add(movimientoactivofijo.getDetalleActivoFijoDestino());
						}

						this.addItemDefectoCombosForeignKeyDetalleActivoFijoDestino();
						this.cargarCombosFrameDetalleActivoFijoDestinosForeignKey("Todos");
					}
					this.setActualDetalleActivoFijoDestinoForeignKey(this.movimientoactivofijo.getid_detalle_activo_fijo_destino(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesMovimientoActivoFijo("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesMovimientoActivoFijo(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoMovimientoActivoFijo(movimientoactivofijo,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioMovimientoActivoFijo(movimientoactivofijo);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyMovimientoActivoFijo(movimientoactivofijo,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyMovimientoActivoFijo(movimientoactivofijo);
	}
	
	public void setVariablesObjetoActualToFormularioMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setText(movimientoactivofijo.getId().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setText(movimientoactivofijo.getsecuencial());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setDate(movimientoactivofijo.getfecha());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setText(movimientoactivofijo.getnumero_documento());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setText(movimientoactivofijo.getcosto().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setText(movimientoactivofijo.getdepreciacion().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setText(movimientoactivofijo.getcosto_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setText(movimientoactivofijo.getdepreciacion_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setText(movimientoactivofijo.getrazon());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setText(movimientoactivofijo.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,MovimientoActivoFijo movimientoactivofijoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,movimientoactivofijoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,MovimientoActivoFijo movimientoactivofijoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				movimientoactivofijoLocal=this.movimientoactivofijo;
			} else {
				movimientoactivofijoLocal=this.movimientoactivofijoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(movimientoactivofijoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoMovimientoActivoFijo(movimientoactivofijoLocal,true);
					
					if(movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(movimientoactivofijoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(movimientoactivofijoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(movimientoactivofijo,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(movimientoactivofijo);
	}
	
	public void setVariablesFormularioToObjetoActualMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(movimientoactivofijo,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.getText()==null || this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.getText()=="" || this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.getText()=="Id") {
				this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setText("0");
			}

			if(conColumnasBase) {movimientoactivofijo.setId(Long.parseLong(this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelIdMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setsecuencial(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelsecuencialMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setfecha(this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelfechaMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setnumero_documento(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelnumero_documentoMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setcosto(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_COSTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcostoMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setdepreciacion(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacionMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setcosto_origen(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelcosto_origenMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setdepreciacion_origen(Double.parseDouble(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldepreciacion_origenMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setrazon(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_RAZON+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelrazonMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			movimientoactivofijo.setdescripcion(this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabeldescripcionMovimientoActivoFijo,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijoBean,MovimientoActivoFijo movimientoactivofijo,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_empresa_origen()!=null && !movimientoactivofijoBean.getid_empresa_origen().equals(-1L))) {movimientoactivofijo.setid_empresa_origen(movimientoactivofijoBean.getid_empresa_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_sucursal_origen()!=null && !movimientoactivofijoBean.getid_sucursal_origen().equals(-1L))) {movimientoactivofijo.setid_sucursal_origen(movimientoactivofijoBean.getid_sucursal_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_detalle_activo_fijo_origen()!=null && !movimientoactivofijoBean.getid_detalle_activo_fijo_origen().equals(-1L))) {movimientoactivofijo.setid_detalle_activo_fijo_origen(movimientoactivofijoBean.getid_detalle_activo_fijo_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_empresa_destino()!=null && !movimientoactivofijoBean.getid_empresa_destino().equals(-1L))) {movimientoactivofijo.setid_empresa_destino(movimientoactivofijoBean.getid_empresa_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_sucursal_destino()!=null && !movimientoactivofijoBean.getid_sucursal_destino().equals(-1L))) {movimientoactivofijo.setid_sucursal_destino(movimientoactivofijoBean.getid_sucursal_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoBean.getid_detalle_activo_fijo_destino()!=null && !movimientoactivofijoBean.getid_detalle_activo_fijo_destino().equals(-1L))) {movimientoactivofijo.setid_detalle_activo_fijo_destino(movimientoactivofijoBean.getid_detalle_activo_fijo_destino());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijoOrigen,MovimientoActivoFijo movimientoactivofijo,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && movimientoactivofijoOrigen.getId()!=null && !movimientoactivofijoOrigen.getId().equals(0L))) {movimientoactivofijo.setId(movimientoactivofijoOrigen.getId());}}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getsecuencial()!=null && !movimientoactivofijoOrigen.getsecuencial().equals(""))) {movimientoactivofijo.setsecuencial(movimientoactivofijoOrigen.getsecuencial());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_empresa_origen()!=null && !movimientoactivofijoOrigen.getid_empresa_origen().equals(-1L))) {movimientoactivofijo.setid_empresa_origen(movimientoactivofijoOrigen.getid_empresa_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_sucursal_origen()!=null && !movimientoactivofijoOrigen.getid_sucursal_origen().equals(-1L))) {movimientoactivofijo.setid_sucursal_origen(movimientoactivofijoOrigen.getid_sucursal_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_detalle_activo_fijo_origen()!=null && !movimientoactivofijoOrigen.getid_detalle_activo_fijo_origen().equals(-1L))) {movimientoactivofijo.setid_detalle_activo_fijo_origen(movimientoactivofijoOrigen.getid_detalle_activo_fijo_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_empresa_destino()!=null && !movimientoactivofijoOrigen.getid_empresa_destino().equals(-1L))) {movimientoactivofijo.setid_empresa_destino(movimientoactivofijoOrigen.getid_empresa_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_sucursal_destino()!=null && !movimientoactivofijoOrigen.getid_sucursal_destino().equals(-1L))) {movimientoactivofijo.setid_sucursal_destino(movimientoactivofijoOrigen.getid_sucursal_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getid_detalle_activo_fijo_destino()!=null && !movimientoactivofijoOrigen.getid_detalle_activo_fijo_destino().equals(-1L))) {movimientoactivofijo.setid_detalle_activo_fijo_destino(movimientoactivofijoOrigen.getid_detalle_activo_fijo_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getfecha()!=null && !movimientoactivofijoOrigen.getfecha().equals(new Date()))) {movimientoactivofijo.setfecha(movimientoactivofijoOrigen.getfecha());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getnumero_documento()!=null && !movimientoactivofijoOrigen.getnumero_documento().equals(""))) {movimientoactivofijo.setnumero_documento(movimientoactivofijoOrigen.getnumero_documento());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getcosto()!=null && !movimientoactivofijoOrigen.getcosto().equals(0.0))) {movimientoactivofijo.setcosto(movimientoactivofijoOrigen.getcosto());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getdepreciacion()!=null && !movimientoactivofijoOrigen.getdepreciacion().equals(0.0))) {movimientoactivofijo.setdepreciacion(movimientoactivofijoOrigen.getdepreciacion());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getcosto_origen()!=null && !movimientoactivofijoOrigen.getcosto_origen().equals(0.0))) {movimientoactivofijo.setcosto_origen(movimientoactivofijoOrigen.getcosto_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getdepreciacion_origen()!=null && !movimientoactivofijoOrigen.getdepreciacion_origen().equals(0.0))) {movimientoactivofijo.setdepreciacion_origen(movimientoactivofijoOrigen.getdepreciacion_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getrazon()!=null && !movimientoactivofijoOrigen.getrazon().equals(""))) {movimientoactivofijo.setrazon(movimientoactivofijoOrigen.getrazon());}
			if(conDefault || (!conDefault && movimientoactivofijoOrigen.getdescripcion()!=null && !movimientoactivofijoOrigen.getdescripcion().equals(""))) {movimientoactivofijo.setdescripcion(movimientoactivofijoOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setText(movimientoactivofijo.getId().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setText(movimientoactivofijo.getsecuencial());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setDate(movimientoactivofijo.getfecha());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setText(movimientoactivofijo.getnumero_documento());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setText(movimientoactivofijo.getcosto().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setText(movimientoactivofijo.getdepreciacion().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setText(movimientoactivofijo.getcosto_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setText(movimientoactivofijo.getdepreciacion_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setText(movimientoactivofijo.getrazon());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setText(movimientoactivofijo.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioMovimientoActivoFijo(MovimientoActivoFijoBean movimientoactivofijoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setText(movimientoactivofijoBean.getId().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setText(movimientoactivofijoBean.getsecuencial());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setDate(movimientoactivofijoBean.getfecha());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setText(movimientoactivofijoBean.getnumero_documento());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setText(movimientoactivofijoBean.getcosto().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setText(movimientoactivofijoBean.getdepreciacion().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setText(movimientoactivofijoBean.getcosto_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setText(movimientoactivofijoBean.getdepreciacion_origen().toString());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setText(movimientoactivofijoBean.getrazon());
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setText(movimientoactivofijoBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanMovimientoActivoFijo(MovimientoActivoFijoParameterReturnGeneral movimientoactivofijoReturnGeneral,MovimientoActivoFijoBean movimientoactivofijoBean,Boolean conDefault) throws Exception { 
		try {
			MovimientoActivoFijo movimientoactivofijoLocal=new MovimientoActivoFijo();
			
			movimientoactivofijoLocal=movimientoactivofijoReturnGeneral.getMovimientoActivoFijo();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && movimientoactivofijoLocal.getId()!=null && !movimientoactivofijoLocal.getId().equals(0L))) {movimientoactivofijoBean.setId(movimientoactivofijoLocal.getId());}}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getsecuencial()!=null && !movimientoactivofijoLocal.getsecuencial().equals(""))) {movimientoactivofijoBean.setsecuencial(movimientoactivofijoLocal.getsecuencial());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_empresa_origen()!=null && !movimientoactivofijoLocal.getid_empresa_origen().equals(-1L))) {movimientoactivofijoBean.setid_empresa_origen(movimientoactivofijoLocal.getid_empresa_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_sucursal_origen()!=null && !movimientoactivofijoLocal.getid_sucursal_origen().equals(-1L))) {movimientoactivofijoBean.setid_sucursal_origen(movimientoactivofijoLocal.getid_sucursal_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_detalle_activo_fijo_origen()!=null && !movimientoactivofijoLocal.getid_detalle_activo_fijo_origen().equals(-1L))) {movimientoactivofijoBean.setid_detalle_activo_fijo_origen(movimientoactivofijoLocal.getid_detalle_activo_fijo_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_empresa_destino()!=null && !movimientoactivofijoLocal.getid_empresa_destino().equals(-1L))) {movimientoactivofijoBean.setid_empresa_destino(movimientoactivofijoLocal.getid_empresa_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_sucursal_destino()!=null && !movimientoactivofijoLocal.getid_sucursal_destino().equals(-1L))) {movimientoactivofijoBean.setid_sucursal_destino(movimientoactivofijoLocal.getid_sucursal_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getid_detalle_activo_fijo_destino()!=null && !movimientoactivofijoLocal.getid_detalle_activo_fijo_destino().equals(-1L))) {movimientoactivofijoBean.setid_detalle_activo_fijo_destino(movimientoactivofijoLocal.getid_detalle_activo_fijo_destino());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getfecha()!=null && !movimientoactivofijoLocal.getfecha().equals(new Date()))) {movimientoactivofijoBean.setfecha(movimientoactivofijoLocal.getfecha());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getnumero_documento()!=null && !movimientoactivofijoLocal.getnumero_documento().equals(""))) {movimientoactivofijoBean.setnumero_documento(movimientoactivofijoLocal.getnumero_documento());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getcosto()!=null && !movimientoactivofijoLocal.getcosto().equals(0.0))) {movimientoactivofijoBean.setcosto(movimientoactivofijoLocal.getcosto());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getdepreciacion()!=null && !movimientoactivofijoLocal.getdepreciacion().equals(0.0))) {movimientoactivofijoBean.setdepreciacion(movimientoactivofijoLocal.getdepreciacion());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getcosto_origen()!=null && !movimientoactivofijoLocal.getcosto_origen().equals(0.0))) {movimientoactivofijoBean.setcosto_origen(movimientoactivofijoLocal.getcosto_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getdepreciacion_origen()!=null && !movimientoactivofijoLocal.getdepreciacion_origen().equals(0.0))) {movimientoactivofijoBean.setdepreciacion_origen(movimientoactivofijoLocal.getdepreciacion_origen());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getrazon()!=null && !movimientoactivofijoLocal.getrazon().equals(""))) {movimientoactivofijoBean.setrazon(movimientoactivofijoLocal.getrazon());}
			if(conDefault || (!conDefault && movimientoactivofijoLocal.getdescripcion()!=null && !movimientoactivofijoLocal.getdescripcion().equals(""))) {movimientoactivofijoBean.setdescripcion(movimientoactivofijoLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxMovimientoActivoFijoGenerico(Long idMovimientoActivoFijoSeleccionado,JComboBox jComboBoxMovimientoActivoFijo,List<MovimientoActivoFijo> movimientoactivofijosLocal)throws Exception {
		try {
			MovimientoActivoFijo  movimientoactivofijoTemp=null;

			for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosLocal) {
				if(movimientoactivofijoAux.getId()!=null && movimientoactivofijoAux.getId().equals(idMovimientoActivoFijoSeleccionado)) {
					movimientoactivofijoTemp=movimientoactivofijoAux;
					break;
				}
			}

			jComboBoxMovimientoActivoFijo.setSelectedItem(movimientoactivofijoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxMovimientoActivoFijoGenerico(JComboBox jComboBoxMovimientoActivoFijo,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxMovimientoActivoFijo.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxMovimientoActivoFijo.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxMovimientoActivoFijo.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxMovimientoActivoFijo.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxMovimientoActivoFijo.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxMovimientoActivoFijo.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxMovimientoActivoFijo.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxMovimientoActivoFijo.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxMovimientoActivoFijo.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxMovimientoActivoFijo.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoactivofijo=(MovimientoActivoFijo) movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			movimientoactivofijo =(MovimientoActivoFijo) movimientoactivofijos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getusuario_descripcion();
			}
		}

		if(sTipo.equals("EmpresaOrigen")) {
			//sDescripcion=this.getActualEmpresaOrigenForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getempresaorigen_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaOrigenForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getempresaorigen_descripcion();
			}
		}

		if(sTipo.equals("SucursalOrigen")) {
			//sDescripcion=this.getActualSucursalOrigenForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getsucursalorigen_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalOrigenForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getsucursalorigen_descripcion();
			}
		}

		if(sTipo.equals("DetalleActivoFijoOrigen")) {
			//sDescripcion=this.getActualDetalleActivoFijoOrigenForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getdetalleactivofijoorigen_descripcion();
			} else {
				//sDescripcion=this.getActualDetalleActivoFijoOrigenForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getdetalleactivofijoorigen_descripcion();
			}
		}

		if(sTipo.equals("EmpresaDestino")) {
			//sDescripcion=this.getActualEmpresaDestinoForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getempresadestino_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaDestinoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getempresadestino_descripcion();
			}
		}

		if(sTipo.equals("SucursalDestino")) {
			//sDescripcion=this.getActualSucursalDestinoForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getsucursaldestino_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalDestinoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getsucursaldestino_descripcion();
			}
		}

		if(sTipo.equals("DetalleActivoFijoDestino")) {
			//sDescripcion=this.getActualDetalleActivoFijoDestinoForeignKeyDescripcion((Long)value);
			if(!movimientoactivofijo.getIsNew() && !movimientoactivofijo.getIsChanged() && !movimientoactivofijo.getIsDeleted()) {
				sDescripcion=movimientoactivofijo.getdetalleactivofijodestino_descripcion();
			} else {
				//sDescripcion=this.getActualDetalleActivoFijoDestinoForeignKeyDescripcion((Long)value);
				sDescripcion=movimientoactivofijo.getdetalleactivofijodestino_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		MovimientoActivoFijo movimientoactivofijoRow=new MovimientoActivoFijo();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoactivofijoRow=(MovimientoActivoFijo) movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			movimientoactivofijoRow=(MovimientoActivoFijo) movimientoactivofijos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualMovimientoActivoFijo(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));			
			this.jButtonDuplicarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaDuplicarMovimientoActivoFijo && this.isPermisoDuplicarMovimientoActivoFijo));			
			this.jButtonCopiarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaCopiarMovimientoActivoFijo && this.isPermisoCopiarMovimientoActivoFijo));
			this.jButtonVerFormMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaVerFormMovimientoActivoFijo && this.isPermisoVerFormMovimientoActivoFijo));
			
			this.jButtonAbrirOrderByMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));			
			
			this.jButtonNuevoRelacionesMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));			
			this.jButtonNuevoGuardarCambiosMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaModificarMovimientoActivoFijo && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaActualizarMovimientoActivoFijo && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaEliminarMovimientoActivoFijo && this.isPermisoEliminarMovimientoActivoFijo));
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.setVisible(this.isVisibilidadCeldaCancelarMovimientoActivoFijo);							
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));			
			
			}
						
			this.jButtonGuardarCambiosTablaMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));						
			this.jButtonDuplicarToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaDuplicarMovimientoActivoFijo && this.isPermisoDuplicarMovimientoActivoFijo));						
			this.jButtonCopiarToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaCopiarMovimientoActivoFijo && this.isPermisoCopiarMovimientoActivoFijo));			
			this.jButtonVerFormToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaVerFormMovimientoActivoFijo && this.isPermisoVerFormMovimientoActivoFijo));			
			this.jButtonAbrirOrderByToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));
			this.jButtonNuevoRelacionesToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));			
			this.jButtonNuevoGuardarCambiosToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));			
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaModificarMovimientoActivoFijo && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaActualizarMovimientoActivoFijo  && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaEliminarMovimientoActivoFijo && this.isPermisoEliminarMovimientoActivoFijo));
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarToolBarMovimientoActivoFijo.setVisible(this.isVisibilidadCeldaCancelarMovimientoActivoFijo);				
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));			
			this.jMenuItemDuplicarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaDuplicarMovimientoActivoFijo && this.isPermisoDuplicarMovimientoActivoFijo));			
			this.jMenuItemCopiarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaCopiarMovimientoActivoFijo && this.isPermisoCopiarMovimientoActivoFijo));			
			this.jMenuItemVerFormMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaVerFormMovimientoActivoFijo && this.isPermisoVerFormMovimientoActivoFijo));			
			this.jMenuItemAbrirOrderByMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));			
			//this.jMenuItemMostrarOcultarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));
			this.jMenuItemDetalleAbrirOrderByMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));			
			//this.jMenuItemDetalleMostrarOcultarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaOrdenMovimientoActivoFijo && this.isPermisoOrdenMovimientoActivoFijo));			
			this.jMenuItemNuevoRelacionesMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo));			
			this.jMenuItemNuevoGuardarCambiosMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaNuevoMovimientoActivoFijo && this.isPermisoNuevoMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));									
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemModificarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaModificarMovimientoActivoFijo && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemActualizarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaActualizarMovimientoActivoFijo && this.isPermisoActualizarMovimientoActivoFijo));	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemEliminarMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaEliminarMovimientoActivoFijo && this.isPermisoEliminarMovimientoActivoFijo));
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemCancelarMovimientoActivoFijo.setVisible(this.isVisibilidadCeldaCancelarMovimientoActivoFijo);				
			}
			
			this.jMenuItemGuardarCambiosMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));						
			this.jMenuItemGuardarCambiosTablaMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=this.jButtonNuevoMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaDuplicarMovimientoActivoFijo=this.jButtonDuplicarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaCopiarMovimientoActivoFijo=this.jButtonCopiarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaVerFormMovimientoActivoFijo=this.jButtonVerFormMovimientoActivoFijo.isVisible();
			
			this.isVisibilidadCeldaOrdenMovimientoActivoFijo=this.jButtonAbrirOrderByMovimientoActivoFijo.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=this.jButtonNuevoRelacionesMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=this.jButtonModificarMovimientoActivoFijo.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaGuardarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=this.jButtonGuardarCambiosTablaMovimientoActivoFijo.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=this.jButtonNuevoToolBarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=this.jButtonNuevoRelacionesToolBarMovimientoActivoFijo.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarToolBarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarToolBarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarToolBarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarToolBarMovimientoActivoFijo.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarMovimientoActivoFijo=this.jButtonGuardarCambiosToolBarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=this.jButtonGuardarCambiosTablaToolBarMovimientoActivoFijo.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=this.jMenuItemNuevoMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=this.jMenuItemNuevoRelacionesMovimientoActivoFijo.isVisible();
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemModificarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemActualizarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemEliminarMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemCancelarMovimientoActivoFijo.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarMovimientoActivoFijo=this.jMenuItemGuardarCambiosMovimientoActivoFijo.isVisible();
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=this.jMenuItemGuardarCambiosTablaMovimientoActivoFijo.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesMovimientoActivoFijo(Boolean esInicializar) {
		if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
				//if(this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesMovimientoActivoFijo();
			}
			
			this.inicializarActualizarBindingBotonesManualMovimientoActivoFijo(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualMovimientoActivoFijo() {
		this.jButtonNuevoMovimientoActivoFijo.setVisible(this.isPermisoNuevoMovimientoActivoFijo);			
		this.jButtonDuplicarMovimientoActivoFijo.setVisible(this.isPermisoDuplicarMovimientoActivoFijo);			
		this.jButtonCopiarMovimientoActivoFijo.setVisible(this.isPermisoCopiarMovimientoActivoFijo);			
		this.jButtonVerFormMovimientoActivoFijo.setVisible(this.isPermisoVerFormMovimientoActivoFijo);			
		
		this.jButtonAbrirOrderByMovimientoActivoFijo.setVisible(this.isPermisoOrdenMovimientoActivoFijo);					
		
		this.jButtonNuevoRelacionesMovimientoActivoFijo.setVisible(this.isPermisoNuevoMovimientoActivoFijo);			
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarMovimientoActivoFijo.setVisible(this.isPermisoActualizarMovimientoActivoFijo);	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.setVisible(this.isPermisoActualizarMovimientoActivoFijo);	
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.setVisible(this.isPermisoEliminarMovimientoActivoFijo);
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.setVisible(this.isVisibilidadCeldaCancelarMovimientoActivoFijo);						
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.setVisible(this.isPermisoGuardarCambiosMovimientoActivoFijo);							
		}
		
		this.jButtonGuardarCambiosTablaMovimientoActivoFijo.setVisible(this.isPermisoActualizarMovimientoActivoFijo);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleMovimientoActivoFijo() {
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarMovimientoActivoFijo.setVisible(this.isPermisoActualizarMovimientoActivoFijo);	
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.setVisible(this.isPermisoActualizarMovimientoActivoFijo);	
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.setVisible(this.isPermisoEliminarMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.setVisible(this.isVisibilidadCeldaCancelarMovimientoActivoFijo);							
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.setVisible((this.isVisibilidadCeldaGuardarMovimientoActivoFijo && this.isPermisoGuardarCambiosMovimientoActivoFijo));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosMovimientoActivoFijo() {
		if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualMovimientoActivoFijo();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesMovimientoActivoFijo() {
	}
	
	public void jTableDatosMovimientoActivoFijoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarMovimientoActivoFijo(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.movimientoactivofijo.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.movimientoactivofijo.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.movimientoactivofijo.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.movimientoactivofijo.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencialMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getsecuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial like '%"+this.movimientoactivofijo.getsecuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresa_origenMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresaorigen=true;

			idTienePermisoempresaorigen=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresaorigen) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.empresaorigenBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaorigenBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaorigenBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_empresa_origen()!=null) {
					this.empresaorigenBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaorigenBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_empresa_origen());
					this.empresaorigenBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaorigenBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaorigenBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaorigenBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderempresaorigen=(TitledBorder)this.empresaorigenBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresaorigen.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresa_origenMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_empresa_origen()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa_origen = "+this.movimientoactivofijo.getid_empresa_origen().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursal_origenMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursalorigen=true;

			idTienePermisosucursalorigen=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursalorigen) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.sucursalorigenBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalorigenBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalorigenBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_sucursal_origen()!=null) {
					this.sucursalorigenBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalorigenBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_sucursal_origen());
					this.sucursalorigenBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalorigenBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalorigenBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalorigenBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBordersucursalorigen=(TitledBorder)this.sucursalorigenBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursalorigen.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursal_origenMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_sucursal_origen()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal_origen = "+this.movimientoactivofijo.getid_sucursal_origen().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisodetalleactivofijoorigen=true;

			idTienePermisodetalleactivofijoorigen=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(DetalleActivoFijoConstantesFunciones.CLASSNAME);

			if(idTienePermisodetalleactivofijoorigen) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.detalleactivofijoorigenBeanSwingJInternalFrame=new DetalleActivoFijoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.detalleactivofijoorigenBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.detalleactivofijoorigenBeanSwingJInternalFrame.getDetalleActivoFijoLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_detalle_activo_fijo_origen()!=null) {
					this.detalleactivofijoorigenBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.detalleactivofijoorigenBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_detalle_activo_fijo_origen());
					this.detalleactivofijoorigenBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.detalleactivofijoorigenBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.detalleactivofijoorigenBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleActivoFijo();
				}

				JInternalFrameBase jinternalFrame =this.detalleactivofijoorigenBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderdetalleactivofijoorigen=(TitledBorder)this.detalleactivofijoorigenBeanSwingJInternalFrame.jScrollPanelDatosDetalleActivoFijo.getBorder();

				titledBorderdetalleactivofijoorigen.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Detalle Activo Fijo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_detalle_activo_fijo_origen()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_detalle_activo_fijo_origen = "+this.movimientoactivofijo.getid_detalle_activo_fijo_origen().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresa_destinoMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresadestino=true;

			idTienePermisoempresadestino=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresadestino) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.empresadestinoBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresadestinoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresadestinoBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_empresa_destino()!=null) {
					this.empresadestinoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresadestinoBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_empresa_destino());
					this.empresadestinoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresadestinoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresadestinoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresadestinoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderempresadestino=(TitledBorder)this.empresadestinoBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresadestino.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresa_destinoMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_empresa_destino()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa_destino = "+this.movimientoactivofijo.getid_empresa_destino().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursal_destinoMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursaldestino=true;

			idTienePermisosucursaldestino=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursaldestino) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.sucursaldestinoBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursaldestinoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursaldestinoBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_sucursal_destino()!=null) {
					this.sucursaldestinoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursaldestinoBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_sucursal_destino());
					this.sucursaldestinoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursaldestinoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursaldestinoBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursaldestinoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBordersucursaldestino=(TitledBorder)this.sucursaldestinoBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursaldestino.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursal_destinoMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_sucursal_destino()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal_destino = "+this.movimientoactivofijo.getid_sucursal_destino().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisodetalleactivofijodestino=true;

			idTienePermisodetalleactivofijodestino=this.tienePermisosUsuarioEnPaginaWebMovimientoActivoFijo(DetalleActivoFijoConstantesFunciones.CLASSNAME);

			if(idTienePermisodetalleactivofijodestino) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosMovimientoActivoFijo.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosMovimientoActivoFijo.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);

				this.detalleactivofijodestinoBeanSwingJInternalFrame=new DetalleActivoFijoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.detalleactivofijodestinoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.detalleactivofijodestinoBeanSwingJInternalFrame.getDetalleActivoFijoLogic().setConnexion(this.movimientoactivofijoLogic.getConnexion());

				if(this.movimientoactivofijo.getid_detalle_activo_fijo_destino()!=null) {
					this.detalleactivofijodestinoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.detalleactivofijodestinoBeanSwingJInternalFrame.setIdActual(this.movimientoactivofijo.getid_detalle_activo_fijo_destino());
					this.detalleactivofijodestinoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.detalleactivofijodestinoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.detalleactivofijodestinoBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleActivoFijo();
				}

				JInternalFrameBase jinternalFrame =this.detalleactivofijodestinoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderMovimientoActivoFijo=(TitledBorder)this.jScrollPanelDatosMovimientoActivoFijo.getBorder();
				TitledBorder titledBorderdetalleactivofijodestino=(TitledBorder)this.detalleactivofijodestinoBeanSwingJInternalFrame.jScrollPanelDatosDetalleActivoFijo.getBorder();

				titledBorderdetalleactivofijodestino.setTitle(titledBorderMovimientoActivoFijo.getTitle() + " -> Detalle Activo Fijo");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getid_detalle_activo_fijo_destino()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_detalle_activo_fijo_destino = "+this.movimientoactivofijo.getid_detalle_activo_fijo_destino().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.movimientoactivofijo.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_documentoMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getnumero_documento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_documento like '%"+this.movimientoactivofijo.getnumero_documento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncostoMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getcosto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo = "+this.movimientoactivofijo.getcosto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondepreciacionMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getdepreciacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where depreciacion = "+this.movimientoactivofijo.getdepreciacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncosto_origenMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getcosto_origen()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where costo_origen = "+this.movimientoactivofijo.getcosto_origen().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondepreciacion_origenMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getdepreciacion_origen()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where depreciacion_origen = "+this.movimientoactivofijo.getdepreciacion_origen().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonrazonMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getrazon()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where razon like '%"+this.movimientoactivofijo.getrazon()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionMovimientoActivoFijoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.getmovimientoactivofijo(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.movimientoactivofijo==null) {
						this.movimientoactivofijo = new MovimientoActivoFijo();
					}

					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);
				}

				if(this.movimientoactivofijo.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.movimientoactivofijo.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingMovimientoActivoFijo(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdDetalleActivoFijoDestinoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdDetalleActivoFijoDestino();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdDetalleActivoFijoOrigenMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdDetalleActivoFijoOrigen();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdEmpresa();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDestinoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdEmpresaDestino();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaOrigenMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdEmpresaOrigen();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdSucursal();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDestinoMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdSucursalDestino();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalOrigenMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdSucursalOrigen();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioMovimientoActivoFijoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);

			this.getMovimientoActivoFijosFK_IdUsuario();

			this.inicializarActualizarBindingMovimientoActivoFijo(false);

			//if(MovimientoActivoFijoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.movimientoactivofijoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameMovimientoActivoFijo() {
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.setVisible(false);	    			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.dispose();
			this.jInternalFrameDetalleFormMovimientoActivoFijo=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
			this.jInternalFrameReporteDinamicoMovimientoActivoFijo.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoMovimientoActivoFijo.dispose();
			this.jInternalFrameReporteDinamicoMovimientoActivoFijo=null;
		}
		
		if(this.jInternalFrameImportacionMovimientoActivoFijo!=null) {
			this.jInternalFrameImportacionMovimientoActivoFijo.setVisible(false);	    			
			this.jInternalFrameImportacionMovimientoActivoFijo.dispose();
			this.jInternalFrameImportacionMovimientoActivoFijo=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessMovimientoActivoFijo();
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			
			if(sTipo.equals("NuevoMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarMovimientoActivoFijo")) {
				jButtonDuplicarMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarMovimientoActivoFijo")) {
				jButtonCopiarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("VerFormMovimientoActivoFijo")) {
				jButtonVerFormMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarMovimientoActivoFijo")) {
				jButtonDuplicarMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarMovimientoActivoFijo")) {
				jButtonDuplicarMovimientoActivoFijoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarMovimientoActivoFijo")) {
				jButtonModificarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarMovimientoActivoFijo")) {
				jButtonModificarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarMovimientoActivoFijo")) {
				jButtonModificarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarMovimientoActivoFijo")) {
				jButtonActualizarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarMovimientoActivoFijo")) {
				jButtonActualizarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarMovimientoActivoFijo")) {
				jButtonActualizarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("EliminarMovimientoActivoFijo")) {
				jButtonEliminarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarMovimientoActivoFijo")) {
				jButtonEliminarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarMovimientoActivoFijo")) {
				jButtonEliminarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("CancelarMovimientoActivoFijo")) {
				jButtonCancelarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarMovimientoActivoFijo")) {
				jButtonCancelarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarMovimientoActivoFijo")) {
				jButtonCancelarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("CerrarMovimientoActivoFijo")) {
				jButtonCerrarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarMovimientoActivoFijo")) {
				jButtonCerrarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarMovimientoActivoFijo")) {
				jButtonCerrarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarMovimientoActivoFijo")) {
				jButtonMostrarOcultarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarMovimientoActivoFijo")) {
				jButtonCancelarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarMovimientoActivoFijo")) {
				jButtonCopiarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarMovimientoActivoFijo")) {
				jButtonVerFormMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarMovimientoActivoFijo")) {
				jButtonCopiarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormMovimientoActivoFijo")) {
				jButtonVerFormMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionMovimientoActivoFijo")) {
				jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarMovimientoActivoFijo")) {
				jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionMovimientoActivoFijo")) {
				jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresMovimientoActivoFijo")) {
				jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarMovimientoActivoFijo")) {
				jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreMovimientoActivoFijo")) {
				jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesMovimientoActivoFijo")) {
				jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarMovimientoActivoFijo")) {
				jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesMovimientoActivoFijo")) {
				jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByMovimientoActivoFijo") || sTipo.equals("MenuItemDetalleAbrirOrderByMovimientoActivoFijo")) {
				jButtonAbrirOrderByMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarMovimientoActivoFijo") || sTipo.equals("MenuItemDetalleMostrarOcultarMovimientoActivoFijo")) {
				jButtonMostrarOcultarMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosMovimientoActivoFijo")) {
				jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarMovimientoActivoFijo")) {
				jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosMovimientoActivoFijo")) {
				jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoMovimientoActivoFijo")) {
				jButtonCerrarReporteDinamicoMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoMovimientoActivoFijo")) {
				jButtonGenerarReporteDinamicoMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoMovimientoActivoFijo")) {
				
				jButtonGenerarExcelReporteDinamicoMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionMovimientoActivoFijo")) {
				jButtonCerrarImportacionMovimientoActivoFijoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionMovimientoActivoFijo")) {
				
				jButtonGenerarImportacionMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionMovimientoActivoFijo")) {
				
				jButtonAbrirImportacionMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesMovimientoActivoFijo")) {
				jComboBoxTiposAccionesMovimientoActivoFijoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesMovimientoActivoFijo")) {
				jComboBoxTiposRelacionesMovimientoActivoFijoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioMovimientoActivoFijo")) {
				jComboBoxTiposAccionesMovimientoActivoFijoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarMovimientoActivoFijo")) {
				
				jComboBoxTiposSeleccionarMovimientoActivoFijoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralMovimientoActivoFijo")) {
				jTextFieldValorCampoGeneralMovimientoActivoFijoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByMovimientoActivoFijo")) {
				jButtonAbrirOrderByMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarMovimientoActivoFijo")) {
				jButtonAbrirOrderByMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByMovimientoActivoFijo")) {
				jButtonCerrarOrderByMovimientoActivoFijoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idMovimientoActivoFijoBusqueda")) {
				this.jButtonidMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresaMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresaMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursalMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursalMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioMovimientoActivoFijoUpdate")) {
				this.jButtonid_usuarioMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioMovimientoActivoFijoBusqueda")) {
				this.jButtonid_usuarioMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialMovimientoActivoFijoBusqueda")) {
				this.jButtonsecuencialMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresa_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresa_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresa_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresa_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursal_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursal_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresa_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresa_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresa_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresa_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursal_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursal_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaMovimientoActivoFijoBusqueda")) {
				this.jButtonfechaMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoMovimientoActivoFijoBusqueda")) {
				this.jButtonnumero_documentoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costoMovimientoActivoFijoBusqueda")) {
				this.jButtoncostoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("depreciacionMovimientoActivoFijoBusqueda")) {
				this.jButtondepreciacionMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_origenMovimientoActivoFijoBusqueda")) {
				this.jButtoncosto_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("depreciacion_origenMovimientoActivoFijoBusqueda")) {
				this.jButtondepreciacion_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("razonMovimientoActivoFijoBusqueda")) {
				this.jButtonrazonMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionMovimientoActivoFijoBusqueda")) {
				this.jButtondescripcionMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdDetalleActivoFijoDestinoMovimientoActivoFijo")) {
				this.jButtonFK_IdDetalleActivoFijoDestinoMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdDetalleActivoFijoOrigenMovimientoActivoFijo")) {
				this.jButtonFK_IdDetalleActivoFijoOrigenMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpresaDestinoMovimientoActivoFijo")) {
				this.jButtonFK_IdEmpresaDestinoMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpresaOrigenMovimientoActivoFijo")) {
				this.jButtonFK_IdEmpresaOrigenMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdSucursalDestinoMovimientoActivoFijo")) {
				this.jButtonFK_IdSucursalDestinoMovimientoActivoFijoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdSucursalOrigenMovimientoActivoFijo")) {
				this.jButtonFK_IdSucursalOrigenMovimientoActivoFijoActionPerformed(evt);
			}
			
			;
			
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessMovimientoActivoFijo();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			MovimientoActivoFijo movimientoactivofijoLocal=null;
			
			if(!this.getEsControlTabla()) {
				movimientoactivofijoLocal=this.movimientoactivofijo;
			} else {
				movimientoactivofijoLocal=this.movimientoactivofijoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
							
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
								
						
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
								
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
							
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
								
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
			
			this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosMovimientoActivoFijo")) {
					jCheckBoxSeleccionarTodosMovimientoActivoFijoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosMovimientoActivoFijo")) {
					jCheckBoxSeleccionadosMovimientoActivoFijoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarMovimientoActivoFijo")) {
					
				}
				
				


				
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
												
				
				


				
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.movimientoactivofijo);
				
				this.actualizarInformacion("INFO_PADRE",false,this.movimientoactivofijo);
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(MovimientoActivoFijo.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",MovimientoActivoFijo.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaMovimientoActivoFijoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.movimientoactivofijoAnterior =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarMovimientoActivoFijo")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosMovimientoActivoFijoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosMovimientoActivoFijo.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.movimientoactivofijo =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.movimientoactivofijo);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarMovimientoActivoFijo")) {
				
				}
				
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarMovimientoActivoFijo")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosMovimientoActivoFijo.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarMovimientoActivoFijo")) {
			
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessMovimientoActivoFijo();
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			if(sTipo.equals("NuevoMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarMovimientoActivoFijo")) {
				jButtonDuplicarMovimientoActivoFijoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarMovimientoActivoFijo")) {
				jButtonCopiarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormMovimientoActivoFijo")) {
				jButtonVerFormMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesMovimientoActivoFijo")) {
				jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarMovimientoActivoFijo")) {
				jButtonModificarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarMovimientoActivoFijo")) {
				jButtonActualizarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarMovimientoActivoFijo")) {
				jButtonEliminarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarMovimientoActivoFijo")) {
				jButtonCancelarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarMovimientoActivoFijo")) {
				jButtonCerrarMovimientoActivoFijoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosMovimientoActivoFijo")) {
				jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosMovimientoActivoFijo")) {
				jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByMovimientoActivoFijo")) {
				jButtonAbrirOrderByMovimientoActivoFijoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionMovimientoActivoFijo")) {
				jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresMovimientoActivoFijo")) {
				jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesMovimientoActivoFijo")) {
				jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idMovimientoActivoFijoBusqueda")) {
				this.jButtonidMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresaMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresaMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursalMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursalMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioMovimientoActivoFijoUpdate")) {
				this.jButtonid_usuarioMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioMovimientoActivoFijoBusqueda")) {
				this.jButtonid_usuarioMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencialMovimientoActivoFijoBusqueda")) {
				this.jButtonsecuencialMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresa_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresa_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresa_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresa_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursal_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursal_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_origenMovimientoActivoFijoUpdate")) {
				this.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda")) {
				this.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresa_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_empresa_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresa_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_empresa_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursal_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_sucursal_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursal_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_sucursal_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate")) {
				this.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda")) {
				this.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaMovimientoActivoFijoBusqueda")) {
				this.jButtonfechaMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_documentoMovimientoActivoFijoBusqueda")) {
				this.jButtonnumero_documentoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costoMovimientoActivoFijoBusqueda")) {
				this.jButtoncostoMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("depreciacionMovimientoActivoFijoBusqueda")) {
				this.jButtondepreciacionMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("costo_origenMovimientoActivoFijoBusqueda")) {
				this.jButtoncosto_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("depreciacion_origenMovimientoActivoFijoBusqueda")) {
				this.jButtondepreciacion_origenMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("razonMovimientoActivoFijoBusqueda")) {
				this.jButtonrazonMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionMovimientoActivoFijoBusqueda")) {
				this.jButtondescripcionMovimientoActivoFijoBusquedaActionPerformed(evt);
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessMovimientoActivoFijo();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameMovimientoActivoFijo")) {
				closingInternalFrameMovimientoActivoFijo();
				
			} else if(sTipo.equals("jButtonCancelarMovimientoActivoFijo")) {
				JInternalFrameBase jInternalFrameDetalleFormMovimientoActivoFijo = (JInternalFrameBase)evt.getSource();
	            	
	            MovimientoActivoFijoBeanSwingJInternalFrame jInternalFrameParent=(MovimientoActivoFijoBeanSwingJInternalFrame)jInternalFrameDetalleFormMovimientoActivoFijo.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarMovimientoActivoFijoActionPerformed(null);
			}
			
			MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.movimientoactivofijo,new Object(),this.movimientoactivofijoParameterGeneral,this.movimientoactivofijoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormMovimientoActivoFijo(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormMovimientoActivoFijo(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormMovimientoActivoFijo(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.movimientoactivofijo)) {
			if(!esControlTabla) {
				if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);			
				}
				
				if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.procesarEventosMovimientoActivoFijosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this.movimientoactivofijo,this.movimientoactivofijoParameterGeneral,this.isEsNuevoMovimientoActivoFijo,classes);//this.movimientoactivofijoLogic.getMovimientoActivoFijo()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral,this.movimientoactivofijoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanMovimientoActivoFijo(classes,this.movimientoactivofijoReturnGeneral,this.movimientoactivofijoBean,false);
					}
						
					if(this.movimientoactivofijoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo());	
					}
						
					if(this.movimientoactivofijoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo(),classes);//this.movimientoactivofijoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioMovimientoActivoFijo(this.movimientoactivofijo,classes);//this.movimientoactivofijoBean);									
				}
			
				if(MovimientoActivoFijoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualMovimientoActivoFijo(this.movimientoactivofijo,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysMovimientoActivoFijo(this.movimientoactivofijo);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.movimientoactivofijoAnterior!=null) {
						this.movimientoactivofijo=this.movimientoactivofijoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.procesarEventosMovimientoActivoFijosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this.movimientoactivofijo,this.movimientoactivofijoParameterGeneral,this.isEsNuevoMovimientoActivoFijo,classes);//this.movimientoactivofijoLogic.getMovimientoActivoFijo()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.movimientoactivofijoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.movimientoactivofijoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo(),movimientoactivofijoLogic.getMovimientoActivoFijos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo(),this.movimientoactivofijos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosMovimientoActivoFijo.repaint();
				
				//((AbstractTableModel) this.jTableDatosMovimientoActivoFijo.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosMovimientoActivoFijo();
			}
		}
	}
	
	public void actualizarVisualTableDatosMovimientoActivoFijo() throws Exception {
		
		MovimientoActivoFijoModel movimientoactivofijoModel=(MovimientoActivoFijoModel)this.jTableDatosMovimientoActivoFijo.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			movimientoactivofijoModel.movimientoactivofijos=this.movimientoactivofijoLogic.getMovimientoActivoFijos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			movimientoactivofijoModel.movimientoactivofijos=this.movimientoactivofijos;
		}
		
		
		((MovimientoActivoFijoModel) this.jTableDatosMovimientoActivoFijo.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaMovimientoActivoFijo() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getmovimientoactivofijoAnterior(),this.movimientoactivofijoLogic.getMovimientoActivoFijos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getmovimientoactivofijoAnterior(),this.movimientoactivofijos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosMovimientoActivoFijo();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoactivofijo,new Object(),generalEntityParameterGeneral,this.movimientoactivofijoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=MovimientoActivoFijoConstantesFunciones.getClassesRelationshipsOfMovimientoActivoFijo(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=MovimientoActivoFijoConstantesFunciones.getClassesRelationshipsFromStringsOfMovimientoActivoFijo(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormMovimientoActivoFijo(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				MovimientoActivoFijoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.movimientoactivofijo,new Object(),generalEntityParameterGeneral,this.movimientoactivofijoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioMovimientoActivoFijo(MovimientoActivoFijoBean movimientoactivofijoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanMovimientoActivoFijo(ArrayList<Classe> classes,MovimientoActivoFijoReturnGeneral movimientoactivofijoReturnGeneral,MovimientoActivoFijoBean movimientoactivofijoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.movimientoactivofijo)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo = new MovimientoActivoFijoDetalleFormJInternalFrame(jDesktopPane,this.movimientoactivofijoSessionBean.getConGuardarRelaciones(),this.movimientoactivofijoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.setVisible(false);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.setSelected(false);						
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.movimientoactivofijoLogic=this.movimientoactivofijoLogic;
		
		this.cargarCombosFrameForeignKeyMovimientoActivoFijo("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleMovimientoActivoFijo();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleMovimientoActivoFijo();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyMovimientoActivoFijo("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyMovimientoActivoFijo();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarMovimientoActivoFijo"));
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ModificarMovimientoActivoFijo"));

		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ModificarToolBarMovimientoActivoFijo"));
					
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemModificarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"MenuItemModificarMovimientoActivoFijo"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"ActualizarMovimientoActivoFijo"));
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ActualizarToolBarMovimientoActivoFijo"));
						
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemActualizarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemActualizarMovimientoActivoFijo"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"EliminarMovimientoActivoFijo"));
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"EliminarToolBarMovimientoActivoFijo"));
								
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemEliminarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemEliminarMovimientoActivoFijo"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CancelarMovimientoActivoFijo"));
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CancelarToolBarMovimientoActivoFijo"));
					
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemCancelarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemCancelarMovimientoActivoFijo"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemDetalleCerrarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarMovimientoActivoFijo"));		
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoActivoFijo"));
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoActivoFijo"));
		
		
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioMovimientoActivoFijo"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonidMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonsecuencialMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"secuencialMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonfechaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonnumero_documentoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncostoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacionMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncosto_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costo_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacion_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacion_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonrazonMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"razonMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondescripcionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoActivoFijoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesMovimientoActivoFijo"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameMovimientoActivoFijo"));
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarMovimientoActivoFijo"));
		}
		
		this.jTableDatosMovimientoActivoFijo.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarMovimientoActivoFijo"));
		
		this.jTableDatosMovimientoActivoFijo.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarMovimientoActivoFijo"));
		
		this.jButtonNuevoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"NuevoMovimientoActivoFijo"));
		
		this.jButtonDuplicarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"DuplicarMovimientoActivoFijo"));
		
		this.jButtonCopiarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"CopiarMovimientoActivoFijo"));
		
		this.jButtonVerFormMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"VerFormMovimientoActivoFijo"));
		
		
		this.jButtonNuevoToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"NuevoToolBarMovimientoActivoFijo"));
			
		this.jButtonDuplicarToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"DuplicarToolBarMovimientoActivoFijo"));
			
		this.jMenuItemNuevoMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemNuevoMovimientoActivoFijo"));
			
		this.jMenuItemDuplicarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarMovimientoActivoFijo"));		
		
		
		this.jButtonNuevoRelacionesMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"NuevoRelacionesMovimientoActivoFijo"));
		
		
		this.jButtonNuevoRelacionesToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarMovimientoActivoFijo"));
			
		this.jMenuItemNuevoRelacionesMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesMovimientoActivoFijo"));		
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ModificarMovimientoActivoFijo"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonModificarToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ModificarToolBarMovimientoActivoFijo"));
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemModificarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"MenuItemModificarMovimientoActivoFijo"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"ActualizarMovimientoActivoFijo"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonActualizarToolBarMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"ActualizarToolBarMovimientoActivoFijo"));
				
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemActualizarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemActualizarMovimientoActivoFijo"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"EliminarMovimientoActivoFijo"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonEliminarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"EliminarToolBarMovimientoActivoFijo"));
						
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemEliminarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemEliminarMovimientoActivoFijo"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CancelarMovimientoActivoFijo"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonCancelarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CancelarToolBarMovimientoActivoFijo"));
			
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemCancelarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemCancelarMovimientoActivoFijo"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarMovimientoActivoFijo"));		
		
		
		this.jButtonCerrarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CerrarMovimientoActivoFijo"));
		
		
		this.jButtonCerrarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CerrarToolBarMovimientoActivoFijo"));
			
		this.jMenuItemCerrarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemCerrarMovimientoActivoFijo"));
			
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jMenuItemDetalleCerrarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarMovimientoActivoFijo"));		
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosMovimientoActivoFijo"));
		}
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarMovimientoActivoFijo"));
		}
		
		this.jButtonCopiarToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CopiarToolBarMovimientoActivoFijo"));
			
		this.jButtonVerFormToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"VerFormToolBarMovimientoActivoFijo"));
		
		this.jMenuItemGuardarCambiosMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosMovimientoActivoFijo"));
			
		this.jMenuItemCopiarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemCopiarMovimientoActivoFijo"));		
		
		this.jMenuItemVerFormMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemVerFormMovimientoActivoFijo"));		
		
		
		this.jButtonGuardarCambiosTablaMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaMovimientoActivoFijo"));
		
		
		this.jButtonGuardarCambiosTablaToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarMovimientoActivoFijo"));
			
		this.jMenuItemGuardarCambiosTablaMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaMovimientoActivoFijo"));		
		
		
		
		this.jButtonRecargarInformacionMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"RecargarInformacionMovimientoActivoFijo"));
					
		this.jButtonRecargarInformacionToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarMovimientoActivoFijo"));
		
		this.jMenuItemRecargarInformacionMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionMovimientoActivoFijo"));		
		
		
		
		this.jButtonAnterioresMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"AnterioresMovimientoActivoFijo"));
		
		
		this.jButtonAnterioresToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"AnterioresToolBarMovimientoActivoFijo"));
		
		this.jMenuItemAnterioresMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresMovimientoActivoFijo"));		
		
		
		this.jButtonSiguientesMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"SiguientesMovimientoActivoFijo"));
		
		
		this.jButtonSiguientesToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"SiguientesToolBarMovimientoActivoFijo"));
			
		this.jMenuItemSiguientesMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesMovimientoActivoFijo"));
			
		this.jMenuItemAbrirOrderByMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByMovimientoActivoFijo"));
			
		this.jMenuItemMostrarOcultarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarMovimientoActivoFijo"));
			
		this.jMenuItemDetalleAbrirOrderByMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByMovimientoActivoFijo"));
			
		this.jMenuItemDetalleMostarOcultarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarMovimientoActivoFijo"));		
		
		
		this.jButtonNuevoGuardarCambiosMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosMovimientoActivoFijo"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarMovimientoActivoFijo"));
			
		this.jMenuItemNuevoGuardarCambiosMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosMovimientoActivoFijo"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosMovimientoActivoFijo.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosMovimientoActivoFijo"));

		this.jCheckBoxSeleccionadosMovimientoActivoFijo.addItemListener(new CheckBoxItemListener(this,"SeleccionadosMovimientoActivoFijo"));
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioMovimientoActivoFijo"));
		}
		
		
		this.jComboBoxTiposRelacionesMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"TiposRelacionesMovimientoActivoFijo"));
			
		this.jComboBoxTiposAccionesMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"TiposAccionesMovimientoActivoFijo"));
					
		this.jComboBoxTiposSeleccionarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"TiposSeleccionarMovimientoActivoFijo"));
			
		this.jTextFieldValorCampoGeneralMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralMovimientoActivoFijo"));		
		
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonidMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonsecuencialMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"secuencialMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonfechaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonnumero_documentoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncostoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacionMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncosto_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costo_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacion_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacion_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonrazonMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"razonMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondescripcionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoActivoFijoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoDestinoMovimientoActivoFijo"));

			this.jButtonFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoOrigenMovimientoActivoFijo"));

			this.jButtonFK_IdEmpresaDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdEmpresaDestinoMovimientoActivoFijo"));

			this.jButtonFK_IdEmpresaOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdEmpresaOrigenMovimientoActivoFijo"));

			this.jButtonFK_IdSucursalDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdSucursalDestinoMovimientoActivoFijo"));

			this.jButtonFK_IdSucursalOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdSucursalOrigenMovimientoActivoFijo"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoMovimientoActivoFijo!=null) {
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoActivoFijo"));
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoActivoFijo"));
				this.jInternalFrameReporteDinamicoMovimientoActivoFijo.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoActivoFijo"));
			}
			
			//this.jButtonCerrarReporteDinamicoMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoMovimientoActivoFijo"));				
			//this.jButtonGenerarReporteDinamicoMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoMovimientoActivoFijo"));
			//this.jButtonGenerarExcelReporteDinamicoMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoMovimientoActivoFijo"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionMovimientoActivoFijo!=null) {
				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionMovimientoActivoFijo"));
				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionMovimientoActivoFijo"));
				this.jInternalFrameImportacionMovimientoActivoFijo.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionMovimientoActivoFijo"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"AbrirOrderByMovimientoActivoFijo"));
			
			this.jButtonAbrirOrderByToolBarMovimientoActivoFijo.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarMovimientoActivoFijo"));			
			
			if(this.jInternalFrameOrderByMovimientoActivoFijo!=null) {
				this.jInternalFrameOrderByMovimientoActivoFijo.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByMovimientoActivoFijo"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormMovimientoActivoFijo.jTabbedPaneRelacionesMovimientoActivoFijo.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesMovimientoActivoFijo"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameMovimientoActivoFijo();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormMovimientoActivoFijo = (JInternalFrameBase)event.getSource();
	            	
	            MovimientoActivoFijoBeanSwingJInternalFrame jInternalFrameParent=(MovimientoActivoFijoBeanSwingJInternalFrame)jInternalFrameDetalleFormMovimientoActivoFijo.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarMovimientoActivoFijoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosMovimientoActivoFijo.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosMovimientoActivoFijoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosMovimientoActivoFijo.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosMovimientoActivoFijo.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoMovimientoActivoFijo";
		inputMap = this.jButtonNuevoMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesMovimientoActivoFijo";
		inputMap = this.jButtonNuevoRelacionesMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoMovimientoActivoFijoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarMovimientoActivoFijo";
		inputMap = this.jButtonModificarMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarMovimientoActivoFijo";
		inputMap = this.jButtonActualizarMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarMovimientoActivoFijo";
		inputMap = this.jButtonEliminarMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarMovimientoActivoFijo";
		inputMap = this.jButtonCancelarMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarMovimientoActivoFijo";
		inputMap = this.jButtonCerrarMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosMovimientoActivoFijo";
		inputMap = this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonGuardarCambiosMovimientoActivoFijo.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosMovimientoActivoFijoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosMovimientoActivoFijo.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosMovimientoActivoFijoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesMovimientoActivoFijo.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesMovimientoActivoFijoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarMovimientoActivoFijo.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarMovimientoActivoFijoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralMovimientoActivoFijo.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralMovimientoActivoFijoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonidMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"idMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursalMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_usuarioMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonsecuencialMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"secuencialMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_origenMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_empresa_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresa_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_sucursal_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursal_destinoMovimientoActivoFijoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonid_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"id_detalle_activo_fijo_destinoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonfechaMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"fechaMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonnumero_documentoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"numero_documentoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncostoMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costoMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacionMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtoncosto_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"costo_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondepreciacion_origenMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"depreciacion_origenMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtonrazonMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"razonMovimientoActivoFijoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jButtondescripcionMovimientoActivoFijoBusqueda.addActionListener(new ButtonActionListener(this,"descripcionMovimientoActivoFijoBusqueda"));
		
		
		this.jButtonFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoDestinoMovimientoActivoFijo"));

		this.jButtonFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdDetalleActivoFijoOrigenMovimientoActivoFijo"));

		this.jButtonFK_IdEmpresaDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdEmpresaDestinoMovimientoActivoFijo"));

		this.jButtonFK_IdEmpresaOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdEmpresaOrigenMovimientoActivoFijo"));

		this.jButtonFK_IdSucursalDestinoMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdSucursalDestinoMovimientoActivoFijo"));

		this.jButtonFK_IdSucursalOrigenMovimientoActivoFijo.addActionListener(new ButtonActionListener(this,"FK_IdSucursalOrigenMovimientoActivoFijo"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionMovimientoActivoFijo.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionMovimientoActivoFijoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarMovimientoActivoFijoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarMovimientoActivoFijo.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosMovimientoActivoFijo(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
					movimientoactivofijoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijos) {
					movimientoactivofijoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosMovimientoActivoFijoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
						movimientoactivofijoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijos) {
						movimientoactivofijoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijos) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosMovimientoActivoFijo.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosMovimientoActivoFijo.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosMovimientoActivoFijoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosMovimientoActivoFijo.getSelectedRows();
			
			MovimientoActivoFijo movimientoactivofijoLocal=new MovimientoActivoFijo();
			
			//this.seleccionarTodosMovimientoActivoFijo(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					movimientoactivofijoLocal =(MovimientoActivoFijo) this.movimientoactivofijoLogic.getMovimientoActivoFijos().toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					movimientoactivofijoLocal =(MovimientoActivoFijo) this.movimientoactivofijos.toArray()[this.jTableDatosMovimientoActivoFijo.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				movimientoactivofijoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
						movimientoactivofijoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijos) {
						movimientoactivofijoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosMovimientoActivoFijo.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosMovimientoActivoFijo.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosMovimientoActivoFijo,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualMovimientoActivoFijoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarMovimientoActivoFijoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralMovimientoActivoFijoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralMovimientoActivoFijo.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijoLogic.getMovimientoActivoFijos()) {
				
						if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							movimientoactivofijoAux.setsecuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							movimientoactivofijoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							movimientoactivofijoAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO)) {
							existe=true;
							movimientoactivofijoAux.setcosto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION)) {
							existe=true;
							movimientoactivofijoAux.setdepreciacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN)) {
							existe=true;
							movimientoactivofijoAux.setcosto_origen(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN)) {
							existe=true;
							movimientoactivofijoAux.setdepreciacion_origen(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON)) {
							existe=true;
							movimientoactivofijoAux.setrazon(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							movimientoactivofijoAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijos) {
					
						if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL)) {
							existe=true;
							movimientoactivofijoAux.setsecuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							movimientoactivofijoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
							existe=true;
							movimientoactivofijoAux.setnumero_documento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO)) {
							existe=true;
							movimientoactivofijoAux.setcosto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION)) {
							existe=true;
							movimientoactivofijoAux.setdepreciacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN)) {
							existe=true;
							movimientoactivofijoAux.setcosto_origen(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN)) {
							existe=true;
							movimientoactivofijoAux.setdepreciacion_origen(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON)) {
							existe=true;
							movimientoactivofijoAux.setrazon(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							movimientoactivofijoAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesMovimientoActivoFijoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioMovimientoActivoFijo=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesMovimientoActivoFijo.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteMovimientoActivoFijo) {				
					conSplash=true;//false;										
					
					//this.startProcessMovimientoActivoFijo(conSplash);
				
					this.generarReporteMovimientoActivoFijosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoMovimientoActivoFijosSeleccionados();
				//this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoMovimientoActivoFijosSeleccionados(false);
				//this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoMovimientoActivoFijosSeleccionados(true);
				//this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessMovimientoActivoFijo();
				
				this.exportarMovimientoActivoFijosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionMovimientoActivoFijos();
				//this.importarMovimientoActivoFijos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessMovimientoActivoFijo();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelMovimientoActivoFijosSeleccionados();
				//this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Movimiento Activo Fijo", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessMovimientoActivoFijo();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoMovimientoActivoFijo)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyMovimientoActivoFijo(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
				}	
			} 			
			else if(MovimientoActivoFijoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteMovimientoActivoFijo) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessMovimientoActivoFijo(conSplash);
					
						//this.actualizarParametrosGeneralMovimientoActivoFijo();
						
						this.generarReporteProcesoAccionMovimientoActivoFijosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(MovimientoActivoFijoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Movimiento Activo FijoS SELECCIONADOS?", "MANTENIMIENTO DE Movimiento Activo Fijo", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessMovimientoActivoFijo();
				
						this.actualizarParametrosGeneralMovimientoActivoFijo();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.movimientoactivofijoReturnGeneral=movimientoactivofijoLogic.procesarAccionMovimientoActivoFijosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.movimientoactivofijoLogic.getMovimientoActivoFijos(),this.movimientoactivofijoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarMovimientoActivoFijoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralMovimientoActivoFijo();
					
					MovimientoActivoFijoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarMovimientoActivoFijoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesMovimientoActivoFijo.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxTiposAccionesFormularioMovimientoActivoFijo.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessMovimientoActivoFijo(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesMovimientoActivoFijoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessMovimientoActivoFijo();
			
			if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
			MovimientoActivoFijo movimientoactivofijo=new MovimientoActivoFijo();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingMovimientoActivoFijo(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesMovimientoActivoFijo.getSelectedItem();
			
			
			
			
			movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
			//this.sTipoAccion;
			
			if(movimientoactivofijosSeleccionados.size()==1) {
				for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
					movimientoactivofijo=movimientoactivofijoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessMovimientoActivoFijo();
			
      		//this.finishProcessMovimientoActivoFijo(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarMovimientoActivoFijoReturnGeneral() throws Exception {
		if(this.movimientoactivofijoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.movimientoactivofijoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.movimientoactivofijoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.movimientoactivofijoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.movimientoactivofijoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.movimientoactivofijoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
		}
		
		if(this.movimientoactivofijoReturnGeneral.getConRetornoLista() || this.movimientoactivofijoReturnGeneral.getConRetornoObjeto()) {
			if(this.movimientoactivofijoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.movimientoactivofijoLogic.setMovimientoActivoFijos(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.movimientoactivofijoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.movimientoactivofijoLogic.setMovimientoActivoFijo(this.movimientoactivofijoReturnGeneral.getMovimientoActivoFijo());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingMovimientoActivoFijo(false);
		}
	}
	
	public void actualizarParametrosGeneralMovimientoActivoFijo() throws Exception {
		
		
	}
	
	public ArrayList<MovimientoActivoFijo> getMovimientoActivoFijosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioMovimientoActivoFijo) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijoLogic.getMovimientoActivoFijos()) {
					if(movimientoactivofijoAux.getIsSelected()) {
						movimientoactivofijosSeleccionados.add(movimientoactivofijoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(MovimientoActivoFijo movimientoactivofijoAux:this.movimientoactivofijos) {
					if(movimientoactivofijoAux.getIsSelected()) {
						movimientoactivofijosSeleccionados.add(movimientoactivofijoAux);				
					}
				}
			}
			
			if(movimientoactivofijosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						movimientoactivofijosSeleccionados.addAll(this.movimientoactivofijoLogic.getMovimientoActivoFijos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						movimientoactivofijosSeleccionados.addAll(this.movimientoactivofijos);				
					}
				}
			}
		} else {
			movimientoactivofijosSeleccionados.add(this.movimientoactivofijo);
		}
		
		return movimientoactivofijosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteMovimientoActivoFijosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalMovimientoActivoFijosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoMovimientoActivoFijosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoMovimientoActivoFijosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoMovimientoActivoFijosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Movimiento Activo Fijo",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados);
		
	}	
	
	public void generarReporteNormalMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionMovimientoActivoFijosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		
		this.abrirInicializarFrameReporteDinamicoMovimientoActivoFijo();
		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoMovimientoActivoFijo();
		
		
		//this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados ,movimientoactivofijoImplementable,movimientoactivofijoImplementableHome);
	}
	
	public void mostrarImportacionMovimientoActivoFijos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionMovimientoActivoFijo();
		
		this.abrirFrameImportacionMovimientoActivoFijo();		
		
			
		//this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados ,movimientoactivofijoImplementable,movimientoactivofijoImplementableHome);
	}
	
	public void importarMovimientoActivoFijos() throws Exception {		
	
	}
	
	public void exportarMovimientoActivoFijosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelMovimientoActivoFijosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoMovimientoActivoFijosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlMovimientoActivoFijosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Movimiento Activo Fijo",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarMovimientoActivoFijo(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarMovimientoActivoFijo(movimientoactivofijoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//movimientoactivofijoAux.setsDetalleGeneralEntityReporte(movimientoactivofijoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarMovimientoActivoFijo(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_COSTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_RAZON;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=movimientoactivofijo.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getsecuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getempresaorigen_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getsucursalorigen_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getdetalleactivofijoorigen_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getempresadestino_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getsucursaldestino_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getdetalleactivofijodestino_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getnumero_documento();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getcosto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getdepreciacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getcosto_origen().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getdepreciacion_origen().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getrazon();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=movimientoactivofijo.getdescripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("MovimientoActivoFijos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelMovimientoActivoFijo(row);				
				iRow++;
			}				
			
			for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelMovimientoActivoFijo(movimientoactivofijoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlMovimientoActivoFijosSeleccionados() throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();		
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"movimientoactivofijo.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("movimientoactivofijos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("movimientoactivofijo");
			//elementRoot.appendChild(element);
		
			for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
				element = document.createElement("movimientoactivofijo");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlMovimientoActivoFijo(movimientoactivofijoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Movimiento Activo Fijo",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelMovimientoActivoFijo(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTO);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACION);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_COSTOORIGEN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DEPRECIACIONORIGEN);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON);
		cell = row.createCell(iColumn++);cell.setCellValue(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getsecuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getempresaorigen_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getsucursalorigen_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getdetalleactivofijoorigen_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getempresadestino_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getsucursaldestino_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getdetalleactivofijodestino_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getnumero_documento());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getcosto());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getdepreciacion());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getcosto_origen());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getdepreciacion_origen());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getrazon());
		cell = row.createCell(iColumn++);cell.setCellValue(movimientoactivofijo.getdescripcion());				
	}
	
	public void setFilaDatosExportarXmlMovimientoActivoFijo(MovimientoActivoFijo movimientoactivofijo,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(MovimientoActivoFijoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(movimientoactivofijo.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(MovimientoActivoFijoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(movimientoactivofijo.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementusuario_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementsecuencial = document.createElement(MovimientoActivoFijoConstantesFunciones.SECUENCIAL);
		elementsecuencial.appendChild(document.createTextNode(movimientoactivofijo.getsecuencial().trim()));
		element.appendChild(elementsecuencial);

		Element elementempresaorigen_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDEMPRESAORIGEN);
		elementempresaorigen_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getempresaorigen_descripcion()));
		element.appendChild(elementempresaorigen_descripcion);

		Element elementsucursalorigen_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDSUCURSALORIGEN);
		elementsucursalorigen_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getsucursalorigen_descripcion()));
		element.appendChild(elementsucursalorigen_descripcion);

		Element elementdetalleactivofijoorigen_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDDETALLEACTIVOFIJOORIGEN);
		elementdetalleactivofijoorigen_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getdetalleactivofijoorigen_descripcion()));
		element.appendChild(elementdetalleactivofijoorigen_descripcion);

		Element elementempresadestino_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDEMPRESADESTINO);
		elementempresadestino_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getempresadestino_descripcion()));
		element.appendChild(elementempresadestino_descripcion);

		Element elementsucursaldestino_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDSUCURSALDESTINO);
		elementsucursaldestino_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getsucursaldestino_descripcion()));
		element.appendChild(elementsucursaldestino_descripcion);

		Element elementdetalleactivofijodestino_descripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.IDDETALLEACTIVOFIJODESTINO);
		elementdetalleactivofijodestino_descripcion.appendChild(document.createTextNode(movimientoactivofijo.getdetalleactivofijodestino_descripcion()));
		element.appendChild(elementdetalleactivofijodestino_descripcion);

		Element elementfecha = document.createElement(MovimientoActivoFijoConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(movimientoactivofijo.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementnumero_documento = document.createElement(MovimientoActivoFijoConstantesFunciones.NUMERODOCUMENTO);
		elementnumero_documento.appendChild(document.createTextNode(movimientoactivofijo.getnumero_documento().trim()));
		element.appendChild(elementnumero_documento);

		Element elementcosto = document.createElement(MovimientoActivoFijoConstantesFunciones.COSTO);
		elementcosto.appendChild(document.createTextNode(movimientoactivofijo.getcosto().toString().trim()));
		element.appendChild(elementcosto);

		Element elementdepreciacion = document.createElement(MovimientoActivoFijoConstantesFunciones.DEPRECIACION);
		elementdepreciacion.appendChild(document.createTextNode(movimientoactivofijo.getdepreciacion().toString().trim()));
		element.appendChild(elementdepreciacion);

		Element elementcosto_origen = document.createElement(MovimientoActivoFijoConstantesFunciones.COSTOORIGEN);
		elementcosto_origen.appendChild(document.createTextNode(movimientoactivofijo.getcosto_origen().toString().trim()));
		element.appendChild(elementcosto_origen);

		Element elementdepreciacion_origen = document.createElement(MovimientoActivoFijoConstantesFunciones.DEPRECIACIONORIGEN);
		elementdepreciacion_origen.appendChild(document.createTextNode(movimientoactivofijo.getdepreciacion_origen().toString().trim()));
		element.appendChild(elementdepreciacion_origen);

		Element elementrazon = document.createElement(MovimientoActivoFijoConstantesFunciones.RAZON);
		elementrazon.appendChild(document.createTextNode(movimientoactivofijo.getrazon().trim()));
		element.appendChild(elementrazon);

		Element elementdescripcion = document.createElement(MovimientoActivoFijoConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(movimientoactivofijo.getdescripcion().trim()));
		element.appendChild(elementdescripcion);
	}
	
	public void generarReporteGroupGenericoMovimientoActivoFijosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados=new ArrayList<MovimientoActivoFijo>();
		
		movimientoactivofijosSeleccionados=this.getMovimientoActivoFijosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoMovimientoActivoFijo(movimientoactivofijosSeleccionados);
		
		this.generarReporteMovimientoActivoFijos("Todos",movimientoactivofijosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoMovimientoActivoFijo(ArrayList<MovimientoActivoFijo> movimientoactivofijosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(MovimientoActivoFijo movimientoactivofijoAux:movimientoactivofijosSeleccionados) {
				movimientoactivofijoAux.setsDetalleGeneralEntityReporte(movimientoactivofijoAux.toString());
			
				if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_SECUENCIAL)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getsecuencial());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESAORIGEN)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getempresaorigen_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALORIGEN)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getsucursalorigen_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJOORIGEN)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getdetalleactivofijoorigen_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDEMPRESADESTINO)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getempresadestino_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDSUCURSALDESTINO)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getsucursaldestino_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_IDDETALLEACTIVOFIJODESTINO)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getdetalleactivofijodestino_descripcion());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(movimientoactivofijoAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_NUMERODOCUMENTO)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getnumero_documento());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_RAZON)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getrazon());
				}
				 else if(sTipoSeleccionar.equals(MovimientoActivoFijoConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					movimientoactivofijoAux.setsDescripcionGeneralEntityReporte1(movimientoactivofijoAux.getdescripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,MovimientoActivoFijoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesMovimientoActivoFijo(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoMovimientoActivoFijo=true;
				this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=true;
				this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=true;
			}
			
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=true;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=true;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=true;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
			this.isVisibilidadCeldaModificarMovimientoActivoFijo=true;
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaCancelarMovimientoActivoFijo=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				} else {
					this.isVisibilidadCeldaGuardarMovimientoActivoFijo=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(MovimientoActivoFijoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=true;
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=true;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=true;
		} else {
			this.actualizarEstadoPanelsMovimientoActivoFijo(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarMovimientoActivoFijo=false;
			//this.isVisibilidadCeldaVerFormMovimientoActivoFijo=false;
			this.isVisibilidadCeldaDuplicarMovimientoActivoFijo=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!movimientoactivofijoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
		} else {
			this.isVisibilidadCeldaNuevoMovimientoActivoFijo=false;
			this.isVisibilidadCeldaGuardarCambiosMovimientoActivoFijo=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			if(!movimientoactivofijoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;												
			}
			
			this.jButtonCerrarMovimientoActivoFijo.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesMovimientoActivoFijo=false;
		}
		
		if(!this.permiteMantenimiento(this.movimientoactivofijo)) {
			this.isVisibilidadCeldaActualizarMovimientoActivoFijo=false;
			this.isVisibilidadCeldaEliminarMovimientoActivoFijo=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesMovimientoActivoFijo() {
	}
	
	public void actualizarEstadoPanelsMovimientoActivoFijo(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosEdicionMovimientoActivoFijo.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosMovimientoActivoFijo!=null) {
				this.jScrollPanelDatosMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelPaginacionMovimientoActivoFijo!=null) {
				this.jPanelPaginacionMovimientoActivoFijo.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
					this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.movimientoactivofijoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasMovimientoActivoFijo!=null) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesMovimientoActivoFijo!=null) {
				this.jPanelParametrosReportesMovimientoActivoFijo.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresaOrigen(Boolean isParaEmpresaOrigen){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaOrigenNegation=!isParaEmpresaOrigen;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaEmpresaOrigenNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaEmpresaOrigenNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaEmpresaOrigenNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaEmpresaOrigen;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaEmpresaOrigenNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaEmpresaOrigenNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursalOrigen(Boolean isParaSucursalOrigen){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalOrigenNegation=!isParaSucursalOrigen;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaSucursalOrigenNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaSucursalOrigenNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaSucursalOrigenNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaSucursalOrigenNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaSucursalOrigenNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaSucursalOrigen;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaDetalleActivoFijoOrigen(Boolean isParaDetalleActivoFijoOrigen){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaDetalleActivoFijoOrigenNegation=!isParaDetalleActivoFijoOrigen;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaDetalleActivoFijoOrigenNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaDetalleActivoFijoOrigen;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaDetalleActivoFijoOrigenNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaDetalleActivoFijoOrigenNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaDetalleActivoFijoOrigenNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaDetalleActivoFijoOrigenNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresaDestino(Boolean isParaEmpresaDestino){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaDestinoNegation=!isParaEmpresaDestino;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaEmpresaDestinoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaEmpresaDestinoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaEmpresaDestino;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaEmpresaDestinoNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaEmpresaDestinoNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaEmpresaDestinoNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursalDestino(Boolean isParaSucursalDestino){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalDestinoNegation=!isParaSucursalDestino;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaSucursalDestinoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaSucursalDestinoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaSucursalDestinoNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaSucursalDestinoNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaSucursalDestino;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaSucursalDestinoNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}

	public void setVisibilidadBusquedasParaDetalleActivoFijoDestino(Boolean isParaDetalleActivoFijoDestino){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaDetalleActivoFijoDestinoNegation=!isParaDetalleActivoFijoDestino;

			this.isVisibilidadFK_IdDetalleActivoFijoDestino=isParaDetalleActivoFijoDestino;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdDetalleActivoFijoOrigen=isParaDetalleActivoFijoDestinoNegation;
			if(!this.isVisibilidadFK_IdDetalleActivoFijoOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaDestino=isParaDetalleActivoFijoDestinoNegation;
			if(!this.isVisibilidadFK_IdEmpresaDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdEmpresaOrigen=isParaDetalleActivoFijoDestinoNegation;
			if(!this.isVisibilidadFK_IdEmpresaOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalDestino=isParaDetalleActivoFijoDestinoNegation;
			if(!this.isVisibilidadFK_IdSucursalDestino) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalDestinoMovimientoActivoFijo);}

			this.isVisibilidadFK_IdSucursalOrigen=isParaDetalleActivoFijoDestinoNegation;
			if(!this.isVisibilidadFK_IdSucursalOrigen) {this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(jPanelFK_IdSucursalOrigenMovimientoActivoFijo);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//MovimientoActivoFijoSessionBean movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
		
		if(this.movimientoactivofijoSessionBean==null) {
			this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
		}
		
		this.movimientoactivofijoSessionBean.setsUltimaBusquedaMovimientoActivoFijo(this.getsAccionBusqueda());
		this.movimientoactivofijoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.movimientoactivofijoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijoDestino")) {
			movimientoactivofijoSessionBean.setid_detalle_activo_fijo_destino(this.getid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijoOrigen")) {
			movimientoactivofijoSessionBean.setid_detalle_activo_fijo_origen(this.getid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			movimientoactivofijoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresaDestino")) {
			movimientoactivofijoSessionBean.setid_empresa_destino(this.getid_empresa_destinoFK_IdEmpresaDestino());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresaOrigen")) {
			movimientoactivofijoSessionBean.setid_empresa_origen(this.getid_empresa_origenFK_IdEmpresaOrigen());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			movimientoactivofijoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursalDestino")) {
			movimientoactivofijoSessionBean.setid_sucursal_destino(this.getid_sucursal_destinoFK_IdSucursalDestino());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursalOrigen")) {
			movimientoactivofijoSessionBean.setid_sucursal_origen(this.getid_sucursal_origenFK_IdSucursalOrigen());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			movimientoactivofijoSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//MovimientoActivoFijoSessionBean movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
		
		if(this.movimientoactivofijoSessionBean==null) {
			this.movimientoactivofijoSessionBean=new MovimientoActivoFijoSessionBean();
		}
		
		if(this.movimientoactivofijoSessionBean.getsUltimaBusquedaMovimientoActivoFijo()!=null&&!this.movimientoactivofijoSessionBean.getsUltimaBusquedaMovimientoActivoFijo().equals("")) {
			this.setsAccionBusqueda(movimientoactivofijoSessionBean.getsUltimaBusquedaMovimientoActivoFijo());
			this.setiNumeroPaginacion(movimientoactivofijoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(movimientoactivofijoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijoDestino")) {
				this.setid_detalle_activo_fijo_destinoFK_IdDetalleActivoFijoDestino(movimientoactivofijoSessionBean.getid_detalle_activo_fijo_destino());
				movimientoactivofijoSessionBean.setid_detalle_activo_fijo_destino(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdDetalleActivoFijoOrigen")) {
				this.setid_detalle_activo_fijo_origenFK_IdDetalleActivoFijoOrigen(movimientoactivofijoSessionBean.getid_detalle_activo_fijo_origen());
				movimientoactivofijoSessionBean.setid_detalle_activo_fijo_origen(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(movimientoactivofijoSessionBean.getid_empresa());
				movimientoactivofijoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresaDestino")) {
				this.setid_empresa_destinoFK_IdEmpresaDestino(movimientoactivofijoSessionBean.getid_empresa_destino());
				movimientoactivofijoSessionBean.setid_empresa_destino(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresaOrigen")) {
				this.setid_empresa_origenFK_IdEmpresaOrigen(movimientoactivofijoSessionBean.getid_empresa_origen());
				movimientoactivofijoSessionBean.setid_empresa_origen(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(movimientoactivofijoSessionBean.getid_sucursal());
				movimientoactivofijoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursalDestino")) {
				this.setid_sucursal_destinoFK_IdSucursalDestino(movimientoactivofijoSessionBean.getid_sucursal_destino());
				movimientoactivofijoSessionBean.setid_sucursal_destino(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursalOrigen")) {
				this.setid_sucursal_origenFK_IdSucursalOrigen(movimientoactivofijoSessionBean.getid_sucursal_origen());
				movimientoactivofijoSessionBean.setid_sucursal_origen(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(movimientoactivofijoSessionBean.getid_usuario());
				movimientoactivofijoSessionBean.setid_usuario(-1L);
			}
		}
		
		this.movimientoactivofijoSessionBean.setsUltimaBusquedaMovimientoActivoFijo("");
		this.movimientoactivofijoSessionBean.setiNumeroPaginacion(MovimientoActivoFijoConstantesFunciones.INUMEROPAGINACION);
		this.movimientoactivofijoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaMovimientoActivoFijo(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioMovimientoActivoFijo() {
		this.updateBorderResaltarBusquedasFormularioMovimientoActivoFijo();
		this.updateVisibilidadBusquedasFormularioMovimientoActivoFijo();
		this.updateHabilitarBusquedasFormularioMovimientoActivoFijo();
	}
	
	public void updateBorderResaltarBusquedasFormularioMovimientoActivoFijo() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponents().length>0) {
	

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			}
		}

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			}
		}

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaDestinoMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaDestinoMovimientoActivoFijo);
			}
		}

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaOrigenMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaOrigenMovimientoActivoFijo);
			}
		}

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalDestinoMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalDestinoMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalDestinoMovimientoActivoFijo);
			}
		}

		if(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalOrigenMovimientoActivoFijo!=null) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalOrigenMovimientoActivoFijo);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalOrigenMovimientoActivoFijo);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioMovimientoActivoFijo() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdEmpresaDestinoMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdEmpresaDestinoMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdEmpresaOrigenMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdEmpresaOrigenMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalDestinoMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdSucursalDestinoMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdSucursalDestinoMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalOrigenMovimientoActivoFijo);
			jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarFK_IdSucursalOrigenMovimientoActivoFijo);
			if(!this.movimientoactivofijoConstantesFunciones.mostrarFK_IdSucursalOrigenMovimientoActivoFijo && index>-1) {
				this.jTabbedPaneBusquedasMovimientoActivoFijo.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioMovimientoActivoFijo() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdEmpresaDestinoMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdEmpresaDestinoMovimientoActivoFijo);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdEmpresaOrigenMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdEmpresaOrigenMovimientoActivoFijo);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalDestinoMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdSucursalDestinoMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdSucursalDestinoMovimientoActivoFijo);
			}

			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalOrigenMovimientoActivoFijo);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.movimientoactivofijoConstantesFunciones.activarFK_IdSucursalOrigenMovimientoActivoFijo);
				this.jTabbedPaneBusquedasMovimientoActivoFijo.setEnabledAt(index,this.movimientoactivofijoConstantesFunciones.activarFK_IdSucursalOrigenMovimientoActivoFijo);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaMovimientoActivoFijo(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdDetalleActivoFijoDestino")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoDestinoMovimientoActivoFijo);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdDetalleActivoFijoOrigen")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdDetalleActivoFijoOrigenMovimientoActivoFijo);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpresaDestino")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaDestinoMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdEmpresaDestinoMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaDestinoMovimientoActivoFijo);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpresaOrigen")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdEmpresaOrigenMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdEmpresaOrigenMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdEmpresaOrigenMovimientoActivoFijo);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdSucursalDestino")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalDestinoMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdSucursalDestinoMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalDestinoMovimientoActivoFijo);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdSucursalOrigen")) {
			index= this.jTabbedPaneBusquedasMovimientoActivoFijo.indexOfComponent(this.jPanelFK_IdSucursalOrigenMovimientoActivoFijo);

			this.jTabbedPaneBusquedasMovimientoActivoFijo.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasMovimientoActivoFijo.getComponent(index);

			this.movimientoactivofijoConstantesFunciones.setResaltarFK_IdSucursalOrigenMovimientoActivoFijo(resaltar);

			jPanel.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarFK_IdSucursalOrigenMovimientoActivoFijo);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarMovimientoActivoFijo.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioMovimientoActivoFijo() throws Exception {

		if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioMovimientoActivoFijo();
		this.updateVisibilidadResaltarControlesFormularioMovimientoActivoFijo();
		this.updateHabilitarResaltarControlesFormularioMovimientoActivoFijo();
		
	}
	
	public void updateBorderResaltarControlesFormularioMovimientoActivoFijo() throws Exception {
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.movimientoactivofijoConstantesFunciones.resaltaridMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltaridMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_empresaMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_empresaMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursalMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursalMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_usuarioMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_usuarioMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarsecuencialMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarsecuencialMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_origenMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_origenMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_origenMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_empresa_destinoMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_sucursal_destinoMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_destinoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarid_detalle_activo_fijo_destinoMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarfechaMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarfechaMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarnumero_documentoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarnumero_documentoMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarcostoMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarcostoMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltardepreciacionMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltardepreciacionMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarcosto_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarcosto_origenMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltardepreciacion_origenMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltardepreciacion_origenMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltarrazonMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltarrazonMovimientoActivoFijo);}
		if(this.movimientoactivofijoConstantesFunciones.resaltardescripcionMovimientoActivoFijo!=null && this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setBorder(this.movimientoactivofijoConstantesFunciones.resaltardescripcionMovimientoActivoFijo);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioMovimientoActivoFijo() throws Exception {		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
	
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostraridMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelidMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostraridMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresaMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_empresaMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresaMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursalMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_sucursalMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursalMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_usuarioMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_usuarioMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_usuarioMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarsecuencialMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelsecuencialMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarsecuencialMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_empresa_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_origenMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_sucursal_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_origenMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_detalle_activo_fijo_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_origenMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_empresa_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_empresa_destinoMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_sucursal_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_sucursal_destinoMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelid_detalle_activo_fijo_destinoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarid_detalle_activo_fijo_destinoMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarfechaMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelfechaMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarfechaMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarnumero_documentoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelnumero_documentoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarnumero_documentoMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarcostoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelcostoMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarcostoMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardepreciacionMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPaneldepreciacionMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardepreciacionMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarcosto_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelcosto_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarcosto_origenMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardepreciacion_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPaneldepreciacion_origenMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardepreciacion_origenMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarrazonMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPanelrazonMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrarrazonMovimientoActivoFijo);
		//this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardescripcionMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jPaneldescripcionMovimientoActivoFijo.setVisible(this.movimientoactivofijoConstantesFunciones.mostrardescripcionMovimientoActivoFijo);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioMovimientoActivoFijo() throws Exception {
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormMovimientoActivoFijo!=null) {
	
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jLabelidMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activaridMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresaMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_empresaMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursalMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_sucursalMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_usuarioMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_usuarioMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldsecuencialMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarsecuencialMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_origenMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_empresa_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_origenMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_sucursal_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_origenMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_empresa_destinoMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_empresa_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_sucursal_destinoMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_sucursal_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jComboBoxid_detalle_activo_fijo_destinoMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarid_detalle_activo_fijo_destinoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jDateChooserfechaMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarfechaMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldnumero_documentoMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarnumero_documentoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcostoMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarcostoMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacionMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activardepreciacionMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFieldcosto_origenMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarcosto_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextFielddepreciacion_origenMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activardepreciacion_origenMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextArearazonMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activarrazonMovimientoActivoFijo);
		this.jInternalFrameDetalleFormMovimientoActivoFijo.jTextAreadescripcionMovimientoActivoFijo.setEnabled(this.movimientoactivofijoConstantesFunciones.activardescripcionMovimientoActivoFijo);
		}
	}
	
		
}