/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;


import java.sql.Time;


import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.NotaCreditoPuntoVentaConstantesFunciones;
import com.bydan.erp.puntoventa.util.NotaCreditoPuntoVentaParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.NotaCreditoPuntoVentaParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.NotaCreditoPuntoVentaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class NotaCreditoPuntoVentaBeanSwingJInternalFrame extends NotaCreditoPuntoVentaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(NotaCreditoPuntoVentaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<NotaCreditoPuntoVenta> notacreditopuntoventaValidator = new ClassValidator<NotaCreditoPuntoVenta>(NotaCreditoPuntoVenta.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public NotaCreditoPuntoVenta notacreditopuntoventa;	
	public NotaCreditoPuntoVenta notacreditopuntoventaAux;
	public NotaCreditoPuntoVenta notacreditopuntoventaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public NotaCreditoPuntoVenta notacreditopuntoventaTotales;
	public Long idNotaCreditoPuntoVentaActual;
	public Long iIdNuevoNotaCreditoPuntoVenta=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboCaja="";

	public List<Caja> cajasForeignKey;

	public List<Caja> getcajasForeignKey() {
		return cajasForeignKey;
	}

	public void setcajasForeignKey(List<Caja> cajasForeignKey) {
		this.cajasForeignKey = cajasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Caja cajaForeignKey;

	public Caja getcajaForeignKey() {
		return cajaForeignKey;
	}

	public void setcajaForeignKey(Caja cajaForeignKey) {
		this.cajaForeignKey = cajaForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboMesa="";

	public List<Mesa> mesasForeignKey;

	public List<Mesa> getmesasForeignKey() {
		return mesasForeignKey;
	}

	public void setmesasForeignKey(List<Mesa> mesasForeignKey) {
		this.mesasForeignKey = mesasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mesa mesaForeignKey;

	public Mesa getmesaForeignKey() {
		return mesaForeignKey;
	}

	public void setmesaForeignKey(Mesa mesaForeignKey) {
		this.mesaForeignKey = mesaForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTipoFacturaPuntoVenta="";

	public List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey;

	public List<TipoFacturaPuntoVenta> gettipofacturapuntoventasForeignKey() {
		return tipofacturapuntoventasForeignKey;
	}

	public void settipofacturapuntoventasForeignKey(List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey) {
		this.tipofacturapuntoventasForeignKey = tipofacturapuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoFacturaPuntoVenta tipofacturapuntoventaForeignKey;

	public TipoFacturaPuntoVenta gettipofacturapuntoventaForeignKey() {
		return tipofacturapuntoventaForeignKey;
	}

	public void settipofacturapuntoventaForeignKey(TipoFacturaPuntoVenta tipofacturapuntoventaForeignKey) {
		this.tipofacturapuntoventaForeignKey = tipofacturapuntoventaForeignKey;
	}

	public String sFinalQueryComboEstadoNotaCreditoPuntoVenta="";

	public List<EstadoNotaCredito> estadonotacreditopuntoventasForeignKey;

	public List<EstadoNotaCredito> getestadonotacreditopuntoventasForeignKey() {
		return estadonotacreditopuntoventasForeignKey;
	}

	public void setestadonotacreditopuntoventasForeignKey(List<EstadoNotaCredito> estadonotacreditopuntoventasForeignKey) {
		this.estadonotacreditopuntoventasForeignKey = estadonotacreditopuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoNotaCredito estadonotacreditopuntoventaForeignKey;

	public EstadoNotaCredito getestadonotacreditopuntoventaForeignKey() {
		return estadonotacreditopuntoventaForeignKey;
	}

	public void setestadonotacreditopuntoventaForeignKey(EstadoNotaCredito estadonotacreditopuntoventaForeignKey) {
		this.estadonotacreditopuntoventaForeignKey = estadonotacreditopuntoventaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idVendedorActual=0L;

	public Long getidVendedorActual() {
		return idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual= idVendedorActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	

	public Boolean isTienePermisosDetalleNotaCreditoPuntoVenta=false;

	public Boolean getIsTienePermisosDetalleNotaCreditoPuntoVenta() {
		return isTienePermisosDetalleNotaCreditoPuntoVenta;
	}

	public void setIsTienePermisosDetalleNotaCreditoPuntoVenta(Boolean isTienePermisosDetalleNotaCreditoPuntoVenta) {
		this.isTienePermisosDetalleNotaCreditoPuntoVenta= isTienePermisosDetalleNotaCreditoPuntoVenta;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoNotaCreditoPuntoVenta;
	public Boolean isPermisoNuevoNotaCreditoPuntoVenta;
	public Boolean isPermisoActualizarNotaCreditoPuntoVenta;
	public Boolean isPermisoActualizarOriginalNotaCreditoPuntoVenta;
	public Boolean isPermisoEliminarNotaCreditoPuntoVenta;
	public Boolean isPermisoGuardarCambiosNotaCreditoPuntoVenta;
	public Boolean isPermisoConsultaNotaCreditoPuntoVenta;
	public Boolean isPermisoBusquedaNotaCreditoPuntoVenta;
	public Boolean isPermisoReporteNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionMedioNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionAltoNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionTodoNotaCreditoPuntoVenta;
	public Boolean isPermisoCopiarNotaCreditoPuntoVenta;
	public Boolean isPermisoVerFormNotaCreditoPuntoVenta;
	public Boolean isPermisoDuplicarNotaCreditoPuntoVenta;
	public Boolean isPermisoOrdenNotaCreditoPuntoVenta;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaReturnGeneral;
	public NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaParameterGeneral;
	
	

	public DetalleNotaCreditoPuntoVentaLogic detallenotacreditopuntoventaLogic=null;

	public DetalleNotaCreditoPuntoVentaLogic getDetalleNotaCreditoPuntoVentaLogic() {
		return detallenotacreditopuntoventaLogic;
	}

	public void setDetalleNotaCreditoPuntoVentaLogic(DetalleNotaCreditoPuntoVentaLogic detallenotacreditopuntoventaLogic) {
		this.detallenotacreditopuntoventaLogic = detallenotacreditopuntoventaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoNotaCreditoPuntoVenta=false;
	public Boolean esParaAccionDesdeFormularioNotaCreditoPuntoVenta=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected NotaCreditoPuntoVentaSessionBeanAdditional notacreditopuntoventaSessionBeanAdditional=null;
	
	public NotaCreditoPuntoVentaSessionBeanAdditional getNotaCreditoPuntoVentaSessionBeanAdditional() {
		return this.notacreditopuntoventaSessionBeanAdditional;
	}
	
	public void setNotaCreditoPuntoVentaSessionBeanAdditional(NotaCreditoPuntoVentaSessionBeanAdditional notacreditopuntoventaSessionBeanAdditional) {
		try {
			this.notacreditopuntoventaSessionBeanAdditional=notacreditopuntoventaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional notacreditopuntoventaBeanSwingJInternalFrameAdditional=null;
	//public class NotaCreditoPuntoVentaBeanSwingJInternalFrame
	
	public NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional getNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional() {
		return this.notacreditopuntoventaBeanSwingJInternalFrameAdditional;
	}
	
	public void setNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional(NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional notacreditopuntoventaBeanSwingJInternalFrameAdditional) {
		try {
			this.notacreditopuntoventaBeanSwingJInternalFrameAdditional=notacreditopuntoventaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public NotaCreditoPuntoVenta notacreditopuntoventaBean;
	public NotaCreditoPuntoVentaConstantesFunciones notacreditopuntoventaConstantesFunciones;
	//public NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public UsuarioLogic usuarioLogic;
	public VendedorLogic vendedorLogic;
	public ClienteLogic clienteLogic;
	public CajaLogic cajaLogic;
	public AsientoContableLogic asientocontableLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public MesaLogic mesaLogic;
	public FormatoLogic formatoLogic;
	public TipoFacturaPuntoVentaLogic tipofacturapuntoventaLogic;
	public EstadoNotaCreditoLogic estadonotacreditopuntoventaLogic;
	
	//PARAMETROS
	
	
	//public List<NotaCreditoPuntoVenta> notacreditopuntoventas;	
	//public List<NotaCreditoPuntoVenta> notacreditopuntoventasEliminados;
	//public List<NotaCreditoPuntoVenta> notacreditopuntoventasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaCopiarNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaVerFormNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaOrdenNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;	
	
	
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCaja=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMesa=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoFacturaPuntoVenta=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoNotaCreditoPuntoVenta() {
		return this.iIdNuevoNotaCreditoPuntoVenta;
	}

	public void setiIdNuevoNotaCreditoPuntoVenta(Long iIdNuevoNotaCreditoPuntoVenta) {
		this.iIdNuevoNotaCreditoPuntoVenta = iIdNuevoNotaCreditoPuntoVenta;
	}
	
	public Long getidNotaCreditoPuntoVentaActual() {
		return this.idNotaCreditoPuntoVentaActual;
	}

	public void setidNotaCreditoPuntoVentaActual(Long idNotaCreditoPuntoVentaActual) {
		this.idNotaCreditoPuntoVentaActual = idNotaCreditoPuntoVentaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public NotaCreditoPuntoVenta getnotacreditopuntoventa() {
		return this.notacreditopuntoventa;
	}

	public void setnotacreditopuntoventa(NotaCreditoPuntoVenta notacreditopuntoventa) {
		this.notacreditopuntoventa = notacreditopuntoventa;
	}
	
	public NotaCreditoPuntoVenta getnotacreditopuntoventaAux() {
		return this.notacreditopuntoventaAux;
	}

	public void setnotacreditopuntoventaAux(NotaCreditoPuntoVenta notacreditopuntoventaAux) {
		this.notacreditopuntoventaAux = notacreditopuntoventaAux;
	}				
	
	public NotaCreditoPuntoVenta getnotacreditopuntoventaAnterior() {
		return this.notacreditopuntoventaAnterior;
	}

	public void setnotacreditopuntoventaAnterior(NotaCreditoPuntoVenta notacreditopuntoventaAnterior) {
		this.notacreditopuntoventaAnterior = notacreditopuntoventaAnterior;
	}	
	
	public NotaCreditoPuntoVenta getnotacreditopuntoventaTotales() {
		return this.notacreditopuntoventaTotales;
	}

	public void setnotacreditopuntoventaTotales(NotaCreditoPuntoVenta notacreditopuntoventaTotales) {
		this.notacreditopuntoventaTotales = notacreditopuntoventaTotales;
	}	
	
	public NotaCreditoPuntoVenta getnotacreditopuntoventaBean() {
		return this.notacreditopuntoventaBean;
	}

	public void setnotacreditopuntoventaBean(NotaCreditoPuntoVenta notacreditopuntoventaBean) {
		this.notacreditopuntoventaBean = notacreditopuntoventaBean;
	}	
	
	public NotaCreditoPuntoVentaParameterReturnGeneral getnotacreditopuntoventaReturnGeneral() {
		return this.notacreditopuntoventaReturnGeneral;
	}

	public void setnotacreditopuntoventaReturnGeneral(NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaReturnGeneral) {
		this.notacreditopuntoventaReturnGeneral = notacreditopuntoventaReturnGeneral;
	}	
	
	
	public Long id_asiento_contableFK_IdAsientoContable=null;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_cajaFK_IdCaja=-1L;

	public Long getid_cajaFK_IdCaja() {
		return this.id_cajaFK_IdCaja;
	}

	public void setid_cajaFK_IdCaja(Long id_cajaFK_IdCaja) {
		this.id_cajaFK_IdCaja = id_cajaFK_IdCaja;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta=-1L;

	public Long getid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta() {
		return this.id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta;
	}

	public void setid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta(Long id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta) {
		this.id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta = id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta;
	}

	public Long id_formatoFK_IdFormato=-1L;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesaFK_IdMesa=-1L;

	public Long getid_mesaFK_IdMesa() {
		return this.id_mesaFK_IdMesa;
	}

	public void setid_mesaFK_IdMesa(Long id_mesaFK_IdMesa) {
		this.id_mesaFK_IdMesa = id_mesaFK_IdMesa;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta=-1L;

	public Long getid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta() {
		return this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta;
	}

	public void setid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta(Long id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta) {
		this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta = id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=-1L;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public NotaCreditoPuntoVentaLogic getNotaCreditoPuntoVentaLogic()	{		
		return notacreditopuntoventaLogic;
	}

	public void setNotaCreditoPuntoVentaLogic(NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic) {
		this.notacreditopuntoventaLogic = notacreditopuntoventaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoNotaCreditoPuntoVenta() {
		return isEsNuevoNotaCreditoPuntoVenta;
	}

	public void setIsEsNuevoNotaCreditoPuntoVenta(Boolean isEsNuevoNotaCreditoPuntoVenta) {
		this.isEsNuevoNotaCreditoPuntoVenta = isEsNuevoNotaCreditoPuntoVenta;
	}

	public Boolean getEsParaAccionDesdeFormularioNotaCreditoPuntoVenta() {
		return esParaAccionDesdeFormularioNotaCreditoPuntoVenta;
	}
	
	public void setEsParaAccionDesdeFormularioNotaCreditoPuntoVenta(Boolean esParaAccionDesdeFormularioNotaCreditoPuntoVenta) {
		this.esParaAccionDesdeFormularioNotaCreditoPuntoVenta = esParaAccionDesdeFormularioNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCajasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cajasForeignKey=new ArrayList<Caja>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CajaLogic cajaLogic=new CajaLogic();

			//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

					cajaLogic.getTodosCajasWithConnection(sFinalQuery,new Pagination());

					this.cajasForeignKey=cajaLogic.getCajas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCaja(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidCajaActual());
					this.cajasForeignKey.add(cajaLogic.getCaja());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMesasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.mesasForeignKey=new ArrayList<Mesa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesaLogic mesaLogic=new MesaLogic();

			//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

					mesaLogic.getTodosMesasWithConnection(sFinalQuery,new Pagination());

					this.mesasForeignKey=mesaLogic.getMesas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMesa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesaLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidMesaActual());
					this.mesasForeignKey.add(mesaLogic.getMesa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoFacturaPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoFacturaPuntoVentaLogic tipofacturapuntoventaLogic=new TipoFacturaPuntoVentaLogic();

			//tipofacturapuntoventaLogic.getTipoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipofacturapuntoventaLogic.getTipoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

					tipofacturapuntoventaLogic.getTodosTipoFacturaPuntoVentasWithConnection(sFinalQuery,new Pagination());

					this.tipofacturapuntoventasForeignKey=tipofacturapuntoventaLogic.getTipoFacturaPuntoVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoFacturaPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipofacturapuntoventaLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidTipoFacturaPuntoVentaActual());
					this.tipofacturapuntoventasForeignKey.add(tipofacturapuntoventaLogic.getTipoFacturaPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoNotaCreditoPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadonotacreditopuntoventasForeignKey=new ArrayList<EstadoNotaCredito>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoNotaCreditoLogic estadonotacreditoLogic=new EstadoNotaCreditoLogic();

			//estadonotacreditoLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadonotacreditopuntoventaLogic.getEstadoNotaCreditoDataAccess().setIsForForeingKeyData(true);

					estadonotacreditoLogic.getTodosEstadoNotaCreditosWithConnection(sFinalQuery,new Pagination());

					this.estadonotacreditopuntoventasForeignKey=estadonotacreditoLogic.getEstadoNotaCreditos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoNotaCreditoPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadonotacreditoLogic.getEntityWithConnection(notacreditopuntoventaSessionBean.getlidEstadoNotaCreditoPuntoVentaActual());
					this.estadonotacreditopuntoventasForeignKey.add(estadonotacreditoLogic.getEstadoNotaCredito());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaNotaCreditoPuntoVentaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_empresaNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_empresaNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta!=null) {
						jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta!=null) {
						jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteNotaCreditoPuntoVentaGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_clienteNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_clienteNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCajaForeignKey(Long idCajaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cajaTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setCaja(cajaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedItem(cajaTemp);
					}
				} else {
					//jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedItem(cajaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){
					if(cajaTemp!=null && jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta!=null) {
						jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.setSelectedItem(cajaTemp);
					} else {
						if(jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.setSelectedItem(cajaTemp);
							if(jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCajaForeignKeyDescripcion(Long idCajaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}


			sDescripcion=CajaConstantesFunciones.getCajaDescripcion(cajaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCajaForeignKeyGenerico(Long idCajaSeleccionado,JComboBox jComboBoxid_cajaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(cajaTemp!=null) {
				jComboBoxid_cajaNotaCreditoPuntoVentaGenerico.setSelectedItem(cajaTemp);
			} else {
				if(jComboBoxid_cajaNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_cajaNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_cajaNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoprecioTemp!=null && jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta!=null) {
						jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.setSelectedItem(tipoprecioTemp);
					} else {
						if(jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.setSelectedItem(tipoprecioTemp);
							if(jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesaForeignKey(Long idMesaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesaTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setMesa(mesaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedItem(mesaTemp);
					}
				} else {
					//jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedItem(mesaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){
					if(mesaTemp!=null && jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta!=null) {
						jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.setSelectedItem(mesaTemp);
					} else {
						if(jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.setSelectedItem(mesaTemp);
							if(jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesaForeignKeyDescripcion(Long idMesaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}


			sDescripcion=MesaConstantesFunciones.getMesaDescripcion(mesaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesaForeignKeyGenerico(Long idMesaSeleccionado,JComboBox jComboBoxid_mesaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(mesaTemp!=null) {
				jComboBoxid_mesaNotaCreditoPuntoVentaGenerico.setSelectedItem(mesaTemp);
			} else {
				if(jComboBoxid_mesaNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_mesaNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_mesaNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormato") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoTemp!=null && jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta!=null) {
						jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.setSelectedItem(formatoTemp);
					} else {
						if(jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.setSelectedItem(formatoTemp);
							if(jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoNotaCreditoPuntoVentaGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_formatoNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_formatoNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoFacturaPuntoVentaForeignKey(Long idTipoFacturaPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipofacturapuntoventaTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setTipoFacturaPuntoVenta(tipofacturapuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					}
				} else {
					//jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipofacturapuntoventaTemp!=null && jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta!=null) {
						jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					} else {
						if(jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
							if(jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoFacturaPuntoVentaForeignKeyDescripcion(Long idTipoFacturaPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}


			sDescripcion=TipoFacturaPuntoVentaConstantesFunciones.getTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoFacturaPuntoVentaForeignKeyGenerico(Long idTipoFacturaPuntoVentaSeleccionado,JComboBox jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}

			if(tipofacturapuntoventaTemp!=null) {
				jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico.setSelectedItem(tipofacturapuntoventaTemp);
			} else {
				if(jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoNotaCreditoPuntoVentaForeignKey(Long idEstadoNotaCreditoPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditopuntoventaTemp=null;

			for(EstadoNotaCredito estadonotacreditopuntoventaAux:estadonotacreditopuntoventasForeignKey) {
				if(estadonotacreditopuntoventaAux.getId()!=null && estadonotacreditopuntoventaAux.getId().equals(idEstadoNotaCreditoPuntoVentaSeleccionado)) {
					estadonotacreditopuntoventaTemp=estadonotacreditopuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadonotacreditopuntoventaTemp!=null) {

					if(this.notacreditopuntoventa!=null) {
						this.notacreditopuntoventa.setEstadoNotaCreditoPuntoVenta(estadonotacreditopuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventaTemp);
					}
				} else {
					//jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventaTemp);
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoNotaCreditoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadonotacreditopuntoventaTemp!=null && jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta!=null) {
						jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventaTemp);
					} else {
						if(jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventaTemp);
							if(jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoNotaCreditoPuntoVentaForeignKeyDescripcion(Long idEstadoNotaCreditoPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoNotaCredito  estadonotacreditopuntoventaTemp=null;

			for(EstadoNotaCredito estadonotacreditopuntoventaAux:estadonotacreditopuntoventasForeignKey) {
				if(estadonotacreditopuntoventaAux.getId()!=null && estadonotacreditopuntoventaAux.getId().equals(idEstadoNotaCreditoPuntoVentaSeleccionado)) {
					estadonotacreditopuntoventaTemp=estadonotacreditopuntoventaAux;
					break;
				}
			}


			sDescripcion=EstadoNotaCreditoConstantesFunciones.getEstadoNotaCreditoDescripcion(estadonotacreditopuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoNotaCreditoPuntoVentaForeignKeyGenerico(Long idEstadoNotaCreditoPuntoVentaSeleccionado,JComboBox jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditopuntoventaTemp=null;

			for(EstadoNotaCredito estadonotacreditopuntoventaAux:estadonotacreditopuntoventasForeignKey) {
				if(estadonotacreditopuntoventaAux.getId()!=null && estadonotacreditopuntoventaAux.getId().equals(idEstadoNotaCreditoPuntoVentaSeleccionado)) {
					estadonotacreditopuntoventaTemp=estadonotacreditopuntoventaAux;
					break;
				}
			}

			if(estadonotacreditopuntoventaTemp!=null) {
				jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico.setSelectedItem(estadonotacreditopuntoventaTemp);
			} else {
				if(jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_empresaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaNotaCreditoPuntoVentaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				notacreditopuntoventa.setid_empresa(empresaAux.getId());
				notacreditopuntoventa.setempresa_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				notacreditopuntoventa.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				notacreditopuntoventa.setid_sucursal(sucursalAux.getId());
				notacreditopuntoventa.setsucursal_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				notacreditopuntoventa.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				notacreditopuntoventa.setid_usuario(usuarioAux.getId());
				notacreditopuntoventa.setusuario_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				notacreditopuntoventa.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(vendedorAux!=null && vendedorAux.getId()!=null) {
				notacreditopuntoventa.setid_vendedor(vendedorAux.getId());
				notacreditopuntoventa.setvendedor_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getVendedorDescripcion(vendedorAux));
				notacreditopuntoventa.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_clienteNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteNotaCreditoPuntoVentaGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				notacreditopuntoventa.setid_cliente(clienteAux.getId());
				notacreditopuntoventa.setcliente_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getClienteDescripcion(clienteAux));
				notacreditopuntoventa.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCajaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_cajaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaAux=new Caja();

			if(jComboBoxid_cajaNotaCreditoPuntoVentaGenerico==null) {
				cajaAux=(Caja)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				cajaAux=(Caja)jComboBoxid_cajaNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(cajaAux!=null && cajaAux.getId()!=null) {
				notacreditopuntoventa.setid_caja(cajaAux.getId());
				notacreditopuntoventa.setcaja_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getCajaDescripcion(cajaAux));
				notacreditopuntoventa.setCaja(cajaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null) {
				notacreditopuntoventa.setid_asiento_contable(asientocontableAux.getId());
				notacreditopuntoventa.setasientocontable_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				notacreditopuntoventa.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				notacreditopuntoventa.setid_tipo_precio(tipoprecioAux.getId());
				notacreditopuntoventa.settipoprecio_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				notacreditopuntoventa.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_mesaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaAux=new Mesa();

			if(jComboBoxid_mesaNotaCreditoPuntoVentaGenerico==null) {
				mesaAux=(Mesa)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				mesaAux=(Mesa)jComboBoxid_mesaNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(mesaAux!=null && mesaAux.getId()!=null) {
				notacreditopuntoventa.setid_mesa(mesaAux.getId());
				notacreditopuntoventa.setmesa_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getMesaDescripcion(mesaAux));
				notacreditopuntoventa.setMesa(mesaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_formatoNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoNotaCreditoPuntoVentaGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				notacreditopuntoventa.setid_formato(formatoAux.getId());
				notacreditopuntoventa.setformato_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getFormatoDescripcion(formatoAux));
				notacreditopuntoventa.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoFacturaPuntoVentaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaAux=new TipoFacturaPuntoVenta();

			if(jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico==null) {
				tipofacturapuntoventaAux=(TipoFacturaPuntoVenta)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				tipofacturapuntoventaAux=(TipoFacturaPuntoVenta)jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(tipofacturapuntoventaAux!=null && tipofacturapuntoventaAux.getId()!=null) {
				notacreditopuntoventa.setid_tipo_factura_punto_venta(tipofacturapuntoventaAux.getId());
				notacreditopuntoventa.settipofacturapuntoventa_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventaAux));
				notacreditopuntoventa.setTipoFacturaPuntoVenta(tipofacturapuntoventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoNotaCreditoPuntoVentaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,JComboBox jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoNotaCredito  estadonotacreditoAux=new EstadoNotaCredito();

			if(jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico==null) {
				estadonotacreditoAux=(EstadoNotaCredito)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				estadonotacreditoAux=(EstadoNotaCredito)jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(estadonotacreditoAux!=null && estadonotacreditoAux.getId()!=null) {
				notacreditopuntoventa.setid_estado_nota_credito_punto_venta(estadonotacreditoAux.getId());
				notacreditopuntoventa.setestadonotacreditopuntoventa_descripcion(NotaCreditoPuntoVentaConstantesFunciones.getEstadoNotaCreditoPuntoVentaDescripcion(estadonotacreditoAux));
				notacreditopuntoventa.setEstadoNotaCreditoPuntoVenta(estadonotacreditoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.addItem(vendedor);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.addItem(cliente);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCajasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCaja=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.addItem(caja);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.addItem(caja);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.addItem(asientocontable);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.addItem(tipoprecio);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMesasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMesa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.addItem(mesa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.addItem(mesa);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormato") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.addItem(formato);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoFacturaPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoFacturaPuntoVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.removeAllItems();

							for(TipoFacturaPuntoVenta tipofacturapuntoventa:this.tipofacturapuntoventasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.addItem(tipofacturapuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.removeAllItems();

							for(TipoFacturaPuntoVenta tipofacturapuntoventa:this.tipofacturapuntoventasForeignKey) {
								this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.addItem(tipofacturapuntoventa);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoNotaCredito=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.removeAllItems();

							for(EstadoNotaCredito estadonotacreditopuntoventa:this.estadonotacreditopuntoventasForeignKey) {
								this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.addItem(estadonotacreditopuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { 
					}

					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoNotaCreditoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.removeAllItems();

							for(EstadoNotaCredito estadonotacreditopuntoventa:this.estadonotacreditopuntoventasForeignKey) {
								this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.addItem(estadonotacreditopuntoventa);
							}
						}

						if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCajaForeignKey(Caja caja,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedItem(caja);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.setSelectedItem(caja);
						} else {
							this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.setSelectedItem(tipoprecio);
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesaForeignKey(Mesa mesa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedItem(mesa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.setSelectedItem(mesa);
						} else {
							this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.setSelectedItem(formato);
						} else {
							this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoFacturaPuntoVentaForeignKey(TipoFacturaPuntoVenta tipofacturapuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(tipofacturapuntoventa);
						} else {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoNotaCreditoPuntoVentaForeignKey(EstadoNotaCredito estadonotacreditopuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.setSelectedItem(estadonotacreditopuntoventa);
						} else {
							this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			NotaCreditoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			NotaCreditoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta(this.notacreditopuntoventas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Caja.class));
		classes.add(new Classe(AsientoContable.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Mesa.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(TipoFacturaPuntoVenta.class));
		classes.add(new Classe(EstadoNotaCredito.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(this.notacreditopuntoventas);
			notacreditopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public NotaCreditoPuntoVentaParameterReturnGeneral getNotaCreditoPuntoVentaParameterGeneral() {
		return this.notacreditopuntoventaParameterGeneral;
	}
	
	public void setNotaCreditoPuntoVentaParameterGeneral(NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaParameterGeneral) {
		this.notacreditopuntoventaParameterGeneral = notacreditopuntoventaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoNotaCreditoPuntoVenta() {
		return isPermisoTodoNotaCreditoPuntoVenta;
	}

	public void setIsPermisoTodoNotaCreditoPuntoVenta(Boolean isPermisoTodoNotaCreditoPuntoVenta) {
		this.isPermisoTodoNotaCreditoPuntoVenta = isPermisoTodoNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoNuevoNotaCreditoPuntoVenta() {
		return isPermisoNuevoNotaCreditoPuntoVenta;
	}

	public void setIsPermisoNuevoNotaCreditoPuntoVenta(Boolean isPermisoNuevoNotaCreditoPuntoVenta) {
		this.isPermisoNuevoNotaCreditoPuntoVenta = isPermisoNuevoNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoActualizarNotaCreditoPuntoVenta() {
		return isPermisoActualizarNotaCreditoPuntoVenta;
	}

	public void setIsPermisoActualizarNotaCreditoPuntoVenta(Boolean isPermisoActualizarNotaCreditoPuntoVenta) {
		this.isPermisoActualizarNotaCreditoPuntoVenta = isPermisoActualizarNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoEliminarNotaCreditoPuntoVenta() {
		return isPermisoEliminarNotaCreditoPuntoVenta;
	}

	public void setIsPermisoEliminarNotaCreditoPuntoVenta(Boolean isPermisoEliminarNotaCreditoPuntoVenta) {
		this.isPermisoEliminarNotaCreditoPuntoVenta = isPermisoEliminarNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoGuardarCambiosNotaCreditoPuntoVenta() {
		return isPermisoGuardarCambiosNotaCreditoPuntoVenta;
	}

	public void setIsPermisoGuardarCambiosNotaCreditoPuntoVenta(Boolean isPermisoGuardarCambiosNotaCreditoPuntoVenta) {
		this.isPermisoGuardarCambiosNotaCreditoPuntoVenta = isPermisoGuardarCambiosNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoConsultaNotaCreditoPuntoVenta() {
		return isPermisoConsultaNotaCreditoPuntoVenta;
	}

	public void setIsPermisoConsultaNotaCreditoPuntoVenta(Boolean isPermisoConsultaNotaCreditoPuntoVenta) {
		this.isPermisoConsultaNotaCreditoPuntoVenta = isPermisoConsultaNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoBusquedaNotaCreditoPuntoVenta() {
		return isPermisoBusquedaNotaCreditoPuntoVenta;
	}

	public void setIsPermisoBusquedaNotaCreditoPuntoVenta(Boolean isPermisoBusquedaNotaCreditoPuntoVenta) {
		this.isPermisoBusquedaNotaCreditoPuntoVenta = isPermisoBusquedaNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoReporteNotaCreditoPuntoVenta() {
		return isPermisoReporteNotaCreditoPuntoVenta;
	}

	public void setIsPermisoReporteNotaCreditoPuntoVenta(Boolean isPermisoReporteNotaCreditoPuntoVenta) {
		this.isPermisoReporteNotaCreditoPuntoVenta = isPermisoReporteNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionMedioNotaCreditoPuntoVenta() {
		return isPermisoPaginacionMedioNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionMedioNotaCreditoPuntoVenta(Boolean isPermisoPaginacionMedioNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionMedioNotaCreditoPuntoVenta = isPermisoPaginacionMedioNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionTodoNotaCreditoPuntoVenta() {
		return isPermisoPaginacionTodoNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionTodoNotaCreditoPuntoVenta(Boolean isPermisoPaginacionTodoNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionTodoNotaCreditoPuntoVenta = isPermisoPaginacionTodoNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionAltoNotaCreditoPuntoVenta() {
		return isPermisoPaginacionAltoNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionAltoNotaCreditoPuntoVenta(Boolean isPermisoPaginacionAltoNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionAltoNotaCreditoPuntoVenta = isPermisoPaginacionAltoNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoCopiarNotaCreditoPuntoVenta() {
		return isPermisoCopiarNotaCreditoPuntoVenta;
	}

	public void setIsPermisoCopiarNotaCreditoPuntoVenta(Boolean isPermisoCopiarNotaCreditoPuntoVenta) {
		this.isPermisoCopiarNotaCreditoPuntoVenta = isPermisoCopiarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoVerFormNotaCreditoPuntoVenta() {
		return isPermisoVerFormNotaCreditoPuntoVenta;
	}

	public void setIsPermisoVerFormNotaCreditoPuntoVenta(Boolean isPermisoVerFormNotaCreditoPuntoVenta) {
		this.isPermisoVerFormNotaCreditoPuntoVenta = isPermisoVerFormNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoDuplicarNotaCreditoPuntoVenta() {
		return isPermisoDuplicarNotaCreditoPuntoVenta;
	}

	public void setIsPermisoDuplicarNotaCreditoPuntoVenta(Boolean isPermisoDuplicarNotaCreditoPuntoVenta) {
		this.isPermisoDuplicarNotaCreditoPuntoVenta = isPermisoDuplicarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoOrdenNotaCreditoPuntoVenta() {
		return isPermisoOrdenNotaCreditoPuntoVenta;
	}

	public void setIsPermisoOrdenNotaCreditoPuntoVenta(Boolean isPermisoOrdenNotaCreditoPuntoVenta) {
		this.isPermisoOrdenNotaCreditoPuntoVenta = isPermisoOrdenNotaCreditoPuntoVenta;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaNuevoNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaNuevoNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta = isVisibilidadCeldaNuevoNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaDuplicarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta = isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaCopiarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCopiarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaCopiarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta = isVisibilidadCeldaCopiarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaVerFormNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaVerFormNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaVerFormNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta = isVisibilidadCeldaVerFormNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaOrdenNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaOrdenNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaOrdenNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta = isVisibilidadCeldaOrdenNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta = isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaModificarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaModificarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaModificarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaModificarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta = isVisibilidadCeldaModificarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaActualizarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaActualizarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaActualizarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta = isVisibilidadCeldaActualizarNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaEliminarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaEliminarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaEliminarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaEliminarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta = isVisibilidadCeldaEliminarNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaCancelarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaCancelarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCancelarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaCancelarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta = isVisibilidadCeldaCancelarNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaGuardarNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaGuardarNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaGuardarNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta = isVisibilidadCeldaGuardarNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta = isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta;
	}
		
	public NotaCreditoPuntoVentaSessionBean getnotacreditopuntoventaSessionBean() {
		return this.notacreditopuntoventaSessionBean;
	}
	
	public void setnotacreditopuntoventaSessionBean(NotaCreditoPuntoVentaSessionBean notacreditopuntoventaSessionBean) {
		this.notacreditopuntoventaSessionBean=notacreditopuntoventaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCaja() {
		return this.isVisibilidadFK_IdCaja;
	}

	public void setisVisibilidadFK_IdCaja(Boolean isVisibilidadFK_IdCaja) {
		this.isVisibilidadFK_IdCaja=isVisibilidadFK_IdCaja;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoNotaCreditoPuntoVenta() {
		return this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta;
	}

	public void setisVisibilidadFK_IdEstadoNotaCreditoPuntoVenta(Boolean isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {
		this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMesa() {
		return this.isVisibilidadFK_IdMesa;
	}

	public void setisVisibilidadFK_IdMesa(Boolean isVisibilidadFK_IdMesa) {
		this.isVisibilidadFK_IdMesa=isVisibilidadFK_IdMesa;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoFacturaPuntoVenta() {
		return this.isVisibilidadFK_IdTipoFacturaPuntoVenta;
	}

	public void setisVisibilidadFK_IdTipoFacturaPuntoVenta(Boolean isVisibilidadFK_IdTipoFacturaPuntoVenta) {
		this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isVisibilidadFK_IdTipoFacturaPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarSucursalForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarUsuarioForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarVendedorForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarClienteForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarCajaForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarAsientoContableForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarTipoPrecioForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarMesaForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarFormatoForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarTipoFacturaPuntoVentaForeignKey(notacreditopuntoventa,null);
				this.setActualParaGuardarEstadoNotaCreditoPuntoVentaForeignKey(notacreditopuntoventa,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(NotaCreditoPuntoVenta notacreditopuntoventa,NotaCreditoPuntoVenta notacreditopuntoventaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalNotaCreditoPuntoVenta(notacreditopuntoventa);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		notacreditopuntoventaAux.setId(notacreditopuntoventa.getId());
		notacreditopuntoventaAux.setVersionRow(notacreditopuntoventa.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessNotaCreditoPuntoVenta();
		
			int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = notacreditopuntoventaValidator.getInvalidValues(this.notacreditopuntoventa);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			notacreditopuntoventaLogic.setDatosCliente(datosCliente);
			notacreditopuntoventaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				notacreditopuntoventaAux=new  NotaCreditoPuntoVenta();
				
				notacreditopuntoventaAux.setIsNew(true);
				notacreditopuntoventaAux.setIsChanged(true);
				
				notacreditopuntoventaAux.setNotaCreditoPuntoVentaOriginal(this.notacreditopuntoventa);
				
				notacreditopuntoventaAux.setId(this.notacreditopuntoventa.getId());	
				notacreditopuntoventaAux.setVersionRow(this.notacreditopuntoventa.getVersionRow());	
				notacreditopuntoventaAux.setid_empresa(this.notacreditopuntoventa.getid_empresa());	
				notacreditopuntoventaAux.setid_sucursal(this.notacreditopuntoventa.getid_sucursal());	
				notacreditopuntoventaAux.setid_usuario(this.notacreditopuntoventa.getid_usuario());	
				notacreditopuntoventaAux.setid_vendedor(this.notacreditopuntoventa.getid_vendedor());	
				notacreditopuntoventaAux.setid_cliente(this.notacreditopuntoventa.getid_cliente());	
				notacreditopuntoventaAux.setid_caja(this.notacreditopuntoventa.getid_caja());	
				notacreditopuntoventaAux.setid_asiento_contable(this.notacreditopuntoventa.getid_asiento_contable());	
				notacreditopuntoventaAux.setid_tipo_precio(this.notacreditopuntoventa.getid_tipo_precio());	
				notacreditopuntoventaAux.setid_mesa(this.notacreditopuntoventa.getid_mesa());	
				notacreditopuntoventaAux.setid_formato(this.notacreditopuntoventa.getid_formato());	
				notacreditopuntoventaAux.setid_tipo_factura_punto_venta(this.notacreditopuntoventa.getid_tipo_factura_punto_venta());	
				notacreditopuntoventaAux.setid_estado_nota_credito_punto_venta(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta());	
				notacreditopuntoventaAux.setnumero_secuencial(this.notacreditopuntoventa.getnumero_secuencial());	
				notacreditopuntoventaAux.setcodigo_cliente(this.notacreditopuntoventa.getcodigo_cliente());	
				notacreditopuntoventaAux.setnombre_cliente(this.notacreditopuntoventa.getnombre_cliente());	
				notacreditopuntoventaAux.settarjeta_cliente(this.notacreditopuntoventa.gettarjeta_cliente());	
				notacreditopuntoventaAux.setdireccion_cliente(this.notacreditopuntoventa.getdireccion_cliente());	
				notacreditopuntoventaAux.settelefono_cliente(this.notacreditopuntoventa.gettelefono_cliente());	
				notacreditopuntoventaAux.setfecha(this.notacreditopuntoventa.getfecha());	
				notacreditopuntoventaAux.sethora(this.notacreditopuntoventa.gethora());	
				notacreditopuntoventaAux.settotal_iva(this.notacreditopuntoventa.gettotal_iva());	
				notacreditopuntoventaAux.settotal_sin_iva(this.notacreditopuntoventa.gettotal_sin_iva());	
				notacreditopuntoventaAux.setiva(this.notacreditopuntoventa.getiva());	
				notacreditopuntoventaAux.setdescuento(this.notacreditopuntoventa.getdescuento());	
				notacreditopuntoventaAux.setfinanciamiento(this.notacreditopuntoventa.getfinanciamiento());	
				notacreditopuntoventaAux.setflete(this.notacreditopuntoventa.getflete());	
				notacreditopuntoventaAux.setice(this.notacreditopuntoventa.getice());	
				notacreditopuntoventaAux.setotros(this.notacreditopuntoventa.getotros());	
				notacreditopuntoventaAux.setsub_total(this.notacreditopuntoventa.getsub_total());	
				notacreditopuntoventaAux.settotal(this.notacreditopuntoventa.gettotal());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.saveNotaCreditoPuntoVentas();//WithConnection
						//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas.addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditopuntoventaLogic.saveNotaCreditoPuntoVentaRelaciones(notacreditopuntoventaAux,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());//WithConnection
								//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas= new ArrayList<DetalleNotaCreditoPuntoVenta>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditopuntoventaAux.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				notacreditopuntoventaAux=new  NotaCreditoPuntoVenta();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() 
					|| (this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() && this.notacreditopuntoventa.getId()>=0)) {
						
					notacreditopuntoventaAux.setIsNew(false);
				}
				
				notacreditopuntoventaAux.setIsDeleted(false);
			
				notacreditopuntoventaAux.setId(this.notacreditopuntoventa.getId());	
				notacreditopuntoventaAux.setVersionRow(this.notacreditopuntoventa.getVersionRow());	
				notacreditopuntoventaAux.setid_empresa(this.notacreditopuntoventa.getid_empresa());	
				notacreditopuntoventaAux.setid_sucursal(this.notacreditopuntoventa.getid_sucursal());	
				notacreditopuntoventaAux.setid_usuario(this.notacreditopuntoventa.getid_usuario());	
				notacreditopuntoventaAux.setid_vendedor(this.notacreditopuntoventa.getid_vendedor());	
				notacreditopuntoventaAux.setid_cliente(this.notacreditopuntoventa.getid_cliente());	
				notacreditopuntoventaAux.setid_caja(this.notacreditopuntoventa.getid_caja());	
				notacreditopuntoventaAux.setid_asiento_contable(this.notacreditopuntoventa.getid_asiento_contable());	
				notacreditopuntoventaAux.setid_tipo_precio(this.notacreditopuntoventa.getid_tipo_precio());	
				notacreditopuntoventaAux.setid_mesa(this.notacreditopuntoventa.getid_mesa());	
				notacreditopuntoventaAux.setid_formato(this.notacreditopuntoventa.getid_formato());	
				notacreditopuntoventaAux.setid_tipo_factura_punto_venta(this.notacreditopuntoventa.getid_tipo_factura_punto_venta());	
				notacreditopuntoventaAux.setid_estado_nota_credito_punto_venta(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta());	
				notacreditopuntoventaAux.setnumero_secuencial(this.notacreditopuntoventa.getnumero_secuencial());	
				notacreditopuntoventaAux.setcodigo_cliente(this.notacreditopuntoventa.getcodigo_cliente());	
				notacreditopuntoventaAux.setnombre_cliente(this.notacreditopuntoventa.getnombre_cliente());	
				notacreditopuntoventaAux.settarjeta_cliente(this.notacreditopuntoventa.gettarjeta_cliente());	
				notacreditopuntoventaAux.setdireccion_cliente(this.notacreditopuntoventa.getdireccion_cliente());	
				notacreditopuntoventaAux.settelefono_cliente(this.notacreditopuntoventa.gettelefono_cliente());	
				notacreditopuntoventaAux.setfecha(this.notacreditopuntoventa.getfecha());	
				notacreditopuntoventaAux.sethora(this.notacreditopuntoventa.gethora());	
				notacreditopuntoventaAux.settotal_iva(this.notacreditopuntoventa.gettotal_iva());	
				notacreditopuntoventaAux.settotal_sin_iva(this.notacreditopuntoventa.gettotal_sin_iva());	
				notacreditopuntoventaAux.setiva(this.notacreditopuntoventa.getiva());	
				notacreditopuntoventaAux.setdescuento(this.notacreditopuntoventa.getdescuento());	
				notacreditopuntoventaAux.setfinanciamiento(this.notacreditopuntoventa.getfinanciamiento());	
				notacreditopuntoventaAux.setflete(this.notacreditopuntoventa.getflete());	
				notacreditopuntoventaAux.setice(this.notacreditopuntoventa.getice());	
				notacreditopuntoventaAux.setotros(this.notacreditopuntoventa.getotros());	
				notacreditopuntoventaAux.setsub_total(this.notacreditopuntoventa.getsub_total());	
				notacreditopuntoventaAux.settotal(this.notacreditopuntoventa.gettotal());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.saveNotaCreditoPuntoVentas();//WithConnection
						//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas.addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditopuntoventaLogic.saveNotaCreditoPuntoVentaRelaciones(notacreditopuntoventaAux,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());//WithConnection
								//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas= new ArrayList<DetalleNotaCreditoPuntoVenta>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditopuntoventaAux.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.notacreditopuntoventa,notacreditopuntoventaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				notacreditopuntoventaAux=new  NotaCreditoPuntoVenta();
				
				notacreditopuntoventaAux.setIsNew(false);
				notacreditopuntoventaAux.setIsChanged(false);
				
				notacreditopuntoventaAux.setIsDeleted(true);
				
				notacreditopuntoventaAux.setId(this.notacreditopuntoventa.getId());	
				notacreditopuntoventaAux.setVersionRow(this.notacreditopuntoventa.getVersionRow());	
				notacreditopuntoventaAux.setid_empresa(this.notacreditopuntoventa.getid_empresa());	
				notacreditopuntoventaAux.setid_sucursal(this.notacreditopuntoventa.getid_sucursal());	
				notacreditopuntoventaAux.setid_usuario(this.notacreditopuntoventa.getid_usuario());	
				notacreditopuntoventaAux.setid_vendedor(this.notacreditopuntoventa.getid_vendedor());	
				notacreditopuntoventaAux.setid_cliente(this.notacreditopuntoventa.getid_cliente());	
				notacreditopuntoventaAux.setid_caja(this.notacreditopuntoventa.getid_caja());	
				notacreditopuntoventaAux.setid_asiento_contable(this.notacreditopuntoventa.getid_asiento_contable());	
				notacreditopuntoventaAux.setid_tipo_precio(this.notacreditopuntoventa.getid_tipo_precio());	
				notacreditopuntoventaAux.setid_mesa(this.notacreditopuntoventa.getid_mesa());	
				notacreditopuntoventaAux.setid_formato(this.notacreditopuntoventa.getid_formato());	
				notacreditopuntoventaAux.setid_tipo_factura_punto_venta(this.notacreditopuntoventa.getid_tipo_factura_punto_venta());	
				notacreditopuntoventaAux.setid_estado_nota_credito_punto_venta(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta());	
				notacreditopuntoventaAux.setnumero_secuencial(this.notacreditopuntoventa.getnumero_secuencial());	
				notacreditopuntoventaAux.setcodigo_cliente(this.notacreditopuntoventa.getcodigo_cliente());	
				notacreditopuntoventaAux.setnombre_cliente(this.notacreditopuntoventa.getnombre_cliente());	
				notacreditopuntoventaAux.settarjeta_cliente(this.notacreditopuntoventa.gettarjeta_cliente());	
				notacreditopuntoventaAux.setdireccion_cliente(this.notacreditopuntoventa.getdireccion_cliente());	
				notacreditopuntoventaAux.settelefono_cliente(this.notacreditopuntoventa.gettelefono_cliente());	
				notacreditopuntoventaAux.setfecha(this.notacreditopuntoventa.getfecha());	
				notacreditopuntoventaAux.sethora(this.notacreditopuntoventa.gethora());	
				notacreditopuntoventaAux.settotal_iva(this.notacreditopuntoventa.gettotal_iva());	
				notacreditopuntoventaAux.settotal_sin_iva(this.notacreditopuntoventa.gettotal_sin_iva());	
				notacreditopuntoventaAux.setiva(this.notacreditopuntoventa.getiva());	
				notacreditopuntoventaAux.setdescuento(this.notacreditopuntoventa.getdescuento());	
				notacreditopuntoventaAux.setfinanciamiento(this.notacreditopuntoventa.getfinanciamiento());	
				notacreditopuntoventaAux.setflete(this.notacreditopuntoventa.getflete());	
				notacreditopuntoventaAux.setice(this.notacreditopuntoventa.getice());	
				notacreditopuntoventaAux.setotros(this.notacreditopuntoventa.getotros());	
				notacreditopuntoventaAux.setsub_total(this.notacreditopuntoventa.getsub_total());	
				notacreditopuntoventaAux.settotal(this.notacreditopuntoventa.gettotal());	
				
				if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.notacreditopuntoventaAux.getId()>=0) {	
						this.notacreditopuntoventasEliminados.add(notacreditopuntoventaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.saveNotaCreditoPuntoVentas();//WithConnection
						//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas.addAll(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								notacreditopuntoventaLogic.saveNotaCreditoPuntoVentaRelaciones(notacreditopuntoventaAux,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());//WithConnection
								//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas= new ArrayList<DetalleNotaCreditoPuntoVenta>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							notacreditopuntoventaAux.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(notacreditopuntoventaAux,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(notacreditopuntoventaAux,notacreditopuntoventas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(this.notacreditopuntoventasEliminados);
					
					notacreditopuntoventaLogic.saveNotaCreditoPuntoVentas();//WithConnection
					//notacreditopuntoventaLogic.getSetVersionRowNotaCreditoPuntoVentas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta();
				
				this.notacreditopuntoventasEliminados= new ArrayList<NotaCreditoPuntoVenta>();		
			}
			
			if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Nota Credito GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.notacreditopuntoventa=notacreditopuntoventaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessNotaCreditoPuntoVenta();
      	}
		
	}	
	
	public void actualizarRelaciones(NotaCreditoPuntoVenta notacreditopuntoventaLocal) throws Exception {
		
		if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				notacreditopuntoventaLocal.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
			
			} else {
			
				notacreditopuntoventaLocal.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventas);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(NotaCreditoPuntoVenta notacreditopuntoventaLocal) throws Exception {	
		if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				notacreditopuntoventaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				notacreditopuntoventaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				notacreditopuntoventaLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				notacreditopuntoventaLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				notacreditopuntoventaLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CajaDetalleFormJInternalFrame.class)) {
				CajaBeanSwingJInternalFrame cajaBeanSwingJInternalFrameLocal=(CajaBeanSwingJInternalFrame) ((CajaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cajaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCaja(cajaBeanSwingJInternalFrameLocal.getcaja(),true);
				cajaBeanSwingJInternalFrameLocal.actualizarLista(cajaBeanSwingJInternalFrameLocal.caja,this.cajasForeignKey);

				cajaBeanSwingJInternalFrameLocal.actualizarRelaciones(cajaBeanSwingJInternalFrameLocal.caja);

				notacreditopuntoventaLocal.setCaja(cajaBeanSwingJInternalFrameLocal.caja);

				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey("Formulario");
				this.setActualCajaForeignKey(cajaBeanSwingJInternalFrameLocal.caja.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				notacreditopuntoventaLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				notacreditopuntoventaLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesaDetalleFormJInternalFrame.class)) {
				MesaBeanSwingJInternalFrame mesaBeanSwingJInternalFrameLocal=(MesaBeanSwingJInternalFrame) ((MesaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMesa(mesaBeanSwingJInternalFrameLocal.getmesa(),true);
				mesaBeanSwingJInternalFrameLocal.actualizarLista(mesaBeanSwingJInternalFrameLocal.mesa,this.mesasForeignKey);

				mesaBeanSwingJInternalFrameLocal.actualizarRelaciones(mesaBeanSwingJInternalFrameLocal.mesa);

				notacreditopuntoventaLocal.setMesa(mesaBeanSwingJInternalFrameLocal.mesa);

				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey("Formulario");
				this.setActualMesaForeignKey(mesaBeanSwingJInternalFrameLocal.mesa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				notacreditopuntoventaLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoFacturaPuntoVentaDetalleFormJInternalFrame.class)) {
				TipoFacturaPuntoVentaBeanSwingJInternalFrame tipofacturapuntoventaBeanSwingJInternalFrameLocal=(TipoFacturaPuntoVentaBeanSwingJInternalFrame) ((TipoFacturaPuntoVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipofacturapuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoFacturaPuntoVenta(tipofacturapuntoventaBeanSwingJInternalFrameLocal.gettipofacturapuntoventa(),true);
				tipofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarLista(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa,this.tipofacturapuntoventasForeignKey);

				tipofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa);

				notacreditopuntoventaLocal.setTipoFacturaPuntoVenta(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa);

				this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
				this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Formulario");
				this.setActualTipoFacturaPuntoVentaForeignKey(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoNotaCreditoDetalleFormJInternalFrame.class)) {
				EstadoNotaCreditoBeanSwingJInternalFrame estadonotacreditopuntoventaBeanSwingJInternalFrameLocal=(EstadoNotaCreditoBeanSwingJInternalFrame) ((EstadoNotaCreditoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoNotaCredito(estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.getestadonotacredito(),true);
				estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.actualizarLista(estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.estadonotacredito,this.estadonotacreditopuntoventasForeignKey);

				estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.estadonotacredito);

				notacreditopuntoventaLocal.setEstadoNotaCreditoPuntoVenta(estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.estadonotacredito);

				this.addItemDefectoCombosForeignKeyEstadoNotaCreditoPuntoVenta();
				this.cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey("Formulario");
				this.setActualEstadoNotaCreditoPuntoVentaForeignKey(estadonotacreditopuntoventaBeanSwingJInternalFrameLocal.estadonotacredito.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarNotaCreditoPuntoVentaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = notacreditopuntoventaValidator.getInvalidValues(this.notacreditopuntoventa);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(NotaCreditoPuntoVenta notacreditopuntoventa,List<NotaCreditoPuntoVenta> notacreditopuntoventas) throws Exception {
		try	{		
			NotaCreditoPuntoVentaConstantesFunciones.actualizarLista(notacreditopuntoventa,notacreditopuntoventas,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(NotaCreditoPuntoVenta notacreditopuntoventa,List<NotaCreditoPuntoVenta> notacreditopuntoventas) throws Exception {
		try	{			
			NotaCreditoPuntoVentaConstantesFunciones.actualizarSelectedLista(notacreditopuntoventa,notacreditopuntoventas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<NotaCreditoPuntoVenta> notacreditopuntoventasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				notacreditopuntoventasLocal=this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				notacreditopuntoventasLocal=this.notacreditopuntoventas;
			}
			//ARCHITECTURE
		
			for(NotaCreditoPuntoVenta notacreditopuntoventaLocal:notacreditopuntoventasLocal) {
				if(this.permiteMantenimiento(notacreditopuntoventaLocal) && notacreditopuntoventaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.getNotaCreditoPuntoVentaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_empresaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_sucursalNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_usuarioNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_vendedorNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDCAJA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_cajaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_asiento_contableNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_tipo_precioNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDMESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_mesaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_formatoNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDTIPOFACTURAPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IDESTADONOTACREDITOPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.NUMEROSECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnumero_secuencialNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.CODIGOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelcodigo_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.NOMBRECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnombre_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.TARJETACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltarjeta_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.DIRECCIONCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldireccion_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.TELEFONOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltelefono_clienteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfechaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.HORA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelhoraNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_ivaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.TOTALSINIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_sin_ivaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelivaNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldescuentoNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.FINANCIAMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfinanciamientoNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfleteNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeliceNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.OTROS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelotrosNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelsub_totalNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(NotaCreditoPuntoVentaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotalNotaCreditoPuntoVenta,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_empresaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_sucursalNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_usuarioNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_vendedorNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_cajaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_asiento_contableNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_tipo_precioNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_mesaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_formatoNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnumero_secuencialNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelcodigo_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnombre_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltarjeta_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldireccion_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltelefono_clienteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfechaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelhoraNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_ivaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_sin_ivaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelivaNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldescuentoNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfinanciamientoNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfleteNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeliceNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelotrosNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelsub_totalNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotalNotaCreditoPuntoVenta,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetalleNotaCreditoPuntoVenta")) {
			if(this.notacreditopuntoventa==null) {
				this.notacreditopuntoventa= new NotaCreditoPuntoVenta();
			}

			if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoNotaCreditoPuntoVenta
				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.getdetallenotacreditopuntoventa().setNotaCreditoPuntoVenta(this.notacreditopuntoventa);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoNotaCreditoPuntoVenta--;	
		
		
		this.notacreditopuntoventaAux=new NotaCreditoPuntoVenta();
		
		this.notacreditopuntoventaAux.setId(this.iIdNuevoNotaCreditoPuntoVenta);
		this.notacreditopuntoventaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().add(this.notacreditopuntoventaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.notacreditopuntoventas.add(this.notacreditopuntoventaAux);
		}
		//ARCHITECTURE
		
		this.notacreditopuntoventa=this.notacreditopuntoventaAux;
		
		if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventa);
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoPuntoVenta(this.notacreditopuntoventa);
		}
				
		//this.setDefaultControlesNotaCreditoPuntoVenta();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyNotaCreditoPuntoVenta();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyNotaCreditoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoPuntoVenta();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventaBean,this.notacreditopuntoventa,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.procesarEventosNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this.notacreditopuntoventa,this.notacreditopuntoventaParameterGeneral,this.isEsNuevoNotaCreditoPuntoVenta,classes);//this.notacreditopuntoventaLogic.getNotaCreditoPuntoVenta()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral,this.notacreditopuntoventaBean,false);
		
		if(this.notacreditopuntoventaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta());
		}
		
		if(this.notacreditopuntoventaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta(),classes);//this.notacreditopuntoventaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyNotaCreditoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyNotaCreditoPuntoVenta();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarFormNotaCreditoPuntoVenta(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
						
			if(notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() && DetalleNotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleNotaCreditoPuntoVentaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();
			}
			
			this.actualizarVisualTableDatosNotaCreditoPuntoVenta();
			
			this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoPuntoVenta(), this.getIndiceNuevoNotaCreditoPuntoVenta());
			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
						
			this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesNotaCreditoPuntoVenta(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarnumero_secuencialNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarcodigo_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarnombre_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activartarjeta_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activardireccion_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activartelefono_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarfechaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarhoraNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activartotal_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activartotal_sin_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activardescuentoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarfinanciamientoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarfleteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activariceNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarotrosNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarsub_totalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activartotalNotaCreditoPuntoVenta);	
		//
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_empresaNotaCreditoPuntoVenta);//
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_sucursalNotaCreditoPuntoVenta);//
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_usuarioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_vendedorNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_cajaNotaCreditoPuntoVenta);//
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_asiento_contableNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_tipo_precioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_mesaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_formatoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.notacreditopuntoventaConstantesFunciones.activarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta);
	};
	
	public void setDefaultControlesNotaCreditoPuntoVenta() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoNotaCreditoPuntoVenta(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.notacreditopuntoventaSessionBean.setConGuardarRelaciones(true);			
			this.notacreditopuntoventaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.notacreditopuntoventaSessionBean.setConGuardarRelaciones(false);			
			this.notacreditopuntoventaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoNotaCreditoPuntoVenta() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				if(notacreditopuntoventaAux.getId().equals(this.iIdNuevoNotaCreditoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventas) {
				if(notacreditopuntoventaAux.getId().equals(this.iIdNuevoNotaCreditoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				if(notacreditopuntoventaAux.getId().equals(notacreditopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventas) {
				if(notacreditopuntoventaAux.getId().equals(notacreditopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				if(notacreditopuntoventaAux.getNotaCreditoPuntoVentaOriginal().getId().equals(notacreditopuntoventaOriginal.getId())) {
					existe=true;
					notacreditopuntoventaOriginal.setId(notacreditopuntoventaAux.getId());
					notacreditopuntoventaOriginal.setVersionRow(notacreditopuntoventaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventas) {
				if(notacreditopuntoventaAux.getNotaCreditoPuntoVentaOriginal().getId().equals(notacreditopuntoventaOriginal.getId())) {
					existe=true;
					notacreditopuntoventaOriginal.setId(notacreditopuntoventaAux.getId());
					notacreditopuntoventaOriginal.setVersionRow(notacreditopuntoventaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosNotaCreditoPuntoVenta(Boolean esParaCancelar) throws Exception {
		notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
		notacreditopuntoventaAux=new NotaCreditoPuntoVenta();
		
		if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
					if(notacreditopuntoventaAux.getId()<0) {
						notacreditopuntoventasAux.add(notacreditopuntoventaAux);
					}		
				}
				this.iIdNuevoNotaCreditoPuntoVenta=0L;
				this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().removeAll(notacreditopuntoventasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventas) {
					if(notacreditopuntoventaAux.getId()<0) {
						notacreditopuntoventasAux.add(notacreditopuntoventaAux);
					}		
				}
				this.iIdNuevoNotaCreditoPuntoVenta=0L;
				this.notacreditopuntoventas.removeAll(notacreditopuntoventasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoNotaCreditoPuntoVenta 
					&& this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()>0
					) {
					notacreditopuntoventaAux=this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().get(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size() - 1);
				
					if(notacreditopuntoventaAux.getId()<0) {
						this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().remove(notacreditopuntoventaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoNotaCreditoPuntoVenta && this.notacreditopuntoventas.size()>0) {
					notacreditopuntoventaAux=this.notacreditopuntoventas.get(this.notacreditopuntoventas.size() - 1);
				
					if(notacreditopuntoventaAux.getId()<0) {
						this.notacreditopuntoventas.remove(notacreditopuntoventaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoNotaCreditoPuntoVenta(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(notacreditopuntoventa.getId()<0) {
				this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().remove(this.notacreditopuntoventa);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(notacreditopuntoventa.getId()<0) {
				this.notacreditopuntoventas.remove(this.notacreditopuntoventa);
			}
		}			
	}
	
	public void setEstadosInicialesNotaCreditoPuntoVenta(List<NotaCreditoPuntoVenta> notacreditopuntoventasAux) throws Exception {
		NotaCreditoPuntoVentaConstantesFunciones.setEstadosInicialesNotaCreditoPuntoVenta(notacreditopuntoventasAux);
	}
	
	public void setEstadosInicialesNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventaAux) throws Exception {
		NotaCreditoPuntoVentaConstantesFunciones.setEstadosInicialesNotaCreditoPuntoVenta(notacreditopuntoventaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarNotaCreditoPuntoVentaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarNotaCreditoPuntoVentaActual()) {
				if(!this.isEsNuevoNotaCreditoPuntoVenta) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoNotaCreditoPuntoVenta=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarNotaCreditoPuntoVentaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Nota Credito ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(NotaCreditoPuntoVenta notacreditopuntoventa) throws Exception {
		NotaCreditoPuntoVentaConstantesFunciones.seleccionarAsignar(this.notacreditopuntoventa,notacreditopuntoventa);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarNotaCreditoPuntoVenta=this.isPermisoActualizarOriginalNotaCreditoPuntoVenta;
			
			
			this.seleccionarAsignar(notacreditopuntoventa);
			
			

			idVendedorActual=notacreditopuntoventa.getid_vendedor();
			this.seleccionarVendedorActual();

			idClienteActual=notacreditopuntoventa.getid_cliente();
			this.seleccionarClienteActual();

			idAsientoContableActual=notacreditopuntoventa.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			NotaCreditoPuntoVentaConstantesFunciones.quitarEspaciosNotaCreditoPuntoVenta(this.notacreditopuntoventa,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.notacreditopuntoventaSessionBean.setsFuncionBusquedaRapida(this.notacreditopuntoventaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarVendedorActual() throws Exception {
		try	{
			Vendedor vendedorAux=new Vendedor();

			if(this.idVendedorActual != null && this.idVendedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(this.idVendedorActual);
					vendedorAux= vendedorLogic.getVendedor();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				vendedorsForeignKey=new ArrayList<Vendedor>();
				vendedorsForeignKey.add(vendedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoNotaCreditoPuntoVenta) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosNotaCreditoPuntoVenta(esParaCancelar);				
				this.cancelarNuevoNotaCreditoPuntoVenta(esParaCancelar);								
			}
			
			this.notacreditopuntoventa=new NotaCreditoPuntoVenta();
			
			this.inicializarNotaCreditoPuntoVenta();
			
			this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarNotaCreditoPuntoVenta() throws Exception {
		try {
			NotaCreditoPuntoVentaConstantesFunciones.inicializarNotaCreditoPuntoVenta(this.notacreditopuntoventa);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteNotaCreditoPuntoVentas(String sAccionBusqueda,List<NotaCreditoPuntoVenta> notacreditopuntoventasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="NotaCreditoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="NotaCreditoPuntoVentaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("NotaCreditoPuntoVentaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="NotaCreditoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Nota Creditos");		
		parameters.put("busquedapor", NotaCreditoPuntoVentaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetalleNotaCreditoPuntoVenta.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					NotaCreditoPuntoVentaLogic notacreditopuntoventaLogicAuxiliar=new NotaCreditoPuntoVentaLogic();
					notacreditopuntoventaLogicAuxiliar.setDatosCliente(notacreditopuntoventaLogic.getDatosCliente());				
					notacreditopuntoventaLogicAuxiliar.setNotaCreditoPuntoVentas(notacreditopuntoventasParaReportes);
					
					notacreditopuntoventaLogicAuxiliar.cargarRelacionesLoteForeignKeyNotaCreditoPuntoVentaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					notacreditopuntoventasParaReportes=notacreditopuntoventaLogicAuxiliar.getNotaCreditoPuntoVentas();
					
					//notacreditopuntoventaLogic.getNewConnexionToDeep();
					
					//for (NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasParaReportes) {
					//	notacreditopuntoventaLogic.deepLoad(notacreditopuntoventa, false, DeepLoadType.INCLUDE, classes);
					//}						
					//notacreditopuntoventaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetalleNotaCreditoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("DetalleNotaCreditoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallenotacreditopuntoventa", reportFileDetalleNotaCreditoPuntoVenta);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceNotaCreditoPuntoVenta=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			NotaCreditoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			NotaCreditoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceNotaCreditoPuntoVenta=new JRBeanArrayDataSource(NotaCreditoPuntoVentaJInternalFrame.TraerNotaCreditoPuntoVentaBeans(notacreditopuntoventasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceNotaCreditoPuntoVenta);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+NotaCreditoPuntoVentaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(NotaCreditoPuntoVentaBean.TraerNotaCreditoPuntoVentaBeans(notacreditopuntoventasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVentaActionPerformed(null);
					//this.generarExcelReporteNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,notacreditopuntoventasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoPuntoVenta> notacreditopuntoventasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCreditoPuntoVenta("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(NotaCreditoPuntoVenta notacreditopuntoventa : notacreditopuntoventasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			NotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataNotaCreditoPuntoVenta("NORMAL",row,workbook,notacreditopuntoventa,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderNotaCreditoPuntoVenta(String sTipo,Row row,Workbook workbook) {
		
		NotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteHeaderNotaCreditoPuntoVenta(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoPuntoVenta> notacreditopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(NotaCreditoPuntoVenta notacreditopuntoventa : notacreditopuntoventasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.getNotaCreditoPuntoVentaDescripcion(notacreditopuntoventa));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getcaja_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getmesa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettipofacturapuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getnumero_secuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getcodigo_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getnombre_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettarjeta_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getdireccion_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettelefono_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gethora());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettotal_sin_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getfinanciamiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getotros());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(notacreditopuntoventa.gettotal());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<NotaCreditoPuntoVenta> notacreditopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<NotaCreditoPuntoVenta> notacreditopuntoventasRespaldo=null;
		
		classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.notacreditopuntoventaLogic.setDatosCliente(this.datosCliente);
		this.notacreditopuntoventaLogic.setDatosDeep(this.datosDeep);
		this.notacreditopuntoventaLogic.setIsConDeep(true);
		
		notacreditopuntoventasRespaldo=this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas();
		
		this.notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(notacreditopuntoventasParaReportes);	
		this.notacreditopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		notacreditopuntoventasParaReportes=this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas();
		this.notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(notacreditopuntoventasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("NotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderNotaCreditoPuntoVenta("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(NotaCreditoPuntoVenta notacreditopuntoventa : notacreditopuntoventasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderNotaCreditoPuntoVenta("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			NotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataNotaCreditoPuntoVenta("NORMAL",row,workbook,notacreditopuntoventa,cellStyleDataAux);
		
			
			


				//DetalleNotaCreditoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas()!=null && notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleNotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas()!=null) {
					i2=0;
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa : notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleNotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataDetalleNotaCreditoPuntoVenta("RELACIONADO",row,workbook,detallenotacreditopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.getNotaCreditoPuntoVentaDescripcion(notacreditopuntoventa));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessNotaCreditoPuntoVenta() throws Exception {		
		this.startProcessNotaCreditoPuntoVenta(true);
	}
	
	public void startProcessNotaCreditoPuntoVenta(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasNotaCreditoPuntoVenta ,this.jPanelParametrosReportesNotaCreditoPuntoVenta, this.jScrollPanelDatosNotaCreditoPuntoVenta,this.jPanelPaginacionNotaCreditoPuntoVenta, this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta, this.jPanelAccionesNotaCreditoPuntoVenta,this.jPanelAccionesFormularioNotaCreditoPuntoVenta,this.jmenuBarNotaCreditoPuntoVenta,this.jmenuBarDetalleNotaCreditoPuntoVenta,this.jTtoolBarNotaCreditoPuntoVenta,this.jTtoolBarDetalleNotaCreditoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCreditoPuntoVenta=this.jTabbedPaneBusquedasNotaCreditoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesNotaCreditoPuntoVenta=this.jPanelParametrosReportesNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosNotaCreditoPuntoVenta=this.jScrollPanelDatosNotaCreditoPuntoVenta;
		final JTable jTableDatosNotaCreditoPuntoVenta=this.jTableDatosNotaCreditoPuntoVenta;		
		final JPanel jPanelPaginacionNotaCreditoPuntoVenta=this.jPanelPaginacionNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionNotaCreditoPuntoVenta=this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesNotaCreditoPuntoVenta=this.jPanelAccionesNotaCreditoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarNotaCreditoPuntoVenta=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			jPanelCamposAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelCamposNotaCreditoPuntoVenta;
			jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelAccionesFormularioNotaCreditoPuntoVenta;
		}
		
		final JPanel jPanelCamposNotaCreditoPuntoVenta=jPanelCamposAuxiliarNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesFormularioNotaCreditoPuntoVenta=jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta;
		
		
		final JMenuBar jmenuBarNotaCreditoPuntoVenta=this.jmenuBarNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarNotaCreditoPuntoVenta=this.jTtoolBarNotaCreditoPuntoVenta;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jmenuBarDetalleNotaCreditoPuntoVenta;
			jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTtoolBarDetalleNotaCreditoPuntoVenta;
		}
		
		final JMenuBar jmenuBarDetalleNotaCreditoPuntoVenta=jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarDetalleNotaCreditoPuntoVenta=jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCreditoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCreditoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosNotaCreditoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposNotaCreditoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCreditoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCreditoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCreditoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCreditoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarNotaCreditoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCreditoPuntoVenta ,jPanelParametrosReportesNotaCreditoPuntoVenta,jTableDatosNotaCreditoPuntoVenta, /*jScrollPanelDatosNotaCreditoPuntoVenta,*/jPanelCamposNotaCreditoPuntoVenta,jPanelPaginacionNotaCreditoPuntoVenta, /*jScrollPanelDatosEdicionNotaCreditoPuntoVenta,*/ jPanelAccionesNotaCreditoPuntoVenta,jPanelAccionesFormularioNotaCreditoPuntoVenta,jmenuBarNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jTtoolBarNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasNotaCreditoPuntoVenta ,jPanelParametrosReportesNotaCreditoPuntoVenta, jScrollPanelDatosNotaCreditoPuntoVenta,jPanelPaginacionNotaCreditoPuntoVenta, jScrollPanelDatosEdicionNotaCreditoPuntoVenta, jPanelAccionesNotaCreditoPuntoVenta,jPanelAccionesFormularioNotaCreditoPuntoVenta,jmenuBarNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jTtoolBarNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessNotaCreditoPuntoVenta() {// throws Exception 
		this.finishProcessNotaCreditoPuntoVenta(true);
	}
	
	public void finishProcessNotaCreditoPuntoVenta(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasNotaCreditoPuntoVenta ,this.jPanelParametrosReportesNotaCreditoPuntoVenta, this.jScrollPanelDatosNotaCreditoPuntoVenta,this.jPanelPaginacionNotaCreditoPuntoVenta, this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta, this.jPanelAccionesNotaCreditoPuntoVenta,this.jPanelAccionesFormularioNotaCreditoPuntoVenta,this.jmenuBarNotaCreditoPuntoVenta,this.jmenuBarDetalleNotaCreditoPuntoVenta,this.jTtoolBarNotaCreditoPuntoVenta,this.jTtoolBarDetalleNotaCreditoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasNotaCreditoPuntoVenta=this.jTabbedPaneBusquedasNotaCreditoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesNotaCreditoPuntoVenta=this.jPanelParametrosReportesNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosNotaCreditoPuntoVenta=this.jScrollPanelDatosNotaCreditoPuntoVenta;
		final JTable jTableDatosNotaCreditoPuntoVenta=this.jTableDatosNotaCreditoPuntoVenta;		
		final JPanel jPanelPaginacionNotaCreditoPuntoVenta=this.jPanelPaginacionNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionNotaCreditoPuntoVenta=this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesNotaCreditoPuntoVenta=this.jPanelAccionesNotaCreditoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarNotaCreditoPuntoVenta=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta=new JPanel();
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			jPanelCamposAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelCamposNotaCreditoPuntoVenta;
			jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelAccionesFormularioNotaCreditoPuntoVenta;
		}
		
		final JPanel jPanelCamposNotaCreditoPuntoVenta=jPanelCamposAuxiliarNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesFormularioNotaCreditoPuntoVenta=jPanelAccionesFormularioAuxiliarNotaCreditoPuntoVenta;
		
		
		final JMenuBar jmenuBarNotaCreditoPuntoVenta=this.jmenuBarNotaCreditoPuntoVenta;		
		final JToolBar jTtoolBarNotaCreditoPuntoVenta=this.jTtoolBarNotaCreditoPuntoVenta;
				
		JMenuBar jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta=new JToolBar();
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jmenuBarDetalleNotaCreditoPuntoVenta;
			jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTtoolBarDetalleNotaCreditoPuntoVenta;		
		}
		
		final JMenuBar jmenuBarDetalleNotaCreditoPuntoVenta=jmenuBarDetalleAuxiliarNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarDetalleNotaCreditoPuntoVenta=jTtoolBarDetalleAuxiliarNotaCreditoPuntoVenta;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasNotaCreditoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesNotaCreditoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosNotaCreditoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposNotaCreditoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionNotaCreditoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesNotaCreditoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioNotaCreditoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarNotaCreditoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarNotaCreditoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasNotaCreditoPuntoVenta ,jPanelParametrosReportesNotaCreditoPuntoVenta, jTableDatosNotaCreditoPuntoVenta,/*jScrollPanelDatosNotaCreditoPuntoVenta,*/jPanelCamposNotaCreditoPuntoVenta,jPanelPaginacionNotaCreditoPuntoVenta, /*jScrollPanelDatosEdicionNotaCreditoPuntoVenta,*/ jPanelAccionesNotaCreditoPuntoVenta,jPanelAccionesFormularioNotaCreditoPuntoVenta,jmenuBarNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jTtoolBarNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarNotaCreditoPuntoVenta(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuNotaCreditoPuntoVenta(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarNotaCreditoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarNotaCreditoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.notacreditopuntoventaConstantesFunciones.getsFinalQueryNotaCreditoPuntoVenta();
		String  finalQueryPaginacionTodos=this.notacreditopuntoventaConstantesFunciones.getsFinalQueryNotaCreditoPuntoVenta();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=NotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNoNotaCreditoPuntoVenta(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=NotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNotaCreditoPuntoVenta(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,NotaCreditoPuntoVentaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.notacreditopuntoventasEliminados= new ArrayList<NotaCreditoPuntoVenta>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessNotaCreditoPuntoVenta();
		
				///*NotaCreditoPuntoVentaSessionBean*/this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			
			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=NotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesForeignKeysOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/notacreditopuntoventa."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			notacreditopuntoventasAux= new ArrayList<NotaCreditoPuntoVenta>();
			
				
			notacreditopuntoventaLogic.setDatosCliente(this.datosCliente);
			notacreditopuntoventaLogic.setDatosDeep(this.datosDeep);
			notacreditopuntoventaLogic.setIsConDeep(true);
			
			
			notacreditopuntoventaLogic.getNotaCreditoPuntoVentaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					notacreditopuntoventaLogic.getTodosNotaCreditoPuntoVentas(finalQueryGlobal,pagination);
					
					//notacreditopuntoventaLogic.getTodosNotaCreditoPuntoVentasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null|| notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditopuntoventasAux= new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux= new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditopuntoventaLogic.getTodosNotaCreditoPuntoVentas(finalQueryGlobal+"",this.pagination);												
							
							//notacreditopuntoventaLogic.getTodosNotaCreditoPuntoVentasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());					
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idNotaCreditoPuntoVenta=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idNotaCreditoPuntoVenta=this.idActual;
				
				} else if(this.idNotaCreditoPuntoVentaActual!=null && this.idNotaCreditoPuntoVentaActual!=0L) {
					idNotaCreditoPuntoVenta=idNotaCreditoPuntoVentaActual;
				}
				
					
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndicePorId(idNotaCreditoPuntoVenta);
				
				this.notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					notacreditopuntoventaLogic.getEntity(idNotaCreditoPuntoVenta);
					
					//notacreditopuntoventaLogic.getEntityWithConnection(idNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().add(notacreditopuntoventaLogic.getNotaCreditoPuntoVenta());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
					this.notacreditopuntoventas.add(notacreditopuntoventa);
				}
				
				if(notacreditopuntoventaLogic.getNotaCreditoPuntoVenta()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdAsientoContable",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdAsientoContable",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCaja")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdCaja",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdCaja",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdCliente",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdCliente",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdEmpresa",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdEmpresa",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoNotaCreditoPuntoVenta")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoPuntoVenta(id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta(finalQueryGlobal,pagination,id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoPuntoVenta(id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoPuntoVenta(id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta(finalQueryGlobal,pagination,id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoPuntoVenta(id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoNotaCreditoPuntoVenta(id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdEstadoNotaCreditoPuntoVenta",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdEstadoNotaCreditoPuntoVenta",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormato")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdFormato(finalQueryGlobal,pagination,id_formatoFK_IdFormato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdFormato(finalQueryGlobal,pagination,id_formatoFK_IdFormato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdFormato",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdFormato",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMesa")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdMesa",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdMesa",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdSucursal",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdSucursal",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoFacturaPuntoVenta")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta(finalQueryGlobal,pagination,id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta(finalQueryGlobal,pagination,id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdTipoFacturaPuntoVenta",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdTipoFacturaPuntoVenta",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoPrecio")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdTipoPrecio",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdTipoPrecio",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdUsuario",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdUsuario",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()==null||notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=notacreditopuntoventas==null|| notacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
						notacreditopuntoventasAux.addAll(notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventasAux=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventasAux.addAll(notacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=NotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteNotaCreditoPuntoVentas("FK_IdVendedor",notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteNotaCreditoPuntoVentas("FK_IdVendedor",notacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(new ArrayList<NotaCreditoPuntoVenta>());
						notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().addAll(notacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
							notacreditopuntoventas.addAll(notacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesNotaCreditoPuntoVenta();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessNotaCreditoPuntoVenta();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditopuntoventas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=notacreditopuntoventas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(NotaCreditoPuntoVenta notacreditopuntoventa) {
		Boolean permite=true;
		
		if(this.notacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=NotaCreditoPuntoVentaConstantesFunciones.getOrderByListaNotaCreditoPuntoVenta();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=NotaCreditoPuntoVentaConstantesFunciones.getOrderByListaNotaCreditoPuntoVenta();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				if(notacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditopuntoventaTotales=notacreditopuntoventa;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoPuntoVenta notacreditopuntoventa:this.notacreditopuntoventas) {
				if(notacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditopuntoventaTotales=notacreditopuntoventa;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.notacreditopuntoventaAux=new NotaCreditoPuntoVenta();
			this.notacreditopuntoventaAux.setsType(Constantes2.S_TOTALES);
			this.notacreditopuntoventaAux.setIsNew(false);
			this.notacreditopuntoventaAux.setIsChanged(false);
			this.notacreditopuntoventaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				NotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaNotaCreditoPuntoVenta(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this.notacreditopuntoventaAux);
				
				this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().add(this.notacreditopuntoventaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				NotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaNotaCreditoPuntoVenta(this.notacreditopuntoventas,this.notacreditopuntoventaAux);
				
				this.notacreditopuntoventas.add(this.notacreditopuntoventaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		notacreditopuntoventaTotales=new NotaCreditoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().remove(notacreditopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.notacreditopuntoventas.remove(notacreditopuntoventaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		notacreditopuntoventaTotales=new NotaCreditoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				if(notacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditopuntoventaTotales=notacreditopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaNotaCreditoPuntoVenta(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),notacreditopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(NotaCreditoPuntoVenta notacreditopuntoventa:this.notacreditopuntoventas) {
				if(notacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					notacreditopuntoventaTotales=notacreditopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				NotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaNotaCreditoPuntoVenta(this.notacreditopuntoventas,notacreditopuntoventaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getNotaCreditoPuntoVentasFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdCaja()throws Exception {
		try {
			sAccionBusqueda="FK_IdCaja";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoNotaCreditoPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdMesa()throws Exception {
		try {
			sAccionBusqueda="FK_IdMesa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoFacturaPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getNotaCreditoPuntoVentasFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdCaja(String sFinalQuery,Long id_caja)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCaja(sFinalQuery,this.pagination,id_caja);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta(String sFinalQuery,Long id_estado_nota_credito_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta(sFinalQuery,this.pagination,id_estado_nota_credito_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdMesa(String sFinalQuery,Long id_mesa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdMesa(sFinalQuery,this.pagination,id_mesa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta(String sFinalQuery,Long id_tipo_factura_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta(sFinalQuery,this.pagination,id_tipo_factura_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getNotaCreditoPuntoVentasFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentasFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosNotaCreditoPuntoVenta() {
		this.isPermisoTodoNotaCreditoPuntoVenta=false;
		this.isPermisoNuevoNotaCreditoPuntoVenta=false;
		this.isPermisoActualizarNotaCreditoPuntoVenta=false;
		this.isPermisoActualizarOriginalNotaCreditoPuntoVenta=false;
		this.isPermisoEliminarNotaCreditoPuntoVenta=false;
		this.isPermisoGuardarCambiosNotaCreditoPuntoVenta=false;
		this.isPermisoConsultaNotaCreditoPuntoVenta=false;
		this.isPermisoBusquedaNotaCreditoPuntoVenta=false;
		this.isPermisoReporteNotaCreditoPuntoVenta=false;		
		this.isPermisoOrdenNotaCreditoPuntoVenta=false;		
		this.isPermisoPaginacionMedioNotaCreditoPuntoVenta=false;		
		this.isPermisoPaginacionAltoNotaCreditoPuntoVenta=false;
		this.isPermisoPaginacionTodoNotaCreditoPuntoVenta=false;
		this.isPermisoCopiarNotaCreditoPuntoVenta=false;		
		this.isPermisoVerFormNotaCreditoPuntoVenta=false;		
		this.isPermisoDuplicarNotaCreditoPuntoVenta=false;		
		this.isPermisoOrdenNotaCreditoPuntoVenta=false;		
	}
	
	public void setPermisosUsuarioNotaCreditoPuntoVenta(Boolean isPermiso) {
		this.isPermisoTodoNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoNuevoNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoEliminarNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoConsultaNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoBusquedaNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoReporteNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoOrdenNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionMedioNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionAltoNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionTodoNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoCopiarNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoVerFormNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoDuplicarNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoOrdenNotaCreditoPuntoVenta=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioNotaCreditoPuntoVenta(Boolean isPermiso) {
		//this.isPermisoTodoNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoNuevoNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoEliminarNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoConsultaNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoBusquedaNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoReporteNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoOrdenNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionMedioNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionAltoNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionTodoNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoCopiarNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoDuplicarNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoOrdenNotaCreditoPuntoVenta=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoPuntoVentaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
		if(NotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetalleNotaCreditoPuntoVenta=false;
		this.isTienePermisosDetalleNotaCreditoPuntoVenta=this.verificarGetPermisosUsuarioOpcionNotaCreditoPuntoVentaClaseRelacionada(this.opcionsRelacionadas,DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioNotaCreditoPuntoVentaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetalleNotaCreditoPuntoVenta=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioNotaCreditoPuntoVentaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionNotaCreditoPuntoVentaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioNotaCreditoPuntoVentaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetalleNotaCreditoPuntoVenta && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.remove(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioNotaCreditoPuntoVenta() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(NotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoNotaCreditoPuntoVenta=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarNotaCreditoPuntoVenta=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalNotaCreditoPuntoVenta=this.isPermisoActualizarNotaCreditoPuntoVenta;
			this.isPermisoEliminarNotaCreditoPuntoVenta=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosNotaCreditoPuntoVenta=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaNotaCreditoPuntoVenta=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaNotaCreditoPuntoVenta=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoNotaCreditoPuntoVenta=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteNotaCreditoPuntoVenta=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCreditoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarNotaCreditoPuntoVenta=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormNotaCreditoPuntoVenta=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarNotaCreditoPuntoVenta=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenNotaCreditoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosNotaCreditoPuntoVenta.setToolTipText(this.jTableDatosNotaCreditoPuntoVenta.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioNotaCreditoPuntoVenta(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioNotaCreditoPuntoVenta(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioNotaCreditoPuntoVenta() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetalleNotaCreditoPuntoVenta && this.notacreditopuntoventaConstantesFunciones.mostrarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta && !NotaCreditoPuntoVentaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Nota Credito");
			reporte.setsDescripcion("Detalle Nota Credito");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyNotaCreditoPuntoVentaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.cajasForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.mesasForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.tipofacturapuntoventasForeignKey=new ArrayList();
				this.estadonotacreditopuntoventasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(NotaCreditoPuntoVentaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyNotaCreditoPuntoVentaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoNotaCreditoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCajaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CajaConstantesFunciones.SFINALQUERY;

				this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFacturaPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipofacturapuntoventasForeignKey==null||this.tipofacturapuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesTipoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaPuntoVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadonotacreditopuntoventasForeignKey==null||this.estadonotacreditopuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoNotaCreditoPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaReturnGeneral=new NotaCreditoPuntoVentaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_empresaNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_empresaNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_sucursalNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_sucursalNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_usuarioNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_usuarioNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_vendedorNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_vendedorNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_clienteNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_clienteNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalCaja="";

				if(((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_cajaNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_cajaNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCaja=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

						finalQueryGlobalCaja=Funciones.GetFinalQueryAppend(finalQueryGlobalCaja, "");
						finalQueryGlobalCaja+=CajaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCaja=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidCajaActual();
					}
				} else {
					finalQueryGlobalCaja="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_asiento_contableNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_asiento_contableNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_precioNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_precioNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalMesa="";

				if(((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_mesaNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_mesaNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMesa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

						finalQueryGlobalMesa=Funciones.GetFinalQueryAppend(finalQueryGlobalMesa, "");
						finalQueryGlobalMesa+=MesaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMesa=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidMesaActual();
					}
				} else {
					finalQueryGlobalMesa="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_formatoNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_formatoNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTipoFacturaPuntoVenta="";

				if(((this.tipofacturapuntoventasForeignKey==null||this.tipofacturapuntoventasForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesTipoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoFacturaPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaPuntoVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoFacturaPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoFacturaPuntoVenta, "");
						finalQueryGlobalTipoFacturaPuntoVenta+=TipoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoFacturaPuntoVenta=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidTipoFacturaPuntoVentaActual();
					}
				} else {
					finalQueryGlobalTipoFacturaPuntoVenta="NONE";
				}


				String finalQueryGlobalEstadoNotaCreditoPuntoVenta="";

				if(((this.estadonotacreditopuntoventasForeignKey==null||this.estadonotacreditopuntoventasForeignKey.size()<=0) && this.notacreditopuntoventaConstantesFunciones.cargarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.notacreditopuntoventaConstantesFunciones.cargarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta)) {

					if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoNotaCreditoConstantesFunciones.getArrayColumnasGlobalesEstadoNotaCredito(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoNotaCreditoPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoNotaCreditoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoNotaCreditoPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoNotaCreditoPuntoVenta, "");
						finalQueryGlobalEstadoNotaCreditoPuntoVenta+=EstadoNotaCreditoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoNotaCreditoPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoNotaCreditoPuntoVenta=" WHERE " + ConstantesSql.ID + "="+notacreditopuntoventaSessionBean.getlidEstadoNotaCreditoPuntoVentaActual();
					}
				} else {
					finalQueryGlobalEstadoNotaCreditoPuntoVenta="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.cargarCombosLoteForeignKeyNotaCreditoPuntoVenta(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalUsuario,finalQueryGlobalVendedor,finalQueryGlobalCliente,finalQueryGlobalCaja,finalQueryGlobalAsientoContable,finalQueryGlobalTipoPrecio,finalQueryGlobalMesa,finalQueryGlobalFormato,finalQueryGlobalTipoFacturaPuntoVenta,finalQueryGlobalEstadoNotaCreditoPuntoVenta);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=notacreditopuntoventaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=notacreditopuntoventaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=notacreditopuntoventaReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=notacreditopuntoventaReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=notacreditopuntoventaReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalCaja.equals("NONE")) {
				this.cajasForeignKey=notacreditopuntoventaReturnGeneral.getcajasForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=notacreditopuntoventaReturnGeneral.getasientocontablesForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=notacreditopuntoventaReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalMesa.equals("NONE")) {
				this.mesasForeignKey=notacreditopuntoventaReturnGeneral.getmesasForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=notacreditopuntoventaReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTipoFacturaPuntoVenta.equals("NONE")) {
				this.tipofacturapuntoventasForeignKey=notacreditopuntoventaReturnGeneral.gettipofacturapuntoventasForeignKey();
			}

			if(!finalQueryGlobalEstadoNotaCreditoPuntoVenta.equals("NONE")) {
				this.estadonotacreditopuntoventasForeignKey=notacreditopuntoventaReturnGeneral.getestadonotacreditopuntoventasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyNotaCreditoPuntoVenta()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyCaja();
			this.addItemDefectoCombosForeignKeyAsientoContable();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyMesa();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
			this.addItemDefectoCombosForeignKeyEstadoNotaCreditoPuntoVenta();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCaja()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				Caja caja=new Caja();
				CajaConstantesFunciones.setCajaDescripcion(caja,Constantes.SMENSAJE_ESCOJA_OPCION);
				caja.setId(null);

				if(!CajaConstantesFunciones.ExisteEnLista(this.cajasForeignKey,caja,true)) {

					this.cajasForeignKey.add(0,caja);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMesa()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				Mesa mesa=new Mesa();
				MesaConstantesFunciones.setMesaDescripcion(mesa,Constantes.SMENSAJE_ESCOJA_OPCION);
				mesa.setId(null);

				if(!MesaConstantesFunciones.ExisteEnLista(this.mesasForeignKey,mesa,true)) {

					this.mesasForeignKey.add(0,mesa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {
				TipoFacturaPuntoVenta tipofacturapuntoventa=new TipoFacturaPuntoVenta();
				TipoFacturaPuntoVentaConstantesFunciones.setTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipofacturapuntoventa.setId(null);

				if(!TipoFacturaPuntoVentaConstantesFunciones.ExisteEnLista(this.tipofacturapuntoventasForeignKey,tipofacturapuntoventa,true)) {

					this.tipofacturapuntoventasForeignKey.add(0,tipofacturapuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoNotaCreditoPuntoVenta()throws Exception {
		try {

			if(!this.notacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoNotaCreditoPuntoVenta()) {
				EstadoNotaCredito estadonotacreditopuntoventa=new EstadoNotaCredito();
				EstadoNotaCreditoConstantesFunciones.setEstadoNotaCreditoDescripcion(estadonotacreditopuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadonotacreditopuntoventa.setId(null);

				if(!EstadoNotaCreditoConstantesFunciones.ExisteEnLista(this.estadonotacreditopuntoventasForeignKey,estadonotacreditopuntoventa,true)) {

					this.estadonotacreditopuntoventasForeignKey.add(0,estadonotacreditopuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyNotaCreditoPuntoVenta()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyNotaCreditoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyCliente(JComboBox jComboBoxClienteGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Cliente clienteLocal=(Cliente)jComboBoxClienteGenerico.getSelectedItem();

			if(clienteLocal!=null  && clienteLocal.getId()!=null  && clienteLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_cliente="+clienteLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"id_clienteNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clienteNotaCreditoPuntoVenta"));
					}
				} else {
					if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"id_clienteNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clienteNotaCreditoPuntoVenta"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta"));

					} else {
						this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
			
			
				this.notacreditopuntoventa.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoPuntoVenta();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa)throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(notacreditopuntoventa.getid_vendedor(),false,"Formulario");
			this.setActualClienteForeignKey(notacreditopuntoventa.getid_cliente(),false,"Formulario");
			this.setActualCajaForeignKey(notacreditopuntoventa.getid_caja(),false,"Formulario");
			this.setActualAsientoContableForeignKey(notacreditopuntoventa.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(notacreditopuntoventa.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(notacreditopuntoventa.getid_mesa(),false,"Formulario");
			this.setActualFormatoForeignKey(notacreditopuntoventa.getid_formato(),false,"Formulario");
			this.setActualTipoFacturaPuntoVentaForeignKey(notacreditopuntoventa.getid_tipo_factura_punto_venta(),false,"Formulario");
			this.setActualEstadoNotaCreditoPuntoVentaForeignKey(notacreditopuntoventa.getid_estado_nota_credito_punto_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,String sTipoEvento)throws Exception {	
		try {
			
			

				if(notacreditopuntoventa.getVendedor()!=null && !sTipoEvento.equals("id_vendedorNotaCreditoPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.vendedorsForeignKey=new ArrayList<Vendedor>();
					this.vendedorsForeignKey.add(notacreditopuntoventa.getVendedor());

					this.addItemDefectoCombosForeignKeyVendedor();
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				if(notacreditopuntoventa.getCliente()!=null && !sTipoEvento.equals("id_clienteNotaCreditoPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(notacreditopuntoventa.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(notacreditopuntoventa.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableNotaCreditoPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(notacreditopuntoventa.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyNotaCreditoPuntoVenta()throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualClienteForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualCajaForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_caja(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_asiento_contable(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_mesa(),false,"Formulario");
			this.setActualFormatoForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTipoFacturaPuntoVentaForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_tipo_factura_punto_venta(),false,"Formulario");
			this.setActualEstadoNotaCreditoPuntoVentaForeignKey(this.notacreditopuntoventaConstantesFunciones.getid_estado_nota_credito_punto_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {	
		try {
			

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroNotaCreditoPuntoVenta()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyNotaCreditoPuntoVenta()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameCajasForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameMesasForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Todos");
			this.cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyNotaCreditoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	









	public void recargarFormNotaCreditoPuntoVentaCliente(JComboBox<?> jComboBoxGenericoCliente,String sFormularioTipoBusqueda) throws Exception {

	}














	
	

	public NotaCreditoPuntoVentaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public NotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public NotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean(); 
		this.notacreditopuntoventaConstantesFunciones=new NotaCreditoPuntoVentaConstantesFunciones(); 
		this.notacreditopuntoventaBean=new NotaCreditoPuntoVenta();//(this.notacreditopuntoventaConstantesFunciones); 		
		this.notacreditopuntoventaReturnGeneral=new NotaCreditoPuntoVentaParameterReturnGeneral(); 
		
		this.notacreditopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.notacreditopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public NotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public NotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public NotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessNotaCreditoPuntoVenta(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.notacreditopuntoventaConstantesFunciones=new NotaCreditoPuntoVentaConstantesFunciones(); 
			this.notacreditopuntoventaBean=new NotaCreditoPuntoVenta();//this.notacreditopuntoventaConstantesFunciones); 			
			this.notacreditopuntoventaReturnGeneral=new NotaCreditoPuntoVentaParameterReturnGeneral(); 
		
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Nota Credito Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.notacreditopuntoventa=new NotaCreditoPuntoVenta();
			this.notacreditopuntoventas = new ArrayList<NotaCreditoPuntoVenta>();
			this.notacreditopuntoventasAux = new ArrayList<NotaCreditoPuntoVenta>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic=new NotaCreditoPuntoVentaLogic();
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.notacreditopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.notacreditopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta);	
					}
					
					if(this.jInternalFrameImportacionNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCreditoPuntoVenta);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByNotaCreditoPuntoVenta);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta);
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta);
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionNotaCreditoPuntoVenta);
					this.jInternalFrameImportacionNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameImportacionNotaCreditoPuntoVenta.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByNotaCreditoPuntoVenta);
					this.jInternalFrameOrderByNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameOrderByNotaCreditoPuntoVenta.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idNotaCreditoPuntoVentaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=NotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.notacreditopuntoventaReturnGeneral=new NotaCreditoPuntoVentaParameterReturnGeneral();
			
			this.notacreditopuntoventaParameterGeneral=new NotaCreditoPuntoVentaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.notacreditopuntoventaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.notacreditopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.notacreditopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			
			
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCaja=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMesa=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosNotaCreditoPuntoVenta();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioNotaCreditoPuntoVenta(false);
			
			this.setPermisosUsuarioNotaCreditoPuntoVenta();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() 
				|| (this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() && this.notacreditopuntoventaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioNotaCreditoPuntoVentaClasesRelacionadas();
			}
			
			if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioNotaCreditoPuntoVentaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosNotaCreditoPuntoVenta();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualNotaCreditoPuntoVenta();
			}
			
			if(!this.isPermisoBusquedaNotaCreditoPuntoVenta) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioNotaCreditoPuntoVenta,this.isPermisoPaginacionMedioNotaCreditoPuntoVenta,this.isPermisoPaginacionTodoNotaCreditoPuntoVenta);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(NotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarNotaCreditoPuntoVenta());
				
				this.tiposColumnasSelect=NotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarNotaCreditoPuntoVenta(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectNotaCreditoPuntoVenta();				
				//this.tiposRelacionesSelect=NotaCreditoPuntoVentaConstantesFunciones.getTiposRelacionesNotaCreditoPuntoVenta(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioNotaCreditoPuntoVenta();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioNotaCreditoPuntoVenta(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioNotaCreditoPuntoVenta(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoPuntoVenta() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detallenotacreditopuntoventaLogic=new DetalleNotaCreditoPuntoVentaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.vendedorLogic=new VendedorLogic();
			this.clienteLogic=new ClienteLogic();
			this.cajaLogic=new CajaLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.mesaLogic=new MesaLogic();
			this.formatoLogic=new FormatoLogic();
			this.tipofacturapuntoventaLogic=new TipoFacturaPuntoVentaLogic();
			this.estadonotacreditopuntoventaLogic=new EstadoNotaCreditoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				notacreditopuntoventaImplementable= (NotaCreditoPuntoVentaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				notacreditopuntoventaImplementableHome= (NotaCreditoPuntoVentaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+NotaCreditoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.notacreditopuntoventas= new ArrayList<NotaCreditoPuntoVenta>();
			this.notacreditopuntoventasEliminados= new ArrayList<NotaCreditoPuntoVenta>();
						
			this.isEsNuevoNotaCreditoPuntoVenta=false;
			this.esParaAccionDesdeFormularioNotaCreditoPuntoVenta=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idVendedorActual=0L;
			this.idClienteActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.cajasForeignKey=new ArrayList<Caja>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.mesasForeignKey=new ArrayList<Mesa>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>() ;
			this.estadonotacreditopuntoventasForeignKey=new ArrayList<EstadoNotaCredito>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyNotaCreditoPuntoVenta(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroNotaCreditoPuntoVenta();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=NotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioNotaCreditoPuntoVenta();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioNotaCreditoPuntoVenta();
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getTabCount(); i++) {
					this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessNotaCreditoPuntoVenta(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga NotaCreditoPuntoVenta: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectNotaCreditoPuntoVenta() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesNotaCreditoPuntoVenta")) {
				iIndex=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Nota Creditos")) {
					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessNotaCreditoPuntoVenta();

						this.cargarParteTabPanelRelacionadaDetalleNotaCreditoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessNotaCreditoPuntoVenta();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleNotaCreditoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.cargarSessionConBeanSwingJInternalFrameDetalleNotaCreditoPuntoVenta(false,true,iIndex);
		this.jButtonDetalleNotaCreditoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleNotaCreditoPuntoVenta();

		//this.jTabbedPaneRelacionesNotaCreditoPuntoVenta.updateUI();
		//this.jTabbedPaneRelacionesNotaCreditoPuntoVenta.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetalleNotaCreditoPuntoVenta")) {
				int row=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
				jButtonDetalleNotaCreditoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Nota Credito")) {

					if(this.isTienePermisosDetalleNotaCreditoPuntoVenta && this.notacreditopuntoventaConstantesFunciones.mostrarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta && !NotaCreditoPuntoVentaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Nota Creditos"+"("+DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Nota Creditos");

						if(notacreditopuntoventaConstantesFunciones.resaltarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(notacreditopuntoventaConstantesFunciones.resaltarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
						}

						jmenuItem.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleNotaCreditoPuntoVenta"));

						

						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jmenuDetalleNotaCreditoPuntoVenta.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyNotaCreditoPuntoVenta(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyNotaCreditoPuntoVenta(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyNotaCreditoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyNotaCreditoPuntoVentaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyNotaCreditoPuntoVenta();
		
		this.cargarCombosFrameForeignKeyNotaCreditoPuntoVenta();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyNotaCreditoPuntoVenta();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyNotaCreditoPuntoVenta();
		}
	}
	
	

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCaja(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCaja(this.cajasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesa(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaMesa(this.mesasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFacturaPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
				this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaTipoFacturaPuntoVenta(this.tipofacturapuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoNotaCreditoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoNotaCreditoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoNotaCreditoPuntoVenta();
				this.cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaEstadoNotaCreditoPuntoVenta(this.estadonotacreditopuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			
			if(jTableDatosNotaCreditoPuntoVenta.getRowCount()>=1) {
				jTableDatosNotaCreditoPuntoVenta.removeRowSelectionInterval(0, jTableDatosNotaCreditoPuntoVenta.getRowCount()-1);						
			}
			
			this.isEsNuevoNotaCreditoPuntoVenta=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoNotaCreditoPuntoVenta(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(true);			
			//this.notacreditopuntoventa=new NotaCreditoPuntoVenta();
			//this.notacreditopuntoventa.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta() ;
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.notacreditopuntoventa);	
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);				
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar NotaCreditoPuntoVenta: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRows().length;			
			}
			
			notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoNotaCreditoPuntoVenta--;			
				//NotaCreditoPuntoVenta notacreditopuntoventaAux= new NotaCreditoPuntoVenta();			
				//notacreditopuntoventaAux.setId(this.iIdNuevoNotaCreditoPuntoVenta);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//NotaCreditoPuntoVenta notacreditopuntoventaOrigen=new NotaCreditoPuntoVenta();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(NotaCreditoPuntoVenta notacreditopuntoventaOrigen : notacreditopuntoventasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							notacreditopuntoventaOrigen =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							notacreditopuntoventaOrigen =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaNotaCreditoPuntoVenta();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.notacreditopuntoventa.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosNotaCreditoPuntoVenta(notacreditopuntoventaOrigen,this.notacreditopuntoventa,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().add(this.notacreditopuntoventaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventas.add(this.notacreditopuntoventaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
				
				this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoPuntoVenta(), this.getIndiceNuevoNotaCreditoPuntoVenta());
				
				int iLastRow =  this.jTableDatosNotaCreditoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();									
		
			NotaCreditoPuntoVenta notacreditopuntoventaOrigen=new NotaCreditoPuntoVenta();
			NotaCreditoPuntoVenta notacreditopuntoventaDestino=new NotaCreditoPuntoVenta();
				
			notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || notacreditopuntoventasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosNotaCreditoPuntoVenta.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaOrigen =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditopuntoventaOrigen =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						notacreditopuntoventaDestino =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						notacreditopuntoventaDestino =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				notacreditopuntoventaOrigen =notacreditopuntoventasSeleccionados.get(0);
				notacreditopuntoventaDestino =notacreditopuntoventasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosNotaCreditoPuntoVenta(notacreditopuntoventaOrigen,notacreditopuntoventaDestino,true,false);
				
				notacreditopuntoventaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(notacreditopuntoventaDestino,notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(notacreditopuntoventaDestino,notacreditopuntoventas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
				
				//this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoPuntoVenta(), this.getIndiceNuevoNotaCreditoPuntoVenta());
				
				int iLastRow =  this.jTableDatosNotaCreditoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesNotaCreditoPuntoVenta.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(!isVisible);
			this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(!isVisible);
			this.jPanelAccionesNotaCreditoPuntoVenta.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameNotaCreditoPuntoVenta();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByNotaCreditoPuntoVenta();
			
			this.abrirFrameOrderByNotaCreditoPuntoVenta();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleNotaCreditoPuntoVenta(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCreditoPuntoVenta);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.isMaximum()) {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSize(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.iWidthFormulario,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.isMaximum()) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jContentPaneDetalleNotaCreditoPuntoVenta.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jContentPaneDetalleNotaCreditoPuntoVenta.getWidth(),NotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jContentPaneDetalleNotaCreditoPuntoVenta.getWidth(),NotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jContentPaneDetalleNotaCreditoPuntoVenta.getWidth(),NotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleNotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleNotaCreditoPuntoVenta();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByNotaCreditoPuntoVenta==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByNotaCreditoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCreditoPuntoVenta,false,this);
				} else {
					this.jInternalFrameOrderByNotaCreditoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByNotaCreditoPuntoVenta,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByNotaCreditoPuntoVenta);
				this.jInternalFrameOrderByNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameOrderByNotaCreditoPuntoVenta.setSelected(false);
				
				this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCreditoPuntoVenta"));
				
				this.inicializarActualizarBindingTablaOrderByNotaCreditoPuntoVenta();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionNotaCreditoPuntoVenta==null) {
				
				this.jInternalFrameImportacionNotaCreditoPuntoVenta=new ImportacionJInternalFrame(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionNotaCreditoPuntoVenta);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionNotaCreditoPuntoVenta);
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.setSelected(false);


				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCreditoPuntoVenta"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta==null) {
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta=new ReporteDinamicoJInternalFrame(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta);
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoPuntoVenta"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoPuntoVenta();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleNotaCreditoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jContentPaneDetalleNotaCreditoPuntoVenta.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormNotaCreditoPuntoVenta);
			
	       	this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSelected(false);
			
			//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.dispose();
			//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameImportacionNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameOrderByNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameOrderByNotaCreditoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoNotaCreditoPuntoVenta() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameImportacionNotaCreditoPuntoVenta.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarNotaCreditoPuntoVenta(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarNotaCreditoPuntoVenta(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(true);
			//this.isEsNuevoNotaCreditoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false) ;
			
			if(notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() && DetalleNotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleNotaCreditoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaNotaCreditoPuntoVentaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarNotaCreditoPuntoVenta(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(true);
			//this.isEsNuevoNotaCreditoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.notacreditopuntoventa.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false) ;
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Vendedor")) {
				if(!this.notacreditopuntoventaConstantesFunciones.cargarid_vendedorNotaCreditoPuntoVenta) {
					this.cargarCombosVendedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_vendedor (id);

				this.recargarComboTablaVendedor(this.vendedorsForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.notacreditopuntoventaConstantesFunciones.cargarid_clienteNotaCreditoPuntoVenta) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.notacreditopuntoventaConstantesFunciones.cargarid_asiento_contableNotaCreditoPuntoVenta) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
				
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCaja(List<Caja> cajasForeignKey)throws Exception{
		TableColumn tableColumnCaja=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA));
		TableCellEditor tableCellEditorCaja =tableColumnCaja.getCellEditor();

		CajaTableCell cajaTableCellFk=(CajaTableCell)tableCellEditorCaja;

		if(cajaTableCellFk!=null) {
			cajaTableCellFk.setcajasForeignKey(cajasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cajaTableCellFk.setRowActual(intSelectedRow);
			//cajaTableCellFk.setcajasForeignKeyActual(cajasForeignKey);
		//}


		if(cajaTableCellFk!=null) {
			cajaTableCellFk.RecargarCajasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMesa(List<Mesa> mesasForeignKey)throws Exception{
		TableColumn tableColumnMesa=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA));
		TableCellEditor tableCellEditorMesa =tableColumnMesa.getCellEditor();

		MesaTableCell mesaTableCellFk=(MesaTableCell)tableCellEditorMesa;

		if(mesaTableCellFk!=null) {
			mesaTableCellFk.setmesasForeignKey(mesasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesaTableCellFk.setRowActual(intSelectedRow);
			//mesaTableCellFk.setmesasForeignKeyActual(mesasForeignKey);
		//}


		if(mesaTableCellFk!=null) {
			mesaTableCellFk.RecargarMesasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoFacturaPuntoVenta(List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey)throws Exception{
		TableColumn tableColumnTipoFacturaPuntoVenta=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA));
		TableCellEditor tableCellEditorTipoFacturaPuntoVenta =tableColumnTipoFacturaPuntoVenta.getCellEditor();

		TipoFacturaPuntoVentaTableCell tipofacturapuntoventaTableCellFk=(TipoFacturaPuntoVentaTableCell)tableCellEditorTipoFacturaPuntoVenta;

		if(tipofacturapuntoventaTableCellFk!=null) {
			tipofacturapuntoventaTableCellFk.settipofacturapuntoventasForeignKey(tipofacturapuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipofacturapuntoventaTableCellFk.setRowActual(intSelectedRow);
			//tipofacturapuntoventaTableCellFk.settipofacturapuntoventasForeignKeyActual(tipofacturapuntoventasForeignKey);
		//}


		if(tipofacturapuntoventaTableCellFk!=null) {
			tipofacturapuntoventaTableCellFk.RecargarTipoFacturaPuntoVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoNotaCreditoPuntoVenta(List<EstadoNotaCredito> estadonotacreditopuntoventasForeignKey)throws Exception{
		TableColumn tableColumnEstadoNotaCreditoPuntoVenta=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA));
		TableCellEditor tableCellEditorEstadoNotaCreditoPuntoVenta =tableColumnEstadoNotaCreditoPuntoVenta.getCellEditor();

		EstadoNotaCreditoTableCell estadonotacreditoTableCellFk=(EstadoNotaCreditoTableCell)tableCellEditorEstadoNotaCreditoPuntoVenta;

		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.setestadonotacreditosForeignKey(estadonotacreditopuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadonotacreditoTableCellFk.setRowActual(intSelectedRow);
			//estadonotacreditoTableCellFk.setestadonotacreditosForeignKeyActual(estadonotacreditopuntoventasForeignKey);
		//}


		if(estadonotacreditoTableCellFk!=null) {
			estadonotacreditoTableCellFk.RecargarEstadoNotaCreditosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_vendedor (Long id) throws Exception {
		this.setActualVendedorForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesNotaCreditoPuntoVenta(false);
			
			//if(!this.isEsNuevoNotaCreditoPuntoVenta) {								
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				
			}
			
			if(this.permiteMantenimiento(this.notacreditopuntoventa)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoNotaCreditoPuntoVenta=true;
					this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
					this.isEsNuevoNotaCreditoPuntoVenta=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoNotaCreditoPuntoVenta=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoNotaCreditoPuntoVenta=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(false);
			
												
				
				if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleNotaCreditoPuntoVenta();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,notacreditopuntoventaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,notacreditopuntoventaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.notacreditopuntoventa.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.notacreditopuntoventa.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.notacreditopuntoventa.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.notacreditopuntoventa)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((NotaCreditoPuntoVentaModel) this.jTableDatosNotaCreditoPuntoVenta.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoNotaCreditoPuntoVenta=true;
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
				this.isEsNuevoNotaCreditoPuntoVenta=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(false);
				
				
				
				if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleNotaCreditoPuntoVenta();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosNotaCreditoPuntoVenta.getRowCount()>=1) {
				jTableDatosNotaCreditoPuntoVenta.removeRowSelectionInterval(0, jTableDatosNotaCreditoPuntoVenta.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesNotaCreditoPuntoVenta(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(false) ;
			
			this.isEsNuevoNotaCreditoPuntoVenta=false;
			
			if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleNotaCreditoPuntoVenta();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoNotaCreditoPuntoVenta--;			
			//NotaCreditoPuntoVenta notacreditopuntoventaAux= new NotaCreditoPuntoVenta();			
			//notacreditopuntoventaAux.setId(this.iIdNuevoNotaCreditoPuntoVenta);
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaNotaCreditoPuntoVenta();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
			
			this.notacreditopuntoventa.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().add(this.notacreditopuntoventaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.notacreditopuntoventas.add(this.notacreditopuntoventaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			
			this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoNotaCreditoPuntoVenta(), this.getIndiceNuevoNotaCreditoPuntoVenta());
			
			int iLastRow =  this.jTableDatosNotaCreditoPuntoVenta.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();
			}
			
			//this.abrirFrameTreeNotaCreditoPuntoVenta();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Nota CreditoS ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionNotaCreditoPuntoVenta.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralNotaCreditoPuntoVenta();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.procesarImportacionNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.notacreditopuntoventaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarNotaCreditoPuntoVentaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionNotaCreditoPuntoVenta.setFileImportacion(this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionNotaCreditoPuntoVenta.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionNotaCreditoPuntoVenta.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		

		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("NotaCreditoPuntoVentaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"NotaCreditoPuntoVentaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Caja_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Caja_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Caja_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Caja_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mesa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mesa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mesa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mesa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoFacturaPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoFacturaPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoFacturaPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoFacturaPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoNotaCreditoPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoNotaCreditoPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoNotaCreditoPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoNotaCreditoPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSecuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSecuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSecuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSecuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rjetaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rjetaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rjetaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rjetaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefonoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefonoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefonoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefonoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talSinIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talSinIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talSinIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talSinIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nanciamiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nanciamiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nanciamiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nanciamiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ros_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ros_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ros_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ros_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoria="id_caja";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoria="id_mesa";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					sNombreCampoCategoria="id_tipo_factura_punto_venta";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA:
					sNombreCampoCategoria="id_estado_nota_credito_punto_venta";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoria="numero_secuencial";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoria="codigo_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoria="nombre_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoria="tarjeta_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoria="direccion_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoria="telefono_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoria="hora";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoria="total_sin_iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoria="financiamiento";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS:
					sNombreCampoCategoria="otros";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoriaValor="id_caja";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoriaValor="id_mesa";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					sNombreCampoCategoriaValor="id_tipo_factura_punto_venta";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA:
					sNombreCampoCategoriaValor="id_estado_nota_credito_punto_venta";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoriaValor="numero_secuencial";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoriaValor="codigo_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoriaValor="nombre_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoriaValor="tarjeta_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoriaValor="direccion_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoriaValor="telefono_cliente";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoriaValor="hora";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoriaValor="total_sin_iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoriaValor="financiamiento";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS:
					sNombreCampoCategoriaValor="otros";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Caja",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_caja");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento C",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mesa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mesa");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_factura_punto_venta");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_nota_credito_punto_venta");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tarjeta Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"tarjeta_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono_cliente");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Hora",sNombreCampoCategoria,sNombreCampoCategoriaValor,"hora");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_sin_iva");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Financiamiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"financiamiento");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("NotaCreditoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getcaja_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getmesa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettipofacturapuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getnumero_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getcodigo_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getnombre_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettarjeta_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getdireccion_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettelefono_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gethora());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettotal_sin_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getfinanciamiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getotros());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(NotaCreditoPuntoVenta notacreditopuntoventa:notacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(notacreditopuntoventa.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelNotaCreditoPuntoVenta(row);				
			//	iRow++;
			//}				
			
			//for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelNotaCreditoPuntoVenta(notacreditopuntoventaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualNotaCreditoPuntoVenta();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaNotaCreditoPuntoVenta() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosNotaCreditoPuntoVenta.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosNotaCreditoPuntoVenta.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosNotaCreditoPuntoVenta.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosNotaCreditoPuntoVenta.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosNotaCreditoPuntoVenta.setMinimumSize(dimensionMinimum);
		this.jTableDatosNotaCreditoPuntoVenta.setMaximumSize(dimensionMaximum);
		this.jTableDatosNotaCreditoPuntoVenta.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingNotaCreditoPuntoVenta(esInicializar,true);
	}
	
	public void inicializarActualizarBindingNotaCreditoPuntoVenta(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasNotaCreditoPuntoVenta(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoPuntoVenta(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesNotaCreditoPuntoVenta(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualNotaCreditoPuntoVenta() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta();
		
		this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCreditoPuntoVenta();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoPuntoVenta() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoPuntoVenta(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoPuntoVenta(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosNotaCreditoPuntoVenta.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosNotaCreditoPuntoVenta.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteNotaCreditoPuntoVenta.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionNuevoNotaCreditoPuntoVenta.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionSinCerrarNotaCreditoPuntoVenta.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionSinMensajeNotaCreditoPuntoVenta.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosNotaCreditoPuntoVenta.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosNotaCreditoPuntoVenta.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteNotaCreditoPuntoVenta.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionNuevoNotaCreditoPuntoVenta.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionSinCerrarNotaCreditoPuntoVenta.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jCheckBoxPostAccionSinMensajeNotaCreditoPuntoVenta.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralNotaCreditoPuntoVenta.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		try	{	
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualNotaCreditoPuntoVenta(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesNotaCreditoPuntoVenta() throws Exception {
		try	{
			if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCreditoPuntoVenta();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCreditoPuntoVenta() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualNotaCreditoPuntoVenta() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionNotaCreditoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoPuntoVenta();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualNotaCreditoPuntoVenta() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
				
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=NotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarNotaCreditoPuntoVenta(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=NotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarNotaCreditoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=NotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarNotaCreditoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualNotaCreditoPuntoVenta()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_cajaFK_IdCaja=((Caja)this.jComboBoxid_cajaFK_IdCajaNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta=((EstadoNotaCredito)this.jComboBoxid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_formatoFK_IdFormato=((Formato)this.jComboBoxid_formatoFK_IdFormatoNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_mesaFK_IdMesa=((Mesa)this.jComboBoxid_mesaFK_IdMesaNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta=((TipoFacturaPuntoVenta)this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_tipo_precioFK_IdTipoPrecio=((TipoPrecio)this.jComboBoxid_tipo_precioFK_IdTipoPrecioNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {				
		if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualNotaCreditoPuntoVenta();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaNotaCreditoPuntoVenta() throws Exception {
		this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByNotaCreditoPuntoVenta() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosNotaCreditoPuntoVentaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVentaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=notacreditopuntoventas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosNotaCreditoPuntoVenta.setModel(new NotaCreditoPuntoVentaModel(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosNotaCreditoPuntoVenta.setModel(new NotaCreditoPuntoVentaModel(this.notacreditopuntoventas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByNotaCreditoPuntoVenta!=null && this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByNotaCreditoPuntoVenta();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,notacreditopuntoventaConstantesFunciones.resaltarSeleccionarNotaCreditoPuntoVenta,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,notacreditopuntoventaConstantesFunciones.resaltarSeleccionarNotaCreditoPuntoVenta,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_ID));

		if(this.notacreditopuntoventaConstantesFunciones.mostraridNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltaridNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activaridNotaCreditoPuntoVenta,iSizeTabla,this,true,"idNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltaridNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activaridNotaCreditoPuntoVenta,this,true,"idNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_empresaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_empresaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_empresaNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_empresaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_empresaNotaCreditoPuntoVenta,false,"id_empresaNotaCreditoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_sucursalNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_sucursalNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_sucursalNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_sucursalNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_sucursalNotaCreditoPuntoVenta,false,"id_sucursalNotaCreditoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_usuarioNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_usuarioNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_usuarioNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_usuarioNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_usuarioNotaCreditoPuntoVenta,false,"id_usuarioNotaCreditoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_vendedorNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_vendedorNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_vendedorNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_vendedorNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_vendedorNotaCreditoPuntoVenta,true,"id_vendedorNotaCreditoPuntoVenta","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_clienteNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_clienteNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_clienteNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_clienteNotaCreditoPuntoVenta,true,"id_clienteNotaCreditoPuntoVenta","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_cajaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CajaTableCell(this.cajasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_cajaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_cajaNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new CajaTableCell(this.cajasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_cajaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_cajaNotaCreditoPuntoVenta,true,"id_cajaNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_precioNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_precioNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_tipo_precioNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_precioNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_tipo_precioNotaCreditoPuntoVenta,true,"id_tipo_precioNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_mesaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesaTableCell(this.mesasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_mesaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_mesaNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new MesaTableCell(this.mesasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_mesaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_mesaNotaCreditoPuntoVenta,true,"id_mesaNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_formatoNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_formatoNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_formatoNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_formatoNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_formatoNotaCreditoPuntoVenta,true,"id_formatoNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoFacturaPuntoVentaTableCell(this.tipofacturapuntoventasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new TipoFacturaPuntoVentaTableCell(this.tipofacturapuntoventasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta,true,"id_tipo_factura_punto_ventaNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoNotaCreditoTableCell(this.estadonotacreditopuntoventasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EstadoNotaCreditoTableCell(this.estadonotacreditopuntoventasForeignKey,this.notacreditopuntoventaConstantesFunciones.resaltarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta,true,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarnumero_secuencialNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarnumero_secuencialNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarnumero_secuencialNotaCreditoPuntoVenta,iSizeTabla,this,true,"numero_secuencialNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarnumero_secuencialNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarnumero_secuencialNotaCreditoPuntoVenta,this,true,"numero_secuencialNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarcodigo_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarcodigo_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarcodigo_clienteNotaCreditoPuntoVenta,iSizeTabla,this,true,"codigo_clienteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarcodigo_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarcodigo_clienteNotaCreditoPuntoVenta,this,true,"codigo_clienteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarnombre_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarnombre_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarnombre_clienteNotaCreditoPuntoVenta,iSizeTabla,this,true,"nombre_clienteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarnombre_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarnombre_clienteNotaCreditoPuntoVenta,this,true,"nombre_clienteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrartarjeta_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartarjeta_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartarjeta_clienteNotaCreditoPuntoVenta,iSizeTabla,this,true,"tarjeta_clienteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartarjeta_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartarjeta_clienteNotaCreditoPuntoVenta,this,true,"tarjeta_clienteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrardireccion_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltardireccion_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activardireccion_clienteNotaCreditoPuntoVenta,iSizeTabla,this,true,"direccion_clienteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltardireccion_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activardireccion_clienteNotaCreditoPuntoVenta,this,true,"direccion_clienteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrartelefono_clienteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartelefono_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartelefono_clienteNotaCreditoPuntoVenta,iSizeTabla,this,true,"telefono_clienteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartelefono_clienteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartelefono_clienteNotaCreditoPuntoVenta,this,true,"telefono_clienteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarfechaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfechaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfechaNotaCreditoPuntoVenta,iSizeTabla,this,true,"fechaNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfechaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfechaNotaCreditoPuntoVenta,this,true,"fechaNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarhoraNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TimeRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarhoraNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarhoraNotaCreditoPuntoVenta,iSizeTabla,this,true,"horaNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TimeEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarhoraNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarhoraNotaCreditoPuntoVenta,iSizeTabla,this,true,"horaNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrartotal_ivaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotal_ivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotal_ivaNotaCreditoPuntoVenta,iSizeTabla,this,true,"total_ivaNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotal_ivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotal_ivaNotaCreditoPuntoVenta,this,true,"total_ivaNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrartotal_sin_ivaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotal_sin_ivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotal_sin_ivaNotaCreditoPuntoVenta,iSizeTabla,this,true,"total_sin_ivaNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotal_sin_ivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotal_sin_ivaNotaCreditoPuntoVenta,this,true,"total_sin_ivaNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarivaNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarivaNotaCreditoPuntoVenta,iSizeTabla,this,true,"ivaNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarivaNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarivaNotaCreditoPuntoVenta,this,true,"ivaNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO));

		if(this.notacreditopuntoventaConstantesFunciones.mostrardescuentoNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltardescuentoNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activardescuentoNotaCreditoPuntoVenta,iSizeTabla,this,true,"descuentoNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltardescuentoNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activardescuentoNotaCreditoPuntoVenta,this,true,"descuentoNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarfinanciamientoNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfinanciamientoNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfinanciamientoNotaCreditoPuntoVenta,iSizeTabla,this,true,"financiamientoNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfinanciamientoNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfinanciamientoNotaCreditoPuntoVenta,this,true,"financiamientoNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarfleteNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfleteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfleteNotaCreditoPuntoVenta,iSizeTabla,this,true,"fleteNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarfleteNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarfleteNotaCreditoPuntoVenta,this,true,"fleteNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE));

		if(this.notacreditopuntoventaConstantesFunciones.mostrariceNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltariceNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activariceNotaCreditoPuntoVenta,iSizeTabla,this,true,"iceNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltariceNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activariceNotaCreditoPuntoVenta,this,true,"iceNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarotrosNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarotrosNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarotrosNotaCreditoPuntoVenta,iSizeTabla,this,true,"otrosNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarotrosNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarotrosNotaCreditoPuntoVenta,this,true,"otrosNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.notacreditopuntoventaConstantesFunciones.mostrarsub_totalNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarsub_totalNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarsub_totalNotaCreditoPuntoVenta,iSizeTabla,this,true,"sub_totalNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltarsub_totalNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activarsub_totalNotaCreditoPuntoVenta,this,true,"sub_totalNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL));

		if(this.notacreditopuntoventaConstantesFunciones.mostrartotalNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotalNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotalNotaCreditoPuntoVenta,iSizeTabla,this,true,"totalNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.notacreditopuntoventaConstantesFunciones.resaltartotalNotaCreditoPuntoVenta,this.notacreditopuntoventaConstantesFunciones.activartotalNotaCreditoPuntoVenta,this,true,"totalNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new NotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetalleNotaCreditoPuntoVenta && this.notacreditopuntoventaConstantesFunciones.mostrarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta && !NotaCreditoPuntoVentaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Nota Creditos");
				tableColumn.setHeaderValue("Detalle Nota Creditos");
				tableColumn.setCellRenderer(new DetalleNotaCreditoPuntoVentaTableCell(notacreditopuntoventaConstantesFunciones.resaltarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta));
				tableColumn.setCellEditor(new DetalleNotaCreditoPuntoVentaTableCell(notacreditopuntoventaConstantesFunciones.resaltarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta,this,this.notacreditopuntoventaConstantesFunciones.activarDetalleNotaCreditoPuntoVentaNotaCreditoPuntoVenta));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosNotaCreditoPuntoVenta.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosNotaCreditoPuntoVenta.moveColumn(this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosNotaCreditoPuntoVenta.moveColumn(this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosNotaCreditoPuntoVenta.moveColumn(this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosNotaCreditoPuntoVenta.moveColumn(this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosNotaCreditoPuntoVenta.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosNotaCreditoPuntoVenta.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosNotaCreditoPuntoVenta,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosNotaCreditoPuntoVenta.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosNotaCreditoPuntoVenta.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosNotaCreditoPuntoVenta.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=notacreditopuntoventas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosNotaCreditoPuntoVenta.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosNotaCreditoPuntoVenta();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoNotaCreditoPuntoVenta=false;
					
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCreditoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.notacreditopuntoventa.getsType().equals("DUPLICADO")
				   || this.notacreditopuntoventa.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoNotaCreditoPuntoVenta=true;
				
				} else {
					this.isEsNuevoNotaCreditoPuntoVenta=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					if(this.notacreditopuntoventa.getId()>=0 && !this.notacreditopuntoventa.getIsNew()) {						
						this.isEsNuevoNotaCreditoPuntoVenta=false;
						
					} else {
						this.isEsNuevoNotaCreditoPuntoVenta=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoNotaCreditoPuntoVenta(esRelaciones);						
				
				this.seleccionarNotaCreditoPuntoVenta(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.notacreditopuntoventa.getId()<0) {
					this.isEsNuevoNotaCreditoPuntoVenta=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarNotaCreditoPuntoVenta(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarNotaCreditoPuntoVenta(evt,rowIndex);
				}	
				
				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion NotaCreditoPuntoVenta: " + this.dDif); 
					}
				}								
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarNotaCreditoPuntoVenta(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.notacreditopuntoventa)) {
					if(this.notacreditopuntoventa.getId()>0) {
						this.notacreditopuntoventa.setIsDeleted(true);
						
						this.notacreditopuntoventasEliminados.add(this.notacreditopuntoventa);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().remove(this.notacreditopuntoventa);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventas.remove(this.notacreditopuntoventa);				
					}
					
					
					((NotaCreditoPuntoVentaModel) this.jTableDatosNotaCreditoPuntoVenta.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarNotaCreditoPuntoVenta(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoNotaCreditoPuntoVenta) {
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosNotaCreditoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_empresaNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_empresaNotaCreditoPuntoVenta) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_empresa());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(notacreditopuntoventa.getEmpresa()!=null) {
							this.empresasForeignKey.add(notacreditopuntoventa.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.notacreditopuntoventa.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_sucursalNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_sucursalNotaCreditoPuntoVenta) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_sucursal());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(notacreditopuntoventa.getSucursal()!=null) {
							this.sucursalsForeignKey.add(notacreditopuntoventa.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.notacreditopuntoventa.getid_sucursal(),false,"Formulario");

					//Usuario
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_usuarioNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_usuarioNotaCreditoPuntoVenta) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_usuario());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(notacreditopuntoventa.getUsuario()!=null) {
							this.usuariosForeignKey.add(notacreditopuntoventa.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.notacreditopuntoventa.getid_usuario(),false,"Formulario");

					//Vendedor
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_vendedorNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_vendedorNotaCreditoPuntoVenta) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_vendedor());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(notacreditopuntoventa.getVendedor()!=null) {
							this.vendedorsForeignKey.add(notacreditopuntoventa.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.notacreditopuntoventa.getid_vendedor(),false,"Formulario");

					//Cliente
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_clienteNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_clienteNotaCreditoPuntoVenta) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_cliente());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(notacreditopuntoventa.getCliente()!=null) {
							this.clientesForeignKey.add(notacreditopuntoventa.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.notacreditopuntoventa.getid_cliente(),false,"Formulario");

					//Caja
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_cajaNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_cajaNotaCreditoPuntoVenta) {
						//this.cargarCombosCajasForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_caja());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.cajasForeignKey=new ArrayList<Caja>();

						if(notacreditopuntoventa.getCaja()!=null) {
							this.cajasForeignKey.add(notacreditopuntoventa.getCaja());
						}

						this.addItemDefectoCombosForeignKeyCaja();
						this.cargarCombosFrameCajasForeignKey("Todos");
					}
					this.setActualCajaForeignKey(this.notacreditopuntoventa.getid_caja(),false,"Formulario");

					//AsientoContable
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_asiento_contableNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_asiento_contableNotaCreditoPuntoVenta) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_asiento_contable());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(notacreditopuntoventa.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(notacreditopuntoventa.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.notacreditopuntoventa.getid_asiento_contable(),false,"Formulario");

					//TipoPrecio
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_precioNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_tipo_precioNotaCreditoPuntoVenta) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_tipo_precio());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(notacreditopuntoventa.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(notacreditopuntoventa.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.notacreditopuntoventa.getid_tipo_precio(),false,"Formulario");

					//Mesa
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_mesaNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_mesaNotaCreditoPuntoVenta) {
						//this.cargarCombosMesasForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_mesa());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.mesasForeignKey=new ArrayList<Mesa>();

						if(notacreditopuntoventa.getMesa()!=null) {
							this.mesasForeignKey.add(notacreditopuntoventa.getMesa());
						}

						this.addItemDefectoCombosForeignKeyMesa();
						this.cargarCombosFrameMesasForeignKey("Todos");
					}
					this.setActualMesaForeignKey(this.notacreditopuntoventa.getid_mesa(),false,"Formulario");

					//Formato
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_formatoNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_formatoNotaCreditoPuntoVenta) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_formato());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(notacreditopuntoventa.getFormato()!=null) {
							this.formatosForeignKey.add(notacreditopuntoventa.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.notacreditopuntoventa.getid_formato(),false,"Formulario");

					//TipoFacturaPuntoVenta
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_tipo_factura_punto_ventaNotaCreditoPuntoVenta) {
						//this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_tipo_factura_punto_venta());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>();

						if(notacreditopuntoventa.getTipoFacturaPuntoVenta()!=null) {
							this.tipofacturapuntoventasForeignKey.add(notacreditopuntoventa.getTipoFacturaPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
						this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Todos");
					}
					this.setActualTipoFacturaPuntoVentaForeignKey(this.notacreditopuntoventa.getid_tipo_factura_punto_venta(),false,"Formulario");

					//EstadoNotaCreditoPuntoVenta
					if(!this.notacreditopuntoventaConstantesFunciones.cargarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta || this.notacreditopuntoventaConstantesFunciones.event_dependid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta) {
						//this.cargarCombosEstadoNotaCreditoPuntoVentasForeignKeyLista(" where id="+this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta());
									//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
						this.estadonotacreditopuntoventasForeignKey=new ArrayList<EstadoNotaCredito>();

						if(notacreditopuntoventa.getEstadoNotaCreditoPuntoVenta()!=null) {
							this.estadonotacreditopuntoventasForeignKey.add(notacreditopuntoventa.getEstadoNotaCreditoPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyEstadoNotaCreditoPuntoVenta();
						this.cargarCombosFrameEstadoNotaCreditoPuntoVentasForeignKey("Todos");
					}
					this.setActualEstadoNotaCreditoPuntoVentaForeignKey(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoNotaCreditoPuntoVenta(notacreditopuntoventa,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(notacreditopuntoventa);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyNotaCreditoPuntoVenta(notacreditopuntoventa,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoPuntoVenta(notacreditopuntoventa);
	}
	
	public void setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setDate(notacreditopuntoventa.getfecha());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setValue(notacreditopuntoventa.gethora());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getotros().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,NotaCreditoPuntoVenta notacreditopuntoventaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,notacreditopuntoventaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,NotaCreditoPuntoVenta notacreditopuntoventaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				notacreditopuntoventaLocal=this.notacreditopuntoventa;
			} else {
				notacreditopuntoventaLocal=this.notacreditopuntoventaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(notacreditopuntoventaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoNotaCreditoPuntoVenta(notacreditopuntoventaLocal,true);
					
					if(notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(notacreditopuntoventaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(notacreditopuntoventaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(notacreditopuntoventa,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(notacreditopuntoventa);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(notacreditopuntoventa,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.getText()==null || this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.getText()=="" || this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.getText()=="Id") {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setText("0");
			}

			if(conColumnasBase) {notacreditopuntoventa.setId(Long.parseLong(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelIdNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setnumero_secuencial(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnumero_secuencialNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setcodigo_cliente(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelcodigo_clienteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setnombre_cliente(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelnombre_clienteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.settarjeta_cliente(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltarjeta_clienteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setdireccion_cliente(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldireccion_clienteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.settelefono_cliente(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltelefono_clienteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setfecha(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfechaNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.sethora(new Time(((Date)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.getValue()).getTime()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelhoraNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_ivaNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.settotal_sin_iva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotal_sin_ivaNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setiva(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelivaNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeldescuentoNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setfinanciamiento(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfinanciamientoNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setflete(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelfleteNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setice(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeliceNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setotros(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelotrosNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelsub_totalNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			notacreditopuntoventa.settotal(Double.parseDouble(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabeltotalNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventaBean,NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_vendedor()!=null && !notacreditopuntoventaBean.getid_vendedor().equals(-1L))) {notacreditopuntoventa.setid_vendedor(notacreditopuntoventaBean.getid_vendedor());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_cliente()!=null && !notacreditopuntoventaBean.getid_cliente().equals(-1L))) {notacreditopuntoventa.setid_cliente(notacreditopuntoventaBean.getid_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_caja()!=null && !notacreditopuntoventaBean.getid_caja().equals(-1L))) {notacreditopuntoventa.setid_caja(notacreditopuntoventaBean.getid_caja());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_tipo_precio()!=null && !notacreditopuntoventaBean.getid_tipo_precio().equals(-1L))) {notacreditopuntoventa.setid_tipo_precio(notacreditopuntoventaBean.getid_tipo_precio());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_mesa()!=null && !notacreditopuntoventaBean.getid_mesa().equals(-1L))) {notacreditopuntoventa.setid_mesa(notacreditopuntoventaBean.getid_mesa());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_formato()!=null && !notacreditopuntoventaBean.getid_formato().equals(-1L))) {notacreditopuntoventa.setid_formato(notacreditopuntoventaBean.getid_formato());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_tipo_factura_punto_venta()!=null && !notacreditopuntoventaBean.getid_tipo_factura_punto_venta().equals(-1L))) {notacreditopuntoventa.setid_tipo_factura_punto_venta(notacreditopuntoventaBean.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && notacreditopuntoventaBean.getid_estado_nota_credito_punto_venta()!=null && !notacreditopuntoventaBean.getid_estado_nota_credito_punto_venta().equals(-1L))) {notacreditopuntoventa.setid_estado_nota_credito_punto_venta(notacreditopuntoventaBean.getid_estado_nota_credito_punto_venta());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventaOrigen,NotaCreditoPuntoVenta notacreditopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getId()!=null && !notacreditopuntoventaOrigen.getId().equals(0L))) {notacreditopuntoventa.setId(notacreditopuntoventaOrigen.getId());}}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_vendedor()!=null && !notacreditopuntoventaOrigen.getid_vendedor().equals(-1L))) {notacreditopuntoventa.setid_vendedor(notacreditopuntoventaOrigen.getid_vendedor());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_cliente()!=null && !notacreditopuntoventaOrigen.getid_cliente().equals(-1L))) {notacreditopuntoventa.setid_cliente(notacreditopuntoventaOrigen.getid_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_caja()!=null && !notacreditopuntoventaOrigen.getid_caja().equals(-1L))) {notacreditopuntoventa.setid_caja(notacreditopuntoventaOrigen.getid_caja());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_asiento_contable()!=null && !notacreditopuntoventaOrigen.getid_asiento_contable().equals(null))) {notacreditopuntoventa.setid_asiento_contable(notacreditopuntoventaOrigen.getid_asiento_contable());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_tipo_precio()!=null && !notacreditopuntoventaOrigen.getid_tipo_precio().equals(-1L))) {notacreditopuntoventa.setid_tipo_precio(notacreditopuntoventaOrigen.getid_tipo_precio());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_mesa()!=null && !notacreditopuntoventaOrigen.getid_mesa().equals(-1L))) {notacreditopuntoventa.setid_mesa(notacreditopuntoventaOrigen.getid_mesa());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_formato()!=null && !notacreditopuntoventaOrigen.getid_formato().equals(-1L))) {notacreditopuntoventa.setid_formato(notacreditopuntoventaOrigen.getid_formato());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_tipo_factura_punto_venta()!=null && !notacreditopuntoventaOrigen.getid_tipo_factura_punto_venta().equals(-1L))) {notacreditopuntoventa.setid_tipo_factura_punto_venta(notacreditopuntoventaOrigen.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getid_estado_nota_credito_punto_venta()!=null && !notacreditopuntoventaOrigen.getid_estado_nota_credito_punto_venta().equals(-1L))) {notacreditopuntoventa.setid_estado_nota_credito_punto_venta(notacreditopuntoventaOrigen.getid_estado_nota_credito_punto_venta());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getnumero_secuencial()!=null && !notacreditopuntoventaOrigen.getnumero_secuencial().equals(""))) {notacreditopuntoventa.setnumero_secuencial(notacreditopuntoventaOrigen.getnumero_secuencial());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getcodigo_cliente()!=null && !notacreditopuntoventaOrigen.getcodigo_cliente().equals(""))) {notacreditopuntoventa.setcodigo_cliente(notacreditopuntoventaOrigen.getcodigo_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getnombre_cliente()!=null && !notacreditopuntoventaOrigen.getnombre_cliente().equals(""))) {notacreditopuntoventa.setnombre_cliente(notacreditopuntoventaOrigen.getnombre_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gettarjeta_cliente()!=null && !notacreditopuntoventaOrigen.gettarjeta_cliente().equals(""))) {notacreditopuntoventa.settarjeta_cliente(notacreditopuntoventaOrigen.gettarjeta_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getdireccion_cliente()!=null && !notacreditopuntoventaOrigen.getdireccion_cliente().equals(""))) {notacreditopuntoventa.setdireccion_cliente(notacreditopuntoventaOrigen.getdireccion_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gettelefono_cliente()!=null && !notacreditopuntoventaOrigen.gettelefono_cliente().equals(""))) {notacreditopuntoventa.settelefono_cliente(notacreditopuntoventaOrigen.gettelefono_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getfecha()!=null && !notacreditopuntoventaOrigen.getfecha().equals(new Date()))) {notacreditopuntoventa.setfecha(notacreditopuntoventaOrigen.getfecha());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gethora()!=null && !notacreditopuntoventaOrigen.gethora().equals(new Time((new Date()).getTime())))) {notacreditopuntoventa.sethora(notacreditopuntoventaOrigen.gethora());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gettotal_iva()!=null && !notacreditopuntoventaOrigen.gettotal_iva().equals(0.0))) {notacreditopuntoventa.settotal_iva(notacreditopuntoventaOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gettotal_sin_iva()!=null && !notacreditopuntoventaOrigen.gettotal_sin_iva().equals(0.0))) {notacreditopuntoventa.settotal_sin_iva(notacreditopuntoventaOrigen.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getiva()!=null && !notacreditopuntoventaOrigen.getiva().equals(0.0))) {notacreditopuntoventa.setiva(notacreditopuntoventaOrigen.getiva());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getdescuento()!=null && !notacreditopuntoventaOrigen.getdescuento().equals(0.0))) {notacreditopuntoventa.setdescuento(notacreditopuntoventaOrigen.getdescuento());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getfinanciamiento()!=null && !notacreditopuntoventaOrigen.getfinanciamiento().equals(0.0))) {notacreditopuntoventa.setfinanciamiento(notacreditopuntoventaOrigen.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getflete()!=null && !notacreditopuntoventaOrigen.getflete().equals(0.0))) {notacreditopuntoventa.setflete(notacreditopuntoventaOrigen.getflete());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getice()!=null && !notacreditopuntoventaOrigen.getice().equals(0.0))) {notacreditopuntoventa.setice(notacreditopuntoventaOrigen.getice());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getotros()!=null && !notacreditopuntoventaOrigen.getotros().equals(0.0))) {notacreditopuntoventa.setotros(notacreditopuntoventaOrigen.getotros());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.getsub_total()!=null && !notacreditopuntoventaOrigen.getsub_total().equals(0.0))) {notacreditopuntoventa.setsub_total(notacreditopuntoventaOrigen.getsub_total());}
			if(conDefault || (!conDefault && notacreditopuntoventaOrigen.gettotal()!=null && !notacreditopuntoventaOrigen.gettotal().equals(0.0))) {notacreditopuntoventa.settotal(notacreditopuntoventaOrigen.gettotal());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setDate(notacreditopuntoventa.getfecha());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setValue(notacreditopuntoventa.gethora());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getotros().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setText(notacreditopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setText(notacreditopuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioNotaCreditoPuntoVenta(NotaCreditoPuntoVentaBean notacreditopuntoventaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getId().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getnumero_secuencial());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getcodigo_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getnombre_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.gettarjeta_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getdireccion_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.gettelefono_cliente());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setDate(notacreditopuntoventaBean.getfecha());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setValue(notacreditopuntoventaBean.gethora());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getiva().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getflete().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getice().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getotros().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setText(notacreditopuntoventaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanNotaCreditoPuntoVenta(NotaCreditoPuntoVentaParameterReturnGeneral notacreditopuntoventaReturnGeneral,NotaCreditoPuntoVentaBean notacreditopuntoventaBean,Boolean conDefault) throws Exception { 
		try {
			NotaCreditoPuntoVenta notacreditopuntoventaLocal=new NotaCreditoPuntoVenta();
			
			notacreditopuntoventaLocal=notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && notacreditopuntoventaLocal.getId()!=null && !notacreditopuntoventaLocal.getId().equals(0L))) {notacreditopuntoventaBean.setId(notacreditopuntoventaLocal.getId());}}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_vendedor()!=null && !notacreditopuntoventaLocal.getid_vendedor().equals(-1L))) {notacreditopuntoventaBean.setid_vendedor(notacreditopuntoventaLocal.getid_vendedor());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_cliente()!=null && !notacreditopuntoventaLocal.getid_cliente().equals(-1L))) {notacreditopuntoventaBean.setid_cliente(notacreditopuntoventaLocal.getid_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_caja()!=null && !notacreditopuntoventaLocal.getid_caja().equals(-1L))) {notacreditopuntoventaBean.setid_caja(notacreditopuntoventaLocal.getid_caja());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_tipo_precio()!=null && !notacreditopuntoventaLocal.getid_tipo_precio().equals(-1L))) {notacreditopuntoventaBean.setid_tipo_precio(notacreditopuntoventaLocal.getid_tipo_precio());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_mesa()!=null && !notacreditopuntoventaLocal.getid_mesa().equals(-1L))) {notacreditopuntoventaBean.setid_mesa(notacreditopuntoventaLocal.getid_mesa());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_formato()!=null && !notacreditopuntoventaLocal.getid_formato().equals(-1L))) {notacreditopuntoventaBean.setid_formato(notacreditopuntoventaLocal.getid_formato());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_tipo_factura_punto_venta()!=null && !notacreditopuntoventaLocal.getid_tipo_factura_punto_venta().equals(-1L))) {notacreditopuntoventaBean.setid_tipo_factura_punto_venta(notacreditopuntoventaLocal.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getid_estado_nota_credito_punto_venta()!=null && !notacreditopuntoventaLocal.getid_estado_nota_credito_punto_venta().equals(-1L))) {notacreditopuntoventaBean.setid_estado_nota_credito_punto_venta(notacreditopuntoventaLocal.getid_estado_nota_credito_punto_venta());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getnumero_secuencial()!=null && !notacreditopuntoventaLocal.getnumero_secuencial().equals(""))) {notacreditopuntoventaBean.setnumero_secuencial(notacreditopuntoventaLocal.getnumero_secuencial());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getcodigo_cliente()!=null && !notacreditopuntoventaLocal.getcodigo_cliente().equals(""))) {notacreditopuntoventaBean.setcodigo_cliente(notacreditopuntoventaLocal.getcodigo_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getnombre_cliente()!=null && !notacreditopuntoventaLocal.getnombre_cliente().equals(""))) {notacreditopuntoventaBean.setnombre_cliente(notacreditopuntoventaLocal.getnombre_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gettarjeta_cliente()!=null && !notacreditopuntoventaLocal.gettarjeta_cliente().equals(""))) {notacreditopuntoventaBean.settarjeta_cliente(notacreditopuntoventaLocal.gettarjeta_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getdireccion_cliente()!=null && !notacreditopuntoventaLocal.getdireccion_cliente().equals(""))) {notacreditopuntoventaBean.setdireccion_cliente(notacreditopuntoventaLocal.getdireccion_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gettelefono_cliente()!=null && !notacreditopuntoventaLocal.gettelefono_cliente().equals(""))) {notacreditopuntoventaBean.settelefono_cliente(notacreditopuntoventaLocal.gettelefono_cliente());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getfecha()!=null && !notacreditopuntoventaLocal.getfecha().equals(new Date()))) {notacreditopuntoventaBean.setfecha(notacreditopuntoventaLocal.getfecha());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gethora()!=null && !notacreditopuntoventaLocal.gethora().equals(new Time((new Date()).getTime())))) {notacreditopuntoventaBean.sethora(notacreditopuntoventaLocal.gethora());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gettotal_iva()!=null && !notacreditopuntoventaLocal.gettotal_iva().equals(0.0))) {notacreditopuntoventaBean.settotal_iva(notacreditopuntoventaLocal.gettotal_iva());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gettotal_sin_iva()!=null && !notacreditopuntoventaLocal.gettotal_sin_iva().equals(0.0))) {notacreditopuntoventaBean.settotal_sin_iva(notacreditopuntoventaLocal.gettotal_sin_iva());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getiva()!=null && !notacreditopuntoventaLocal.getiva().equals(0.0))) {notacreditopuntoventaBean.setiva(notacreditopuntoventaLocal.getiva());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getdescuento()!=null && !notacreditopuntoventaLocal.getdescuento().equals(0.0))) {notacreditopuntoventaBean.setdescuento(notacreditopuntoventaLocal.getdescuento());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getfinanciamiento()!=null && !notacreditopuntoventaLocal.getfinanciamiento().equals(0.0))) {notacreditopuntoventaBean.setfinanciamiento(notacreditopuntoventaLocal.getfinanciamiento());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getflete()!=null && !notacreditopuntoventaLocal.getflete().equals(0.0))) {notacreditopuntoventaBean.setflete(notacreditopuntoventaLocal.getflete());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getice()!=null && !notacreditopuntoventaLocal.getice().equals(0.0))) {notacreditopuntoventaBean.setice(notacreditopuntoventaLocal.getice());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getotros()!=null && !notacreditopuntoventaLocal.getotros().equals(0.0))) {notacreditopuntoventaBean.setotros(notacreditopuntoventaLocal.getotros());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.getsub_total()!=null && !notacreditopuntoventaLocal.getsub_total().equals(0.0))) {notacreditopuntoventaBean.setsub_total(notacreditopuntoventaLocal.getsub_total());}
			if(conDefault || (!conDefault && notacreditopuntoventaLocal.gettotal()!=null && !notacreditopuntoventaLocal.gettotal().equals(0.0))) {notacreditopuntoventaBean.settotal(notacreditopuntoventaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxNotaCreditoPuntoVentaGenerico(Long idNotaCreditoPuntoVentaSeleccionado,JComboBox jComboBoxNotaCreditoPuntoVenta,List<NotaCreditoPuntoVenta> notacreditopuntoventasLocal)throws Exception {
		try {
			NotaCreditoPuntoVenta  notacreditopuntoventaTemp=null;

			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasLocal) {
				if(notacreditopuntoventaAux.getId()!=null && notacreditopuntoventaAux.getId().equals(idNotaCreditoPuntoVentaSeleccionado)) {
					notacreditopuntoventaTemp=notacreditopuntoventaAux;
					break;
				}
			}

			jComboBoxNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxNotaCreditoPuntoVentaGenerico(JComboBox jComboBoxNotaCreditoPuntoVenta,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetalleNotaCreditoPuntoVenta")) {
			jButtonDetalleNotaCreditoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditopuntoventa=(NotaCreditoPuntoVenta) notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacreditopuntoventa =(NotaCreditoPuntoVenta) notacreditopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Caja")) {
			//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getcaja_descripcion();
			} else {
				//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getcaja_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getasientocontable_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Mesa")) {
			//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getmesa_descripcion();
			} else {
				//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getmesa_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getformato_descripcion();
			}
		}

		if(sTipo.equals("TipoFacturaPuntoVenta")) {
			//sDescripcion=this.getActualTipoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.gettipofacturapuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualTipoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.gettipofacturapuntoventa_descripcion();
			}
		}

		if(sTipo.equals("EstadoNotaCreditoPuntoVenta")) {
			//sDescripcion=this.getActualEstadoNotaCreditoPuntoVentaForeignKeyDescripcion((Long)value);
			if(!notacreditopuntoventa.getIsNew() && !notacreditopuntoventa.getIsChanged() && !notacreditopuntoventa.getIsDeleted()) {
				sDescripcion=notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoNotaCreditoPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		NotaCreditoPuntoVenta notacreditopuntoventaRow=new NotaCreditoPuntoVenta();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditopuntoventaRow=(NotaCreditoPuntoVenta) notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			notacreditopuntoventaRow=(NotaCreditoPuntoVenta) notacreditopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,NotaCreditoPuntoVenta notacreditopuntoventa) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa = (NotaCreditoPuntoVenta)this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.notacreditopuntoventa = (NotaCreditoPuntoVenta)this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(notacreditopuntoventa!=null) {
						this.notacreditopuntoventa = notacreditopuntoventa;
					} else {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}
				}

				if(this.isTienePermisosDetalleNotaCreditoPuntoVenta && this.permiteMantenimiento(this.notacreditopuntoventa)) {
					DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame detallenotacreditopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup=new DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallenotacreditopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup;
					} else {
						detallenotacreditopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame;
					}

					List<NotaCreditoPuntoVenta> notacreditopuntoventas=new ArrayList<NotaCreditoPuntoVenta>();
					notacreditopuntoventas.add(this.notacreditopuntoventa);
					if(!esRelacionado) {
						//detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.setConGuardarRelaciones(false);
						//detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallenotacreditopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.cargarDetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(notacreditopuntoventas,this.notacreditopuntoventa,detallenotacreditopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones(),detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado());
					detallenotacreditopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallenotacreditopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleNotaCreditoPuntoVenta("no_relacionado");

						detallenotacreditopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleNotaCreditoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (DetalleNotaCreditoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						detallenotacreditopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
						TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)detallenotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();

						titledBorderDetalleNotaCreditoPuntoVenta.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Detalle Nota Credito");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallenotacreditopuntoventaBeanSwingJInternalFrame);
						}

						detallenotacreditopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallenotacreditopuntoventaBeanSwingJInternalFrame);

						detallenotacreditopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Nota Credito",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));			
			this.jButtonDuplicarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta && this.isPermisoDuplicarNotaCreditoPuntoVenta));			
			this.jButtonCopiarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta && this.isPermisoCopiarNotaCreditoPuntoVenta));
			this.jButtonVerFormNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta && this.isPermisoVerFormNotaCreditoPuntoVenta));
			
			this.jButtonAbrirOrderByNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));			
			
			this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta && this.isPermisoEliminarNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta);							
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));			
			
			}
						
			this.jButtonGuardarCambiosTablaNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));						
			this.jButtonDuplicarToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta && this.isPermisoDuplicarNotaCreditoPuntoVenta));						
			this.jButtonCopiarToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta && this.isPermisoCopiarNotaCreditoPuntoVenta));			
			this.jButtonVerFormToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta && this.isPermisoVerFormNotaCreditoPuntoVenta));			
			this.jButtonAbrirOrderByToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));
			this.jButtonNuevoRelacionesToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));			
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta  && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta && this.isPermisoEliminarNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarToolBarNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta);				
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));			
			this.jMenuItemDuplicarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta && this.isPermisoDuplicarNotaCreditoPuntoVenta));			
			this.jMenuItemCopiarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta && this.isPermisoCopiarNotaCreditoPuntoVenta));			
			this.jMenuItemVerFormNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta && this.isPermisoVerFormNotaCreditoPuntoVenta));			
			this.jMenuItemAbrirOrderByNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));			
			//this.jMenuItemMostrarOcultarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));
			this.jMenuItemDetalleAbrirOrderByNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));			
			//this.jMenuItemDetalleMostrarOcultarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta && this.isPermisoOrdenNotaCreditoPuntoVenta));			
			this.jMenuItemNuevoRelacionesNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta));			
			this.jMenuItemNuevoGuardarCambiosNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta && this.isPermisoNuevoNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));									
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemModificarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemActualizarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta && this.isPermisoActualizarNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemEliminarNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta && this.isPermisoEliminarNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemCancelarNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta);				
			}
			
			this.jMenuItemGuardarCambiosNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));						
			this.jMenuItemGuardarCambiosTablaNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=this.jButtonNuevoNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta=this.jButtonDuplicarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta=this.jButtonCopiarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta=this.jButtonVerFormNotaCreditoPuntoVenta.isVisible();
			
			this.isVisibilidadCeldaOrdenNotaCreditoPuntoVenta=this.jButtonAbrirOrderByNotaCreditoPuntoVenta.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=this.jButtonModificarNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=this.jButtonGuardarCambiosTablaNotaCreditoPuntoVenta.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=this.jButtonNuevoToolBarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=this.jButtonNuevoRelacionesToolBarNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarToolBarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarToolBarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarToolBarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarToolBarNotaCreditoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=this.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=this.jButtonGuardarCambiosTablaToolBarNotaCreditoPuntoVenta.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=this.jMenuItemNuevoNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=this.jMenuItemNuevoRelacionesNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemModificarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemActualizarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemEliminarNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemCancelarNotaCreditoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=this.jMenuItemGuardarCambiosNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=this.jMenuItemGuardarCambiosTablaNotaCreditoPuntoVenta.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesNotaCreditoPuntoVenta(Boolean esInicializar) {
		if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				//if(this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCreditoPuntoVenta();
			}
			
			this.inicializarActualizarBindingBotonesManualNotaCreditoPuntoVenta(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualNotaCreditoPuntoVenta() {
		this.jButtonNuevoNotaCreditoPuntoVenta.setVisible(this.isPermisoNuevoNotaCreditoPuntoVenta);			
		this.jButtonDuplicarNotaCreditoPuntoVenta.setVisible(this.isPermisoDuplicarNotaCreditoPuntoVenta);			
		this.jButtonCopiarNotaCreditoPuntoVenta.setVisible(this.isPermisoCopiarNotaCreditoPuntoVenta);			
		this.jButtonVerFormNotaCreditoPuntoVenta.setVisible(this.isPermisoVerFormNotaCreditoPuntoVenta);			
		
		this.jButtonAbrirOrderByNotaCreditoPuntoVenta.setVisible(this.isPermisoOrdenNotaCreditoPuntoVenta);					
		
		this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.setVisible(this.isPermisoNuevoNotaCreditoPuntoVenta);			
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarNotaCreditoPuntoVenta);	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarNotaCreditoPuntoVenta);	
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.setVisible(this.isPermisoEliminarNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta);						
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.setVisible(this.isPermisoGuardarCambiosNotaCreditoPuntoVenta);							
		}
		
		this.jButtonGuardarCambiosTablaNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarNotaCreditoPuntoVenta);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCreditoPuntoVenta() {
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarNotaCreditoPuntoVenta);	
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarNotaCreditoPuntoVenta);	
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.setVisible(this.isPermisoEliminarNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta);							
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosNotaCreditoPuntoVenta));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosNotaCreditoPuntoVenta() {
		if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualNotaCreditoPuntoVenta();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesNotaCreditoPuntoVenta() {
	}
	
	public void jTableDatosNotaCreditoPuntoVentaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarNotaCreditoPuntoVenta(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.notacreditopuntoventa.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.notacreditopuntoventa.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.notacreditopuntoventa.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.notacreditopuntoventa.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="Vendedor";

			if(!this.sFinalQueryGeneral_vendedor.equals("")) {
				this.vendedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_vendedor);
				this.vendedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.vendedorBeanSwingJInternalFrame.procesarBusqueda(this.vendedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingVendedor(false);
			}

			if(!this.sFinalQueryComboVendedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoPuntoVenta=null;
			TitledBorder titledBordervendedor=null;

			if(!this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Vendedor");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_vendedorNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.notacreditopuntoventa.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoPuntoVenta=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.notacreditopuntoventa.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cajaNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocaja=true;

			idTienePermisocaja=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(CajaConstantesFunciones.CLASSNAME);

			if(idTienePermisocaja) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.cajaBeanSwingJInternalFrame=new CajaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cajaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cajaBeanSwingJInternalFrame.getCajaLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_caja()!=null) {
					this.cajaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cajaBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_caja());
					this.cajaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCaja();
				}

				JInternalFrameBase jinternalFrame =this.cajaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordercaja=(TitledBorder)this.cajaBeanSwingJInternalFrame.jScrollPanelDatosCaja.getBorder();

				titledBordercaja.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Caja");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cajaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_caja()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_caja = "+this.notacreditopuntoventa.getid_caja().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderNotaCreditoPuntoVenta=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.notacreditopuntoventa.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.notacreditopuntoventa.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesaNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomesa=true;

			idTienePermisomesa=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(MesaConstantesFunciones.CLASSNAME);

			if(idTienePermisomesa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.mesaBeanSwingJInternalFrame=new MesaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesaBeanSwingJInternalFrame.getMesaLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_mesa()!=null) {
					this.mesaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesaBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_mesa());
					this.mesaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMesa();
				}

				JInternalFrameBase jinternalFrame =this.mesaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordermesa=(TitledBorder)this.mesaBeanSwingJInternalFrame.jScrollPanelDatosMesa.getBorder();

				titledBordermesa.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Mesa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_mesa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mesa = "+this.notacreditopuntoventa.getid_mesa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.notacreditopuntoventa.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipofacturapuntoventa=true;

			idTienePermisotipofacturapuntoventa=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(TipoFacturaPuntoVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisotipofacturapuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.tipofacturapuntoventaBeanSwingJInternalFrame=new TipoFacturaPuntoVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipofacturapuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipofacturapuntoventaBeanSwingJInternalFrame.getTipoFacturaPuntoVentaLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_tipo_factura_punto_venta()!=null) {
					this.tipofacturapuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipofacturapuntoventaBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_tipo_factura_punto_venta());
					this.tipofacturapuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipofacturapuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipofacturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoFacturaPuntoVenta();
				}

				JInternalFrameBase jinternalFrame =this.tipofacturapuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordertipofacturapuntoventa=(TitledBorder)this.tipofacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosTipoFacturaPuntoVenta.getBorder();

				titledBordertipofacturapuntoventa.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Tipo Factura Punto Venta");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_tipo_factura_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_factura_punto_venta = "+this.notacreditopuntoventa.getid_tipo_factura_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadonotacreditopuntoventa=true;

			idTienePermisoestadonotacreditopuntoventa=this.tienePermisosUsuarioEnPaginaWebNotaCreditoPuntoVenta(EstadoNotaCreditoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadonotacreditopuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);

				this.estadonotacreditopuntoventaBeanSwingJInternalFrame=new EstadoNotaCreditoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadonotacreditopuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadonotacreditopuntoventaBeanSwingJInternalFrame.getEstadoNotaCreditoLogic().setConnexion(this.notacreditopuntoventaLogic.getConnexion());

				if(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta()!=null) {
					this.estadonotacreditopuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadonotacreditopuntoventaBeanSwingJInternalFrame.setIdActual(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta());
					this.estadonotacreditopuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadonotacreditopuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadonotacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoNotaCredito();
				}

				JInternalFrameBase jinternalFrame =this.estadonotacreditopuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderestadonotacreditopuntoventa=(TitledBorder)this.estadonotacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosEstadoNotaCredito.getBorder();

				titledBorderestadonotacreditopuntoventa.setTitle(titledBorderNotaCreditoPuntoVenta.getTitle() + " -> Estado Nota Credito");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_nota_credito_punto_venta = "+this.notacreditopuntoventa.getid_estado_nota_credito_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencialNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getnumero_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial like '%"+this.notacreditopuntoventa.getnumero_secuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getcodigo_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_cliente like '%"+this.notacreditopuntoventa.getcodigo_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getnombre_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_cliente like '%"+this.notacreditopuntoventa.getnombre_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontarjeta_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gettarjeta_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where tarjeta_cliente like '%"+this.notacreditopuntoventa.gettarjeta_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getdireccion_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_cliente like '%"+this.notacreditopuntoventa.getdireccion_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefono_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gettelefono_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono_cliente like '%"+this.notacreditopuntoventa.gettelefono_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.notacreditopuntoventa.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonhoraNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gethora()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where hora = "+this.notacreditopuntoventa.gethora().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.notacreditopuntoventa.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_sin_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gettotal_sin_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_sin_iva = "+this.notacreditopuntoventa.gettotal_sin_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.notacreditopuntoventa.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.notacreditopuntoventa.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfinanciamientoNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getfinanciamiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where financiamiento = "+this.notacreditopuntoventa.getfinanciamiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.notacreditopuntoventa.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.notacreditopuntoventa.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotrosNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getotros()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros = "+this.notacreditopuntoventa.getotros().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.notacreditopuntoventa.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.getnotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.notacreditopuntoventa==null) {
						this.notacreditopuntoventa = new NotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);
				}

				if(this.notacreditopuntoventa.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.notacreditopuntoventa.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAsientoContableNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdAsientoContable();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCajaNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdCaja();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdCliente();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdEmpresa();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdEstadoNotaCreditoPuntoVenta();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdFormato();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesaNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdMesa();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdSucursal();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdTipoFacturaPuntoVenta();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdTipoPrecio();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdUsuario();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);

			this.getNotaCreditoPuntoVentasFK_IdVendedor();

			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);

			//if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.notacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameNotaCreditoPuntoVenta() {
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
		

		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta=null;
		}
		
		if(this.jInternalFrameImportacionNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameImportacionNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameImportacionNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameImportacionNotaCreditoPuntoVenta=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessNotaCreditoPuntoVenta();
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			
			if(sTipo.equals("NuevoNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarNotaCreditoPuntoVenta")) {
				jButtonDuplicarNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarNotaCreditoPuntoVenta")) {
				jButtonCopiarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormNotaCreditoPuntoVenta")) {
				jButtonVerFormNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarNotaCreditoPuntoVenta")) {
				jButtonDuplicarNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarNotaCreditoPuntoVenta")) {
				jButtonDuplicarNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarNotaCreditoPuntoVenta")) {
				jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarNotaCreditoPuntoVenta")) {
				jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarNotaCreditoPuntoVenta")) {
				jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarNotaCreditoPuntoVenta")) {
				jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarNotaCreditoPuntoVenta")) {
				jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarNotaCreditoPuntoVenta")) {
				jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarNotaCreditoPuntoVenta")) {
				jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarNotaCreditoPuntoVenta")) {
				jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarNotaCreditoPuntoVenta")) {
				jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarNotaCreditoPuntoVenta")) {
				jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarNotaCreditoPuntoVenta")) {
				jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarNotaCreditoPuntoVenta")) {
				jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarNotaCreditoPuntoVenta")) {
				jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarNotaCreditoPuntoVenta")) {
				jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarNotaCreditoPuntoVenta")) {
				jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarNotaCreditoPuntoVenta")) {
				jButtonMostrarOcultarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarNotaCreditoPuntoVenta")) {
				jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarNotaCreditoPuntoVenta")) {
				jButtonCopiarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarNotaCreditoPuntoVenta")) {
				jButtonVerFormNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarNotaCreditoPuntoVenta")) {
				jButtonCopiarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormNotaCreditoPuntoVenta")) {
				jButtonVerFormNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresNotaCreditoPuntoVenta")) {
				jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarNotaCreditoPuntoVenta")) {
				jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreNotaCreditoPuntoVenta")) {
				jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesNotaCreditoPuntoVenta")) {
				jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarNotaCreditoPuntoVenta")) {
				jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesNotaCreditoPuntoVenta")) {
				jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByNotaCreditoPuntoVenta") || sTipo.equals("MenuItemDetalleAbrirOrderByNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarNotaCreditoPuntoVenta") || sTipo.equals("MenuItemDetalleMostrarOcultarNotaCreditoPuntoVenta")) {
				jButtonMostrarOcultarNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoNotaCreditoPuntoVenta")) {
				jButtonCerrarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoNotaCreditoPuntoVenta")) {
				jButtonGenerarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoNotaCreditoPuntoVenta")) {
				
				jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionNotaCreditoPuntoVenta")) {
				jButtonCerrarImportacionNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionNotaCreditoPuntoVenta")) {
				
				jButtonGenerarImportacionNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionNotaCreditoPuntoVenta")) {
				
				jButtonAbrirImportacionNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesNotaCreditoPuntoVenta")) {
				jComboBoxTiposAccionesNotaCreditoPuntoVentaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesNotaCreditoPuntoVenta")) {
				jComboBoxTiposRelacionesNotaCreditoPuntoVentaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioNotaCreditoPuntoVenta")) {
				jComboBoxTiposAccionesNotaCreditoPuntoVentaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarNotaCreditoPuntoVenta")) {
				
				jComboBoxTiposSeleccionarNotaCreditoPuntoVentaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralNotaCreditoPuntoVenta")) {
				jTextFieldValorCampoGeneralNotaCreditoPuntoVentaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByNotaCreditoPuntoVenta")) {
				jButtonCerrarOrderByNotaCreditoPuntoVentaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonidNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_empresaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_empresaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_sucursalNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_usuarioNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_usuarioNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVenta")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_cajaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_cajaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVenta")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_mesaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_mesaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_formatoNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_formatoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoncodigo_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonnombre_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontarjeta_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondireccion_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontelefono_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfechaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonhoraNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotal_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuentoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfleteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniceNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otrosNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonotrosNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonsub_totalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVenta")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVenta")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdAsientoContableNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCajaNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdCajaNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdClienteNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdFormatoNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMesaNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdMesaNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoPrecioNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdTipoPrecioNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdVendedorNotaCreditoPuntoVentaActionPerformed(evt);
			}
			
			;
			
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessNotaCreditoPuntoVenta();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			NotaCreditoPuntoVenta notacreditopuntoventaLocal=null;
			
			if(!this.getEsControlTabla()) {
				notacreditopuntoventaLocal=this.notacreditopuntoventa;
			} else {
				notacreditopuntoventaLocal=this.notacreditopuntoventaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
							
				
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
								
						
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
								
				
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
							
				
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
								
				
				


				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosNotaCreditoPuntoVenta")) {
					jCheckBoxSeleccionarTodosNotaCreditoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosNotaCreditoPuntoVenta")) {
					jCheckBoxSeleccionadosNotaCreditoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarNotaCreditoPuntoVenta")) {
					
				}
				
				


				
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
												
				
				


				
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta;
				}

				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
				//recargarFormNotaCreditoPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta;
				}

				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
				//recargarFormNotaCreditoPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
			}
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.notacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.notacreditopuntoventa);
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta;
				}

				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
				//recargarFormNotaCreditoPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteNotaCreditoPuntoVenta,"FK_IdCliente");
			}
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(NotaCreditoPuntoVenta.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",NotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.notacreditopuntoventaAnterior =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarNotaCreditoPuntoVenta")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosNotaCreditoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosNotaCreditoPuntoVenta.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.notacreditopuntoventa =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.notacreditopuntoventa);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarNotaCreditoPuntoVenta")) {
				
				}
				
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarNotaCreditoPuntoVenta")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosNotaCreditoPuntoVenta.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarNotaCreditoPuntoVenta")) {
			
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessNotaCreditoPuntoVenta();
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("NuevoNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarNotaCreditoPuntoVenta")) {
				jButtonDuplicarNotaCreditoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarNotaCreditoPuntoVenta")) {
				jButtonCopiarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormNotaCreditoPuntoVenta")) {
				jButtonVerFormNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesNotaCreditoPuntoVenta")) {
				jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarNotaCreditoPuntoVenta")) {
				jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarNotaCreditoPuntoVenta")) {
				jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarNotaCreditoPuntoVenta")) {
				jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarNotaCreditoPuntoVenta")) {
				jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarNotaCreditoPuntoVenta")) {
				jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresNotaCreditoPuntoVenta")) {
				jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesNotaCreditoPuntoVenta")) {
				jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonidNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_empresaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_empresaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_sucursalNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_usuarioNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_usuarioNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVenta")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_vendedorNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVenta")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_cajaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_cajaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVenta")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_asiento_contableNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_mesaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_mesaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_formatoNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_formatoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoncodigo_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonnombre_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontarjeta_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondireccion_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clienteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontelefono_clienteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfechaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonhoraNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotal_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotal_sin_ivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonivaNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuentoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfinanciamientoNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonfleteNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniceNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otrosNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonotrosNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonsub_totalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotalNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessNotaCreditoPuntoVenta();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameNotaCreditoPuntoVenta")) {
				closingInternalFrameNotaCreditoPuntoVenta();
				
			} else if(sTipo.equals("jButtonCancelarNotaCreditoPuntoVenta")) {
				JInternalFrameBase jInternalFrameDetalleFormNotaCreditoPuntoVenta = (JInternalFrameBase)evt.getSource();
	            	
	            NotaCreditoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCreditoPuntoVenta.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarNotaCreditoPuntoVentaActionPerformed(null);
			}
			
			NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.notacreditopuntoventa,new Object(),this.notacreditopuntoventaParameterGeneral,this.notacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormNotaCreditoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormNotaCreditoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormNotaCreditoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.notacreditopuntoventa)) {
			if(!esControlTabla) {
				if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);			
				}
				
				if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.procesarEventosNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this.notacreditopuntoventa,this.notacreditopuntoventaParameterGeneral,this.isEsNuevoNotaCreditoPuntoVenta,classes);//this.notacreditopuntoventaLogic.getNotaCreditoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral,this.notacreditopuntoventaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanNotaCreditoPuntoVenta(classes,this.notacreditopuntoventaReturnGeneral,this.notacreditopuntoventaBean,false);
					}
						
					if(this.notacreditopuntoventaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta());	
					}
						
					if(this.notacreditopuntoventaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta(),classes);//this.notacreditopuntoventaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioNotaCreditoPuntoVenta(this.notacreditopuntoventa,classes);//this.notacreditopuntoventaBean);									
				}
			
				if(NotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualNotaCreditoPuntoVenta(this.notacreditopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysNotaCreditoPuntoVenta(this.notacreditopuntoventa);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.notacreditopuntoventaAnterior!=null) {
						this.notacreditopuntoventa=this.notacreditopuntoventaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.procesarEventosNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this.notacreditopuntoventa,this.notacreditopuntoventaParameterGeneral,this.isEsNuevoNotaCreditoPuntoVenta,classes);//this.notacreditopuntoventaLogic.getNotaCreditoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.notacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta(),notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta(),this.notacreditopuntoventas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosNotaCreditoPuntoVenta.repaint();
				
				//((AbstractTableModel) this.jTableDatosNotaCreditoPuntoVenta.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosNotaCreditoPuntoVenta();
			}
		}
	}
	
	public void actualizarVisualTableDatosNotaCreditoPuntoVenta() throws Exception {
		
		NotaCreditoPuntoVentaModel notacreditopuntoventaModel=(NotaCreditoPuntoVentaModel)this.jTableDatosNotaCreditoPuntoVenta.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			notacreditopuntoventaModel.notacreditopuntoventas=this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			notacreditopuntoventaModel.notacreditopuntoventas=this.notacreditopuntoventas;
		}
		
		
		((NotaCreditoPuntoVentaModel) this.jTableDatosNotaCreditoPuntoVenta.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaNotaCreditoPuntoVenta() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getnotacreditopuntoventaAnterior(),this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getnotacreditopuntoventaAnterior(),this.notacreditopuntoventas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosNotaCreditoPuntoVenta();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleNotaCreditoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas());
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditopuntoventa,new Object(),generalEntityParameterGeneral,this.notacreditopuntoventaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=NotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsFromStringsOfNotaCreditoPuntoVenta(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormNotaCreditoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.notacreditopuntoventa,new Object(),generalEntityParameterGeneral,this.notacreditopuntoventaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioNotaCreditoPuntoVenta(NotaCreditoPuntoVentaBean notacreditopuntoventaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleNotaCreditoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(notacreditopuntoventa.getDetalleNotaCreditoPuntoVentas());
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanNotaCreditoPuntoVenta(ArrayList<Classe> classes,NotaCreditoPuntoVentaReturnGeneral notacreditopuntoventaReturnGeneral,NotaCreditoPuntoVentaBean notacreditopuntoventaBean,Boolean conDefault) throws Exception {
		
			this.notacreditopuntoventaBean.setDetalleNotaCreditoPuntoVentas(notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta().getDetalleNotaCreditoPuntoVentas());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleNotaCreditoPuntoVenta.class)) {
					notacreditopuntoventa.setDetalleNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaBeanSwingJInternalFrame.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.notacreditopuntoventa)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta = new NotaCreditoPuntoVentaDetalleFormJInternalFrame(jDesktopPane,this.notacreditopuntoventaSessionBean.getConGuardarRelaciones(),this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setVisible(false);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setSelected(false);						
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.notacreditopuntoventaLogic=this.notacreditopuntoventaLogic;
		
		this.cargarCombosFrameForeignKeyNotaCreditoPuntoVenta("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleNotaCreditoPuntoVenta();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleNotaCreditoPuntoVenta();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyNotaCreditoPuntoVenta("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyNotaCreditoPuntoVenta();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCreditoPuntoVenta"));
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarNotaCreditoPuntoVenta"));

		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCreditoPuntoVenta"));
					
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemModificarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCreditoPuntoVenta"));
						
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemActualizarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCreditoPuntoVenta"));
								
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemEliminarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCreditoPuntoVenta"));
					
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemCancelarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCreditoPuntoVenta"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemDetalleCerrarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCreditoPuntoVenta"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonidNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVenta"));
		//jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_clienteNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnumero_secuencialNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoncodigo_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnombre_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontarjeta_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondireccion_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontelefono_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfechaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonhoraNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_sin_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondescuentoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfinanciamientoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfleteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoniceNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonotrosNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonsub_totalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoPuntoVentaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCreditoPuntoVenta"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameNotaCreditoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarNotaCreditoPuntoVenta"));
		}
		
		this.jTableDatosNotaCreditoPuntoVenta.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarNotaCreditoPuntoVenta"));
		
		this.jTableDatosNotaCreditoPuntoVenta.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarNotaCreditoPuntoVenta"));
		
		this.jButtonNuevoNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoNotaCreditoPuntoVenta"));
		
		this.jButtonDuplicarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarNotaCreditoPuntoVenta"));
		
		this.jButtonCopiarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"CopiarNotaCreditoPuntoVenta"));
		
		this.jButtonVerFormNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"VerFormNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoToolBarNotaCreditoPuntoVenta"));
			
		this.jButtonDuplicarToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoNotaCreditoPuntoVenta"));
			
		this.jMenuItemDuplicarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarNotaCreditoPuntoVenta"));		
		
		
		this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoRelacionesNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoRelacionesToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoRelacionesNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesNotaCreditoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonModificarToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarNotaCreditoPuntoVenta"));
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemModificarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonActualizarToolBarNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarNotaCreditoPuntoVenta"));
				
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemActualizarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonEliminarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarNotaCreditoPuntoVenta"));
						
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemEliminarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonCancelarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarNotaCreditoPuntoVenta"));
			
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemCancelarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarNotaCreditoPuntoVenta"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarNotaCreditoPuntoVenta"));		
		
		
		this.jButtonCerrarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarNotaCreditoPuntoVenta"));
		
		
		this.jButtonCerrarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemCerrarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCerrarNotaCreditoPuntoVenta"));
			
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jMenuItemDetalleCerrarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarNotaCreditoPuntoVenta"));
		}
		
		this.jButtonCopiarToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CopiarToolBarNotaCreditoPuntoVenta"));
			
		this.jButtonVerFormToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"VerFormToolBarNotaCreditoPuntoVenta"));
		
		this.jMenuItemGuardarCambiosNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosNotaCreditoPuntoVenta"));
			
		this.jMenuItemCopiarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCopiarNotaCreditoPuntoVenta"));		
		
		this.jMenuItemVerFormNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemVerFormNotaCreditoPuntoVenta"));		
		
		
		this.jButtonGuardarCambiosTablaNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCreditoPuntoVenta"));
		
		
		this.jButtonGuardarCambiosTablaToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemGuardarCambiosTablaNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaNotaCreditoPuntoVenta"));		
		
		
		
		this.jButtonRecargarInformacionNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionNotaCreditoPuntoVenta"));
					
		this.jButtonRecargarInformacionToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarNotaCreditoPuntoVenta"));
		
		this.jMenuItemRecargarInformacionNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionNotaCreditoPuntoVenta"));		
		
		
		
		this.jButtonAnterioresNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresNotaCreditoPuntoVenta"));
		
		
		this.jButtonAnterioresToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresToolBarNotaCreditoPuntoVenta"));
		
		this.jMenuItemAnterioresNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresNotaCreditoPuntoVenta"));		
		
		
		this.jButtonSiguientesNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesNotaCreditoPuntoVenta"));
		
		
		this.jButtonSiguientesToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemSiguientesNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesNotaCreditoPuntoVenta"));
			
		this.jMenuItemAbrirOrderByNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByNotaCreditoPuntoVenta"));
			
		this.jMenuItemMostrarOcultarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarNotaCreditoPuntoVenta"));
			
		this.jMenuItemDetalleAbrirOrderByNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByNotaCreditoPuntoVenta"));
			
		this.jMenuItemDetalleMostarOcultarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarNotaCreditoPuntoVenta"));		
		
		
		this.jButtonNuevoGuardarCambiosNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoGuardarCambiosNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosNotaCreditoPuntoVenta"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosNotaCreditoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosNotaCreditoPuntoVenta"));

		this.jCheckBoxSeleccionadosNotaCreditoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionadosNotaCreditoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioNotaCreditoPuntoVenta"));
		}
		
		
		this.jComboBoxTiposRelacionesNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposRelacionesNotaCreditoPuntoVenta"));
			
		this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesNotaCreditoPuntoVenta"));
					
		this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposSeleccionarNotaCreditoPuntoVenta"));
			
		this.jTextFieldValorCampoGeneralNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralNotaCreditoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonidNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVenta"));
		//jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_clienteNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnumero_secuencialNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoncodigo_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnombre_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontarjeta_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondireccion_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontelefono_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfechaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonhoraNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_sin_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondescuentoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfinanciamientoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfleteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoniceNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonotrosNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonsub_totalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoPuntoVentaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableNotaCreditoPuntoVenta"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVenta"));

			this.jButtonFK_IdCajaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaNotaCreditoPuntoVenta"));

			this.jButtonFK_IdClienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCreditoPuntoVenta"));

			this.jButtonBuscarFK_IdClienteid_clienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVenta"));

			this.jButtonFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta"));

			this.jButtonFK_IdFormatoNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdFormatoNotaCreditoPuntoVenta"));

			this.jButtonFK_IdMesaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaNotaCreditoPuntoVenta"));

			this.jButtonFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta"));

			this.jButtonFK_IdTipoPrecioNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioNotaCreditoPuntoVenta"));

			this.jButtonFK_IdVendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCreditoPuntoVenta"));

			this.jButtonBuscarFK_IdVendedorid_vendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVenta"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoNotaCreditoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoPuntoVenta"));
			}
			
			//this.jButtonCerrarReporteDinamicoNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoNotaCreditoPuntoVenta"));				
			//this.jButtonGenerarReporteDinamicoNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoNotaCreditoPuntoVenta"));
			//this.jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoNotaCreditoPuntoVenta"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionNotaCreditoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionNotaCreditoPuntoVenta"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByNotaCreditoPuntoVenta"));
			
			this.jButtonAbrirOrderByToolBarNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarNotaCreditoPuntoVenta"));			
			
			if(this.jInternalFrameOrderByNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameOrderByNotaCreditoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByNotaCreditoPuntoVenta"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTabbedPaneRelacionesNotaCreditoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesNotaCreditoPuntoVenta"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameNotaCreditoPuntoVenta();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormNotaCreditoPuntoVenta = (JInternalFrameBase)event.getSource();
	            	
	            NotaCreditoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(NotaCreditoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormNotaCreditoPuntoVenta.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarNotaCreditoPuntoVentaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosNotaCreditoPuntoVenta.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosNotaCreditoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosNotaCreditoPuntoVenta.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosNotaCreditoPuntoVenta.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoNotaCreditoPuntoVenta";
		inputMap = this.jButtonNuevoNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesNotaCreditoPuntoVenta";
		inputMap = this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoNotaCreditoPuntoVentaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarNotaCreditoPuntoVenta";
		inputMap = this.jButtonModificarNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarNotaCreditoPuntoVenta";
		inputMap = this.jButtonActualizarNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarNotaCreditoPuntoVenta";
		inputMap = this.jButtonEliminarNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarNotaCreditoPuntoVenta";
		inputMap = this.jButtonCancelarNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarNotaCreditoPuntoVenta";
		inputMap = this.jButtonCerrarNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosNotaCreditoPuntoVenta";
		inputMap = this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonGuardarCambiosNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosNotaCreditoPuntoVenta.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosNotaCreditoPuntoVentaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonidNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_empresaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_sucursalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_usuarioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVenta"));
		//jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_clienteNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_cajaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_precioNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_mesaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_formatoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_nota_credito_punto_ventaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnumero_secuencialNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoncodigo_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonnombre_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontarjeta_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondireccion_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontelefono_clienteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfechaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonhoraNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotal_sin_ivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonivaNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtondescuentoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfinanciamientoNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonfleteNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtoniceNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonotrosNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonsub_totalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtontotalNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalNotaCreditoPuntoVentaBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableNotaCreditoPuntoVenta"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableNotaCreditoPuntoVenta"));

		this.jButtonFK_IdCajaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaNotaCreditoPuntoVenta"));

		this.jButtonFK_IdClienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClienteNotaCreditoPuntoVenta"));

		this.jButtonBuscarFK_IdClienteid_clienteNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteNotaCreditoPuntoVenta"));

		this.jButtonFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta"));

		this.jButtonFK_IdFormatoNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdFormatoNotaCreditoPuntoVenta"));

		this.jButtonFK_IdMesaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaNotaCreditoPuntoVenta"));

		this.jButtonFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta"));

		this.jButtonFK_IdTipoPrecioNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioNotaCreditoPuntoVenta"));

		this.jButtonFK_IdVendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorNotaCreditoPuntoVenta"));

		this.jButtonBuscarFK_IdVendedorid_vendedorNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorNotaCreditoPuntoVenta"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarNotaCreditoPuntoVenta.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosNotaCreditoPuntoVenta(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
					notacreditopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventas) {
					notacreditopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosNotaCreditoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
						notacreditopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventas) {
						notacreditopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCreditoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCreditoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosNotaCreditoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosNotaCreditoPuntoVenta.getSelectedRows();
			
			NotaCreditoPuntoVenta notacreditopuntoventaLocal=new NotaCreditoPuntoVenta();
			
			//this.seleccionarTodosNotaCreditoPuntoVenta(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLocal =(NotaCreditoPuntoVenta) this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas().toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					notacreditopuntoventaLocal =(NotaCreditoPuntoVenta) this.notacreditopuntoventas.toArray()[this.jTableDatosNotaCreditoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				notacreditopuntoventaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
						notacreditopuntoventaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventas) {
						notacreditopuntoventaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosNotaCreditoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosNotaCreditoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualNotaCreditoPuntoVentaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarNotaCreditoPuntoVentaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralNotaCreditoPuntoVenta.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
				
						if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							notacreditopuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditopuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							notacreditopuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditopuntoventaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditopuntoventaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							notacreditopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditopuntoventaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditopuntoventaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS)) {
							existe=true;
							notacreditopuntoventaAux.setotros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventas) {
					
						if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							notacreditopuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							notacreditopuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							notacreditopuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							notacreditopuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							notacreditopuntoventaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							notacreditopuntoventaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							notacreditopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							notacreditopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							notacreditopuntoventaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							notacreditopuntoventaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							notacreditopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS)) {
							existe=true;
							notacreditopuntoventaAux.setotros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							notacreditopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							notacreditopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesNotaCreditoPuntoVentaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioNotaCreditoPuntoVenta=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteNotaCreditoPuntoVenta) {				
					conSplash=true;//false;										
					
					//this.startProcessNotaCreditoPuntoVenta(conSplash);
				
					this.generarReporteNotaCreditoPuntoVentasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoNotaCreditoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditoPuntoVentasSeleccionados(false);
				//this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoNotaCreditoPuntoVentasSeleccionados(true);
				//this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCreditoPuntoVenta();
				
				this.exportarNotaCreditoPuntoVentasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionNotaCreditoPuntoVentas();
				//this.importarNotaCreditoPuntoVentas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessNotaCreditoPuntoVenta();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelNotaCreditoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessNotaCreditoPuntoVenta();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoNotaCreditoPuntoVenta)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyNotaCreditoPuntoVenta(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}	
			} 			
			else if(NotaCreditoPuntoVentaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteNotaCreditoPuntoVenta) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessNotaCreditoPuntoVenta(conSplash);
					
						//this.actualizarParametrosGeneralNotaCreditoPuntoVenta();
						
						this.generarReporteProcesoAccionNotaCreditoPuntoVentasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Nota CreditoS SELECCIONADOS?", "MANTENIMIENTO DE Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessNotaCreditoPuntoVenta();
				
						this.actualizarParametrosGeneralNotaCreditoPuntoVenta();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.notacreditopuntoventaReturnGeneral=notacreditopuntoventaLogic.procesarAccionNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas(),this.notacreditopuntoventaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarNotaCreditoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralNotaCreditoPuntoVenta();
					
					NotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarNotaCreditoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesNotaCreditoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioNotaCreditoPuntoVenta.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessNotaCreditoPuntoVenta(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessNotaCreditoPuntoVenta();
			
			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
			NotaCreditoPuntoVenta notacreditopuntoventa=new NotaCreditoPuntoVenta();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesNotaCreditoPuntoVenta.getSelectedItem();
			
			
			
			
			notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
			//this.sTipoAccion;
			
			if(notacreditopuntoventasSeleccionados.size()==1) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
					notacreditopuntoventa=notacreditopuntoventaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Nota Credito")) {
					jButtonDetalleNotaCreditoPuntoVentaActionPerformed(null,rowIndex,true,false,notacreditopuntoventa);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessNotaCreditoPuntoVenta();
			
      		//this.finishProcessNotaCreditoPuntoVenta(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarNotaCreditoPuntoVentaReturnGeneral() throws Exception {
		if(this.notacreditopuntoventaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.notacreditopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.notacreditopuntoventaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.notacreditopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.notacreditopuntoventaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.notacreditopuntoventaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
		}
		
		if(this.notacreditopuntoventaReturnGeneral.getConRetornoLista() || this.notacreditopuntoventaReturnGeneral.getConRetornoObjeto()) {
			if(this.notacreditopuntoventaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.notacreditopuntoventaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.notacreditopuntoventaLogic.setNotaCreditoPuntoVenta(this.notacreditopuntoventaReturnGeneral.getNotaCreditoPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingNotaCreditoPuntoVenta(false);
		}
	}
	
	public void actualizarParametrosGeneralNotaCreditoPuntoVenta() throws Exception {
		
		
	}
	
	public ArrayList<NotaCreditoPuntoVenta> getNotaCreditoPuntoVentasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioNotaCreditoPuntoVenta) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventaLogic.getNotaCreditoPuntoVentas()) {
					if(notacreditopuntoventaAux.getIsSelected()) {
						notacreditopuntoventasSeleccionados.add(notacreditopuntoventaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(NotaCreditoPuntoVenta notacreditopuntoventaAux:this.notacreditopuntoventas) {
					if(notacreditopuntoventaAux.getIsSelected()) {
						notacreditopuntoventasSeleccionados.add(notacreditopuntoventaAux);				
					}
				}
			}
			
			if(notacreditopuntoventasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						notacreditopuntoventasSeleccionados.addAll(this.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						notacreditopuntoventasSeleccionados.addAll(this.notacreditopuntoventas);				
					}
				}
			}
		} else {
			notacreditopuntoventasSeleccionados.add(this.notacreditopuntoventa);
		}
		
		return notacreditopuntoventasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteNotaCreditoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditoPuntoVentasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoNotaCreditoPuntoVentasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesNotaCreditoPuntoVentasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados);
		
	}	
	
	public void generarReporteNormalNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionNotaCreditoPuntoVentasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		
		this.abrirInicializarFrameReporteDinamicoNotaCreditoPuntoVenta();
		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoNotaCreditoPuntoVenta();
		
		
		//this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados ,notacreditopuntoventaImplementable,notacreditopuntoventaImplementableHome);
	}
	
	public void mostrarImportacionNotaCreditoPuntoVentas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionNotaCreditoPuntoVenta();
		
		this.abrirFrameImportacionNotaCreditoPuntoVenta();		
		
			
		//this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados ,notacreditopuntoventaImplementable,notacreditopuntoventaImplementableHome);
	}
	
	public void importarNotaCreditoPuntoVentas() throws Exception {		
	
	}
	
	public void exportarNotaCreditoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoNotaCreditoPuntoVentasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlNotaCreditoPuntoVentasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarNotaCreditoPuntoVenta(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarNotaCreditoPuntoVenta(notacreditopuntoventaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//notacreditopuntoventaAux.setsDetalleGeneralEntityReporte(notacreditopuntoventaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarNotaCreditoPuntoVenta(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=notacreditopuntoventa.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getcaja_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getmesa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettipofacturapuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getnumero_secuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getcodigo_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getnombre_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettarjeta_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getdireccion_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettelefono_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gethora().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettotal_sin_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getfinanciamiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getotros().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=notacreditopuntoventa.gettotal().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("NotaCreditoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelNotaCreditoPuntoVenta(row);				
				iRow++;
			}				
			
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelNotaCreditoPuntoVenta(notacreditopuntoventaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();		
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"notacreditopuntoventa.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("notacreditopuntoventas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("notacreditopuntoventa");
			//elementRoot.appendChild(element);
		
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
				element = document.createElement("notacreditopuntoventa");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlNotaCreditoPuntoVenta(notacreditopuntoventaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelNotaCreditoPuntoVenta(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_OTROS);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getcaja_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getmesa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettipofacturapuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getnumero_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getcodigo_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getnombre_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettarjeta_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getdireccion_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettelefono_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gethora());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettotal_sin_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getfinanciamiento());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getotros());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(notacreditopuntoventa.gettotal());				
	}
	
	public void setFilaDatosExportarXmlNotaCreditoPuntoVenta(NotaCreditoPuntoVenta notacreditopuntoventa,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(notacreditopuntoventa.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(notacreditopuntoventa.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementusuario_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementvendedor_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementcliente_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementcaja_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDCAJA);
		elementcaja_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getcaja_descripcion()));
		element.appendChild(elementcaja_descripcion);

		Element elementasientocontable_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementmesa_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDMESA);
		elementmesa_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getmesa_descripcion()));
		element.appendChild(elementmesa_descripcion);

		Element elementformato_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementtipofacturapuntoventa_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDTIPOFACTURAPUNTOVENTA);
		elementtipofacturapuntoventa_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.gettipofacturapuntoventa_descripcion()));
		element.appendChild(elementtipofacturapuntoventa_descripcion);

		Element elementestadonotacreditopuntoventa_descripcion = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IDESTADONOTACREDITOPUNTOVENTA);
		elementestadonotacreditopuntoventa_descripcion.appendChild(document.createTextNode(notacreditopuntoventa.getestadonotacreditopuntoventa_descripcion()));
		element.appendChild(elementestadonotacreditopuntoventa_descripcion);

		Element elementnumero_secuencial = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.NUMEROSECUENCIAL);
		elementnumero_secuencial.appendChild(document.createTextNode(notacreditopuntoventa.getnumero_secuencial().trim()));
		element.appendChild(elementnumero_secuencial);

		Element elementcodigo_cliente = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.CODIGOCLIENTE);
		elementcodigo_cliente.appendChild(document.createTextNode(notacreditopuntoventa.getcodigo_cliente().trim()));
		element.appendChild(elementcodigo_cliente);

		Element elementnombre_cliente = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.NOMBRECLIENTE);
		elementnombre_cliente.appendChild(document.createTextNode(notacreditopuntoventa.getnombre_cliente().trim()));
		element.appendChild(elementnombre_cliente);

		Element elementtarjeta_cliente = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.TARJETACLIENTE);
		elementtarjeta_cliente.appendChild(document.createTextNode(notacreditopuntoventa.gettarjeta_cliente().trim()));
		element.appendChild(elementtarjeta_cliente);

		Element elementdireccion_cliente = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.DIRECCIONCLIENTE);
		elementdireccion_cliente.appendChild(document.createTextNode(notacreditopuntoventa.getdireccion_cliente().trim()));
		element.appendChild(elementdireccion_cliente);

		Element elementtelefono_cliente = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.TELEFONOCLIENTE);
		elementtelefono_cliente.appendChild(document.createTextNode(notacreditopuntoventa.gettelefono_cliente().trim()));
		element.appendChild(elementtelefono_cliente);

		Element elementfecha = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(notacreditopuntoventa.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementhora = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.HORA);
		elementhora.appendChild(document.createTextNode(notacreditopuntoventa.gethora().toString().trim()));
		element.appendChild(elementhora);

		Element elementtotal_iva = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(notacreditopuntoventa.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementtotal_sin_iva = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.TOTALSINIVA);
		elementtotal_sin_iva.appendChild(document.createTextNode(notacreditopuntoventa.gettotal_sin_iva().toString().trim()));
		element.appendChild(elementtotal_sin_iva);

		Element elementiva = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(notacreditopuntoventa.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementdescuento = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(notacreditopuntoventa.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementfinanciamiento = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.FINANCIAMIENTO);
		elementfinanciamiento.appendChild(document.createTextNode(notacreditopuntoventa.getfinanciamiento().toString().trim()));
		element.appendChild(elementfinanciamiento);

		Element elementflete = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(notacreditopuntoventa.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementice = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(notacreditopuntoventa.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementotros = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.OTROS);
		elementotros.appendChild(document.createTextNode(notacreditopuntoventa.getotros().toString().trim()));
		element.appendChild(elementotros);

		Element elementsub_total = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(notacreditopuntoventa.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal = document.createElement(NotaCreditoPuntoVentaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(notacreditopuntoventa.gettotal().toString().trim()));
		element.appendChild(elementtotal);
	}
	
	public void generarReporteGroupGenericoNotaCreditoPuntoVentasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados=new ArrayList<NotaCreditoPuntoVenta>();
		
		notacreditopuntoventasSeleccionados=this.getNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoNotaCreditoPuntoVenta(notacreditopuntoventasSeleccionados);
		
		this.generarReporteNotaCreditoPuntoVentas("Todos",notacreditopuntoventasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoNotaCreditoPuntoVenta(ArrayList<NotaCreditoPuntoVenta> notacreditopuntoventasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasSeleccionados) {
				notacreditopuntoventaAux.setsDetalleGeneralEntityReporte(notacreditopuntoventaAux.toString());
			
				if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDCAJA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getcaja_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDMESA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getmesa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.gettipofacturapuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_IDESTADONOTACREDITOPUNTOVENTA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getestadonotacreditopuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getnumero_secuencial());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getcodigo_cliente());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getnombre_cliente());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.gettarjeta_cliente());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.getdireccion_cliente());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.gettelefono_cliente());
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(notacreditopuntoventaAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(NotaCreditoPuntoVentaConstantesFunciones.LABEL_HORA)) {
					existe=true;
					notacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(notacreditopuntoventaAux.gethora().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesNotaCreditoPuntoVenta(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=true;
				this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=true;
				this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=true;
			}
			
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarNotaCreditoPuntoVenta=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(NotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=true;
		} else {
			this.actualizarEstadoPanelsNotaCreditoPuntoVenta(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarNotaCreditoPuntoVenta=false;
			//this.isVisibilidadCeldaVerFormNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarNotaCreditoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
		} else {
			this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!notacreditopuntoventaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;												
			}
			
			this.jButtonCerrarNotaCreditoPuntoVenta.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesNotaCreditoPuntoVenta=false;
		}
		
		if(!this.permiteMantenimiento(this.notacreditopuntoventa)) {
			this.isVisibilidadCeldaActualizarNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarNotaCreditoPuntoVenta=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesNotaCreditoPuntoVenta() {
		this.isVisibilidadCeldaNuevoNotaCreditoPuntoVenta=false;
		this.isVisibilidadCeldaGuardarCambiosNotaCreditoPuntoVenta=false;
	}
	
	public void actualizarEstadoPanelsNotaCreditoPuntoVenta(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionNotaCreditoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
					this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.notacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesNotaCreditoPuntoVenta.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdAsientoContable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadFK_IdAsientoContable=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCaja(Boolean isParaCaja){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCajaNegation=!isParaCaja;

			this.isVisibilidadFK_IdAsientoContable=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaCaja;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoPrecio;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaMesa(Boolean isParaMesa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesaNegation=!isParaMesa;

			this.isVisibilidadFK_IdAsientoContable=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaMesa;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdAsientoContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaFormato;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoFacturaPuntoVenta(Boolean isParaTipoFacturaPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoFacturaPuntoVentaNegation=!isParaTipoFacturaPuntoVenta;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaTipoFacturaPuntoVenta;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoNotaCreditoPuntoVenta(Boolean isParaEstadoNotaCreditoPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoNotaCreditoPuntoVentaNegation=!isParaEstadoNotaCreditoPuntoVenta;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdCajaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdClienteNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta=isParaEstadoNotaCreditoPuntoVenta;
			if(!this.isVisibilidadFK_IdEstadoNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdFormatoNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdMesaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(jPanelFK_IdVendedorNotaCreditoPuntoVenta);}
		}
		
	}
	
	

	public String registrarSesionNotaCreditoPuntoVentaParaDetalleNotaCreditoPuntoVentas() throws Exception {
		Boolean isPaginaPopupDetalleNotaCreditoPuntoVenta=false;

		try {

			if(this.notacreditopuntoventaSessionBean==null) {
				this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setsPathNavegacionActual(notacreditopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleNotaCreditoPuntoVenta(true);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleNotaCreditoPuntoVenta(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta(true);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setlidNotaCreditoPuntoVentaActual(this.idNotaCreditoPuntoVentaActual);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.detallenotacreditopuntoventaSessionBean.setNoMantenimiento(true);

			notacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoPuntoVenta(true);
			notacreditopuntoventaSessionBean.setlIdNotaCreditoPuntoVentaActualForeignKey(this.idNotaCreditoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionNotaCreditoPuntoVentaParaBusquedaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(notacreditopuntoventaSessionBean==null) {
				notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			vendedorSessionBean.setsPathNavegacionActual(notacreditopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			vendedorSessionBean.setisPermiteRecargarInformacion(false);
			vendedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupVendedor=vendedorSessionBean.getisPaginaPopup();
			vendedorSessionBean.setisPaginaPopup(false);
			vendedorSessionBean.setEstaModoBusqueda(true);
			vendedorSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditopuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_vendedor(TO_REPLACE);");
			vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//vendedorSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta(true);
			//vendedorSessionBean.setlidNotaCreditoPuntoVentaActual(this.idNotaCreditoPuntoVentaActual);

			notacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoPuntoVenta(true);
			notacreditopuntoventaSessionBean.setlIdNotaCreditoPuntoVentaActualForeignKey(this.idNotaCreditoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoPuntoVentaParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(notacreditopuntoventaSessionBean==null) {
				notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(notacreditopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditopuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta(true);
			//clienteSessionBean.setlidNotaCreditoPuntoVentaActual(this.idNotaCreditoPuntoVentaActual);

			notacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoPuntoVenta(true);
			notacreditopuntoventaSessionBean.setlIdNotaCreditoPuntoVentaActualForeignKey(this.idNotaCreditoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionNotaCreditoPuntoVentaParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(notacreditopuntoventaSessionBean==null) {
				notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(notacreditopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.notacreditopuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta(true);
			//asientocontableSessionBean.setlidNotaCreditoPuntoVentaActual(this.idNotaCreditoPuntoVentaActual);

			notacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyNotaCreditoPuntoVenta(true);
			notacreditopuntoventaSessionBean.setlIdNotaCreditoPuntoVentaActualForeignKey(this.idNotaCreditoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//NotaCreditoPuntoVentaSessionBean notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
		
		if(this.notacreditopuntoventaSessionBean==null) {
			this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
		}
		
		this.notacreditopuntoventaSessionBean.setsUltimaBusquedaNotaCreditoPuntoVenta(this.getsAccionBusqueda());
		this.notacreditopuntoventaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.notacreditopuntoventaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			notacreditopuntoventaSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
			notacreditopuntoventaSessionBean.setid_caja(this.getid_cajaFK_IdCaja());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			notacreditopuntoventaSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			notacreditopuntoventaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoNotaCreditoPuntoVenta")) {
			notacreditopuntoventaSessionBean.setid_estado_nota_credito_punto_venta(this.getid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormato")) {
			notacreditopuntoventaSessionBean.setid_formato(this.getid_formatoFK_IdFormato());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
			notacreditopuntoventaSessionBean.setid_mesa(this.getid_mesaFK_IdMesa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			notacreditopuntoventaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoFacturaPuntoVenta")) {
			notacreditopuntoventaSessionBean.setid_tipo_factura_punto_venta(this.getid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
			notacreditopuntoventaSessionBean.setid_tipo_precio(this.getid_tipo_precioFK_IdTipoPrecio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			notacreditopuntoventaSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			notacreditopuntoventaSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//NotaCreditoPuntoVentaSessionBean notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
		
		if(this.notacreditopuntoventaSessionBean==null) {
			this.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
		}
		
		if(this.notacreditopuntoventaSessionBean.getsUltimaBusquedaNotaCreditoPuntoVenta()!=null&&!this.notacreditopuntoventaSessionBean.getsUltimaBusquedaNotaCreditoPuntoVenta().equals("")) {
			this.setsAccionBusqueda(notacreditopuntoventaSessionBean.getsUltimaBusquedaNotaCreditoPuntoVenta());
			this.setiNumeroPaginacion(notacreditopuntoventaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(notacreditopuntoventaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(notacreditopuntoventaSessionBean.getid_asiento_contable());
				notacreditopuntoventaSessionBean.setid_asiento_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
				this.setid_cajaFK_IdCaja(notacreditopuntoventaSessionBean.getid_caja());
				notacreditopuntoventaSessionBean.setid_caja(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(notacreditopuntoventaSessionBean.getid_cliente());
				notacreditopuntoventaSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(notacreditopuntoventaSessionBean.getid_empresa());
				notacreditopuntoventaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoNotaCreditoPuntoVenta")) {
				this.setid_estado_nota_credito_punto_ventaFK_IdEstadoNotaCreditoPuntoVenta(notacreditopuntoventaSessionBean.getid_estado_nota_credito_punto_venta());
				notacreditopuntoventaSessionBean.setid_estado_nota_credito_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormato")) {
				this.setid_formatoFK_IdFormato(notacreditopuntoventaSessionBean.getid_formato());
				notacreditopuntoventaSessionBean.setid_formato(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
				this.setid_mesaFK_IdMesa(notacreditopuntoventaSessionBean.getid_mesa());
				notacreditopuntoventaSessionBean.setid_mesa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(notacreditopuntoventaSessionBean.getid_sucursal());
				notacreditopuntoventaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoFacturaPuntoVenta")) {
				this.setid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta(notacreditopuntoventaSessionBean.getid_tipo_factura_punto_venta());
				notacreditopuntoventaSessionBean.setid_tipo_factura_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
				this.setid_tipo_precioFK_IdTipoPrecio(notacreditopuntoventaSessionBean.getid_tipo_precio());
				notacreditopuntoventaSessionBean.setid_tipo_precio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(notacreditopuntoventaSessionBean.getid_usuario());
				notacreditopuntoventaSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(notacreditopuntoventaSessionBean.getid_vendedor());
				notacreditopuntoventaSessionBean.setid_vendedor(-1L);
			}
		}
		
		this.notacreditopuntoventaSessionBean.setsUltimaBusquedaNotaCreditoPuntoVenta("");
		this.notacreditopuntoventaSessionBean.setiNumeroPaginacion(NotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION);
		this.notacreditopuntoventaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioNotaCreditoPuntoVenta() {
		this.updateBorderResaltarBusquedasFormularioNotaCreditoPuntoVenta();
		this.updateVisibilidadBusquedasFormularioNotaCreditoPuntoVenta();
		this.updateHabilitarBusquedasFormularioNotaCreditoPuntoVenta();
	}
	
	public void updateBorderResaltarBusquedasFormularioNotaCreditoPuntoVenta() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponents().length>0) {
	

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdAsientoContableNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdAsientoContableNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdCajaNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdCajaNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdClienteNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdClienteNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdFormatoNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdFormatoNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdMesaNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdMesaNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioNotaCreditoPuntoVenta);
			}
		}

		if(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdVendedorNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdVendedorNotaCreditoPuntoVenta);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioNotaCreditoPuntoVenta() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdAsientoContableNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdAsientoContableNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdCajaNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdCajaNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdClienteNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdClienteNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdFormatoNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdFormatoNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdMesaNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdMesaNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdVendedorNotaCreditoPuntoVenta);
			if(!this.notacreditopuntoventaConstantesFunciones.mostrarFK_IdVendedorNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioNotaCreditoPuntoVenta() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdAsientoContableNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdAsientoContableNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdCajaNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdCajaNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdClienteNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdClienteNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdFormatoNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdFormatoNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdMesaNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdMesaNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdTipoPrecioNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdTipoPrecioNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarFK_IdVendedorNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setEnabledAt(index,this.notacreditopuntoventaConstantesFunciones.activarFK_IdVendedorNotaCreditoPuntoVenta);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaNotaCreditoPuntoVenta(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdAsientoContableNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdAsientoContableNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCaja")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdCajaNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdCajaNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdClienteNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdClienteNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoNotaCreditoPuntoVenta")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdEstadoNotaCreditoPuntoVentaNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormato")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdFormatoNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdFormatoNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMesa")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdMesaNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdMesaNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoPrecio")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdTipoPrecioNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasNotaCreditoPuntoVenta.getComponent(index);

			this.notacreditopuntoventaConstantesFunciones.setResaltarFK_IdVendedorNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarFK_IdVendedorNotaCreditoPuntoVenta);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarNotaCreditoPuntoVenta.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioNotaCreditoPuntoVenta() throws Exception {

		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioNotaCreditoPuntoVenta();
		this.updateVisibilidadResaltarControlesFormularioNotaCreditoPuntoVenta();
		this.updateHabilitarResaltarControlesFormularioNotaCreditoPuntoVenta();
		
	}
	
	public void updateBorderResaltarControlesFormularioNotaCreditoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.notacreditopuntoventaConstantesFunciones.resaltaridNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltaridNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_empresaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_empresaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_sucursalNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_sucursalNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_usuarioNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_usuarioNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_vendedorNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_vendedorNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_cajaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_cajaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_asiento_contableNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_asiento_contableNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_precioNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_precioNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_mesaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_mesaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_formatoNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_formatoNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarnumero_secuencialNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarnumero_secuencialNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarcodigo_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarcodigo_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarnombre_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarnombre_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltartarjeta_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltartarjeta_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltardireccion_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltardireccion_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltartelefono_clienteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltartelefono_clienteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarfechaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarfechaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarhoraNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarhoraNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltartotal_ivaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltartotal_ivaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltartotal_sin_ivaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltartotal_sin_ivaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarivaNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarivaNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltardescuentoNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltardescuentoNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarfinanciamientoNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarfinanciamientoNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarfleteNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarfleteNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltariceNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltariceNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarotrosNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarotrosNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltarsub_totalNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltarsub_totalNotaCreditoPuntoVenta);}
		if(this.notacreditopuntoventaConstantesFunciones.resaltartotalNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setBorder(this.notacreditopuntoventaConstantesFunciones.resaltartotalNotaCreditoPuntoVenta);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioNotaCreditoPuntoVenta() throws Exception {		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
	
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostraridNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelidNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostraridNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_empresaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_empresaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_empresaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_sucursalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_sucursalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_sucursalNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_usuarioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_usuarioNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_usuarioNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_vendedorNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_vendedorNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_vendedorNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_vendedorNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_clienteNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_cajaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_cajaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_cajaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_asiento_contableNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_asiento_contableNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_asiento_contableNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_asiento_contableNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_precioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_tipo_precioNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_precioNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_mesaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_mesaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_mesaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_formatoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_formatoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_formatoNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarnumero_secuencialNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelnumero_secuencialNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarnumero_secuencialNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarcodigo_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelcodigo_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarcodigo_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarnombre_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelnombre_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarnombre_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartarjeta_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneltarjeta_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartarjeta_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrardireccion_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneldireccion_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrardireccion_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartelefono_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneltelefono_clienteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartelefono_clienteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfechaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelfechaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfechaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarhoraNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelhoraNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarhoraNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotal_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneltotal_ivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotal_ivaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotal_sin_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneltotal_sin_ivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotal_sin_ivaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelivaNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarivaNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrardescuentoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneldescuentoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrardescuentoNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfinanciamientoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelfinanciamientoNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfinanciamientoNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfleteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelfleteNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarfleteNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrariceNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneliceNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrariceNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarotrosNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelotrosNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarotrosNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarsub_totalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPanelsub_totalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrarsub_totalNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jPaneltotalNotaCreditoPuntoVenta.setVisible(this.notacreditopuntoventaConstantesFunciones.mostrartotalNotaCreditoPuntoVenta);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioNotaCreditoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormNotaCreditoPuntoVenta!=null) {
	
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jLabelidNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activaridNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_empresaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_empresaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_sucursalNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_sucursalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_usuarioNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_usuarioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_vendedorNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_vendedorNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_vendedorNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_vendedorNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_clienteNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_cajaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_cajaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_asiento_contableNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_asiento_contableNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jButtonid_asiento_contableNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_asiento_contableNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_precioNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_tipo_precioNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_mesaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_mesaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_formatoNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_formatoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_tipo_factura_punto_ventaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jComboBoxid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarid_estado_nota_credito_punto_ventaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldnumero_secuencialNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarnumero_secuencialNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldcodigo_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarcodigo_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreanombre_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarnombre_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtarjeta_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activartarjeta_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreadireccion_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activardireccion_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextAreatelefono_clienteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activartelefono_clienteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jDateChooserfechaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarfechaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jSpinnerhoraNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarhoraNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_ivaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activartotal_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotal_sin_ivaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activartotal_sin_ivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldivaNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarivaNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFielddescuentoNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activardescuentoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfinanciamientoNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarfinanciamientoNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldfleteNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarfleteNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldiceNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activariceNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldotrosNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarotrosNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldsub_totalNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activarsub_totalNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormNotaCreditoPuntoVenta.jTextFieldtotalNotaCreditoPuntoVenta.setEnabled(this.notacreditopuntoventaConstantesFunciones.activartotalNotaCreditoPuntoVenta);
		}
	}
	
		
}