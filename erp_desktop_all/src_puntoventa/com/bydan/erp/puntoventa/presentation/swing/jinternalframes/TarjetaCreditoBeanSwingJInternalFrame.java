/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.TarjetaCreditoConstantesFunciones;
import com.bydan.erp.puntoventa.util.TarjetaCreditoParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.TarjetaCreditoParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.TarjetaCreditoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.tesoreria.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.tesoreria.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.tesoreria.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.tesoreria.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.tesoreria.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class TarjetaCreditoBeanSwingJInternalFrame extends TarjetaCreditoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(TarjetaCreditoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<TarjetaCredito> tarjetacreditoValidator = new ClassValidator<TarjetaCredito>(TarjetaCredito.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public TarjetaCredito tarjetacredito;	
	public TarjetaCredito tarjetacreditoAux;
	public TarjetaCredito tarjetacreditoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public TarjetaCredito tarjetacreditoTotales;
	public Long idTarjetaCreditoActual;
	public Long iIdNuevoTarjetaCredito=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBanco="";

	public List<Banco> bancosForeignKey;

	public List<Banco> getbancosForeignKey() {
		return bancosForeignKey;
	}

	public void setbancosForeignKey(List<Banco> bancosForeignKey) {
		this.bancosForeignKey = bancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Banco bancoForeignKey;

	public Banco getbancoForeignKey() {
		return bancoForeignKey;
	}

	public void setbancoForeignKey(Banco bancoForeignKey) {
		this.bancoForeignKey = bancoForeignKey;
	}

	public String sFinalQueryComboTipoRetencion="";

	public List<TipoRetencion> tiporetencionsForeignKey;

	public List<TipoRetencion> gettiporetencionsForeignKey() {
		return tiporetencionsForeignKey;
	}

	public void settiporetencionsForeignKey(List<TipoRetencion> tiporetencionsForeignKey) {
		this.tiporetencionsForeignKey = tiporetencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencion tiporetencionForeignKey;

	public TipoRetencion gettiporetencionForeignKey() {
		return tiporetencionForeignKey;
	}

	public void settiporetencionForeignKey(TipoRetencion tiporetencionForeignKey) {
		this.tiporetencionForeignKey = tiporetencionForeignKey;
	}

	public String sFinalQueryComboCuentaContable="";

	public List<CuentaContable> cuentacontablesForeignKey;

	public List<CuentaContable> getcuentacontablesForeignKey() {
		return cuentacontablesForeignKey;
	}

	public void setcuentacontablesForeignKey(List<CuentaContable> cuentacontablesForeignKey) {
		this.cuentacontablesForeignKey = cuentacontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontableForeignKey;

	public CuentaContable getcuentacontableForeignKey() {
		return cuentacontableForeignKey;
	}

	public void setcuentacontableForeignKey(CuentaContable cuentacontableForeignKey) {
		this.cuentacontableForeignKey = cuentacontableForeignKey;
	}

	public String sFinalQueryComboTipoRetencionIva="";

	public List<TipoRetencionIva> tiporetencionivasForeignKey;

	public List<TipoRetencionIva> gettiporetencionivasForeignKey() {
		return tiporetencionivasForeignKey;
	}

	public void settiporetencionivasForeignKey(List<TipoRetencionIva> tiporetencionivasForeignKey) {
		this.tiporetencionivasForeignKey = tiporetencionivasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoRetencionIva tiporetencionivaForeignKey;

	public TipoRetencionIva gettiporetencionivaForeignKey() {
		return tiporetencionivaForeignKey;
	}

	public void settiporetencionivaForeignKey(TipoRetencionIva tiporetencionivaForeignKey) {
		this.tiporetencionivaForeignKey = tiporetencionivaForeignKey;
	}

	public String sFinalQueryComboCuentaContableComision="";

	public List<CuentaContable> cuentacontablecomisionsForeignKey;

	public List<CuentaContable> getcuentacontablecomisionsForeignKey() {
		return cuentacontablecomisionsForeignKey;
	}

	public void setcuentacontablecomisionsForeignKey(List<CuentaContable> cuentacontablecomisionsForeignKey) {
		this.cuentacontablecomisionsForeignKey = cuentacontablecomisionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablecomisionForeignKey;

	public CuentaContable getcuentacontablecomisionForeignKey() {
		return cuentacontablecomisionForeignKey;
	}

	public void setcuentacontablecomisionForeignKey(CuentaContable cuentacontablecomisionForeignKey) {
		this.cuentacontablecomisionForeignKey = cuentacontablecomisionForeignKey;
	}

	public String sFinalQueryComboFormulaPagoBanco="";

	public List<Formula> formulapagobancosForeignKey;

	public List<Formula> getformulapagobancosForeignKey() {
		return formulapagobancosForeignKey;
	}

	public void setformulapagobancosForeignKey(List<Formula> formulapagobancosForeignKey) {
		this.formulapagobancosForeignKey = formulapagobancosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formula formulapagobancoForeignKey;

	public Formula getformulapagobancoForeignKey() {
		return formulapagobancoForeignKey;
	}

	public void setformulapagobancoForeignKey(Formula formulapagobancoForeignKey) {
		this.formulapagobancoForeignKey = formulapagobancoForeignKey;
	}

	public String sFinalQueryComboCuentaContableDiferencia="";

	public List<CuentaContable> cuentacontablediferenciasForeignKey;

	public List<CuentaContable> getcuentacontablediferenciasForeignKey() {
		return cuentacontablediferenciasForeignKey;
	}

	public void setcuentacontablediferenciasForeignKey(List<CuentaContable> cuentacontablediferenciasForeignKey) {
		this.cuentacontablediferenciasForeignKey = cuentacontablediferenciasForeignKey;
	}

	//OBJETO FK ACTUAL
	public CuentaContable cuentacontablediferenciaForeignKey;

	public CuentaContable getcuentacontablediferenciaForeignKey() {
		return cuentacontablediferenciaForeignKey;
	}

	public void setcuentacontablediferenciaForeignKey(CuentaContable cuentacontablediferenciaForeignKey) {
		this.cuentacontablediferenciaForeignKey = cuentacontablediferenciaForeignKey;
	}

	public String sFinalQueryComboFormulaRetencion="";

	public List<Formula> formularetencionsForeignKey;

	public List<Formula> getformularetencionsForeignKey() {
		return formularetencionsForeignKey;
	}

	public void setformularetencionsForeignKey(List<Formula> formularetencionsForeignKey) {
		this.formularetencionsForeignKey = formularetencionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formula formularetencionForeignKey;

	public Formula getformularetencionForeignKey() {
		return formularetencionForeignKey;
	}

	public void setformularetencionForeignKey(Formula formularetencionForeignKey) {
		this.formularetencionForeignKey = formularetencionForeignKey;
	}

	public String sFinalQueryComboFormulaComision="";

	public List<Formula> formulacomisionsForeignKey;

	public List<Formula> getformulacomisionsForeignKey() {
		return formulacomisionsForeignKey;
	}

	public void setformulacomisionsForeignKey(List<Formula> formulacomisionsForeignKey) {
		this.formulacomisionsForeignKey = formulacomisionsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formula formulacomisionForeignKey;

	public Formula getformulacomisionForeignKey() {
		return formulacomisionForeignKey;
	}

	public void setformulacomisionForeignKey(Formula formulacomisionForeignKey) {
		this.formulacomisionForeignKey = formulacomisionForeignKey;
	}

		
	
	
	
	
	

	public Boolean isTienePermisosTarjetaCreditoConexion=false;

	public Boolean getIsTienePermisosTarjetaCreditoConexion() {
		return isTienePermisosTarjetaCreditoConexion;
	}

	public void setIsTienePermisosTarjetaCreditoConexion(Boolean isTienePermisosTarjetaCreditoConexion) {
		this.isTienePermisosTarjetaCreditoConexion= isTienePermisosTarjetaCreditoConexion;
	}


	public Boolean isTienePermisosTarjetaCreditoDescuento=false;

	public Boolean getIsTienePermisosTarjetaCreditoDescuento() {
		return isTienePermisosTarjetaCreditoDescuento;
	}

	public void setIsTienePermisosTarjetaCreditoDescuento(Boolean isTienePermisosTarjetaCreditoDescuento) {
		this.isTienePermisosTarjetaCreditoDescuento= isTienePermisosTarjetaCreditoDescuento;
	}


	public Boolean isTienePermisosFormaPagoPuntoVenta=false;

	public Boolean getIsTienePermisosFormaPagoPuntoVenta() {
		return isTienePermisosFormaPagoPuntoVenta;
	}

	public void setIsTienePermisosFormaPagoPuntoVenta(Boolean isTienePermisosFormaPagoPuntoVenta) {
		this.isTienePermisosFormaPagoPuntoVenta= isTienePermisosFormaPagoPuntoVenta;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoTarjetaCredito;
	public Boolean isPermisoNuevoTarjetaCredito;
	public Boolean isPermisoActualizarTarjetaCredito;
	public Boolean isPermisoActualizarOriginalTarjetaCredito;
	public Boolean isPermisoEliminarTarjetaCredito;
	public Boolean isPermisoGuardarCambiosTarjetaCredito;
	public Boolean isPermisoConsultaTarjetaCredito;
	public Boolean isPermisoBusquedaTarjetaCredito;
	public Boolean isPermisoReporteTarjetaCredito;
	public Boolean isPermisoPaginacionMedioTarjetaCredito;
	public Boolean isPermisoPaginacionAltoTarjetaCredito;
	public Boolean isPermisoPaginacionTodoTarjetaCredito;
	public Boolean isPermisoCopiarTarjetaCredito;
	public Boolean isPermisoVerFormTarjetaCredito;
	public Boolean isPermisoDuplicarTarjetaCredito;
	public Boolean isPermisoOrdenTarjetaCredito;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public TarjetaCreditoParameterReturnGeneral tarjetacreditoReturnGeneral;
	public TarjetaCreditoParameterReturnGeneral tarjetacreditoParameterGeneral;
	
	

	public TarjetaCreditoConexionLogic tarjetacreditoconexionLogic=null;

	public TarjetaCreditoConexionLogic getTarjetaCreditoConexionLogic() {
		return tarjetacreditoconexionLogic;
	}

	public void setTarjetaCreditoConexionLogic(TarjetaCreditoConexionLogic tarjetacreditoconexionLogic) {
		this.tarjetacreditoconexionLogic = tarjetacreditoconexionLogic;
	}


	public TarjetaCreditoDescuentoLogic tarjetacreditodescuentoLogic=null;

	public TarjetaCreditoDescuentoLogic getTarjetaCreditoDescuentoLogic() {
		return tarjetacreditodescuentoLogic;
	}

	public void setTarjetaCreditoDescuentoLogic(TarjetaCreditoDescuentoLogic tarjetacreditodescuentoLogic) {
		this.tarjetacreditodescuentoLogic = tarjetacreditodescuentoLogic;
	}


	public FormaPagoPuntoVentaLogic formapagopuntoventaLogic=null;

	public FormaPagoPuntoVentaLogic getFormaPagoPuntoVentaLogic() {
		return formapagopuntoventaLogic;
	}

	public void setFormaPagoPuntoVentaLogic(FormaPagoPuntoVentaLogic formapagopuntoventaLogic) {
		this.formapagopuntoventaLogic = formapagopuntoventaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoTarjetaCredito=false;
	public Boolean esParaAccionDesdeFormularioTarjetaCredito=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected TarjetaCreditoSessionBeanAdditional tarjetacreditoSessionBeanAdditional=null;
	
	public TarjetaCreditoSessionBeanAdditional getTarjetaCreditoSessionBeanAdditional() {
		return this.tarjetacreditoSessionBeanAdditional;
	}
	
	public void setTarjetaCreditoSessionBeanAdditional(TarjetaCreditoSessionBeanAdditional tarjetacreditoSessionBeanAdditional) {
		try {
			this.tarjetacreditoSessionBeanAdditional=tarjetacreditoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected TarjetaCreditoBeanSwingJInternalFrameAdditional tarjetacreditoBeanSwingJInternalFrameAdditional=null;
	//public class TarjetaCreditoBeanSwingJInternalFrame
	
	public TarjetaCreditoBeanSwingJInternalFrameAdditional getTarjetaCreditoBeanSwingJInternalFrameAdditional() {
		return this.tarjetacreditoBeanSwingJInternalFrameAdditional;
	}
	
	public void setTarjetaCreditoBeanSwingJInternalFrameAdditional(TarjetaCreditoBeanSwingJInternalFrameAdditional tarjetacreditoBeanSwingJInternalFrameAdditional) {
		try {
			this.tarjetacreditoBeanSwingJInternalFrameAdditional=tarjetacreditoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public TarjetaCreditoLogic tarjetacreditoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public TarjetaCredito tarjetacreditoBean;
	public TarjetaCreditoConstantesFunciones tarjetacreditoConstantesFunciones;
	//public TarjetaCreditoParameterReturnGeneral tarjetacreditoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BancoLogic bancoLogic;
	public TipoRetencionLogic tiporetencionLogic;
	public CuentaContableLogic cuentacontableLogic;
	public TipoRetencionIvaLogic tiporetencionivaLogic;
	public CuentaContableLogic cuentacontablecomisionLogic;
	public FormulaLogic formulapagobancoLogic;
	public CuentaContableLogic cuentacontablediferenciaLogic;
	public FormulaLogic formularetencionLogic;
	public FormulaLogic formulacomisionLogic;
	
	//PARAMETROS
	
	
	//public List<TarjetaCredito> tarjetacreditos;	
	//public List<TarjetaCredito> tarjetacreditosEliminados;
	//public List<TarjetaCredito> tarjetacreditosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoTarjetaCredito=false;
	public Boolean isVisibilidadCeldaDuplicarTarjetaCredito=true;
	public Boolean isVisibilidadCeldaCopiarTarjetaCredito=true;
	public Boolean isVisibilidadCeldaVerFormTarjetaCredito=true;
	public Boolean isVisibilidadCeldaOrdenTarjetaCredito=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
	public Boolean isVisibilidadCeldaModificarTarjetaCredito=false;
	public Boolean isVisibilidadCeldaActualizarTarjetaCredito=false;
	public Boolean isVisibilidadCeldaEliminarTarjetaCredito=false;
	public Boolean isVisibilidadCeldaCancelarTarjetaCredito=false;
	public Boolean isVisibilidadCeldaGuardarTarjetaCredito=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;	
	
	
	public Boolean isVisibilidadFK_IdBanco=false;
	public Boolean isVisibilidadFK_IdCuentaContable=false;
	public Boolean isVisibilidadFK_IdCuentaContableComision=false;
	public Boolean isVisibilidadFK_IdCuentaContableDiferencia=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdFormulaComision=false;
	public Boolean isVisibilidadFK_IdFormulaPagoBanco=false;
	public Boolean isVisibilidadFK_IdFormulaRetencion=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoRetencion=false;
	public Boolean isVisibilidadFK_IdTipoRetencionIva=false;
	
	public Long getiIdNuevoTarjetaCredito() {
		return this.iIdNuevoTarjetaCredito;
	}

	public void setiIdNuevoTarjetaCredito(Long iIdNuevoTarjetaCredito) {
		this.iIdNuevoTarjetaCredito = iIdNuevoTarjetaCredito;
	}
	
	public Long getidTarjetaCreditoActual() {
		return this.idTarjetaCreditoActual;
	}

	public void setidTarjetaCreditoActual(Long idTarjetaCreditoActual) {
		this.idTarjetaCreditoActual = idTarjetaCreditoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public TarjetaCredito gettarjetacredito() {
		return this.tarjetacredito;
	}

	public void settarjetacredito(TarjetaCredito tarjetacredito) {
		this.tarjetacredito = tarjetacredito;
	}
	
	public TarjetaCredito gettarjetacreditoAux() {
		return this.tarjetacreditoAux;
	}

	public void settarjetacreditoAux(TarjetaCredito tarjetacreditoAux) {
		this.tarjetacreditoAux = tarjetacreditoAux;
	}				
	
	public TarjetaCredito gettarjetacreditoAnterior() {
		return this.tarjetacreditoAnterior;
	}

	public void settarjetacreditoAnterior(TarjetaCredito tarjetacreditoAnterior) {
		this.tarjetacreditoAnterior = tarjetacreditoAnterior;
	}	
	
	public TarjetaCredito gettarjetacreditoTotales() {
		return this.tarjetacreditoTotales;
	}

	public void settarjetacreditoTotales(TarjetaCredito tarjetacreditoTotales) {
		this.tarjetacreditoTotales = tarjetacreditoTotales;
	}	
	
	public TarjetaCredito gettarjetacreditoBean() {
		return this.tarjetacreditoBean;
	}

	public void settarjetacreditoBean(TarjetaCredito tarjetacreditoBean) {
		this.tarjetacreditoBean = tarjetacreditoBean;
	}	
	
	public TarjetaCreditoParameterReturnGeneral gettarjetacreditoReturnGeneral() {
		return this.tarjetacreditoReturnGeneral;
	}

	public void settarjetacreditoReturnGeneral(TarjetaCreditoParameterReturnGeneral tarjetacreditoReturnGeneral) {
		this.tarjetacreditoReturnGeneral = tarjetacreditoReturnGeneral;
	}	
	
	
	public Long id_bancoFK_IdBanco=-1L;

	public Long getid_bancoFK_IdBanco() {
		return this.id_bancoFK_IdBanco;
	}

	public void setid_bancoFK_IdBanco(Long id_bancoFK_IdBanco) {
		this.id_bancoFK_IdBanco = id_bancoFK_IdBanco;
	}

	public Long id_cuenta_contableFK_IdCuentaContable=-1L;

	public Long getid_cuenta_contableFK_IdCuentaContable() {
		return this.id_cuenta_contableFK_IdCuentaContable;
	}

	public void setid_cuenta_contableFK_IdCuentaContable(Long id_cuenta_contableFK_IdCuentaContable) {
		this.id_cuenta_contableFK_IdCuentaContable = id_cuenta_contableFK_IdCuentaContable;
	}

	public Long id_cuenta_contable_comisionFK_IdCuentaContableComision=-1L;

	public Long getid_cuenta_contable_comisionFK_IdCuentaContableComision() {
		return this.id_cuenta_contable_comisionFK_IdCuentaContableComision;
	}

	public void setid_cuenta_contable_comisionFK_IdCuentaContableComision(Long id_cuenta_contable_comisionFK_IdCuentaContableComision) {
		this.id_cuenta_contable_comisionFK_IdCuentaContableComision = id_cuenta_contable_comisionFK_IdCuentaContableComision;
	}

	public Long id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia=-1L;

	public Long getid_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia() {
		return this.id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia;
	}

	public void setid_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia(Long id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia) {
		this.id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia = id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_formula_comisionFK_IdFormulaComision=-1L;

	public Long getid_formula_comisionFK_IdFormulaComision() {
		return this.id_formula_comisionFK_IdFormulaComision;
	}

	public void setid_formula_comisionFK_IdFormulaComision(Long id_formula_comisionFK_IdFormulaComision) {
		this.id_formula_comisionFK_IdFormulaComision = id_formula_comisionFK_IdFormulaComision;
	}

	public Long id_formula_pago_bancoFK_IdFormulaPagoBanco=-1L;

	public Long getid_formula_pago_bancoFK_IdFormulaPagoBanco() {
		return this.id_formula_pago_bancoFK_IdFormulaPagoBanco;
	}

	public void setid_formula_pago_bancoFK_IdFormulaPagoBanco(Long id_formula_pago_bancoFK_IdFormulaPagoBanco) {
		this.id_formula_pago_bancoFK_IdFormulaPagoBanco = id_formula_pago_bancoFK_IdFormulaPagoBanco;
	}

	public Long id_formula_retencionFK_IdFormulaRetencion=-1L;

	public Long getid_formula_retencionFK_IdFormulaRetencion() {
		return this.id_formula_retencionFK_IdFormulaRetencion;
	}

	public void setid_formula_retencionFK_IdFormulaRetencion(Long id_formula_retencionFK_IdFormulaRetencion) {
		this.id_formula_retencionFK_IdFormulaRetencion = id_formula_retencionFK_IdFormulaRetencion;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_retencionFK_IdTipoRetencion=-1L;

	public Long getid_tipo_retencionFK_IdTipoRetencion() {
		return this.id_tipo_retencionFK_IdTipoRetencion;
	}

	public void setid_tipo_retencionFK_IdTipoRetencion(Long id_tipo_retencionFK_IdTipoRetencion) {
		this.id_tipo_retencionFK_IdTipoRetencion = id_tipo_retencionFK_IdTipoRetencion;
	}

	public Long id_tipo_retencion_ivaFK_IdTipoRetencionIva=-1L;

	public Long getid_tipo_retencion_ivaFK_IdTipoRetencionIva() {
		return this.id_tipo_retencion_ivaFK_IdTipoRetencionIva;
	}

	public void setid_tipo_retencion_ivaFK_IdTipoRetencionIva(Long id_tipo_retencion_ivaFK_IdTipoRetencionIva) {
		this.id_tipo_retencion_ivaFK_IdTipoRetencionIva = id_tipo_retencion_ivaFK_IdTipoRetencionIva;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public TarjetaCreditoLogic getTarjetaCreditoLogic()	{		
		return tarjetacreditoLogic;
	}

	public void setTarjetaCreditoLogic(TarjetaCreditoLogic tarjetacreditoLogic) {
		this.tarjetacreditoLogic = tarjetacreditoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoTarjetaCredito() {
		return isEsNuevoTarjetaCredito;
	}

	public void setIsEsNuevoTarjetaCredito(Boolean isEsNuevoTarjetaCredito) {
		this.isEsNuevoTarjetaCredito = isEsNuevoTarjetaCredito;
	}

	public Boolean getEsParaAccionDesdeFormularioTarjetaCredito() {
		return esParaAccionDesdeFormularioTarjetaCredito;
	}
	
	public void setEsParaAccionDesdeFormularioTarjetaCredito(Boolean esParaAccionDesdeFormularioTarjetaCredito) {
		this.esParaAccionDesdeFormularioTarjetaCredito = esParaAccionDesdeFormularioTarjetaCredito;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bancosForeignKey=new ArrayList<Banco>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BancoLogic bancoLogic=new BancoLogic();

			//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bancoLogic.getBancoDataAccess().setIsForForeingKeyData(true);

					bancoLogic.getTodosBancosWithConnection(sFinalQuery,new Pagination());

					this.bancosForeignKey=bancoLogic.getBancos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bancoLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidBancoActual());
					this.bancosForeignKey.add(bancoLogic.getBanco());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionLogic tiporetencionLogic=new TipoRetencionLogic();

			//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionLogic.getTipoRetencionDataAccess().setIsForForeingKeyData(true);

					tiporetencionLogic.getTodosTipoRetencionsWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionsForeignKey=tiporetencionLogic.getTipoRetencions();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidTipoRetencionActual());
					this.tiporetencionsForeignKey.add(tiporetencionLogic.getTipoRetencion());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablesForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidCuentaContableActual());
					this.cuentacontablesForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoRetencionIvasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tiporetencionivasForeignKey=new ArrayList<TipoRetencionIva>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoRetencionIvaLogic tiporetencionivaLogic=new TipoRetencionIvaLogic();

			//tiporetencionivaLogic.getTipoRetencionIvaDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tiporetencionivaLogic.getTipoRetencionIvaDataAccess().setIsForForeingKeyData(true);

					tiporetencionivaLogic.getTodosTipoRetencionIvasWithConnection(sFinalQuery,new Pagination());

					this.tiporetencionivasForeignKey=tiporetencionivaLogic.getTipoRetencionIvas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoRetencionIva(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tiporetencionivaLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidTipoRetencionIvaActual());
					this.tiporetencionivasForeignKey.add(tiporetencionivaLogic.getTipoRetencionIva());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableComisionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablecomisionsForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableComision()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablecomisionLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablecomisionsForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableComision(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidCuentaContableComisionActual());
					this.cuentacontablecomisionsForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormulaPagoBancosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formulapagobancosForeignKey=new ArrayList<Formula>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormulaLogic formulaLogic=new FormulaLogic();

			//formulaLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaPagoBanco()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formulapagobancoLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

					formulaLogic.getTodosFormulasWithConnection(sFinalQuery,new Pagination());

					this.formulapagobancosForeignKey=formulaLogic.getFormulas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormulaPagoBanco(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formulaLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidFormulaPagoBancoActual());
					this.formulapagobancosForeignKey.add(formulaLogic.getFormula());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCuentaContableDiferenciasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cuentacontablediferenciasForeignKey=new ArrayList<CuentaContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CuentaContableLogic cuentacontableLogic=new CuentaContableLogic();

			//cuentacontableLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDiferencia()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cuentacontablediferenciaLogic.getCuentaContableDataAccess().setIsForForeingKeyData(true);

					cuentacontableLogic.getTodosCuentaContablesWithConnection(sFinalQuery,new Pagination());

					this.cuentacontablediferenciasForeignKey=cuentacontableLogic.getCuentaContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCuentaContableDiferencia(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cuentacontableLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidCuentaContableDiferenciaActual());
					this.cuentacontablediferenciasForeignKey.add(cuentacontableLogic.getCuentaContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormulaRetencionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formularetencionsForeignKey=new ArrayList<Formula>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormulaLogic formulaLogic=new FormulaLogic();

			//formulaLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaRetencion()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formularetencionLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

					formulaLogic.getTodosFormulasWithConnection(sFinalQuery,new Pagination());

					this.formularetencionsForeignKey=formulaLogic.getFormulas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormulaRetencion(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formulaLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidFormulaRetencionActual());
					this.formularetencionsForeignKey.add(formulaLogic.getFormula());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormulaComisionsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formulacomisionsForeignKey=new ArrayList<Formula>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormulaLogic formulaLogic=new FormulaLogic();

			//formulaLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaComision()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formulacomisionLogic.getFormulaDataAccess().setIsForForeingKeyData(true);

					formulaLogic.getTodosFormulasWithConnection(sFinalQuery,new Pagination());

					this.formulacomisionsForeignKey=formulaLogic.getFormulas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormulaComision(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formulaLogic.getEntityWithConnection(tarjetacreditoSessionBean.getlidFormulaComisionActual());
					this.formulacomisionsForeignKey.add(formulaLogic.getFormula());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaTarjetaCredito.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaTarjetaCreditoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaTarjetaCreditoGenerico!=null && jComboBoxid_empresaTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_empresaTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalTarjetaCredito.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalTarjetaCreditoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalTarjetaCreditoGenerico!=null && jComboBoxid_sucursalTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBancoForeignKey(Long idBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bancoTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setBanco(bancoTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setSelectedItem(bancoTemp);
					}
				} else {
					//jComboBoxid_bancoTarjetaCredito.setSelectedItem(bancoTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(bancoTemp!=null && jComboBoxid_bancoFK_IdBancoTarjetaCredito!=null) {
						jComboBoxid_bancoFK_IdBancoTarjetaCredito.setSelectedItem(bancoTemp);
					} else {
						if(jComboBoxid_bancoFK_IdBancoTarjetaCredito!=null) {
							//jComboBoxid_bancoFK_IdBancoTarjetaCredito.setSelectedItem(bancoTemp);
							if(jComboBoxid_bancoFK_IdBancoTarjetaCredito.getItemCount()>0) {
								jComboBoxid_bancoFK_IdBancoTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBancoForeignKeyDescripcion(Long idBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}


			sDescripcion=BancoConstantesFunciones.getBancoDescripcion(bancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBancoForeignKeyGenerico(Long idBancoSeleccionado,JComboBox jComboBoxid_bancoTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Banco  bancoTemp=null;

			for(Banco bancoAux:bancosForeignKey) {
				if(bancoAux.getId()!=null && bancoAux.getId().equals(idBancoSeleccionado)) {
					bancoTemp=bancoAux;
					break;
				}
			}

			if(bancoTemp!=null) {
				jComboBoxid_bancoTarjetaCreditoGenerico.setSelectedItem(bancoTemp);
			} else {
				if(jComboBoxid_bancoTarjetaCreditoGenerico!=null && jComboBoxid_bancoTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_bancoTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionForeignKey(Long idTipoRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setTipoRetencion(tiporetencionTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setSelectedItem(tiporetencionTemp);
					}
				} else {
					//jComboBoxid_tipo_retencionTarjetaCredito.setSelectedItem(tiporetencionTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionTemp!=null && jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito!=null) {
						jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.setSelectedItem(tiporetencionTemp);
					} else {
						if(jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito!=null) {
							//jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.setSelectedItem(tiporetencionTemp);
							if(jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.getItemCount()>0) {
								jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionForeignKeyDescripcion(Long idTipoRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}


			sDescripcion=TipoRetencionConstantesFunciones.getTipoRetencionDescripcion(tiporetencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionForeignKeyGenerico(Long idTipoRetencionSeleccionado,JComboBox jComboBoxid_tipo_retencionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionTemp=null;

			for(TipoRetencion tiporetencionAux:tiporetencionsForeignKey) {
				if(tiporetencionAux.getId()!=null && tiporetencionAux.getId().equals(idTipoRetencionSeleccionado)) {
					tiporetencionTemp=tiporetencionAux;
					break;
				}
			}

			if(tiporetencionTemp!=null) {
				jComboBoxid_tipo_retencionTarjetaCreditoGenerico.setSelectedItem(tiporetencionTemp);
			} else {
				if(jComboBoxid_tipo_retencionTarjetaCreditoGenerico!=null && jComboBoxid_tipo_retencionTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencionTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableForeignKey(Long idCuentaContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontableTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setCuentaContable(cuentacontableTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setSelectedItem(cuentacontableTemp);
					}
				} else {
					//jComboBoxid_cuenta_contableTarjetaCredito.setSelectedItem(cuentacontableTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontableTemp!=null && jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito!=null) {
						jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.setSelectedItem(cuentacontableTemp);
					} else {
						if(jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito!=null) {
							//jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.setSelectedItem(cuentacontableTemp);
							if(jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.getItemCount()>0) {
								jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableForeignKeyDescripcion(Long idCuentaContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableForeignKeyGenerico(Long idCuentaContableSeleccionado,JComboBox jComboBoxid_cuenta_contableTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableTemp=null;

			for(CuentaContable cuentacontableAux:cuentacontablesForeignKey) {
				if(cuentacontableAux.getId()!=null && cuentacontableAux.getId().equals(idCuentaContableSeleccionado)) {
					cuentacontableTemp=cuentacontableAux;
					break;
				}
			}

			if(cuentacontableTemp!=null) {
				jComboBoxid_cuenta_contableTarjetaCreditoGenerico.setSelectedItem(cuentacontableTemp);
			} else {
				if(jComboBoxid_cuenta_contableTarjetaCreditoGenerico!=null && jComboBoxid_cuenta_contableTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contableTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoRetencionIvaForeignKey(Long idTipoRetencionIvaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoRetencionIva  tiporetencionivaTemp=null;

			for(TipoRetencionIva tiporetencionivaAux:tiporetencionivasForeignKey) {
				if(tiporetencionivaAux.getId()!=null && tiporetencionivaAux.getId().equals(idTipoRetencionIvaSeleccionado)) {
					tiporetencionivaTemp=tiporetencionivaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tiporetencionivaTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setTipoRetencionIva(tiporetencionivaTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedItem(tiporetencionivaTemp);
					}
				} else {
					//jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedItem(tiporetencionivaTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva") || sFormularioTipoBusqueda.equals("Todos")){
					if(tiporetencionivaTemp!=null && jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito!=null) {
						jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.setSelectedItem(tiporetencionivaTemp);
					} else {
						if(jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito!=null) {
							//jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.setSelectedItem(tiporetencionivaTemp);
							if(jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.getItemCount()>0) {
								jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoRetencionIvaForeignKeyDescripcion(Long idTipoRetencionIvaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoRetencionIva  tiporetencionivaTemp=null;

			for(TipoRetencionIva tiporetencionivaAux:tiporetencionivasForeignKey) {
				if(tiporetencionivaAux.getId()!=null && tiporetencionivaAux.getId().equals(idTipoRetencionIvaSeleccionado)) {
					tiporetencionivaTemp=tiporetencionivaAux;
					break;
				}
			}


			sDescripcion=TipoRetencionIvaConstantesFunciones.getTipoRetencionIvaDescripcion(tiporetencionivaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoRetencionIvaForeignKeyGenerico(Long idTipoRetencionIvaSeleccionado,JComboBox jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			TipoRetencionIva  tiporetencionivaTemp=null;

			for(TipoRetencionIva tiporetencionivaAux:tiporetencionivasForeignKey) {
				if(tiporetencionivaAux.getId()!=null && tiporetencionivaAux.getId().equals(idTipoRetencionIvaSeleccionado)) {
					tiporetencionivaTemp=tiporetencionivaAux;
					break;
				}
			}

			if(tiporetencionivaTemp!=null) {
				jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico.setSelectedItem(tiporetencionivaTemp);
			} else {
				if(jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico!=null && jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableComisionForeignKey(Long idCuentaContableComisionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecomisionTemp=null;

			for(CuentaContable cuentacontablecomisionAux:cuentacontablecomisionsForeignKey) {
				if(cuentacontablecomisionAux.getId()!=null && cuentacontablecomisionAux.getId().equals(idCuentaContableComisionSeleccionado)) {
					cuentacontablecomisionTemp=cuentacontablecomisionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablecomisionTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setCuentaContableComision(cuentacontablecomisionTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedItem(cuentacontablecomisionTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedItem(cuentacontablecomisionTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableComision") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablecomisionTemp!=null && jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito!=null) {
						jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.setSelectedItem(cuentacontablecomisionTemp);
					} else {
						if(jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito!=null) {
							//jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.setSelectedItem(cuentacontablecomisionTemp);
							if(jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.getItemCount()>0) {
								jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableComisionForeignKeyDescripcion(Long idCuentaContableComisionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablecomisionTemp=null;

			for(CuentaContable cuentacontablecomisionAux:cuentacontablecomisionsForeignKey) {
				if(cuentacontablecomisionAux.getId()!=null && cuentacontablecomisionAux.getId().equals(idCuentaContableComisionSeleccionado)) {
					cuentacontablecomisionTemp=cuentacontablecomisionAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablecomisionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableComisionForeignKeyGenerico(Long idCuentaContableComisionSeleccionado,JComboBox jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablecomisionTemp=null;

			for(CuentaContable cuentacontablecomisionAux:cuentacontablecomisionsForeignKey) {
				if(cuentacontablecomisionAux.getId()!=null && cuentacontablecomisionAux.getId().equals(idCuentaContableComisionSeleccionado)) {
					cuentacontablecomisionTemp=cuentacontablecomisionAux;
					break;
				}
			}

			if(cuentacontablecomisionTemp!=null) {
				jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico.setSelectedItem(cuentacontablecomisionTemp);
			} else {
				if(jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico!=null && jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormulaPagoBancoForeignKey(Long idFormulaPagoBancoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formula  formulapagobancoTemp=null;

			for(Formula formulapagobancoAux:formulapagobancosForeignKey) {
				if(formulapagobancoAux.getId()!=null && formulapagobancoAux.getId().equals(idFormulaPagoBancoSeleccionado)) {
					formulapagobancoTemp=formulapagobancoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formulapagobancoTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setFormulaPagoBanco(formulapagobancoTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedItem(formulapagobancoTemp);
					}
				} else {
					//jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedItem(formulapagobancoTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormulaPagoBanco") || sFormularioTipoBusqueda.equals("Todos")){
					if(formulapagobancoTemp!=null && jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito!=null) {
						jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.setSelectedItem(formulapagobancoTemp);
					} else {
						if(jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito!=null) {
							//jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.setSelectedItem(formulapagobancoTemp);
							if(jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.getItemCount()>0) {
								jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormulaPagoBancoForeignKeyDescripcion(Long idFormulaPagoBancoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formula  formulapagobancoTemp=null;

			for(Formula formulapagobancoAux:formulapagobancosForeignKey) {
				if(formulapagobancoAux.getId()!=null && formulapagobancoAux.getId().equals(idFormulaPagoBancoSeleccionado)) {
					formulapagobancoTemp=formulapagobancoAux;
					break;
				}
			}


			sDescripcion=FormulaConstantesFunciones.getFormulaDescripcion(formulapagobancoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormulaPagoBancoForeignKeyGenerico(Long idFormulaPagoBancoSeleccionado,JComboBox jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formulapagobancoTemp=null;

			for(Formula formulapagobancoAux:formulapagobancosForeignKey) {
				if(formulapagobancoAux.getId()!=null && formulapagobancoAux.getId().equals(idFormulaPagoBancoSeleccionado)) {
					formulapagobancoTemp=formulapagobancoAux;
					break;
				}
			}

			if(formulapagobancoTemp!=null) {
				jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico.setSelectedItem(formulapagobancoTemp);
			} else {
				if(jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico!=null && jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCuentaContableDiferenciaForeignKey(Long idCuentaContableDiferenciaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablediferenciaTemp=null;

			for(CuentaContable cuentacontablediferenciaAux:cuentacontablediferenciasForeignKey) {
				if(cuentacontablediferenciaAux.getId()!=null && cuentacontablediferenciaAux.getId().equals(idCuentaContableDiferenciaSeleccionado)) {
					cuentacontablediferenciaTemp=cuentacontablediferenciaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cuentacontablediferenciaTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setCuentaContableDiferencia(cuentacontablediferenciaTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedItem(cuentacontablediferenciaTemp);
					}
				} else {
					//jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedItem(cuentacontablediferenciaTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDiferencia") || sFormularioTipoBusqueda.equals("Todos")){
					if(cuentacontablediferenciaTemp!=null && jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito!=null) {
						jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.setSelectedItem(cuentacontablediferenciaTemp);
					} else {
						if(jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito!=null) {
							//jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.setSelectedItem(cuentacontablediferenciaTemp);
							if(jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.getItemCount()>0) {
								jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCuentaContableDiferenciaForeignKeyDescripcion(Long idCuentaContableDiferenciaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			CuentaContable  cuentacontablediferenciaTemp=null;

			for(CuentaContable cuentacontablediferenciaAux:cuentacontablediferenciasForeignKey) {
				if(cuentacontablediferenciaAux.getId()!=null && cuentacontablediferenciaAux.getId().equals(idCuentaContableDiferenciaSeleccionado)) {
					cuentacontablediferenciaTemp=cuentacontablediferenciaAux;
					break;
				}
			}


			sDescripcion=CuentaContableConstantesFunciones.getCuentaContableDescripcion(cuentacontablediferenciaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCuentaContableDiferenciaForeignKeyGenerico(Long idCuentaContableDiferenciaSeleccionado,JComboBox jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontablediferenciaTemp=null;

			for(CuentaContable cuentacontablediferenciaAux:cuentacontablediferenciasForeignKey) {
				if(cuentacontablediferenciaAux.getId()!=null && cuentacontablediferenciaAux.getId().equals(idCuentaContableDiferenciaSeleccionado)) {
					cuentacontablediferenciaTemp=cuentacontablediferenciaAux;
					break;
				}
			}

			if(cuentacontablediferenciaTemp!=null) {
				jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico.setSelectedItem(cuentacontablediferenciaTemp);
			} else {
				if(jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico!=null && jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormulaRetencionForeignKey(Long idFormulaRetencionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formula  formularetencionTemp=null;

			for(Formula formularetencionAux:formularetencionsForeignKey) {
				if(formularetencionAux.getId()!=null && formularetencionAux.getId().equals(idFormulaRetencionSeleccionado)) {
					formularetencionTemp=formularetencionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formularetencionTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setFormulaRetencion(formularetencionTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setSelectedItem(formularetencionTemp);
					}
				} else {
					//jComboBoxid_formula_retencionTarjetaCredito.setSelectedItem(formularetencionTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormulaRetencion") || sFormularioTipoBusqueda.equals("Todos")){
					if(formularetencionTemp!=null && jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito!=null) {
						jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.setSelectedItem(formularetencionTemp);
					} else {
						if(jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito!=null) {
							//jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.setSelectedItem(formularetencionTemp);
							if(jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.getItemCount()>0) {
								jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormulaRetencionForeignKeyDescripcion(Long idFormulaRetencionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formula  formularetencionTemp=null;

			for(Formula formularetencionAux:formularetencionsForeignKey) {
				if(formularetencionAux.getId()!=null && formularetencionAux.getId().equals(idFormulaRetencionSeleccionado)) {
					formularetencionTemp=formularetencionAux;
					break;
				}
			}


			sDescripcion=FormulaConstantesFunciones.getFormulaDescripcion(formularetencionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormulaRetencionForeignKeyGenerico(Long idFormulaRetencionSeleccionado,JComboBox jComboBoxid_formula_retencionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formularetencionTemp=null;

			for(Formula formularetencionAux:formularetencionsForeignKey) {
				if(formularetencionAux.getId()!=null && formularetencionAux.getId().equals(idFormulaRetencionSeleccionado)) {
					formularetencionTemp=formularetencionAux;
					break;
				}
			}

			if(formularetencionTemp!=null) {
				jComboBoxid_formula_retencionTarjetaCreditoGenerico.setSelectedItem(formularetencionTemp);
			} else {
				if(jComboBoxid_formula_retencionTarjetaCreditoGenerico!=null && jComboBoxid_formula_retencionTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_formula_retencionTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormulaComisionForeignKey(Long idFormulaComisionSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formula  formulacomisionTemp=null;

			for(Formula formulacomisionAux:formulacomisionsForeignKey) {
				if(formulacomisionAux.getId()!=null && formulacomisionAux.getId().equals(idFormulaComisionSeleccionado)) {
					formulacomisionTemp=formulacomisionAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formulacomisionTemp!=null) {

					if(this.tarjetacredito!=null) {
						this.tarjetacredito.setFormulaComision(formulacomisionTemp);
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setSelectedItem(formulacomisionTemp);
					}
				} else {
					//jComboBoxid_formula_comisionTarjetaCredito.setSelectedItem(formulacomisionTemp);
					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
						if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.getItemCount()>0) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormulaComision") || sFormularioTipoBusqueda.equals("Todos")){
					if(formulacomisionTemp!=null && jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito!=null) {
						jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.setSelectedItem(formulacomisionTemp);
					} else {
						if(jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito!=null) {
							//jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.setSelectedItem(formulacomisionTemp);
							if(jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.getItemCount()>0) {
								jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormulaComisionForeignKeyDescripcion(Long idFormulaComisionSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formula  formulacomisionTemp=null;

			for(Formula formulacomisionAux:formulacomisionsForeignKey) {
				if(formulacomisionAux.getId()!=null && formulacomisionAux.getId().equals(idFormulaComisionSeleccionado)) {
					formulacomisionTemp=formulacomisionAux;
					break;
				}
			}


			sDescripcion=FormulaConstantesFunciones.getFormulaDescripcion(formulacomisionTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormulaComisionForeignKeyGenerico(Long idFormulaComisionSeleccionado,JComboBox jComboBoxid_formula_comisionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formulacomisionTemp=null;

			for(Formula formulacomisionAux:formulacomisionsForeignKey) {
				if(formulacomisionAux.getId()!=null && formulacomisionAux.getId().equals(idFormulaComisionSeleccionado)) {
					formulacomisionTemp=formulacomisionAux;
					break;
				}
			}

			if(formulacomisionTemp!=null) {
				jComboBoxid_formula_comisionTarjetaCreditoGenerico.setSelectedItem(formulacomisionTemp);
			} else {
				if(jComboBoxid_formula_comisionTarjetaCreditoGenerico!=null && jComboBoxid_formula_comisionTarjetaCreditoGenerico.getItemCount()>0) {
					jComboBoxid_formula_comisionTarjetaCreditoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_empresaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaTarjetaCreditoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaTarjetaCreditoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				tarjetacredito.setid_empresa(empresaAux.getId());
				tarjetacredito.setempresa_descripcion(TarjetaCreditoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				tarjetacredito.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_sucursalTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalTarjetaCreditoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalTarjetaCreditoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				tarjetacredito.setid_sucursal(sucursalAux.getId());
				tarjetacredito.setsucursal_descripcion(TarjetaCreditoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				tarjetacredito.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBancoForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_bancoTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Banco  bancoAux=new Banco();

			if(jComboBoxid_bancoTarjetaCreditoGenerico==null) {
				bancoAux=(Banco)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.getSelectedItem();
			} else {
				bancoAux=(Banco)jComboBoxid_bancoTarjetaCreditoGenerico.getSelectedItem();
			}

			if(bancoAux!=null && bancoAux.getId()!=null) {
				tarjetacredito.setid_banco(bancoAux.getId());
				tarjetacredito.setbanco_descripcion(TarjetaCreditoConstantesFunciones.getBancoDescripcion(bancoAux));
				tarjetacredito.setBanco(bancoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_tipo_retencionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			TipoRetencion  tiporetencionAux=new TipoRetencion();

			if(jComboBoxid_tipo_retencionTarjetaCreditoGenerico==null) {
				tiporetencionAux=(TipoRetencion)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.getSelectedItem();
			} else {
				tiporetencionAux=(TipoRetencion)jComboBoxid_tipo_retencionTarjetaCreditoGenerico.getSelectedItem();
			}

			if(tiporetencionAux!=null && tiporetencionAux.getId()!=null) {
				tarjetacredito.setid_tipo_retencion(tiporetencionAux.getId());
				tarjetacredito.settiporetencion_descripcion(TarjetaCreditoConstantesFunciones.getTipoRetencionDescripcion(tiporetencionAux));
				tarjetacredito.setTipoRetencion(tiporetencionAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_cuenta_contableTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contableTarjetaCreditoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contableTarjetaCreditoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				tarjetacredito.setid_cuenta_contable(cuentacontableAux.getId());
				tarjetacredito.setcuentacontable_descripcion(TarjetaCreditoConstantesFunciones.getCuentaContableDescripcion(cuentacontableAux));
				tarjetacredito.setCuentaContable(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoRetencionIvaForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			TipoRetencionIva  tiporetencionivaAux=new TipoRetencionIva();

			if(jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico==null) {
				tiporetencionivaAux=(TipoRetencionIva)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.getSelectedItem();
			} else {
				tiporetencionivaAux=(TipoRetencionIva)jComboBoxid_tipo_retencion_ivaTarjetaCreditoGenerico.getSelectedItem();
			}

			if(tiporetencionivaAux!=null && tiporetencionivaAux.getId()!=null) {
				tarjetacredito.setid_tipo_retencion_iva(tiporetencionivaAux.getId());
				tarjetacredito.settiporetencioniva_descripcion(TarjetaCreditoConstantesFunciones.getTipoRetencionIvaDescripcion(tiporetencionivaAux));
				tarjetacredito.setTipoRetencionIva(tiporetencionivaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableComisionForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_comisionTarjetaCreditoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				tarjetacredito.setid_cuenta_contable_comision(cuentacontableAux.getId());
				tarjetacredito.setcuentacontablecomision_descripcion(TarjetaCreditoConstantesFunciones.getCuentaContableComisionDescripcion(cuentacontableAux));
				tarjetacredito.setCuentaContableComision(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormulaPagoBancoForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formulaAux=new Formula();

			if(jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico==null) {
				formulaAux=(Formula)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.getSelectedItem();
			} else {
				formulaAux=(Formula)jComboBoxid_formula_pago_bancoTarjetaCreditoGenerico.getSelectedItem();
			}

			if(formulaAux!=null && formulaAux.getId()!=null) {
				tarjetacredito.setid_formula_pago_banco(formulaAux.getId());
				tarjetacredito.setformulapagobanco_descripcion(TarjetaCreditoConstantesFunciones.getFormulaPagoBancoDescripcion(formulaAux));
				tarjetacredito.setFormulaPagoBanco(formulaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCuentaContableDiferenciaForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			CuentaContable  cuentacontableAux=new CuentaContable();

			if(jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico==null) {
				cuentacontableAux=(CuentaContable)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.getSelectedItem();
			} else {
				cuentacontableAux=(CuentaContable)jComboBoxid_cuenta_contable_diferenciaTarjetaCreditoGenerico.getSelectedItem();
			}

			if(cuentacontableAux!=null && cuentacontableAux.getId()!=null) {
				tarjetacredito.setid_cuenta_contable_diferencia(cuentacontableAux.getId());
				tarjetacredito.setcuentacontablediferencia_descripcion(TarjetaCreditoConstantesFunciones.getCuentaContableDiferenciaDescripcion(cuentacontableAux));
				tarjetacredito.setCuentaContableDiferencia(cuentacontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormulaRetencionForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_formula_retencionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formulaAux=new Formula();

			if(jComboBoxid_formula_retencionTarjetaCreditoGenerico==null) {
				formulaAux=(Formula)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.getSelectedItem();
			} else {
				formulaAux=(Formula)jComboBoxid_formula_retencionTarjetaCreditoGenerico.getSelectedItem();
			}

			if(formulaAux!=null && formulaAux.getId()!=null) {
				tarjetacredito.setid_formula_retencion(formulaAux.getId());
				tarjetacredito.setformularetencion_descripcion(TarjetaCreditoConstantesFunciones.getFormulaRetencionDescripcion(formulaAux));
				tarjetacredito.setFormulaRetencion(formulaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormulaComisionForeignKey(TarjetaCredito tarjetacredito,JComboBox jComboBoxid_formula_comisionTarjetaCreditoGenerico)throws Exception
	{
		try
		{
			Formula  formulaAux=new Formula();

			if(jComboBoxid_formula_comisionTarjetaCreditoGenerico==null) {
				formulaAux=(Formula)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.getSelectedItem();
			} else {
				formulaAux=(Formula)jComboBoxid_formula_comisionTarjetaCreditoGenerico.getSelectedItem();
			}

			if(formulaAux!=null && formulaAux.getId()!=null) {
				tarjetacredito.setid_formula_comision(formulaAux.getId());
				tarjetacredito.setformulacomision_descripcion(TarjetaCreditoConstantesFunciones.getFormulaComisionDescripcion(formulaAux));
				tarjetacredito.setFormulaComision(formulaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBanco=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.addItem(banco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.removeAllItems();

							for(Banco banco:this.bancosForeignKey) {
								this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.addItem(banco);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencion=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.addItem(tiporetencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.removeAllItems();

							for(TipoRetencion tiporetencion:this.tiporetencionsForeignKey) {
								this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.addItem(tiporetencion);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.addItem(cuentacontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontable:this.cuentacontablesForeignKey) {
								this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.addItem(cuentacontable);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoRetencionIvasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoRetencionIva=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.removeAllItems();

							for(TipoRetencionIva tiporetencioniva:this.tiporetencionivasForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.addItem(tiporetencioniva);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoRetencionIva") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.removeAllItems();

							for(TipoRetencionIva tiporetencioniva:this.tiporetencionivasForeignKey) {
								this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.addItem(tiporetencioniva);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableComisionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontablecomision:this.cuentacontablecomisionsForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.addItem(cuentacontablecomision);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableComision") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontablecomision:this.cuentacontablecomisionsForeignKey) {
								this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.addItem(cuentacontablecomision);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormulaPagoBancosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormula=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.removeAllItems();

							for(Formula formulapagobanco:this.formulapagobancosForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.addItem(formulapagobanco);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormulaPagoBanco") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.removeAllItems();

							for(Formula formulapagobanco:this.formulapagobancosForeignKey) {
								this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.addItem(formulapagobanco);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCuentaContableDiferenciasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCuentaContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontablediferencia:this.cuentacontablediferenciasForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.addItem(cuentacontablediferencia);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCuentaContableDiferencia") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.removeAllItems();

							for(CuentaContable cuentacontablediferencia:this.cuentacontablediferenciasForeignKey) {
								this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.addItem(cuentacontablediferencia);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormulaRetencionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormula=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.removeAllItems();

							for(Formula formularetencion:this.formularetencionsForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.addItem(formularetencion);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormulaRetencion") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.removeAllItems();

							for(Formula formularetencion:this.formularetencionsForeignKey) {
								this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.addItem(formularetencion);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormulaComisionsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormula=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.removeAllItems();

							for(Formula formulacomision:this.formulacomisionsForeignKey) {
								this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.addItem(formulacomision);
							}
						}
					}

					if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { 
					}

					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormulaComision") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.removeAllItems();

							for(Formula formulacomision:this.formulacomisionsForeignKey) {
								this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.addItem(formulacomision);
							}
						}

						if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBancoForeignKey(Banco banco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setSelectedItem(banco);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.setSelectedItem(banco);
						} else {
							this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionForeignKey(TipoRetencion tiporetencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setSelectedItem(tiporetencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.setSelectedItem(tiporetencion);
						} else {
							this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableForeignKey(CuentaContable cuentacontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setSelectedItem(cuentacontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.setSelectedItem(cuentacontable);
						} else {
							this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoRetencionIvaForeignKey(TipoRetencionIva tiporetencioniva,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedItem(tiporetencioniva);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.setSelectedItem(tiporetencioniva);
						} else {
							this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableComisionForeignKey(CuentaContable cuentacontablecomision,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedItem(cuentacontablecomision);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.setSelectedItem(cuentacontablecomision);
						} else {
							this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormulaPagoBancoForeignKey(Formula formulapagobanco,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedItem(formulapagobanco);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.setSelectedItem(formulapagobanco);
						} else {
							this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCuentaContableDiferenciaForeignKey(CuentaContable cuentacontablediferencia,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedItem(cuentacontablediferencia);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.setSelectedItem(cuentacontablediferencia);
						} else {
							this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormulaRetencionForeignKey(Formula formularetencion,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setSelectedItem(formularetencion);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.setSelectedItem(formularetencion);
						} else {
							this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormulaComisionForeignKey(Formula formulacomision,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setSelectedItem(formulacomision);
						}
					} else {
						if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.setSelectedItem(formulacomision);
						} else {
							this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesTarjetaCredito() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			TarjetaCreditoConstantesFunciones.refrescarForeignKeysDescripcionesTarjetaCredito(this.tarjetacreditoLogic.getTarjetaCreditos());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			TarjetaCreditoConstantesFunciones.refrescarForeignKeysDescripcionesTarjetaCredito(this.tarjetacreditos);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Banco.class));
		classes.add(new Classe(TipoRetencion.class));
		classes.add(new Classe(CuentaContable.class));
		classes.add(new Classe(TipoRetencionIva.class));
		classes.add(new Classe(Formula.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//tarjetacreditoLogic.setTarjetaCreditos(this.tarjetacreditos);
			tarjetacreditoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public TarjetaCreditoParameterReturnGeneral getTarjetaCreditoParameterGeneral() {
		return this.tarjetacreditoParameterGeneral;
	}
	
	public void setTarjetaCreditoParameterGeneral(TarjetaCreditoParameterReturnGeneral tarjetacreditoParameterGeneral) {
		this.tarjetacreditoParameterGeneral = tarjetacreditoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoTarjetaCredito() {
		return isPermisoTodoTarjetaCredito;
	}

	public void setIsPermisoTodoTarjetaCredito(Boolean isPermisoTodoTarjetaCredito) {
		this.isPermisoTodoTarjetaCredito = isPermisoTodoTarjetaCredito;
	}

	public Boolean getIsPermisoNuevoTarjetaCredito() {
		return isPermisoNuevoTarjetaCredito;
	}

	public void setIsPermisoNuevoTarjetaCredito(Boolean isPermisoNuevoTarjetaCredito) {
		this.isPermisoNuevoTarjetaCredito = isPermisoNuevoTarjetaCredito;
	}

	public Boolean getIsPermisoActualizarTarjetaCredito() {
		return isPermisoActualizarTarjetaCredito;
	}

	public void setIsPermisoActualizarTarjetaCredito(Boolean isPermisoActualizarTarjetaCredito) {
		this.isPermisoActualizarTarjetaCredito = isPermisoActualizarTarjetaCredito;
	}

	public Boolean getIsPermisoEliminarTarjetaCredito() {
		return isPermisoEliminarTarjetaCredito;
	}

	public void setIsPermisoEliminarTarjetaCredito(Boolean isPermisoEliminarTarjetaCredito) {
		this.isPermisoEliminarTarjetaCredito = isPermisoEliminarTarjetaCredito;
	}

	public Boolean getIsPermisoGuardarCambiosTarjetaCredito() {
		return isPermisoGuardarCambiosTarjetaCredito;
	}

	public void setIsPermisoGuardarCambiosTarjetaCredito(Boolean isPermisoGuardarCambiosTarjetaCredito) {
		this.isPermisoGuardarCambiosTarjetaCredito = isPermisoGuardarCambiosTarjetaCredito;
	}
	
	public Boolean getIsPermisoConsultaTarjetaCredito() {
		return isPermisoConsultaTarjetaCredito;
	}

	public void setIsPermisoConsultaTarjetaCredito(Boolean isPermisoConsultaTarjetaCredito) {
		this.isPermisoConsultaTarjetaCredito = isPermisoConsultaTarjetaCredito;
	}

	public Boolean getIsPermisoBusquedaTarjetaCredito() {
		return isPermisoBusquedaTarjetaCredito;
	}

	public void setIsPermisoBusquedaTarjetaCredito(Boolean isPermisoBusquedaTarjetaCredito) {
		this.isPermisoBusquedaTarjetaCredito = isPermisoBusquedaTarjetaCredito;
	}

	public Boolean getIsPermisoReporteTarjetaCredito() {
		return isPermisoReporteTarjetaCredito;
	}

	public void setIsPermisoReporteTarjetaCredito(Boolean isPermisoReporteTarjetaCredito) {
		this.isPermisoReporteTarjetaCredito = isPermisoReporteTarjetaCredito;
	}
	
	public Boolean getIsPermisoPaginacionMedioTarjetaCredito() {
		return isPermisoPaginacionMedioTarjetaCredito;
	}

	public void setIsPermisoPaginacionMedioTarjetaCredito(Boolean isPermisoPaginacionMedioTarjetaCredito) {
		this.isPermisoPaginacionMedioTarjetaCredito = isPermisoPaginacionMedioTarjetaCredito;
	}
	
	public Boolean getIsPermisoPaginacionTodoTarjetaCredito() {
		return isPermisoPaginacionTodoTarjetaCredito;
	}

	public void setIsPermisoPaginacionTodoTarjetaCredito(Boolean isPermisoPaginacionTodoTarjetaCredito) {
		this.isPermisoPaginacionTodoTarjetaCredito = isPermisoPaginacionTodoTarjetaCredito;
	}
	
	public Boolean getIsPermisoPaginacionAltoTarjetaCredito() {
		return isPermisoPaginacionAltoTarjetaCredito;
	}

	public void setIsPermisoPaginacionAltoTarjetaCredito(Boolean isPermisoPaginacionAltoTarjetaCredito) {
		this.isPermisoPaginacionAltoTarjetaCredito = isPermisoPaginacionAltoTarjetaCredito;
	}
	
	public Boolean getIsPermisoCopiarTarjetaCredito() {
		return isPermisoCopiarTarjetaCredito;
	}

	public void setIsPermisoCopiarTarjetaCredito(Boolean isPermisoCopiarTarjetaCredito) {
		this.isPermisoCopiarTarjetaCredito = isPermisoCopiarTarjetaCredito;
	}
	
	public Boolean getIsPermisoVerFormTarjetaCredito() {
		return isPermisoVerFormTarjetaCredito;
	}

	public void setIsPermisoVerFormTarjetaCredito(Boolean isPermisoVerFormTarjetaCredito) {
		this.isPermisoVerFormTarjetaCredito = isPermisoVerFormTarjetaCredito;
	}
	
	public Boolean getIsPermisoDuplicarTarjetaCredito() {
		return isPermisoDuplicarTarjetaCredito;
	}

	public void setIsPermisoDuplicarTarjetaCredito(Boolean isPermisoDuplicarTarjetaCredito) {
		this.isPermisoDuplicarTarjetaCredito = isPermisoDuplicarTarjetaCredito;
	}
	
	public Boolean getIsPermisoOrdenTarjetaCredito() {
		return isPermisoOrdenTarjetaCredito;
	}

	public void setIsPermisoOrdenTarjetaCredito(Boolean isPermisoOrdenTarjetaCredito) {
		this.isPermisoOrdenTarjetaCredito = isPermisoOrdenTarjetaCredito;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoTarjetaCredito() {
		return isVisibilidadCeldaNuevoTarjetaCredito;
	}

	public void setIsVisibilidadCeldaNuevoTarjetaCredito(Boolean isVisibilidadCeldaNuevoTarjetaCredito) {
		this.isVisibilidadCeldaNuevoTarjetaCredito = isVisibilidadCeldaNuevoTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarTarjetaCredito() {
		return isVisibilidadCeldaDuplicarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaDuplicarTarjetaCredito(Boolean isVisibilidadCeldaDuplicarTarjetaCredito) {
		this.isVisibilidadCeldaDuplicarTarjetaCredito = isVisibilidadCeldaDuplicarTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarTarjetaCredito() {
		return isVisibilidadCeldaCopiarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaCopiarTarjetaCredito(Boolean isVisibilidadCeldaCopiarTarjetaCredito) {
		this.isVisibilidadCeldaCopiarTarjetaCredito = isVisibilidadCeldaCopiarTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormTarjetaCredito() {
		return isVisibilidadCeldaVerFormTarjetaCredito;
	}

	public void setIsVisibilidadCeldaVerFormTarjetaCredito(Boolean isVisibilidadCeldaVerFormTarjetaCredito) {
		this.isVisibilidadCeldaVerFormTarjetaCredito = isVisibilidadCeldaVerFormTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenTarjetaCredito() {
		return isVisibilidadCeldaOrdenTarjetaCredito;
	}

	public void setIsVisibilidadCeldaOrdenTarjetaCredito(Boolean isVisibilidadCeldaOrdenTarjetaCredito) {
		this.isVisibilidadCeldaOrdenTarjetaCredito = isVisibilidadCeldaOrdenTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesTarjetaCredito() {
		return isVisibilidadCeldaNuevoRelacionesTarjetaCredito;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesTarjetaCredito(Boolean isVisibilidadCeldaNuevoRelacionesTarjetaCredito) {
		this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito = isVisibilidadCeldaNuevoRelacionesTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaModificarTarjetaCredito() {
		return isVisibilidadCeldaModificarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaModificarTarjetaCredito(Boolean isVisibilidadCeldaModificarTarjetaCredito) {
		this.isVisibilidadCeldaModificarTarjetaCredito = isVisibilidadCeldaModificarTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarTarjetaCredito() {
		return isVisibilidadCeldaActualizarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaActualizarTarjetaCredito(Boolean isVisibilidadCeldaActualizarTarjetaCredito) {
		this.isVisibilidadCeldaActualizarTarjetaCredito = isVisibilidadCeldaActualizarTarjetaCredito;
	}

	public Boolean getIsVisibilidadCeldaEliminarTarjetaCredito() {
		return isVisibilidadCeldaEliminarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaEliminarTarjetaCredito(Boolean isVisibilidadCeldaEliminarTarjetaCredito) {
		this.isVisibilidadCeldaEliminarTarjetaCredito = isVisibilidadCeldaEliminarTarjetaCredito;
	}

	public Boolean getIsVisibilidadCeldaCancelarTarjetaCredito() {
		return isVisibilidadCeldaCancelarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaCancelarTarjetaCredito(Boolean isVisibilidadCeldaCancelarTarjetaCredito) {
		this.isVisibilidadCeldaCancelarTarjetaCredito = isVisibilidadCeldaCancelarTarjetaCredito;
	}

	public Boolean getIsVisibilidadCeldaGuardarTarjetaCredito() {
		return isVisibilidadCeldaGuardarTarjetaCredito;
	}

	public void setIsVisibilidadCeldaGuardarTarjetaCredito(Boolean isVisibilidadCeldaGuardarTarjetaCredito) {
		this.isVisibilidadCeldaGuardarTarjetaCredito = isVisibilidadCeldaGuardarTarjetaCredito;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosTarjetaCredito() {
		return isVisibilidadCeldaGuardarCambiosTarjetaCredito;
	}

	public void setIsVisibilidadCeldaGuardarCambiosTarjetaCredito(Boolean isVisibilidadCeldaGuardarCambiosTarjetaCredito) {
		this.isVisibilidadCeldaGuardarCambiosTarjetaCredito = isVisibilidadCeldaGuardarCambiosTarjetaCredito;
	}
		
	public TarjetaCreditoSessionBean gettarjetacreditoSessionBean() {
		return this.tarjetacreditoSessionBean;
	}
	
	public void settarjetacreditoSessionBean(TarjetaCreditoSessionBean tarjetacreditoSessionBean) {
		this.tarjetacreditoSessionBean=tarjetacreditoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBanco() {
		return this.isVisibilidadFK_IdBanco;
	}

	public void setisVisibilidadFK_IdBanco(Boolean isVisibilidadFK_IdBanco) {
		this.isVisibilidadFK_IdBanco=isVisibilidadFK_IdBanco;
	}

	public Boolean getisVisibilidadFK_IdCuentaContable() {
		return this.isVisibilidadFK_IdCuentaContable;
	}

	public void setisVisibilidadFK_IdCuentaContable(Boolean isVisibilidadFK_IdCuentaContable) {
		this.isVisibilidadFK_IdCuentaContable=isVisibilidadFK_IdCuentaContable;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableComision() {
		return this.isVisibilidadFK_IdCuentaContableComision;
	}

	public void setisVisibilidadFK_IdCuentaContableComision(Boolean isVisibilidadFK_IdCuentaContableComision) {
		this.isVisibilidadFK_IdCuentaContableComision=isVisibilidadFK_IdCuentaContableComision;
	}

	public Boolean getisVisibilidadFK_IdCuentaContableDiferencia() {
		return this.isVisibilidadFK_IdCuentaContableDiferencia;
	}

	public void setisVisibilidadFK_IdCuentaContableDiferencia(Boolean isVisibilidadFK_IdCuentaContableDiferencia) {
		this.isVisibilidadFK_IdCuentaContableDiferencia=isVisibilidadFK_IdCuentaContableDiferencia;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdFormulaComision() {
		return this.isVisibilidadFK_IdFormulaComision;
	}

	public void setisVisibilidadFK_IdFormulaComision(Boolean isVisibilidadFK_IdFormulaComision) {
		this.isVisibilidadFK_IdFormulaComision=isVisibilidadFK_IdFormulaComision;
	}

	public Boolean getisVisibilidadFK_IdFormulaPagoBanco() {
		return this.isVisibilidadFK_IdFormulaPagoBanco;
	}

	public void setisVisibilidadFK_IdFormulaPagoBanco(Boolean isVisibilidadFK_IdFormulaPagoBanco) {
		this.isVisibilidadFK_IdFormulaPagoBanco=isVisibilidadFK_IdFormulaPagoBanco;
	}

	public Boolean getisVisibilidadFK_IdFormulaRetencion() {
		return this.isVisibilidadFK_IdFormulaRetencion;
	}

	public void setisVisibilidadFK_IdFormulaRetencion(Boolean isVisibilidadFK_IdFormulaRetencion) {
		this.isVisibilidadFK_IdFormulaRetencion=isVisibilidadFK_IdFormulaRetencion;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencion() {
		return this.isVisibilidadFK_IdTipoRetencion;
	}

	public void setisVisibilidadFK_IdTipoRetencion(Boolean isVisibilidadFK_IdTipoRetencion) {
		this.isVisibilidadFK_IdTipoRetencion=isVisibilidadFK_IdTipoRetencion;
	}

	public Boolean getisVisibilidadFK_IdTipoRetencionIva() {
		return this.isVisibilidadFK_IdTipoRetencionIva;
	}

	public void setisVisibilidadFK_IdTipoRetencionIva(Boolean isVisibilidadFK_IdTipoRetencionIva) {
		this.isVisibilidadFK_IdTipoRetencionIva=isVisibilidadFK_IdTipoRetencionIva;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(TarjetaCredito tarjetacredito)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(tarjetacredito,null);
				this.setActualParaGuardarSucursalForeignKey(tarjetacredito,null);
				this.setActualParaGuardarBancoForeignKey(tarjetacredito,null);
				this.setActualParaGuardarTipoRetencionForeignKey(tarjetacredito,null);
				this.setActualParaGuardarCuentaContableForeignKey(tarjetacredito,null);
				this.setActualParaGuardarTipoRetencionIvaForeignKey(tarjetacredito,null);
				this.setActualParaGuardarCuentaContableComisionForeignKey(tarjetacredito,null);
				this.setActualParaGuardarFormulaPagoBancoForeignKey(tarjetacredito,null);
				this.setActualParaGuardarCuentaContableDiferenciaForeignKey(tarjetacredito,null);
				this.setActualParaGuardarFormulaRetencionForeignKey(tarjetacredito,null);
				this.setActualParaGuardarFormulaComisionForeignKey(tarjetacredito,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(TarjetaCredito tarjetacredito,TarjetaCredito tarjetacreditoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalTarjetaCredito(tarjetacredito);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		tarjetacreditoAux.setId(tarjetacredito.getId());
		tarjetacreditoAux.setVersionRow(tarjetacredito.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessTarjetaCredito();
		
			int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = tarjetacreditoValidator.getInvalidValues(this.tarjetacredito);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			tarjetacreditoLogic.setDatosCliente(datosCliente);
			tarjetacreditoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				tarjetacreditoAux=new  TarjetaCredito();
				
				tarjetacreditoAux.setIsNew(true);
				tarjetacreditoAux.setIsChanged(true);
				
				tarjetacreditoAux.setTarjetaCreditoOriginal(this.tarjetacredito);
				
				tarjetacreditoAux.setId(this.tarjetacredito.getId());	
				tarjetacreditoAux.setVersionRow(this.tarjetacredito.getVersionRow());	
				tarjetacreditoAux.setid_empresa(this.tarjetacredito.getid_empresa());	
				tarjetacreditoAux.setid_sucursal(this.tarjetacredito.getid_sucursal());	
				tarjetacreditoAux.setid_banco(this.tarjetacredito.getid_banco());	
				tarjetacreditoAux.setcodigo(this.tarjetacredito.getcodigo());	
				tarjetacreditoAux.setnombre(this.tarjetacredito.getnombre());	
				tarjetacreditoAux.setnombre_corto(this.tarjetacredito.getnombre_corto());	
				tarjetacreditoAux.setdigito_valido(this.tarjetacredito.getdigito_valido());	
				tarjetacreditoAux.setdigito_tarjeta(this.tarjetacredito.getdigito_tarjeta());	
				tarjetacreditoAux.setcomision(this.tarjetacredito.getcomision());	
				tarjetacreditoAux.setinteres(this.tarjetacredito.getinteres());	
				tarjetacreditoAux.setmonto_minimo(this.tarjetacredito.getmonto_minimo());	
				tarjetacreditoAux.setporcentaje_retencion(this.tarjetacredito.getporcentaje_retencion());	
				tarjetacreditoAux.setcomision_retencion(this.tarjetacredito.getcomision_retencion());	
				tarjetacreditoAux.setes_retencion_redondeo(this.tarjetacredito.getes_retencion_redondeo());	
				tarjetacreditoAux.setes_pago_banco_redondeo(this.tarjetacredito.getes_pago_banco_redondeo());	
				tarjetacreditoAux.setes_comision_redondeo(this.tarjetacredito.getes_comision_redondeo());	
				tarjetacreditoAux.setid_tipo_retencion(this.tarjetacredito.getid_tipo_retencion());	
				tarjetacreditoAux.setid_cuenta_contable(this.tarjetacredito.getid_cuenta_contable());	
				tarjetacreditoAux.setid_tipo_retencion_iva(this.tarjetacredito.getid_tipo_retencion_iva());	
				tarjetacreditoAux.setid_cuenta_contable_comision(this.tarjetacredito.getid_cuenta_contable_comision());	
				tarjetacreditoAux.setid_formula_pago_banco(this.tarjetacredito.getid_formula_pago_banco());	
				tarjetacreditoAux.setid_cuenta_contable_diferencia(this.tarjetacredito.getid_cuenta_contable_diferencia());	
				tarjetacreditoAux.setid_formula_retencion(this.tarjetacredito.getid_formula_retencion());	
				tarjetacreditoAux.setid_formula_comision(this.tarjetacredito.getid_formula_comision());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(tarjetacreditoAux,tarjetacreditos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.saveTarjetaCreditos();//WithConnection
						//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);
					
					this.refrescarForeignKeysDescripcionesTarjetaCredito();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								tarjetacreditoLogic.saveTarjetaCreditoRelaciones(tarjetacreditoAux,this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions(),this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos(),this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());//WithConnection
								//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.setTarjetaCreditoConexions(new ArrayList<TarjetaCreditoConexion>());
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.setTarjetaCreditoDescuentos(new ArrayList<TarjetaCreditoDescuento>());
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions= new ArrayList<TarjetaCreditoConexion>();
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos= new ArrayList<TarjetaCreditoDescuento>();
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions());

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos());

							if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(tarjetacreditoAux,tarjetacreditos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				tarjetacreditoAux=new  TarjetaCredito();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado() 
					|| (this.tarjetacreditoSessionBean.getEsGuardarRelacionado() && this.tarjetacredito.getId()>=0)) {
						
					tarjetacreditoAux.setIsNew(false);
				}
				
				tarjetacreditoAux.setIsDeleted(false);
			
				tarjetacreditoAux.setId(this.tarjetacredito.getId());	
				tarjetacreditoAux.setVersionRow(this.tarjetacredito.getVersionRow());	
				tarjetacreditoAux.setid_empresa(this.tarjetacredito.getid_empresa());	
				tarjetacreditoAux.setid_sucursal(this.tarjetacredito.getid_sucursal());	
				tarjetacreditoAux.setid_banco(this.tarjetacredito.getid_banco());	
				tarjetacreditoAux.setcodigo(this.tarjetacredito.getcodigo());	
				tarjetacreditoAux.setnombre(this.tarjetacredito.getnombre());	
				tarjetacreditoAux.setnombre_corto(this.tarjetacredito.getnombre_corto());	
				tarjetacreditoAux.setdigito_valido(this.tarjetacredito.getdigito_valido());	
				tarjetacreditoAux.setdigito_tarjeta(this.tarjetacredito.getdigito_tarjeta());	
				tarjetacreditoAux.setcomision(this.tarjetacredito.getcomision());	
				tarjetacreditoAux.setinteres(this.tarjetacredito.getinteres());	
				tarjetacreditoAux.setmonto_minimo(this.tarjetacredito.getmonto_minimo());	
				tarjetacreditoAux.setporcentaje_retencion(this.tarjetacredito.getporcentaje_retencion());	
				tarjetacreditoAux.setcomision_retencion(this.tarjetacredito.getcomision_retencion());	
				tarjetacreditoAux.setes_retencion_redondeo(this.tarjetacredito.getes_retencion_redondeo());	
				tarjetacreditoAux.setes_pago_banco_redondeo(this.tarjetacredito.getes_pago_banco_redondeo());	
				tarjetacreditoAux.setes_comision_redondeo(this.tarjetacredito.getes_comision_redondeo());	
				tarjetacreditoAux.setid_tipo_retencion(this.tarjetacredito.getid_tipo_retencion());	
				tarjetacreditoAux.setid_cuenta_contable(this.tarjetacredito.getid_cuenta_contable());	
				tarjetacreditoAux.setid_tipo_retencion_iva(this.tarjetacredito.getid_tipo_retencion_iva());	
				tarjetacreditoAux.setid_cuenta_contable_comision(this.tarjetacredito.getid_cuenta_contable_comision());	
				tarjetacreditoAux.setid_formula_pago_banco(this.tarjetacredito.getid_formula_pago_banco());	
				tarjetacreditoAux.setid_cuenta_contable_diferencia(this.tarjetacredito.getid_cuenta_contable_diferencia());	
				tarjetacreditoAux.setid_formula_retencion(this.tarjetacredito.getid_formula_retencion());	
				tarjetacreditoAux.setid_formula_comision(this.tarjetacredito.getid_formula_comision());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(tarjetacreditoAux,tarjetacreditos);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.saveTarjetaCreditos();//WithConnection
						//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);
					
					this.refrescarForeignKeysDescripcionesTarjetaCredito();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								tarjetacreditoLogic.saveTarjetaCreditoRelaciones(tarjetacreditoAux,this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions(),this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos(),this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());//WithConnection
								//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.setTarjetaCreditoConexions(new ArrayList<TarjetaCreditoConexion>());
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.setTarjetaCreditoDescuentos(new ArrayList<TarjetaCreditoDescuento>());
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions= new ArrayList<TarjetaCreditoConexion>();
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos= new ArrayList<TarjetaCreditoDescuento>();
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions());

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos());

							if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(tarjetacreditoAux,tarjetacreditos);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.tarjetacredito,tarjetacreditoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				tarjetacreditoAux=new  TarjetaCredito();
				
				tarjetacreditoAux.setIsNew(false);
				tarjetacreditoAux.setIsChanged(false);
				
				tarjetacreditoAux.setIsDeleted(true);
				
				tarjetacreditoAux.setId(this.tarjetacredito.getId());	
				tarjetacreditoAux.setVersionRow(this.tarjetacredito.getVersionRow());	
				tarjetacreditoAux.setid_empresa(this.tarjetacredito.getid_empresa());	
				tarjetacreditoAux.setid_sucursal(this.tarjetacredito.getid_sucursal());	
				tarjetacreditoAux.setid_banco(this.tarjetacredito.getid_banco());	
				tarjetacreditoAux.setcodigo(this.tarjetacredito.getcodigo());	
				tarjetacreditoAux.setnombre(this.tarjetacredito.getnombre());	
				tarjetacreditoAux.setnombre_corto(this.tarjetacredito.getnombre_corto());	
				tarjetacreditoAux.setdigito_valido(this.tarjetacredito.getdigito_valido());	
				tarjetacreditoAux.setdigito_tarjeta(this.tarjetacredito.getdigito_tarjeta());	
				tarjetacreditoAux.setcomision(this.tarjetacredito.getcomision());	
				tarjetacreditoAux.setinteres(this.tarjetacredito.getinteres());	
				tarjetacreditoAux.setmonto_minimo(this.tarjetacredito.getmonto_minimo());	
				tarjetacreditoAux.setporcentaje_retencion(this.tarjetacredito.getporcentaje_retencion());	
				tarjetacreditoAux.setcomision_retencion(this.tarjetacredito.getcomision_retencion());	
				tarjetacreditoAux.setes_retencion_redondeo(this.tarjetacredito.getes_retencion_redondeo());	
				tarjetacreditoAux.setes_pago_banco_redondeo(this.tarjetacredito.getes_pago_banco_redondeo());	
				tarjetacreditoAux.setes_comision_redondeo(this.tarjetacredito.getes_comision_redondeo());	
				tarjetacreditoAux.setid_tipo_retencion(this.tarjetacredito.getid_tipo_retencion());	
				tarjetacreditoAux.setid_cuenta_contable(this.tarjetacredito.getid_cuenta_contable());	
				tarjetacreditoAux.setid_tipo_retencion_iva(this.tarjetacredito.getid_tipo_retencion_iva());	
				tarjetacreditoAux.setid_cuenta_contable_comision(this.tarjetacredito.getid_cuenta_contable_comision());	
				tarjetacreditoAux.setid_formula_pago_banco(this.tarjetacredito.getid_formula_pago_banco());	
				tarjetacreditoAux.setid_cuenta_contable_diferencia(this.tarjetacredito.getid_cuenta_contable_diferencia());	
				tarjetacreditoAux.setid_formula_retencion(this.tarjetacredito.getid_formula_retencion());	
				tarjetacreditoAux.setid_formula_comision(this.tarjetacredito.getid_formula_comision());	
				
				if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.tarjetacreditoAux.getId()>=0) {	
						this.tarjetacreditosEliminados.add(tarjetacreditoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(tarjetacreditoAux,tarjetacreditos);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.saveTarjetaCreditos();//WithConnection
						//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos().addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionsEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos.addAll(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentosEliminados);
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								tarjetacreditoLogic.saveTarjetaCreditoRelaciones(tarjetacreditoAux,this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions(),this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos(),this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());//WithConnection
								//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.setTarjetaCreditoConexions(new ArrayList<TarjetaCreditoConexion>());
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.setTarjetaCreditoDescuentos(new ArrayList<TarjetaCreditoDescuento>());
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions= new ArrayList<TarjetaCreditoConexion>();
							this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos= new ArrayList<TarjetaCreditoDescuento>();
							this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions());

							if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos());

							if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							tarjetacreditoAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(tarjetacreditoAux,tarjetacreditoLogic.getTarjetaCreditos());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(tarjetacreditoAux,tarjetacreditos);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getTarjetaCreditos().addAll(this.tarjetacreditosEliminados);
					
					tarjetacreditoLogic.saveTarjetaCreditos();//WithConnection
					//tarjetacreditoLogic.getSetVersionRowTarjetaCreditos();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesTarjetaCredito();
				
				this.tarjetacreditosEliminados= new ArrayList<TarjetaCredito>();		
			}
			
			if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Tarjeta Credito GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.tarjetacredito=tarjetacreditoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessTarjetaCredito();
      	}
		
	}	
	
	public void actualizarRelaciones(TarjetaCredito tarjetacreditoLocal) throws Exception {
		
		if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				tarjetacreditoLocal.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions());
				tarjetacreditoLocal.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos());
				tarjetacreditoLocal.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
			
			} else {
			
				tarjetacreditoLocal.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexions);
				tarjetacreditoLocal.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentos);
				tarjetacreditoLocal.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(TarjetaCredito tarjetacreditoLocal) throws Exception {	
		if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				tarjetacreditoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				tarjetacreditoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BancoDetalleFormJInternalFrame.class)) {
				BancoBeanSwingJInternalFrame bancoBeanSwingJInternalFrameLocal=(BancoBeanSwingJInternalFrame) ((BancoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBanco(bancoBeanSwingJInternalFrameLocal.getbanco(),true);
				bancoBeanSwingJInternalFrameLocal.actualizarLista(bancoBeanSwingJInternalFrameLocal.banco,this.bancosForeignKey);

				bancoBeanSwingJInternalFrameLocal.actualizarRelaciones(bancoBeanSwingJInternalFrameLocal.banco);

				tarjetacreditoLocal.setBanco(bancoBeanSwingJInternalFrameLocal.banco);

				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey("Formulario");
				this.setActualBancoForeignKey(bancoBeanSwingJInternalFrameLocal.banco.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionDetalleFormJInternalFrame.class)) {
				TipoRetencionBeanSwingJInternalFrame tiporetencionBeanSwingJInternalFrameLocal=(TipoRetencionBeanSwingJInternalFrame) ((TipoRetencionDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.gettiporetencion(),true);
				tiporetencionBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion,this.tiporetencionsForeignKey);

				tiporetencionBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				tarjetacreditoLocal.setTipoRetencion(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion);

				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey("Formulario");
				this.setActualTipoRetencionForeignKey(tiporetencionBeanSwingJInternalFrameLocal.tiporetencion.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontableBeanSwingJInternalFrameLocal.actualizarLista(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablesForeignKey);

				cuentacontableBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				tarjetacreditoLocal.setCuentaContable(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey("Formulario");
				this.setActualCuentaContableForeignKey(cuentacontableBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoRetencionIvaDetalleFormJInternalFrame.class)) {
				TipoRetencionIvaBeanSwingJInternalFrame tiporetencionivaBeanSwingJInternalFrameLocal=(TipoRetencionIvaBeanSwingJInternalFrame) ((TipoRetencionIvaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tiporetencionivaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoRetencionIva(tiporetencionivaBeanSwingJInternalFrameLocal.gettiporetencioniva(),true);
				tiporetencionivaBeanSwingJInternalFrameLocal.actualizarLista(tiporetencionivaBeanSwingJInternalFrameLocal.tiporetencioniva,this.tiporetencionivasForeignKey);

				tiporetencionivaBeanSwingJInternalFrameLocal.actualizarRelaciones(tiporetencionivaBeanSwingJInternalFrameLocal.tiporetencioniva);

				tarjetacreditoLocal.setTipoRetencionIva(tiporetencionivaBeanSwingJInternalFrameLocal.tiporetencioniva);

				this.addItemDefectoCombosForeignKeyTipoRetencionIva();
				this.cargarCombosFrameTipoRetencionIvasForeignKey("Formulario");
				this.setActualTipoRetencionIvaForeignKey(tiporetencionivaBeanSwingJInternalFrameLocal.tiporetencioniva.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablecomisionBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablecomisionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablecomisionBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablecomisionBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablecomisionBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablecomisionsForeignKey);

				cuentacontablecomisionBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablecomisionBeanSwingJInternalFrameLocal.cuentacontable);

				tarjetacreditoLocal.setCuentaContableComision(cuentacontablecomisionBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableComision();
				this.cargarCombosFrameCuentaContableComisionsForeignKey("Formulario");
				this.setActualCuentaContableComisionForeignKey(cuentacontablecomisionBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormulaDetalleFormJInternalFrame.class)) {
				FormulaBeanSwingJInternalFrame formulapagobancoBeanSwingJInternalFrameLocal=(FormulaBeanSwingJInternalFrame) ((FormulaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formulapagobancoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormula(formulapagobancoBeanSwingJInternalFrameLocal.getformula(),true);
				formulapagobancoBeanSwingJInternalFrameLocal.actualizarLista(formulapagobancoBeanSwingJInternalFrameLocal.formula,this.formulapagobancosForeignKey);

				formulapagobancoBeanSwingJInternalFrameLocal.actualizarRelaciones(formulapagobancoBeanSwingJInternalFrameLocal.formula);

				tarjetacreditoLocal.setFormulaPagoBanco(formulapagobancoBeanSwingJInternalFrameLocal.formula);

				this.addItemDefectoCombosForeignKeyFormulaPagoBanco();
				this.cargarCombosFrameFormulaPagoBancosForeignKey("Formulario");
				this.setActualFormulaPagoBancoForeignKey(formulapagobancoBeanSwingJInternalFrameLocal.formula.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CuentaContableDetalleFormJInternalFrame.class)) {
				CuentaContableBeanSwingJInternalFrame cuentacontablediferenciaBeanSwingJInternalFrameLocal=(CuentaContableBeanSwingJInternalFrame) ((CuentaContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cuentacontablediferenciaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCuentaContable(cuentacontablediferenciaBeanSwingJInternalFrameLocal.getcuentacontable(),true);
				cuentacontablediferenciaBeanSwingJInternalFrameLocal.actualizarLista(cuentacontablediferenciaBeanSwingJInternalFrameLocal.cuentacontable,this.cuentacontablediferenciasForeignKey);

				cuentacontablediferenciaBeanSwingJInternalFrameLocal.actualizarRelaciones(cuentacontablediferenciaBeanSwingJInternalFrameLocal.cuentacontable);

				tarjetacreditoLocal.setCuentaContableDiferencia(cuentacontablediferenciaBeanSwingJInternalFrameLocal.cuentacontable);

				this.addItemDefectoCombosForeignKeyCuentaContableDiferencia();
				this.cargarCombosFrameCuentaContableDiferenciasForeignKey("Formulario");
				this.setActualCuentaContableDiferenciaForeignKey(cuentacontablediferenciaBeanSwingJInternalFrameLocal.cuentacontable.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormulaDetalleFormJInternalFrame.class)) {
				FormulaBeanSwingJInternalFrame formularetencionBeanSwingJInternalFrameLocal=(FormulaBeanSwingJInternalFrame) ((FormulaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formularetencionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormula(formularetencionBeanSwingJInternalFrameLocal.getformula(),true);
				formularetencionBeanSwingJInternalFrameLocal.actualizarLista(formularetencionBeanSwingJInternalFrameLocal.formula,this.formularetencionsForeignKey);

				formularetencionBeanSwingJInternalFrameLocal.actualizarRelaciones(formularetencionBeanSwingJInternalFrameLocal.formula);

				tarjetacreditoLocal.setFormulaRetencion(formularetencionBeanSwingJInternalFrameLocal.formula);

				this.addItemDefectoCombosForeignKeyFormulaRetencion();
				this.cargarCombosFrameFormulaRetencionsForeignKey("Formulario");
				this.setActualFormulaRetencionForeignKey(formularetencionBeanSwingJInternalFrameLocal.formula.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormulaDetalleFormJInternalFrame.class)) {
				FormulaBeanSwingJInternalFrame formulacomisionBeanSwingJInternalFrameLocal=(FormulaBeanSwingJInternalFrame) ((FormulaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formulacomisionBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormula(formulacomisionBeanSwingJInternalFrameLocal.getformula(),true);
				formulacomisionBeanSwingJInternalFrameLocal.actualizarLista(formulacomisionBeanSwingJInternalFrameLocal.formula,this.formulacomisionsForeignKey);

				formulacomisionBeanSwingJInternalFrameLocal.actualizarRelaciones(formulacomisionBeanSwingJInternalFrameLocal.formula);

				tarjetacreditoLocal.setFormulaComision(formulacomisionBeanSwingJInternalFrameLocal.formula);

				this.addItemDefectoCombosForeignKeyFormulaComision();
				this.cargarCombosFrameFormulaComisionsForeignKey("Formulario");
				this.setActualFormulaComisionForeignKey(formulacomisionBeanSwingJInternalFrameLocal.formula.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarTarjetaCreditoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = tarjetacreditoValidator.getInvalidValues(this.tarjetacredito);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(TarjetaCredito tarjetacredito,List<TarjetaCredito> tarjetacreditos) throws Exception {
		try	{		
			TarjetaCreditoConstantesFunciones.actualizarLista(tarjetacredito,tarjetacreditos,this.tarjetacreditoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(TarjetaCredito tarjetacredito,List<TarjetaCredito> tarjetacreditos) throws Exception {
		try	{			
			TarjetaCreditoConstantesFunciones.actualizarSelectedLista(tarjetacredito,tarjetacreditos);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<TarjetaCredito> tarjetacreditosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				tarjetacreditosLocal=this.tarjetacreditoLogic.getTarjetaCreditos();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				tarjetacreditosLocal=this.tarjetacreditos;
			}
			//ARCHITECTURE
		
			for(TarjetaCredito tarjetacreditoLocal:tarjetacreditosLocal) {
				if(this.permiteMantenimiento(tarjetacreditoLocal) && tarjetacreditoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+TarjetaCreditoConstantesFunciones.getTarjetaCreditoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_empresaTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_sucursalTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_bancoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.CODIGO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcodigoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombreTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.NOMBRECORTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombre_cortoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.DIGITOVALIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_validoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.DIGITOTARJETA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_tarjetaTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.COMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomisionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.INTERES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelinteresTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.MONTOMINIMO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelmonto_minimoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.PORCENTAJERETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelporcentaje_retencionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.COMISIONRETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomision_retencionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.ESRETENCIONREDONDEO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_retencion_redondeoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.ESPAGOBANCOREDONDEO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_pago_banco_redondeoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.ESCOMISIONREDONDEO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_comision_redondeoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDTIPORETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_tipo_retencionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contableTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDTIPORETENCIONIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_tipo_retencion_ivaTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLECOMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contable_comisionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDFORMULAPAGOBANCO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_pago_bancoTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLEDIFERENCIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contable_diferenciaTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDFORMULARETENCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_retencionTarjetaCredito,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(TarjetaCreditoConstantesFunciones.IDFORMULACOMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_comisionTarjetaCredito,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_empresaTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_sucursalTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_bancoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcodigoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombreTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombre_cortoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_validoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_tarjetaTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomisionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelinteresTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelmonto_minimoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelporcentaje_retencionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomision_retencionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_retencion_redondeoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_pago_banco_redondeoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_comision_redondeoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_tipo_retencionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contableTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_tipo_retencion_ivaTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contable_comisionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_pago_bancoTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_cuenta_contable_diferenciaTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_retencionTarjetaCredito,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormTarjetaCredito.jLabelid_formula_comisionTarjetaCredito,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("TarjetaCreditoConexion")) {
			if(this.tarjetacredito==null) {
				this.tarjetacredito= new TarjetaCredito();
			}

			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoTarjetaCredito
				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.gettarjetacreditoconexion().setTarjetaCredito(this.tarjetacredito);
			}

			return;
		}
		 else  if(sTipo.equals("TarjetaCreditoDescuento")) {
			if(this.tarjetacredito==null) {
				this.tarjetacredito= new TarjetaCredito();
			}

			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoTarjetaCredito
				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.gettarjetacreditodescuento().setTarjetaCredito(this.tarjetacredito);
			}

			return;
		}
		 else  if(sTipo.equals("FormaPagoPuntoVenta")) {
			if(this.tarjetacredito==null) {
				this.tarjetacredito= new TarjetaCredito();
			}

			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoTarjetaCredito
				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.getformapagopuntoventa().setTarjetaCredito(this.tarjetacredito);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoTarjetaCredito--;	
		
		
		this.tarjetacreditoAux=new TarjetaCredito();
		
		this.tarjetacreditoAux.setId(this.iIdNuevoTarjetaCredito);
		this.tarjetacreditoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.tarjetacreditoLogic.getTarjetaCreditos().add(this.tarjetacreditoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.tarjetacreditos.add(this.tarjetacreditoAux);
		}
		//ARCHITECTURE
		
		this.tarjetacredito=this.tarjetacreditoAux;
		
		if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioTarjetaCredito(this.tarjetacredito);
			this.setVariablesObjetoActualToFormularioForeignKeyTarjetaCredito(this.tarjetacredito);
		}
				
		//this.setDefaultControlesTarjetaCredito();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyTarjetaCredito();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyTarjetaCredito();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyTarjetaCredito();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualTarjetaCredito(this.tarjetacreditoBean,this.tarjetacredito,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(TarjetaCreditoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
			classes=TarjetaCreditoConstantesFunciones.getClassesRelationshipsOfTarjetaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.tarjetacreditoReturnGeneral=tarjetacreditoLogic.procesarEventosTarjetaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.tarjetacreditoLogic.getTarjetaCreditos(),this.tarjetacredito,this.tarjetacreditoParameterGeneral,this.isEsNuevoTarjetaCredito,classes);//this.tarjetacreditoLogic.getTarjetaCredito()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanTarjetaCredito(this.tarjetacreditoReturnGeneral,this.tarjetacreditoBean,false);
		
		if(this.tarjetacreditoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito());
		}
		
		if(this.tarjetacreditoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito(),classes);//this.tarjetacreditoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyTarjetaCredito();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyTarjetaCredito();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.RecargarFormTarjetaCredito(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingTarjetaCredito(false);
						
			if(tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.getEsGuardarRelacionado() && TarjetaCreditoConexionJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonTarjetaCreditoConexionActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.getEsGuardarRelacionado() && TarjetaCreditoDescuentoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonTarjetaCreditoDescuentoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado() && FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFormaPagoPuntoVentaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTarjetaCredito();
			}
			
			this.actualizarVisualTableDatosTarjetaCredito();
			
			this.jTableDatosTarjetaCredito.setRowSelectionInterval(this.getIndiceNuevoTarjetaCredito(), this.getIndiceNuevoTarjetaCredito());
			
			this.seleccionarFilaTablaTarjetaCreditoActual();
						
			this.actualizarEstadoCeldasBotonesTarjetaCredito("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesTarjetaCredito(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarcodigoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarnombreTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarnombre_cortoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activardigito_validoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activardigito_tarjetaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarcomisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarinteresTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarmonto_minimoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarporcentaje_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarcomision_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activares_retencion_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activares_pago_banco_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activares_comision_redondeoTarjetaCredito);	
		//
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_empresaTarjetaCredito);//
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_sucursalTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_tipo_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_cuenta_contableTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_tipo_retencion_ivaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_comisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_formula_pago_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_diferenciaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_formula_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setEnabled(isHabilitar && this.tarjetacreditoConstantesFunciones.activarid_formula_comisionTarjetaCredito);
	};
	
	public void setDefaultControlesTarjetaCredito() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoTarjetaCredito(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.tarjetacreditoSessionBean.setConGuardarRelaciones(true);			
			this.tarjetacreditoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.tarjetacreditoSessionBean.setConGuardarRelaciones(false);			
			this.tarjetacreditoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoTarjetaCredito() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
				if(tarjetacreditoAux.getId().equals(this.iIdNuevoTarjetaCredito)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditos) {
				if(tarjetacreditoAux.getId().equals(this.iIdNuevoTarjetaCredito)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualTarjetaCredito(TarjetaCredito tarjetacredito,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
				if(tarjetacreditoAux.getId().equals(tarjetacredito.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditos) {
				if(tarjetacreditoAux.getId().equals(tarjetacredito.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalTarjetaCredito(TarjetaCredito tarjetacreditoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
				if(tarjetacreditoAux.getTarjetaCreditoOriginal().getId().equals(tarjetacreditoOriginal.getId())) {
					existe=true;
					tarjetacreditoOriginal.setId(tarjetacreditoAux.getId());
					tarjetacreditoOriginal.setVersionRow(tarjetacreditoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditos) {
				if(tarjetacreditoAux.getTarjetaCreditoOriginal().getId().equals(tarjetacreditoOriginal.getId())) {
					existe=true;
					tarjetacreditoOriginal.setId(tarjetacreditoAux.getId());
					tarjetacreditoOriginal.setVersionRow(tarjetacreditoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosTarjetaCredito(Boolean esParaCancelar) throws Exception {
		tarjetacreditosAux=new ArrayList<TarjetaCredito>();
		tarjetacreditoAux=new TarjetaCredito();
		
		if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
					if(tarjetacreditoAux.getId()<0) {
						tarjetacreditosAux.add(tarjetacreditoAux);
					}		
				}
				this.iIdNuevoTarjetaCredito=0L;
				this.tarjetacreditoLogic.getTarjetaCreditos().removeAll(tarjetacreditosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditos) {
					if(tarjetacreditoAux.getId()<0) {
						tarjetacreditosAux.add(tarjetacreditoAux);
					}		
				}
				this.iIdNuevoTarjetaCredito=0L;
				this.tarjetacreditos.removeAll(tarjetacreditosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoTarjetaCredito 
					&& this.tarjetacreditoLogic.getTarjetaCreditos().size()>0
					) {
					tarjetacreditoAux=this.tarjetacreditoLogic.getTarjetaCreditos().get(this.tarjetacreditoLogic.getTarjetaCreditos().size() - 1);
				
					if(tarjetacreditoAux.getId()<0) {
						this.tarjetacreditoLogic.getTarjetaCreditos().remove(tarjetacreditoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoTarjetaCredito && this.tarjetacreditos.size()>0) {
					tarjetacreditoAux=this.tarjetacreditos.get(this.tarjetacreditos.size() - 1);
				
					if(tarjetacreditoAux.getId()<0) {
						this.tarjetacreditos.remove(tarjetacreditoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoTarjetaCredito(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(tarjetacredito.getId()<0) {
				this.tarjetacreditoLogic.getTarjetaCreditos().remove(this.tarjetacredito);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(tarjetacredito.getId()<0) {
				this.tarjetacreditos.remove(this.tarjetacredito);
			}
		}			
	}
	
	public void setEstadosInicialesTarjetaCredito(List<TarjetaCredito> tarjetacreditosAux) throws Exception {
		TarjetaCreditoConstantesFunciones.setEstadosInicialesTarjetaCredito(tarjetacreditosAux);
	}
	
	public void setEstadosInicialesTarjetaCredito(TarjetaCredito tarjetacreditoAux) throws Exception {
		TarjetaCreditoConstantesFunciones.setEstadosInicialesTarjetaCredito(tarjetacreditoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarTarjetaCreditoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarTarjetaCreditoActual()) {
				if(!this.isEsNuevoTarjetaCredito) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoTarjetaCredito=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarTarjetaCreditoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Tarjeta Credito ?", "MANTENIMIENTO DE Tarjeta Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(TarjetaCredito tarjetacredito) throws Exception {
		TarjetaCreditoConstantesFunciones.seleccionarAsignar(this.tarjetacredito,tarjetacredito);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarTarjetaCredito=this.isPermisoActualizarOriginalTarjetaCredito;
			
			
			this.seleccionarAsignar(tarjetacredito);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			TarjetaCreditoConstantesFunciones.quitarEspaciosTarjetaCredito(this.tarjetacredito,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesTarjetaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.tarjetacreditoSessionBean.setsFuncionBusquedaRapida(this.tarjetacreditoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoTarjetaCredito) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosTarjetaCredito(esParaCancelar);				
				this.cancelarNuevoTarjetaCredito(esParaCancelar);								
			}
			
			this.tarjetacredito=new TarjetaCredito();
			
			this.inicializarTarjetaCredito();
			
			this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarTarjetaCredito() throws Exception {
		try {
			TarjetaCreditoConstantesFunciones.inicializarTarjetaCredito(this.tarjetacredito);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.tarjetacreditoLogic.getTarjetaCreditos().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteTarjetaCreditos(String sAccionBusqueda,List<TarjetaCredito> tarjetacreditosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="TarjetaCredito"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="TarjetaCreditoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("TarjetaCreditoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="TarjetaCredito"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Tarjeta Creditos");		
		parameters.put("busquedapor", TarjetaCreditoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(TarjetaCreditoConexion.class));
			classes.add(new Classe(TarjetaCreditoDescuento.class));
			classes.add(new Classe(FormaPagoPuntoVenta.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					TarjetaCreditoLogic tarjetacreditoLogicAuxiliar=new TarjetaCreditoLogic();
					tarjetacreditoLogicAuxiliar.setDatosCliente(tarjetacreditoLogic.getDatosCliente());				
					tarjetacreditoLogicAuxiliar.setTarjetaCreditos(tarjetacreditosParaReportes);
					
					tarjetacreditoLogicAuxiliar.cargarRelacionesLoteForeignKeyTarjetaCreditoWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					tarjetacreditosParaReportes=tarjetacreditoLogicAuxiliar.getTarjetaCreditos();
					
					//tarjetacreditoLogic.getNewConnexionToDeep();
					
					//for (TarjetaCredito tarjetacredito:tarjetacreditosParaReportes) {
					//	tarjetacreditoLogic.deepLoad(tarjetacredito, false, DeepLoadType.INCLUDE, classes);
					//}						
					//tarjetacreditoLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//tarjetacreditoLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileTarjetaCreditoConexion = AuxiliarReportes.class.getResourceAsStream("TarjetaCreditoConexionDetalleRelacionesDesign.jasper");
			parameters.put("subreport_tarjetacreditoconexion", reportFileTarjetaCreditoConexion);

			InputStream reportFileTarjetaCreditoDescuento = AuxiliarReportes.class.getResourceAsStream("TarjetaCreditoDescuentoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_tarjetacreditodescuento", reportFileTarjetaCreditoDescuento);

			InputStream reportFileFormaPagoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("FormaPagoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_formapagopuntoventa", reportFileFormaPagoPuntoVenta);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceTarjetaCredito=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			TarjetaCreditoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			TarjetaCreditoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceTarjetaCredito=new JRBeanArrayDataSource(TarjetaCreditoJInternalFrame.TraerTarjetaCreditoBeans(tarjetacreditosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceTarjetaCredito);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+TarjetaCreditoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+TarjetaCreditoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(TarjetaCreditoBean.TraerTarjetaCreditoBeans(tarjetacreditosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoTarjetaCreditoActionPerformed(null);
					//this.generarExcelReporteTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesTarjetaCreditos(sAccionBusqueda,sTipoArchivoReporte,tarjetacreditosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteTarjetaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<TarjetaCredito> tarjetacreditosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("TarjetaCreditos");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderTarjetaCredito("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(TarjetaCredito tarjetacredito : tarjetacreditosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			TarjetaCreditoConstantesFunciones.generarExcelReporteDataTarjetaCredito("NORMAL",row,workbook,tarjetacredito,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderTarjetaCredito(String sTipo,Row row,Workbook workbook) {
		
		TarjetaCreditoConstantesFunciones.generarExcelReporteHeaderTarjetaCredito(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalTarjetaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<TarjetaCredito> tarjetacreditosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("TarjetaCreditos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(TarjetaCredito tarjetacredito : tarjetacreditosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(TarjetaCreditoConstantesFunciones.getTarjetaCreditoDescripcion(tarjetacredito));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getbanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_CODIGO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_CODIGO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcodigo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getnombre_corto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getdigito_valido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getdigito_tarjeta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_COMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcomision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_INTERES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_INTERES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getinteres());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getmonto_minimo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getporcentaje_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcomision_retencion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(tarjetacredito.getes_retencion_redondeo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(tarjetacredito.getes_pago_banco_redondeo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(tarjetacredito.getes_comision_redondeo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.gettiporetencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcuentacontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.gettiporetencioniva_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcuentacontablecomision_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getformulapagobanco_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getcuentacontablediferencia_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getformularetencion_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(tarjetacredito.getformulacomision_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesTarjetaCreditos(String sAccionBusqueda,String sTipoArchivoReporte,List<TarjetaCredito> tarjetacreditosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<TarjetaCredito> tarjetacreditosRespaldo=null;
		
		classes=TarjetaCreditoConstantesFunciones.getClassesRelationshipsOfTarjetaCredito(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.tarjetacreditoLogic.setDatosCliente(this.datosCliente);
		this.tarjetacreditoLogic.setDatosDeep(this.datosDeep);
		this.tarjetacreditoLogic.setIsConDeep(true);
		
		tarjetacreditosRespaldo=this.tarjetacreditoLogic.getTarjetaCreditos();
		
		this.tarjetacreditoLogic.setTarjetaCreditos(tarjetacreditosParaReportes);	
		this.tarjetacreditoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		tarjetacreditosParaReportes=this.tarjetacreditoLogic.getTarjetaCreditos();
		this.tarjetacreditoLogic.setTarjetaCreditos(tarjetacreditosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("TarjetaCreditos");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderTarjetaCredito("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(TarjetaCredito tarjetacredito : tarjetacreditosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderTarjetaCredito("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			TarjetaCreditoConstantesFunciones.generarExcelReporteDataTarjetaCredito("NORMAL",row,workbook,tarjetacredito,cellStyleDataAux);
		
			
			


				//TarjetaCreditoConexion
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(TarjetaCreditoConexionConstantesFunciones.SCLASSWEBTITULO))) {

				if(tarjetacredito.getTarjetaCreditoConexions()!=null && tarjetacredito.getTarjetaCreditoConexions().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(TarjetaCreditoConexionConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					TarjetaCreditoConexionConstantesFunciones.generarExcelReporteHeaderTarjetaCreditoConexion("RELACIONADO",row,workbook);
				}

				if(tarjetacredito.getTarjetaCreditoConexions()!=null) {
					i2=0;
					for(TarjetaCreditoConexion tarjetacreditoconexion : tarjetacredito.getTarjetaCreditoConexions()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						TarjetaCreditoConexionConstantesFunciones.generarExcelReporteDataTarjetaCreditoConexion("RELACIONADO",row,workbook,tarjetacreditoconexion,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//TarjetaCreditoDescuento
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(TarjetaCreditoDescuentoConstantesFunciones.SCLASSWEBTITULO))) {

				if(tarjetacredito.getTarjetaCreditoDescuentos()!=null && tarjetacredito.getTarjetaCreditoDescuentos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(TarjetaCreditoDescuentoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					TarjetaCreditoDescuentoConstantesFunciones.generarExcelReporteHeaderTarjetaCreditoDescuento("RELACIONADO",row,workbook);
				}

				if(tarjetacredito.getTarjetaCreditoDescuentos()!=null) {
					i2=0;
					for(TarjetaCreditoDescuento tarjetacreditodescuento : tarjetacredito.getTarjetaCreditoDescuentos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						TarjetaCreditoDescuentoConstantesFunciones.generarExcelReporteDataTarjetaCreditoDescuento("RELACIONADO",row,workbook,tarjetacreditodescuento,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//FormaPagoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(tarjetacredito.getFormaPagoPuntoVentas()!=null && tarjetacredito.getFormaPagoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					FormaPagoPuntoVentaConstantesFunciones.generarExcelReporteHeaderFormaPagoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(tarjetacredito.getFormaPagoPuntoVentas()!=null) {
					i2=0;
					for(FormaPagoPuntoVenta formapagopuntoventa : tarjetacredito.getFormaPagoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						FormaPagoPuntoVentaConstantesFunciones.generarExcelReporteDataFormaPagoPuntoVenta("RELACIONADO",row,workbook,formapagopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(TarjetaCreditoConstantesFunciones.getTarjetaCreditoDescripcion(tarjetacredito));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoTarjetaCredito.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessTarjetaCredito() throws Exception {		
		this.startProcessTarjetaCredito(true);
	}
	
	public void startProcessTarjetaCredito(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasTarjetaCredito ,this.jPanelParametrosReportesTarjetaCredito, this.jScrollPanelDatosTarjetaCredito,this.jPanelPaginacionTarjetaCredito, this.jScrollPanelDatosEdicionTarjetaCredito, this.jPanelAccionesTarjetaCredito,this.jPanelAccionesFormularioTarjetaCredito,this.jmenuBarTarjetaCredito,this.jmenuBarDetalleTarjetaCredito,this.jTtoolBarTarjetaCredito,this.jTtoolBarDetalleTarjetaCredito);		
		
		final JTabbedPane jTabbedPaneBusquedasTarjetaCredito=this.jTabbedPaneBusquedasTarjetaCredito; 
		
		final JPanel jPanelParametrosReportesTarjetaCredito=this.jPanelParametrosReportesTarjetaCredito;
		//final JScrollPane jScrollPanelDatosTarjetaCredito=this.jScrollPanelDatosTarjetaCredito;
		final JTable jTableDatosTarjetaCredito=this.jTableDatosTarjetaCredito;		
		final JPanel jPanelPaginacionTarjetaCredito=this.jPanelPaginacionTarjetaCredito;
		//final JScrollPane jScrollPanelDatosEdicionTarjetaCredito=this.jScrollPanelDatosEdicionTarjetaCredito;
		final JPanel jPanelAccionesTarjetaCredito=this.jPanelAccionesTarjetaCredito;
		
		JPanel jPanelCamposAuxiliarTarjetaCredito=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarTarjetaCredito=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			jPanelCamposAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jPanelCamposTarjetaCredito;
			jPanelAccionesFormularioAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jPanelAccionesFormularioTarjetaCredito;
		}
		
		final JPanel jPanelCamposTarjetaCredito=jPanelCamposAuxiliarTarjetaCredito;
		final JPanel jPanelAccionesFormularioTarjetaCredito=jPanelAccionesFormularioAuxiliarTarjetaCredito;
		
		
		final JMenuBar jmenuBarTarjetaCredito=this.jmenuBarTarjetaCredito;
		final JToolBar jTtoolBarTarjetaCredito=this.jTtoolBarTarjetaCredito;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarTarjetaCredito=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarTarjetaCredito=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			jmenuBarDetalleAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jmenuBarDetalleTarjetaCredito;
			jTtoolBarDetalleAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jTtoolBarDetalleTarjetaCredito;
		}
		
		final JMenuBar jmenuBarDetalleTarjetaCredito=jmenuBarDetalleAuxiliarTarjetaCredito;
		final JToolBar jTtoolBarDetalleTarjetaCredito=jTtoolBarDetalleAuxiliarTarjetaCredito;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasTarjetaCredito;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesTarjetaCredito;
			processRunnable.jTableDatos=jTableDatosTarjetaCredito;
			processRunnable.jPanelCampos=jPanelCamposTarjetaCredito;
			processRunnable.jPanelPaginacion=jPanelPaginacionTarjetaCredito;
			processRunnable.jPanelAcciones=jPanelAccionesTarjetaCredito;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioTarjetaCredito;
			
			
			processRunnable.jmenuBar=jmenuBarTarjetaCredito;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleTarjetaCredito;
			processRunnable.jTtoolBar=jTtoolBarTarjetaCredito;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleTarjetaCredito;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasTarjetaCredito ,jPanelParametrosReportesTarjetaCredito,jTableDatosTarjetaCredito, /*jScrollPanelDatosTarjetaCredito,*/jPanelCamposTarjetaCredito,jPanelPaginacionTarjetaCredito, /*jScrollPanelDatosEdicionTarjetaCredito,*/ jPanelAccionesTarjetaCredito,jPanelAccionesFormularioTarjetaCredito,jmenuBarTarjetaCredito,jmenuBarDetalleTarjetaCredito,jTtoolBarTarjetaCredito,jTtoolBarDetalleTarjetaCredito);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasTarjetaCredito ,jPanelParametrosReportesTarjetaCredito, jScrollPanelDatosTarjetaCredito,jPanelPaginacionTarjetaCredito, jScrollPanelDatosEdicionTarjetaCredito, jPanelAccionesTarjetaCredito,jPanelAccionesFormularioTarjetaCredito,jmenuBarTarjetaCredito,jmenuBarDetalleTarjetaCredito,jTtoolBarTarjetaCredito,jTtoolBarDetalleTarjetaCredito);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessTarjetaCredito() {// throws Exception 
		this.finishProcessTarjetaCredito(true);
	}
	
	public void finishProcessTarjetaCredito(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasTarjetaCredito ,this.jPanelParametrosReportesTarjetaCredito, this.jScrollPanelDatosTarjetaCredito,this.jPanelPaginacionTarjetaCredito, this.jScrollPanelDatosEdicionTarjetaCredito, this.jPanelAccionesTarjetaCredito,this.jPanelAccionesFormularioTarjetaCredito,this.jmenuBarTarjetaCredito,this.jmenuBarDetalleTarjetaCredito,this.jTtoolBarTarjetaCredito,this.jTtoolBarDetalleTarjetaCredito);		
		
		final JTabbedPane jTabbedPaneBusquedasTarjetaCredito=this.jTabbedPaneBusquedasTarjetaCredito; 
		
		final JPanel jPanelParametrosReportesTarjetaCredito=this.jPanelParametrosReportesTarjetaCredito;
		//final JScrollPane jScrollPanelDatosTarjetaCredito=this.jScrollPanelDatosTarjetaCredito;
		final JTable jTableDatosTarjetaCredito=this.jTableDatosTarjetaCredito;		
		final JPanel jPanelPaginacionTarjetaCredito=this.jPanelPaginacionTarjetaCredito;
		//final JScrollPane jScrollPanelDatosEdicionTarjetaCredito=this.jScrollPanelDatosEdicionTarjetaCredito;
		final JPanel jPanelAccionesTarjetaCredito=this.jPanelAccionesTarjetaCredito;
		
		JPanel jPanelCamposAuxiliarTarjetaCredito=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarTarjetaCredito=new JPanel();
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			jPanelCamposAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jPanelCamposTarjetaCredito;
			jPanelAccionesFormularioAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jPanelAccionesFormularioTarjetaCredito;
		}
		
		final JPanel jPanelCamposTarjetaCredito=jPanelCamposAuxiliarTarjetaCredito;
		final JPanel jPanelAccionesFormularioTarjetaCredito=jPanelAccionesFormularioAuxiliarTarjetaCredito;
		
		
		final JMenuBar jmenuBarTarjetaCredito=this.jmenuBarTarjetaCredito;		
		final JToolBar jTtoolBarTarjetaCredito=this.jTtoolBarTarjetaCredito;
				
		JMenuBar jmenuBarDetalleAuxiliarTarjetaCredito=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarTarjetaCredito=new JToolBar();
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			jmenuBarDetalleAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jmenuBarDetalleTarjetaCredito;
			jTtoolBarDetalleAuxiliarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jTtoolBarDetalleTarjetaCredito;		
		}
		
		final JMenuBar jmenuBarDetalleTarjetaCredito=jmenuBarDetalleAuxiliarTarjetaCredito;
		final JToolBar jTtoolBarDetalleTarjetaCredito=jTtoolBarDetalleAuxiliarTarjetaCredito;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasTarjetaCredito;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesTarjetaCredito;
			processRunnable.jTableDatos=jTableDatosTarjetaCredito;
			processRunnable.jPanelCampos=jPanelCamposTarjetaCredito;
			processRunnable.jPanelPaginacion=jPanelPaginacionTarjetaCredito;
			processRunnable.jPanelAcciones=jPanelAccionesTarjetaCredito;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioTarjetaCredito;
			
			
			processRunnable.jmenuBar=jmenuBarTarjetaCredito;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleTarjetaCredito;
			processRunnable.jTtoolBar=jTtoolBarTarjetaCredito;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleTarjetaCredito;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasTarjetaCredito ,jPanelParametrosReportesTarjetaCredito, jTableDatosTarjetaCredito,/*jScrollPanelDatosTarjetaCredito,*/jPanelCamposTarjetaCredito,jPanelPaginacionTarjetaCredito, /*jScrollPanelDatosEdicionTarjetaCredito,*/ jPanelAccionesTarjetaCredito,jPanelAccionesFormularioTarjetaCredito,jmenuBarTarjetaCredito,jmenuBarDetalleTarjetaCredito,jTtoolBarTarjetaCredito,jTtoolBarDetalleTarjetaCredito));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesTarjetaCredito(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarTarjetaCredito(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuTarjetaCredito(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarTarjetaCredito(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarTarjetaCredito,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleTarjetaCredito,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuTarjetaCredito(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarTarjetaCredito,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleTarjetaCredito,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.tarjetacreditoConstantesFunciones.getsFinalQueryTarjetaCredito();
		String  finalQueryPaginacionTodos=this.tarjetacreditoConstantesFunciones.getsFinalQueryTarjetaCredito();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=TarjetaCreditoConstantesFunciones.getArrayColumnasGlobalesNoTarjetaCredito(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=TarjetaCreditoConstantesFunciones.getArrayColumnasGlobalesTarjetaCredito(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,TarjetaCreditoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.tarjetacreditosEliminados= new ArrayList<TarjetaCredito>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessTarjetaCredito();
		
				///*TarjetaCreditoSessionBean*/this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			
			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=TarjetaCreditoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=TarjetaCreditoConstantesFunciones.getClassesForeignKeysOfTarjetaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/tarjetacredito."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			tarjetacreditosAux= new ArrayList<TarjetaCredito>();
			
				
			tarjetacreditoLogic.setDatosCliente(this.datosCliente);
			tarjetacreditoLogic.setDatosDeep(this.datosDeep);
			tarjetacreditoLogic.setIsConDeep(true);
			
			
			tarjetacreditoLogic.getTarjetaCreditoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					tarjetacreditoLogic.getTodosTarjetaCreditos(finalQueryGlobal,pagination);
					
					//tarjetacreditoLogic.getTodosTarjetaCreditosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(tarjetacreditoLogic.getTarjetaCreditos()==null|| tarjetacreditoLogic.getTarjetaCreditos().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							tarjetacreditosAux= new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux= new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							tarjetacreditoLogic.getTodosTarjetaCreditos(finalQueryGlobal+"",this.pagination);												
							
							//tarjetacreditoLogic.getTodosTarjetaCreditosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteTarjetaCreditos("Todos",tarjetacreditoLogic.getTarjetaCreditos() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());					
							tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idTarjetaCredito=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idTarjetaCredito=this.idActual;
				
				} else if(this.idTarjetaCreditoActual!=null && this.idTarjetaCreditoActual!=0L) {
					idTarjetaCredito=idTarjetaCreditoActual;
				}
				
					
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndicePorId(idTarjetaCredito);
				
				this.tarjetacreditos=new ArrayList<TarjetaCredito>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					tarjetacreditoLogic.getEntity(idTarjetaCredito);
					
					//tarjetacreditoLogic.getEntityWithConnection(idTarjetaCredito);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
					tarjetacreditoLogic.getTarjetaCreditos().add(tarjetacreditoLogic.getTarjetaCredito());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacreditos=new ArrayList<TarjetaCredito>();
					this.tarjetacreditos.add(tarjetacredito);
				}
				
				if(tarjetacreditoLogic.getTarjetaCredito()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBanco")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdBanco(finalQueryGlobal,pagination,id_bancoFK_IdBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdBanco(id_bancoFK_IdBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdBanco",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdBanco",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContable")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContable(finalQueryGlobal,pagination,id_cuenta_contableFK_IdCuentaContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContable(id_cuenta_contableFK_IdCuentaContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdCuentaContable",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdCuentaContable",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableComision")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableComision(id_cuenta_contable_comisionFK_IdCuentaContableComision);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableComision(finalQueryGlobal,pagination,id_cuenta_contable_comisionFK_IdCuentaContableComision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableComision(id_cuenta_contable_comisionFK_IdCuentaContableComision);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableComision(id_cuenta_contable_comisionFK_IdCuentaContableComision);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableComision(finalQueryGlobal,pagination,id_cuenta_contable_comisionFK_IdCuentaContableComision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableComision(id_cuenta_contable_comisionFK_IdCuentaContableComision);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableComision(id_cuenta_contable_comisionFK_IdCuentaContableComision);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdCuentaContableComision",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdCuentaContableComision",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCuentaContableDiferencia")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDiferencia(id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableDiferencia(finalQueryGlobal,pagination,id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDiferencia(id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDiferencia(id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableDiferencia(finalQueryGlobal,pagination,id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDiferencia(id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdCuentaContableDiferencia(id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdCuentaContableDiferencia",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdCuentaContableDiferencia",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdEmpresa",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdEmpresa",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormulaComision")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaComision(id_formula_comisionFK_IdFormulaComision);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaComision(finalQueryGlobal,pagination,id_formula_comisionFK_IdFormulaComision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaComision(id_formula_comisionFK_IdFormulaComision);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaComision(id_formula_comisionFK_IdFormulaComision);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaComision(finalQueryGlobal,pagination,id_formula_comisionFK_IdFormulaComision);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaComision(id_formula_comisionFK_IdFormulaComision);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaComision(id_formula_comisionFK_IdFormulaComision);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdFormulaComision",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdFormulaComision",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormulaPagoBanco")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaPagoBanco(id_formula_pago_bancoFK_IdFormulaPagoBanco);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaPagoBanco(finalQueryGlobal,pagination,id_formula_pago_bancoFK_IdFormulaPagoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaPagoBanco(id_formula_pago_bancoFK_IdFormulaPagoBanco);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaPagoBanco(id_formula_pago_bancoFK_IdFormulaPagoBanco);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaPagoBanco(finalQueryGlobal,pagination,id_formula_pago_bancoFK_IdFormulaPagoBanco);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaPagoBanco(id_formula_pago_bancoFK_IdFormulaPagoBanco);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaPagoBanco(id_formula_pago_bancoFK_IdFormulaPagoBanco);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdFormulaPagoBanco",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdFormulaPagoBanco",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormulaRetencion")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaRetencion(id_formula_retencionFK_IdFormulaRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaRetencion(finalQueryGlobal,pagination,id_formula_retencionFK_IdFormulaRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaRetencion(id_formula_retencionFK_IdFormulaRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaRetencion(id_formula_retencionFK_IdFormulaRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaRetencion(finalQueryGlobal,pagination,id_formula_retencionFK_IdFormulaRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaRetencion(id_formula_retencionFK_IdFormulaRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdFormulaRetencion(id_formula_retencionFK_IdFormulaRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdFormulaRetencion",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdFormulaRetencion",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdSucursal",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdSucursal",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencion")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencion(finalQueryGlobal,pagination,id_tipo_retencionFK_IdTipoRetencion);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencion(id_tipo_retencionFK_IdTipoRetencion);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdTipoRetencion",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdTipoRetencion",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoRetencionIva")) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva(id_tipo_retencion_ivaFK_IdTipoRetencionIva);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencionIva(finalQueryGlobal,pagination,id_tipo_retencion_ivaFK_IdTipoRetencionIva);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva(id_tipo_retencion_ivaFK_IdTipoRetencionIva);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva(id_tipo_retencion_ivaFK_IdTipoRetencionIva);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=tarjetacreditoLogic.getTarjetaCreditos()==null||tarjetacreditoLogic.getTarjetaCreditos().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=tarjetacreditos==null|| tarjetacreditos.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditosAux=new ArrayList<TarjetaCredito>();
						tarjetacreditosAux.addAll(tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditosAux=new ArrayList<TarjetaCredito>();
							tarjetacreditosAux.addAll(tarjetacreditos);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencionIva(finalQueryGlobal,pagination,id_tipo_retencion_ivaFK_IdTipoRetencionIva);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva(id_tipo_retencion_ivaFK_IdTipoRetencionIva);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=TarjetaCreditoConstantesFunciones.getDetalleIndiceFK_IdTipoRetencionIva(id_tipo_retencion_ivaFK_IdTipoRetencionIva);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteTarjetaCreditos("FK_IdTipoRetencionIva",tarjetacreditoLogic.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteTarjetaCreditos("FK_IdTipoRetencionIva",tarjetacreditos);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoLogic.setTarjetaCreditos(new ArrayList<TarjetaCredito>());
						tarjetacreditoLogic.getTarjetaCreditos().addAll(tarjetacreditosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditos=new ArrayList<TarjetaCredito>();
							tarjetacreditos.addAll(tarjetacreditosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesTarjetaCredito();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessTarjetaCredito();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=tarjetacreditoLogic.getTarjetaCreditos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=tarjetacreditos.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=tarjetacreditoLogic.getTarjetaCreditos().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=tarjetacreditos.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(TarjetaCredito tarjetacredito) {
		Boolean permite=true;
		
		if(this.tarjetacredito.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=TarjetaCreditoConstantesFunciones.getOrderByListaTarjetaCredito();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=TarjetaCreditoConstantesFunciones.getOrderByListaTarjetaCredito();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(TarjetaCredito tarjetacredito:tarjetacreditoLogic.getTarjetaCreditos()) {
				if(tarjetacredito.getsType().equals(Constantes2.S_TOTALES)) {
					tarjetacreditoTotales=tarjetacredito;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(TarjetaCredito tarjetacredito:this.tarjetacreditos) {
				if(tarjetacredito.getsType().equals(Constantes2.S_TOTALES)) {
					tarjetacreditoTotales=tarjetacredito;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.tarjetacreditoAux=new TarjetaCredito();
			this.tarjetacreditoAux.setsType(Constantes2.S_TOTALES);
			this.tarjetacreditoAux.setIsNew(false);
			this.tarjetacreditoAux.setIsChanged(false);
			this.tarjetacreditoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				TarjetaCreditoConstantesFunciones.TotalizarValoresFilaTarjetaCredito(this.tarjetacreditoLogic.getTarjetaCreditos(),this.tarjetacreditoAux);
				
				this.tarjetacreditoLogic.getTarjetaCreditos().add(this.tarjetacreditoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				TarjetaCreditoConstantesFunciones.TotalizarValoresFilaTarjetaCredito(this.tarjetacreditos,this.tarjetacreditoAux);
				
				this.tarjetacreditos.add(this.tarjetacreditoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		tarjetacreditoTotales=new TarjetaCredito();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.tarjetacreditoLogic.getTarjetaCreditos().remove(tarjetacreditoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.tarjetacreditos.remove(tarjetacreditoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		tarjetacreditoTotales=new TarjetaCredito();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(TarjetaCredito tarjetacredito:tarjetacreditoLogic.getTarjetaCreditos()) {
				if(tarjetacredito.getsType().equals(Constantes2.S_TOTALES)) {
					tarjetacreditoTotales=tarjetacredito;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				TarjetaCreditoConstantesFunciones.TotalizarValoresFilaTarjetaCredito(this.tarjetacreditoLogic.getTarjetaCreditos(),tarjetacreditoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(TarjetaCredito tarjetacredito:this.tarjetacreditos) {
				if(tarjetacredito.getsType().equals(Constantes2.S_TOTALES)) {
					tarjetacreditoTotales=tarjetacredito;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				TarjetaCreditoConstantesFunciones.TotalizarValoresFilaTarjetaCredito(this.tarjetacreditos,tarjetacreditoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getTarjetaCreditosFK_IdBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContableComision()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableComision";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContableDiferencia()throws Exception {
		try {
			sAccionBusqueda="FK_IdCuentaContableDiferencia";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdFormulaComision()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormulaComision";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdFormulaPagoBanco()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormulaPagoBanco";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdFormulaRetencion()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormulaRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdTipoRetencion()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencion";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getTarjetaCreditosFK_IdTipoRetencionIva()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoRetencionIva";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getTarjetaCreditosFK_IdBanco(String sFinalQuery,Long id_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdBanco(sFinalQuery,this.pagination,id_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContable(String sFinalQuery,Long id_cuenta_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContable(sFinalQuery,this.pagination,id_cuenta_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContableComision(String sFinalQuery,Long id_cuenta_contable_comision)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableComision(sFinalQuery,this.pagination,id_cuenta_contable_comision);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdCuentaContableDiferencia(String sFinalQuery,Long id_cuenta_contable_diferencia)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdCuentaContableDiferencia(sFinalQuery,this.pagination,id_cuenta_contable_diferencia);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdFormulaComision(String sFinalQuery,Long id_formula_comision)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaComision(sFinalQuery,this.pagination,id_formula_comision);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdFormulaPagoBanco(String sFinalQuery,Long id_formula_pago_banco)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaPagoBanco(sFinalQuery,this.pagination,id_formula_pago_banco);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdFormulaRetencion(String sFinalQuery,Long id_formula_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdFormulaRetencion(sFinalQuery,this.pagination,id_formula_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdTipoRetencion(String sFinalQuery,Long id_tipo_retencion)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencion(sFinalQuery,this.pagination,id_tipo_retencion);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getTarjetaCreditosFK_IdTipoRetencionIva(String sFinalQuery,Long id_tipo_retencion_iva)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLogic.getTarjetaCreditosFK_IdTipoRetencionIva(sFinalQuery,this.pagination,id_tipo_retencion_iva);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosTarjetaCredito() {
		this.isPermisoTodoTarjetaCredito=false;
		this.isPermisoNuevoTarjetaCredito=false;
		this.isPermisoActualizarTarjetaCredito=false;
		this.isPermisoActualizarOriginalTarjetaCredito=false;
		this.isPermisoEliminarTarjetaCredito=false;
		this.isPermisoGuardarCambiosTarjetaCredito=false;
		this.isPermisoConsultaTarjetaCredito=false;
		this.isPermisoBusquedaTarjetaCredito=false;
		this.isPermisoReporteTarjetaCredito=false;		
		this.isPermisoOrdenTarjetaCredito=false;		
		this.isPermisoPaginacionMedioTarjetaCredito=false;		
		this.isPermisoPaginacionAltoTarjetaCredito=false;
		this.isPermisoPaginacionTodoTarjetaCredito=false;
		this.isPermisoCopiarTarjetaCredito=false;		
		this.isPermisoVerFormTarjetaCredito=false;		
		this.isPermisoDuplicarTarjetaCredito=false;		
		this.isPermisoOrdenTarjetaCredito=false;		
	}
	
	public void setPermisosUsuarioTarjetaCredito(Boolean isPermiso) {
		this.isPermisoTodoTarjetaCredito=isPermiso;
		this.isPermisoNuevoTarjetaCredito=isPermiso;
		this.isPermisoActualizarTarjetaCredito=isPermiso;
		this.isPermisoActualizarOriginalTarjetaCredito=isPermiso;
		this.isPermisoEliminarTarjetaCredito=isPermiso;
		this.isPermisoGuardarCambiosTarjetaCredito=isPermiso;
		this.isPermisoConsultaTarjetaCredito=isPermiso;
		this.isPermisoBusquedaTarjetaCredito=isPermiso;
		this.isPermisoReporteTarjetaCredito=isPermiso;
		this.isPermisoOrdenTarjetaCredito=isPermiso;		
		this.isPermisoPaginacionMedioTarjetaCredito=isPermiso;		
		this.isPermisoPaginacionAltoTarjetaCredito=isPermiso;		
		this.isPermisoPaginacionTodoTarjetaCredito=isPermiso;		
		this.isPermisoCopiarTarjetaCredito=isPermiso;		
		this.isPermisoVerFormTarjetaCredito=isPermiso;		
		this.isPermisoDuplicarTarjetaCredito=isPermiso;
		this.isPermisoOrdenTarjetaCredito=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioTarjetaCredito(Boolean isPermiso) {
		//this.isPermisoTodoTarjetaCredito=isPermiso;
		this.isPermisoNuevoTarjetaCredito=isPermiso;
		this.isPermisoActualizarTarjetaCredito=isPermiso;
		this.isPermisoActualizarOriginalTarjetaCredito=isPermiso;
		this.isPermisoEliminarTarjetaCredito=isPermiso;
		this.isPermisoGuardarCambiosTarjetaCredito=isPermiso;
		//this.isPermisoConsultaTarjetaCredito=isPermiso;
		//this.isPermisoBusquedaTarjetaCredito=isPermiso;
		//this.isPermisoReporteTarjetaCredito=isPermiso;
		//this.isPermisoOrdenTarjetaCredito=isPermiso;		
		//this.isPermisoPaginacionMedioTarjetaCredito=isPermiso;		
		//this.isPermisoPaginacionAltoTarjetaCredito=isPermiso;		
		//this.isPermisoPaginacionTodoTarjetaCredito=isPermiso;		
		//this.isPermisoCopiarTarjetaCredito=isPermiso;		
		//this.isPermisoDuplicarTarjetaCredito=isPermiso;
		//this.isPermisoOrdenTarjetaCredito=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioTarjetaCreditoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(TarjetaCreditoConexionConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(TarjetaCreditoDescuentoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
		if(TarjetaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosTarjetaCreditoConexion=false;
		this.isTienePermisosTarjetaCreditoConexion=this.verificarGetPermisosUsuarioOpcionTarjetaCreditoClaseRelacionada(this.opcionsRelacionadas,TarjetaCreditoConexionConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosTarjetaCreditoDescuento=false;
		this.isTienePermisosTarjetaCreditoDescuento=this.verificarGetPermisosUsuarioOpcionTarjetaCreditoClaseRelacionada(this.opcionsRelacionadas,TarjetaCreditoDescuentoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosFormaPagoPuntoVenta=false;
		this.isTienePermisosFormaPagoPuntoVenta=this.verificarGetPermisosUsuarioOpcionTarjetaCreditoClaseRelacionada(this.opcionsRelacionadas,FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebTarjetaCredito(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioTarjetaCreditoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosTarjetaCreditoConexion=conPermiso;
		this.isTienePermisosTarjetaCreditoDescuento=conPermiso;
		this.isTienePermisosFormaPagoPuntoVenta=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioTarjetaCreditoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionTarjetaCreditoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioTarjetaCreditoClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosTarjetaCreditoConexion && this.jInternalFrameDetalleFormTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.remove(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosTarjetaCreditoDescuento && this.jInternalFrameDetalleFormTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.remove(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosFormaPagoPuntoVenta && this.jInternalFrameDetalleFormTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.remove(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioTarjetaCredito() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(TarjetaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, TarjetaCreditoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoTarjetaCredito=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarTarjetaCredito=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalTarjetaCredito=this.isPermisoActualizarTarjetaCredito;
			this.isPermisoEliminarTarjetaCredito=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosTarjetaCredito=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaTarjetaCredito=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaTarjetaCredito=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoTarjetaCredito=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteTarjetaCredito=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenTarjetaCredito=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioTarjetaCredito=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoTarjetaCredito=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoTarjetaCredito=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarTarjetaCredito=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormTarjetaCredito=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarTarjetaCredito=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenTarjetaCredito=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosTarjetaCredito.setToolTipText(this.jTableDatosTarjetaCredito.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioTarjetaCredito(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioTarjetaCredito(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(TarjetaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(TarjetaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioTarjetaCredito() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosTarjetaCreditoConexion && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoConexionTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Tarjeta Credito Conexion");
			reporte.setsDescripcion("Tarjeta Credito Conexion");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosTarjetaCreditoDescuento && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoDescuentoTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Tarjeta Credito Descuento");
			reporte.setsDescripcion("Tarjeta Credito Descuento");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosFormaPagoPuntoVenta && this.tarjetacreditoConstantesFunciones.mostrarFormaPagoPuntoVentaTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Forma Pago");
			reporte.setsDescripcion("Forma Pago");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyTarjetaCreditoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bancosForeignKey=new ArrayList();
				this.tiporetencionsForeignKey=new ArrayList();
				this.cuentacontablesForeignKey=new ArrayList();
				this.tiporetencionivasForeignKey=new ArrayList();
				this.cuentacontablecomisionsForeignKey=new ArrayList();
				this.formulapagobancosForeignKey=new ArrayList();
				this.cuentacontablediferenciasForeignKey=new ArrayList();
				this.formularetencionsForeignKey=new ArrayList();
				this.formulacomisionsForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyTarjetaCreditoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(TarjetaCreditoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyTarjetaCreditoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoRetencionIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableComisionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormulaPagoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCuentaContableDiferenciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormulaRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormulaComisionListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BancoConstantesFunciones.SFINALQUERY;

				this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIvaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tiporetencionivasForeignKey==null||this.tiporetencionivasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoRetencionIvaConstantesFunciones.getArrayColumnasGlobalesTipoRetencionIva(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionIvaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoRetencionIvaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoRetencionIvasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableComisionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablecomisionsForeignKey==null||this.cuentacontablecomisionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableComisionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaPagoBancoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formulapagobancosForeignKey==null||this.formulapagobancosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormulaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormulaPagoBancosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDiferenciaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cuentacontablediferenciasForeignKey==null||this.cuentacontablediferenciasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CuentaContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosCuentaContableDiferenciasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaRetencionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formularetencionsForeignKey==null||this.formularetencionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormulaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormulaRetencionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaComisionListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formulacomisionsForeignKey==null||this.formulacomisionsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormulaConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormulaComisionsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyTarjetaCreditoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			TarjetaCreditoParameterReturnGeneral tarjetacreditoReturnGeneral=new TarjetaCreditoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_empresaTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_empresaTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_sucursalTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_sucursalTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalBanco="";

				if(((this.bancosForeignKey==null||this.bancosForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_bancoTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_bancoTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BancoConstantesFunciones.getArrayColumnasGlobalesBanco(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BancoConstantesFunciones.TABLENAME);

						finalQueryGlobalBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalBanco, "");
						finalQueryGlobalBanco+=BancoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBanco=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidBancoActual();
					}
				} else {
					finalQueryGlobalBanco="NONE";
				}


				String finalQueryGlobalTipoRetencion="";

				if(((this.tiporetencionsForeignKey==null||this.tiporetencionsForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencionTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencionTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionConstantesFunciones.getArrayColumnasGlobalesTipoRetencion(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencion, "");
						finalQueryGlobalTipoRetencion+=TipoRetencionConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencion=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidTipoRetencionActual();
					}
				} else {
					finalQueryGlobalTipoRetencion="NONE";
				}


				String finalQueryGlobalCuentaContable="";

				if(((this.cuentacontablesForeignKey==null||this.cuentacontablesForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contableTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contableTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContable=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContable, "");
						finalQueryGlobalCuentaContable+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContable=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidCuentaContableActual();
					}
				} else {
					finalQueryGlobalCuentaContable="NONE";
				}


				String finalQueryGlobalTipoRetencionIva="";

				if(((this.tiporetencionivasForeignKey==null||this.tiporetencionivasForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencion_ivaTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencion_ivaTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoRetencionIvaConstantesFunciones.getArrayColumnasGlobalesTipoRetencionIva(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoRetencionIva=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoRetencionIvaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoRetencionIva=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoRetencionIva, "");
						finalQueryGlobalTipoRetencionIva+=TipoRetencionIvaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoRetencionIvasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoRetencionIva=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidTipoRetencionIvaActual();
					}
				} else {
					finalQueryGlobalTipoRetencionIva="NONE";
				}


				String finalQueryGlobalCuentaContableComision="";

				if(((this.cuentacontablecomisionsForeignKey==null||this.cuentacontablecomisionsForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_comisionTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_comisionTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableComision()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableComision=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableComision=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableComision, "");
						finalQueryGlobalCuentaContableComision+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableComisionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableComision=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidCuentaContableComisionActual();
					}
				} else {
					finalQueryGlobalCuentaContableComision="NONE";
				}


				String finalQueryGlobalFormulaPagoBanco="";

				if(((this.formulapagobancosForeignKey==null||this.formulapagobancosForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_formula_pago_bancoTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_formula_pago_bancoTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaPagoBanco()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormulaPagoBanco=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

						finalQueryGlobalFormulaPagoBanco=Funciones.GetFinalQueryAppend(finalQueryGlobalFormulaPagoBanco, "");
						finalQueryGlobalFormulaPagoBanco+=FormulaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormulaPagoBancosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormulaPagoBanco=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidFormulaPagoBancoActual();
					}
				} else {
					finalQueryGlobalFormulaPagoBanco="NONE";
				}


				String finalQueryGlobalCuentaContableDiferencia="";

				if(((this.cuentacontablediferenciasForeignKey==null||this.cuentacontablediferenciasForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_diferenciaTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_diferenciaTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDiferencia()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();

						this.arrDatoGeneralNo.add("id_modulo");

						arrColumnasGlobales=CuentaContableConstantesFunciones.getArrayColumnasGlobalesCuentaContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCuentaContableDiferencia=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CuentaContableConstantesFunciones.TABLENAME);

						finalQueryGlobalCuentaContableDiferencia=Funciones.GetFinalQueryAppend(finalQueryGlobalCuentaContableDiferencia, "");
						finalQueryGlobalCuentaContableDiferencia+=CuentaContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCuentaContableDiferenciasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCuentaContableDiferencia=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidCuentaContableDiferenciaActual();
					}
				} else {
					finalQueryGlobalCuentaContableDiferencia="NONE";
				}


				String finalQueryGlobalFormulaRetencion="";

				if(((this.formularetencionsForeignKey==null||this.formularetencionsForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_formula_retencionTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_formula_retencionTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaRetencion()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormulaRetencion=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

						finalQueryGlobalFormulaRetencion=Funciones.GetFinalQueryAppend(finalQueryGlobalFormulaRetencion, "");
						finalQueryGlobalFormulaRetencion+=FormulaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormulaRetencionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormulaRetencion=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidFormulaRetencionActual();
					}
				} else {
					finalQueryGlobalFormulaRetencion="NONE";
				}


				String finalQueryGlobalFormulaComision="";

				if(((this.formulacomisionsForeignKey==null||this.formulacomisionsForeignKey.size()<=0) && this.tarjetacreditoConstantesFunciones.cargarid_formula_comisionTarjetaCredito)
					 || (this.esRecargarFks && this.tarjetacreditoConstantesFunciones.cargarid_formula_comisionTarjetaCredito)) {

					if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaComision()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormulaConstantesFunciones.getArrayColumnasGlobalesFormula(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormulaComision=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormulaConstantesFunciones.TABLENAME);

						finalQueryGlobalFormulaComision=Funciones.GetFinalQueryAppend(finalQueryGlobalFormulaComision, "");
						finalQueryGlobalFormulaComision+=FormulaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormulaComisionsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormulaComision=" WHERE " + ConstantesSql.ID + "="+tarjetacreditoSessionBean.getlidFormulaComisionActual();
					}
				} else {
					finalQueryGlobalFormulaComision="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				tarjetacreditoReturnGeneral=tarjetacreditoLogic.cargarCombosLoteForeignKeyTarjetaCredito(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalBanco,finalQueryGlobalTipoRetencion,finalQueryGlobalCuentaContable,finalQueryGlobalTipoRetencionIva,finalQueryGlobalCuentaContableComision,finalQueryGlobalFormulaPagoBanco,finalQueryGlobalCuentaContableDiferencia,finalQueryGlobalFormulaRetencion,finalQueryGlobalFormulaComision);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=tarjetacreditoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=tarjetacreditoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalBanco.equals("NONE")) {
				this.bancosForeignKey=tarjetacreditoReturnGeneral.getbancosForeignKey();
			}

			if(!finalQueryGlobalTipoRetencion.equals("NONE")) {
				this.tiporetencionsForeignKey=tarjetacreditoReturnGeneral.gettiporetencionsForeignKey();
			}

			if(!finalQueryGlobalCuentaContable.equals("NONE")) {
				this.cuentacontablesForeignKey=tarjetacreditoReturnGeneral.getcuentacontablesForeignKey();
			}

			if(!finalQueryGlobalTipoRetencionIva.equals("NONE")) {
				this.tiporetencionivasForeignKey=tarjetacreditoReturnGeneral.gettiporetencionivasForeignKey();
			}

			if(!finalQueryGlobalCuentaContableComision.equals("NONE")) {
				this.cuentacontablecomisionsForeignKey=tarjetacreditoReturnGeneral.getcuentacontablecomisionsForeignKey();
			}

			if(!finalQueryGlobalFormulaPagoBanco.equals("NONE")) {
				this.formulapagobancosForeignKey=tarjetacreditoReturnGeneral.getformulapagobancosForeignKey();
			}

			if(!finalQueryGlobalCuentaContableDiferencia.equals("NONE")) {
				this.cuentacontablediferenciasForeignKey=tarjetacreditoReturnGeneral.getcuentacontablediferenciasForeignKey();
			}

			if(!finalQueryGlobalFormulaRetencion.equals("NONE")) {
				this.formularetencionsForeignKey=tarjetacreditoReturnGeneral.getformularetencionsForeignKey();
			}

			if(!finalQueryGlobalFormulaComision.equals("NONE")) {
				this.formulacomisionsForeignKey=tarjetacreditoReturnGeneral.getformulacomisionsForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyTarjetaCredito()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBanco();
			this.addItemDefectoCombosForeignKeyTipoRetencion();
			this.addItemDefectoCombosForeignKeyCuentaContable();
			this.addItemDefectoCombosForeignKeyTipoRetencionIva();
			this.addItemDefectoCombosForeignKeyCuentaContableComision();
			this.addItemDefectoCombosForeignKeyFormulaPagoBanco();
			this.addItemDefectoCombosForeignKeyCuentaContableDiferencia();
			this.addItemDefectoCombosForeignKeyFormulaRetencion();
			this.addItemDefectoCombosForeignKeyFormulaComision();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBanco()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionBanco()) {
				Banco banco=new Banco();
				BancoConstantesFunciones.setBancoDescripcion(banco,Constantes.SMENSAJE_ESCOJA_OPCION);
				banco.setId(null);

				if(!BancoConstantesFunciones.ExisteEnLista(this.bancosForeignKey,banco,true)) {

					this.bancosForeignKey.add(0,banco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencion()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencion()) {
				TipoRetencion tiporetencion=new TipoRetencion();
				TipoRetencionConstantesFunciones.setTipoRetencionDescripcion(tiporetencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencion.setId(null);

				if(!TipoRetencionConstantesFunciones.ExisteEnLista(this.tiporetencionsForeignKey,tiporetencion,true)) {

					this.tiporetencionsForeignKey.add(0,tiporetencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContable()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContable()) {
				CuentaContable cuentacontable=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontable.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablesForeignKey,cuentacontable,true)) {

					this.cuentacontablesForeignKey.add(0,cuentacontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoRetencionIva()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionTipoRetencionIva()) {
				TipoRetencionIva tiporetencioniva=new TipoRetencionIva();
				TipoRetencionIvaConstantesFunciones.setTipoRetencionIvaDescripcion(tiporetencioniva,Constantes.SMENSAJE_ESCOJA_OPCION);
				tiporetencioniva.setId(null);

				if(!TipoRetencionIvaConstantesFunciones.ExisteEnLista(this.tiporetencionivasForeignKey,tiporetencioniva,true)) {

					this.tiporetencionivasForeignKey.add(0,tiporetencioniva);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableComision()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableComision()) {
				CuentaContable cuentacontablecomision=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablecomision,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablecomision.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablecomisionsForeignKey,cuentacontablecomision,true)) {

					this.cuentacontablecomisionsForeignKey.add(0,cuentacontablecomision);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormulaPagoBanco()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaPagoBanco()) {
				Formula formulapagobanco=new Formula();
				FormulaConstantesFunciones.setFormulaDescripcion(formulapagobanco,Constantes.SMENSAJE_ESCOJA_OPCION);
				formulapagobanco.setId(null);

				if(!FormulaConstantesFunciones.ExisteEnLista(this.formulapagobancosForeignKey,formulapagobanco,true)) {

					this.formulapagobancosForeignKey.add(0,formulapagobanco);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCuentaContableDiferencia()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionCuentaContableDiferencia()) {
				CuentaContable cuentacontablediferencia=new CuentaContable();
				CuentaContableConstantesFunciones.setCuentaContableDescripcion(cuentacontablediferencia,Constantes.SMENSAJE_ESCOJA_OPCION);
				cuentacontablediferencia.setId(null);

				if(!CuentaContableConstantesFunciones.ExisteEnLista(this.cuentacontablediferenciasForeignKey,cuentacontablediferencia,true)) {

					this.cuentacontablediferenciasForeignKey.add(0,cuentacontablediferencia);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormulaRetencion()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaRetencion()) {
				Formula formularetencion=new Formula();
				FormulaConstantesFunciones.setFormulaDescripcion(formularetencion,Constantes.SMENSAJE_ESCOJA_OPCION);
				formularetencion.setId(null);

				if(!FormulaConstantesFunciones.ExisteEnLista(this.formularetencionsForeignKey,formularetencion,true)) {

					this.formularetencionsForeignKey.add(0,formularetencion);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormulaComision()throws Exception {
		try {

			if(!this.tarjetacreditoSessionBean.getisBusquedaDesdeForeignKeySesionFormulaComision()) {
				Formula formulacomision=new Formula();
				FormulaConstantesFunciones.setFormulaDescripcion(formulacomision,Constantes.SMENSAJE_ESCOJA_OPCION);
				formulacomision.setId(null);

				if(!FormulaConstantesFunciones.ExisteEnLista(this.formulacomisionsForeignKey,formulacomision,true)) {

					this.formulacomisionsForeignKey.add(0,formulacomision);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyTarjetaCredito()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyTarjetaCredito(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyTarjetaCredito()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyTarjetaCredito();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyTarjetaCredito(TarjetaCredito tarjetacredito)throws Exception {	
		try {
			
			this.setActualBancoForeignKey(tarjetacredito.getid_banco(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(tarjetacredito.getid_tipo_retencion(),false,"Formulario");
			this.setActualCuentaContableForeignKey(tarjetacredito.getid_cuenta_contable(),false,"Formulario");
			this.setActualTipoRetencionIvaForeignKey(tarjetacredito.getid_tipo_retencion_iva(),false,"Formulario");
			this.setActualCuentaContableComisionForeignKey(tarjetacredito.getid_cuenta_contable_comision(),false,"Formulario");
			this.setActualFormulaPagoBancoForeignKey(tarjetacredito.getid_formula_pago_banco(),false,"Formulario");
			this.setActualCuentaContableDiferenciaForeignKey(tarjetacredito.getid_cuenta_contable_diferencia(),false,"Formulario");
			this.setActualFormulaRetencionForeignKey(tarjetacredito.getid_formula_retencion(),false,"Formulario");
			this.setActualFormulaComisionForeignKey(tarjetacredito.getid_formula_comision(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyTarjetaCredito(TarjetaCredito tarjetacredito,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyTarjetaCredito()throws Exception {	
		try {
			
			this.setActualBancoForeignKey(this.tarjetacreditoConstantesFunciones.getid_banco(),false,"Formulario");
			this.setActualTipoRetencionForeignKey(this.tarjetacreditoConstantesFunciones.getid_tipo_retencion(),false,"Formulario");
			this.setActualCuentaContableForeignKey(this.tarjetacreditoConstantesFunciones.getid_cuenta_contable(),false,"Formulario");
			this.setActualTipoRetencionIvaForeignKey(this.tarjetacreditoConstantesFunciones.getid_tipo_retencion_iva(),false,"Formulario");
			this.setActualCuentaContableComisionForeignKey(this.tarjetacreditoConstantesFunciones.getid_cuenta_contable_comision(),false,"Formulario");
			this.setActualFormulaPagoBancoForeignKey(this.tarjetacreditoConstantesFunciones.getid_formula_pago_banco(),false,"Formulario");
			this.setActualCuentaContableDiferenciaForeignKey(this.tarjetacreditoConstantesFunciones.getid_cuenta_contable_diferencia(),false,"Formulario");
			this.setActualFormulaRetencionForeignKey(this.tarjetacreditoConstantesFunciones.getid_formula_retencion(),false,"Formulario");
			this.setActualFormulaComisionForeignKey(this.tarjetacreditoConstantesFunciones.getid_formula_comision(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyTarjetaCredito()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyTarjetaCredito()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyTarjetaCredito()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroTarjetaCredito()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyTarjetaCredito()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBancosForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
			this.cargarCombosFrameCuentaContablesForeignKey("Todos");
			this.cargarCombosFrameTipoRetencionIvasForeignKey("Todos");
			this.cargarCombosFrameCuentaContableComisionsForeignKey("Todos");
			this.cargarCombosFrameFormulaPagoBancosForeignKey("Todos");
			this.cargarCombosFrameCuentaContableDiferenciasForeignKey("Todos");
			this.cargarCombosFrameFormulaRetencionsForeignKey("Todos");
			this.cargarCombosFrameFormulaComisionsForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyTarjetaCredito(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoRetencionIvasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableComisionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormulaPagoBancosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCuentaContableDiferenciasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormulaRetencionsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormulaComisionsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyTarjetaCredito()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.getItemCount()>0) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	






















	
	

	public TarjetaCreditoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public TarjetaCreditoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public TarjetaCreditoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean(); 
		this.tarjetacreditoConstantesFunciones=new TarjetaCreditoConstantesFunciones(); 
		this.tarjetacreditoBean=new TarjetaCredito();//(this.tarjetacreditoConstantesFunciones); 		
		this.tarjetacreditoReturnGeneral=new TarjetaCreditoParameterReturnGeneral(); 
		
		this.tarjetacreditoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.tarjetacreditoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public TarjetaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public TarjetaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public TarjetaCreditoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessTarjetaCredito(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.tarjetacreditoConstantesFunciones=new TarjetaCreditoConstantesFunciones(); 
			this.tarjetacreditoBean=new TarjetaCredito();//this.tarjetacreditoConstantesFunciones); 			
			this.tarjetacreditoReturnGeneral=new TarjetaCreditoParameterReturnGeneral(); 
		
			TarjetaCreditoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Tarjeta Credito Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.tarjetacredito=new TarjetaCredito();
			this.tarjetacreditos = new ArrayList<TarjetaCredito>();
			this.tarjetacreditosAux = new ArrayList<TarjetaCredito>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic=new TarjetaCreditoLogic();
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			//this.tarjetacreditoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.tarjetacreditoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormTarjetaCredito);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoTarjetaCredito);	
					}
					
					if(this.jInternalFrameImportacionTarjetaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionTarjetaCredito);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByTarjetaCredito!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByTarjetaCredito);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormTarjetaCredito);
				this.jInternalFrameDetalleFormTarjetaCredito.setVisible(false);
				this.jInternalFrameDetalleFormTarjetaCredito.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoTarjetaCredito);
					this.jInternalFrameReporteDinamicoTarjetaCredito.setVisible(false);
					this.jInternalFrameReporteDinamicoTarjetaCredito.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionTarjetaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionTarjetaCredito);
					this.jInternalFrameImportacionTarjetaCredito.setVisible(false);
					this.jInternalFrameImportacionTarjetaCredito.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByTarjetaCredito!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByTarjetaCredito);
					this.jInternalFrameOrderByTarjetaCredito.setVisible(false);
					this.jInternalFrameOrderByTarjetaCredito.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idTarjetaCreditoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=TarjetaCreditoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.tarjetacreditoReturnGeneral=new TarjetaCreditoParameterReturnGeneral();
			
			this.tarjetacreditoParameterGeneral=new TarjetaCreditoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.tarjetacreditoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(TarjetaCreditoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(TarjetaCreditoConexionConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(TarjetaCreditoDescuentoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,TarjetaCreditoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),this.tarjetacreditoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,TarjetaCreditoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),this.tarjetacreditoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaDuplicarTarjetaCredito=true;
			this.isVisibilidadCeldaCopiarTarjetaCredito=true;
			this.isVisibilidadCeldaVerFormTarjetaCredito=true;
			this.isVisibilidadCeldaOrdenTarjetaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			
			
			this.isVisibilidadFK_IdBanco=true;
			this.isVisibilidadFK_IdCuentaContable=true;
			this.isVisibilidadFK_IdCuentaContableComision=true;
			this.isVisibilidadFK_IdCuentaContableDiferencia=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdFormulaComision=true;
			this.isVisibilidadFK_IdFormulaPagoBanco=true;
			this.isVisibilidadFK_IdFormulaRetencion=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoRetencion=true;
			this.isVisibilidadFK_IdTipoRetencionIva=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosTarjetaCredito();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioTarjetaCredito(false);
			
			this.setPermisosUsuarioTarjetaCredito();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado() 
				|| (this.tarjetacreditoSessionBean.getEsGuardarRelacionado() && this.tarjetacreditoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioTarjetaCreditoClasesRelacionadas();
			}
			
			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioTarjetaCreditoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosTarjetaCredito();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualTarjetaCredito();
			}
			
			if(!this.isPermisoBusquedaTarjetaCredito) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioTarjetaCredito,this.isPermisoPaginacionMedioTarjetaCredito,this.isPermisoPaginacionTodoTarjetaCredito);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(TarjetaCreditoConstantesFunciones.getTiposSeleccionarTarjetaCredito());
				
				this.tiposColumnasSelect=TarjetaCreditoConstantesFunciones.getTiposSeleccionarTarjetaCredito(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectTarjetaCredito();				
				//this.tiposRelacionesSelect=TarjetaCreditoConstantesFunciones.getTiposRelacionesTarjetaCredito(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioTarjetaCredito();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioTarjetaCredito(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioTarjetaCredito(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesTarjetaCredito() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.tarjetacreditoconexionLogic=new TarjetaCreditoConexionLogic();
			this.tarjetacreditodescuentoLogic=new TarjetaCreditoDescuentoLogic();
			this.formapagopuntoventaLogic=new FormaPagoPuntoVentaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bancoLogic=new BancoLogic();
			this.tiporetencionLogic=new TipoRetencionLogic();
			this.cuentacontableLogic=new CuentaContableLogic();
			this.tiporetencionivaLogic=new TipoRetencionIvaLogic();
			this.cuentacontablecomisionLogic=new CuentaContableLogic();
			this.formulapagobancoLogic=new FormulaLogic();
			this.cuentacontablediferenciaLogic=new CuentaContableLogic();
			this.formularetencionLogic=new FormulaLogic();
			this.formulacomisionLogic=new FormulaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				tarjetacreditoImplementable= (TarjetaCreditoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+TarjetaCreditoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				tarjetacreditoImplementableHome= (TarjetaCreditoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+TarjetaCreditoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.tarjetacreditos= new ArrayList<TarjetaCredito>();
			this.tarjetacreditosEliminados= new ArrayList<TarjetaCredito>();
						
			this.isEsNuevoTarjetaCredito=false;
			this.esParaAccionDesdeFormularioTarjetaCredito=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bancosForeignKey=new ArrayList<Banco>() ;
			this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>() ;
			this.cuentacontablesForeignKey=new ArrayList<CuentaContable>() ;
			this.tiporetencionivasForeignKey=new ArrayList<TipoRetencionIva>() ;
			this.cuentacontablecomisionsForeignKey=new ArrayList<CuentaContable>() ;
			this.formulapagobancosForeignKey=new ArrayList<Formula>() ;
			this.cuentacontablediferenciasForeignKey=new ArrayList<CuentaContable>() ;
			this.formularetencionsForeignKey=new ArrayList<Formula>() ;
			this.formulacomisionsForeignKey=new ArrayList<Formula>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyTarjetaCredito(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroTarjetaCredito();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			TarjetaCreditoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=TarjetaCreditoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesTarjetaCredito("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingTarjetaCredito(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioTarjetaCredito();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioTarjetaCredito();
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasTarjetaCredito.getTabCount(); i++) {
					this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessTarjetaCredito(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga TarjetaCredito: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectTarjetaCredito() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(TarjetaCreditoConexionConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(TarjetaCreditoConexionConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(TarjetaCreditoDescuentoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(TarjetaCreditoDescuentoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesTarjetaCredito")) {
				iIndex=this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();	
				
				

				if(sTitle.equals("Forma Pagoes")) {
					if(!FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessTarjetaCredito();

						this.cargarParteTabPanelRelacionadaFormaPagoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Tarjeta Credito Conexiones")) {
					if(!TarjetaCreditoConexionJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessTarjetaCredito();

						this.cargarParteTabPanelRelacionadaTarjetaCreditoConexion(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Tarjeta Credito Descuentos")) {
					if(!TarjetaCreditoDescuentoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessTarjetaCredito();

						this.cargarParteTabPanelRelacionadaTarjetaCreditoDescuento(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessTarjetaCredito();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaFormaPagoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormTarjetaCredito.cargarSessionConBeanSwingJInternalFrameFormaPagoPuntoVenta(false,true,iIndex);
		this.jButtonFormaPagoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta();

		//this.jTabbedPaneRelacionesTarjetaCredito.updateUI();
		//this.jTabbedPaneRelacionesTarjetaCredito.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesTarjetaCredito.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaTarjetaCreditoConexion(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormTarjetaCredito.cargarSessionConBeanSwingJInternalFrameTarjetaCreditoConexion(false,true,iIndex);
		this.jButtonTarjetaCreditoConexionActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaTarjetaCreditoConexion();

		//this.jTabbedPaneRelacionesTarjetaCredito.updateUI();
		//this.jTabbedPaneRelacionesTarjetaCredito.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesTarjetaCredito.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaTarjetaCreditoDescuento(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormTarjetaCredito.cargarSessionConBeanSwingJInternalFrameTarjetaCreditoDescuento(false,true,iIndex);
		this.jButtonTarjetaCreditoDescuentoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaTarjetaCreditoDescuento();

		//this.jTabbedPaneRelacionesTarjetaCredito.updateUI();
		//this.jTabbedPaneRelacionesTarjetaCredito.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesTarjetaCredito.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("TarjetaCreditoConexion")) {
				int row=this.jTableDatosTarjetaCredito.getSelectedRow();
				jButtonTarjetaCreditoConexionActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("TarjetaCreditoDescuento")) {
				int row=this.jTableDatosTarjetaCredito.getSelectedRow();
				jButtonTarjetaCreditoDescuentoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("FormaPagoPuntoVenta")) {
				int row=this.jTableDatosTarjetaCredito.getSelectedRow();
				jButtonFormaPagoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Tarjeta Credito Conexion")) {

					if(this.isTienePermisosTarjetaCreditoConexion && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoConexionTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Tarjeta Credito Conexiones"+"("+TarjetaCreditoConexionConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Tarjeta Credito Conexiones");

						if(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoConexionTarjetaCredito!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoConexionTarjetaCredito);
						}

						jmenuItem.setEnabled(this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoConexionTarjetaCredito);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"TarjetaCreditoConexion"));

						

						this.jInternalFrameDetalleFormTarjetaCredito.jmenuDetalleTarjetaCredito.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Tarjeta Credito Descuento")) {

					if(this.isTienePermisosTarjetaCreditoDescuento && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoDescuentoTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Tarjeta Credito Descuentos"+"("+TarjetaCreditoDescuentoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Tarjeta Credito Descuentos");

						if(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoDescuentoTarjetaCredito!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoDescuentoTarjetaCredito);
						}

						jmenuItem.setEnabled(this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoDescuentoTarjetaCredito);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"TarjetaCreditoDescuento"));

						

						this.jInternalFrameDetalleFormTarjetaCredito.jmenuDetalleTarjetaCredito.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Forma Pago")) {

					if(this.isTienePermisosFormaPagoPuntoVenta && this.tarjetacreditoConstantesFunciones.mostrarFormaPagoPuntoVentaTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Forma Pagoes"+"("+FormaPagoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Forma Pagoes");

						if(tarjetacreditoConstantesFunciones.resaltarFormaPagoPuntoVentaTarjetaCredito!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(tarjetacreditoConstantesFunciones.resaltarFormaPagoPuntoVentaTarjetaCredito);
						}

						jmenuItem.setEnabled(this.tarjetacreditoConstantesFunciones.activarFormaPagoPuntoVentaTarjetaCredito);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"FormaPagoPuntoVenta"));

						

						this.jInternalFrameDetalleFormTarjetaCredito.jmenuDetalleTarjetaCredito.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyTarjetaCredito(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyTarjetaCredito(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyTarjetaCredito(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyTarjetaCreditoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyTarjetaCredito();
		
		this.cargarCombosFrameForeignKeyTarjetaCredito();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyTarjetaCredito();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyTarjetaCredito();
		}
	}
	
	

	public void cargarCombosForeignKeyBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBanco();
				this.cargarCombosFrameBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaBanco(this.bancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencion();
				this.cargarCombosFrameTipoRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencion(this.tiporetencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContable();
				this.cargarCombosFrameCuentaContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContable(this.cuentacontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoRetencionIva(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoRetencionIvaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoRetencionIva();
				this.cargarCombosFrameTipoRetencionIvasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaTipoRetencionIva(this.tiporetencionivasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableComision(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableComisionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableComision();
				this.cargarCombosFrameCuentaContableComisionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableComision(this.cuentacontablecomisionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaPagoBanco(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormulaPagoBancoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormulaPagoBanco();
				this.cargarCombosFrameFormulaPagoBancosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormulaPagoBanco(this.formulapagobancosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCuentaContableDiferencia(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCuentaContableDiferenciaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCuentaContableDiferencia();
				this.cargarCombosFrameCuentaContableDiferenciasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCuentaContableDiferencia(this.cuentacontablediferenciasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaRetencion(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormulaRetencionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormulaRetencion();
				this.cargarCombosFrameFormulaRetencionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormulaRetencion(this.formularetencionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormulaComision(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormulaComisionListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormulaComision();
				this.cargarCombosFrameFormulaComisionsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaFormulaComision(this.formulacomisionsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoTarjetaCreditoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			
			if(jTableDatosTarjetaCredito.getRowCount()>=1) {
				jTableDatosTarjetaCredito.removeRowSelectionInterval(0, jTableDatosTarjetaCredito.getRowCount()-1);						
			}
			
			this.isEsNuevoTarjetaCredito=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoTarjetaCredito(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesTarjetaCredito(true);			
			//this.tarjetacredito=new TarjetaCredito();
			//this.tarjetacredito.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTarjetaCredito(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTarjetaCredito() ;
			
			if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTarjetaCredito(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.tarjetacredito);	
			this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);				
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar TarjetaCredito: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarTarjetaCreditoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosTarjetaCredito.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosTarjetaCredito.getSelectedRows().length;			
			}
			
			tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoTarjetaCredito--;			
				//TarjetaCredito tarjetacreditoAux= new TarjetaCredito();			
				//tarjetacreditoAux.setId(this.iIdNuevoTarjetaCredito);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//TarjetaCredito tarjetacreditoOrigen=new TarjetaCredito();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(TarjetaCredito tarjetacreditoOrigen : tarjetacreditosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							tarjetacreditoOrigen =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							tarjetacreditoOrigen =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaTarjetaCredito();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.tarjetacredito.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosTarjetaCredito(tarjetacreditoOrigen,this.tarjetacredito,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.tarjetacreditoLogic.getTarjetaCreditos().add(this.tarjetacreditoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.tarjetacreditos.add(this.tarjetacreditoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
				
				this.jTableDatosTarjetaCredito.setRowSelectionInterval(this.getIndiceNuevoTarjetaCredito(), this.getIndiceNuevoTarjetaCredito());
				
				int iLastRow =  this.jTableDatosTarjetaCredito.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosTarjetaCredito.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosTarjetaCredito.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaTarjetaCredito(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();									
		
			TarjetaCredito tarjetacreditoOrigen=new TarjetaCredito();
			TarjetaCredito tarjetacreditoDestino=new TarjetaCredito();
				
			tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosTarjetaCredito.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || tarjetacreditosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosTarjetaCredito.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoOrigen =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						tarjetacreditoOrigen =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						tarjetacreditoDestino =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						tarjetacreditoDestino =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				tarjetacreditoOrigen =tarjetacreditosSeleccionados.get(0);
				tarjetacreditoDestino =tarjetacreditosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosTarjetaCredito(tarjetacreditoOrigen,tarjetacreditoDestino,true,false);
				
				tarjetacreditoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(tarjetacreditoDestino,tarjetacreditoLogic.getTarjetaCreditos());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(tarjetacreditoDestino,tarjetacreditos);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
				
				//this.jTableDatosTarjetaCredito.setRowSelectionInterval(this.getIndiceNuevoTarjetaCredito(), this.getIndiceNuevoTarjetaCredito());
				
				int iLastRow =  this.jTableDatosTarjetaCredito.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosTarjetaCredito.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosTarjetaCredito.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaTarjetaCredito(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormTarjetaCredito.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesTarjetaCredito.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasTarjetaCredito.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesTarjetaCredito.setVisible(!isVisible);
			this.jPanelPaginacionTarjetaCredito.setVisible(!isVisible);
			this.jPanelAccionesTarjetaCredito.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameTarjetaCredito();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoTarjetaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionTarjetaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByTarjetaCredito();
			
			this.abrirFrameOrderByTarjetaCredito();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByTarjetaCredito();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleTarjetaCredito(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormTarjetaCredito);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormTarjetaCredito.isMaximum()) {
					this.jInternalFrameDetalleFormTarjetaCredito.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormTarjetaCredito.setSize(this.jInternalFrameDetalleFormTarjetaCredito.iWidthFormulario,this.jInternalFrameDetalleFormTarjetaCredito.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormTarjetaCredito.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormTarjetaCredito.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormTarjetaCredito.isMaximum()) {
						this.jInternalFrameDetalleFormTarjetaCredito.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),TarjetaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),TarjetaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),TarjetaCreditoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta();
					}

					if(TarjetaCreditoConexionJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaTarjetaCreditoConexion();
					}

					if(TarjetaCreditoDescuentoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaTarjetaCreditoDescuento();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormTarjetaCredito.setVisible(true);
	        this.jInternalFrameDetalleFormTarjetaCredito.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByTarjetaCredito() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByTarjetaCredito==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByTarjetaCredito=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByTarjetaCredito,false,this);
				} else {
					this.jInternalFrameOrderByTarjetaCredito=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByTarjetaCredito,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByTarjetaCredito);
				this.jInternalFrameOrderByTarjetaCredito.setVisible(false);
				this.jInternalFrameOrderByTarjetaCredito.setSelected(false);
				
				this.jInternalFrameOrderByTarjetaCredito.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByTarjetaCredito"));
				
				this.inicializarActualizarBindingTablaOrderByTarjetaCredito();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionTarjetaCredito() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionTarjetaCredito==null) {
				
				this.jInternalFrameImportacionTarjetaCredito=new ImportacionJInternalFrame(TarjetaCreditoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionTarjetaCredito);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionTarjetaCredito);
				this.jInternalFrameImportacionTarjetaCredito.setVisible(false);
				this.jInternalFrameImportacionTarjetaCredito.setSelected(false);


				this.jInternalFrameImportacionTarjetaCredito.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionTarjetaCredito"));
				this.jInternalFrameImportacionTarjetaCredito.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionTarjetaCredito"));
				this.jInternalFrameImportacionTarjetaCredito.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionTarjetaCredito"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoTarjetaCredito() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoTarjetaCredito==null) {
				this.jInternalFrameReporteDinamicoTarjetaCredito=new ReporteDinamicoJInternalFrame(TarjetaCreditoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoTarjetaCredito);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoTarjetaCredito);
				this.jInternalFrameReporteDinamicoTarjetaCredito.setVisible(false);
				this.jInternalFrameReporteDinamicoTarjetaCredito.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTarjetaCredito"));
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTarjetaCredito"));
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTarjetaCredito"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTarjetaCredito();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaTarjetaCreditoConexion() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoConexion.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoConexion.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoConexion.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoConexion.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaTarjetaCreditoDescuento() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoDescuento.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormTarjetaCredito.jContentPaneDetalleTarjetaCredito.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoDescuento.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoDescuento.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoDescuento.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleTarjetaCredito() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormTarjetaCredito);
			
	       	this.jInternalFrameDetalleFormTarjetaCredito.setVisible(false);
	        this.jInternalFrameDetalleFormTarjetaCredito.setSelected(false);
			
			//this.jInternalFrameDetalleFormTarjetaCredito.dispose();
			//this.jInternalFrameDetalleFormTarjetaCredito=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoTarjetaCredito() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoTarjetaCredito.setVisible(true);
	        this.jInternalFrameReporteDinamicoTarjetaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionTarjetaCredito() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionTarjetaCredito.setVisible(true);
	        this.jInternalFrameImportacionTarjetaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByTarjetaCredito() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByTarjetaCredito.setVisible(true);
	        this.jInternalFrameOrderByTarjetaCredito.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByTarjetaCredito() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByTarjetaCredito.setVisible(false);
	        this.jInternalFrameOrderByTarjetaCredito.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoTarjetaCredito() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoTarjetaCredito.setVisible(false);
	        this.jInternalFrameReporteDinamicoTarjetaCredito.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionTarjetaCredito() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionTarjetaCredito.setVisible(false);
	        this.jInternalFrameImportacionTarjetaCredito.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeCuentaContable(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContable";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderCuentaContable=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContable.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContable(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableComision(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableComision";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderCuentaContableComision=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableComision.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableComision(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}

				public void abrirFrameTreeCuentaContableDiferencia(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeCuentaContable);
						CuentaContableBeanSwingJInternalFrame cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.sTipoBusqueda="CuentaContableDiferencia";
						}

						cuentacontableBeanSwingJInternalFrame.getTodosCuentaContableArbol();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setCuentaContables(cuentacontableBeanSwingJInternalFrame.cuentacontablesArbol);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.CargarTreeCuentaContable();
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setVisible(true);
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						cuentacontableBeanSwingJInternalFrame.jInternalFrameTreeCuentaContable.jInternalFrameParent=this;
						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderCuentaContableDiferencia=(TitledBorder)cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

						titledBorderCuentaContableDiferencia.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cuentacontableBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(cuentacontableBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeCuentaContableDiferencia(CuentaContableBeanSwingJInternalFrame jInternalFrameTreeCuentaContable) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeCuentaContable);
						jInternalFrameTreeCuentaContable.setVisible(false);
						jInternalFrameTreeCuentaContable.setSelected(false);
						//jInternalFrameTreeCuentaContable.dispose();
						//jInternalFrameTreeCuentaContable=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarTarjetaCredito(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarTarjetaCredito(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesTarjetaCredito(true);
			//this.isEsNuevoTarjetaCredito=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesTarjetaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTarjetaCredito(false) ;
			
			if(tarjetacreditoSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.getEsGuardarRelacionado() && TarjetaCreditoConexionJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonTarjetaCreditoConexionActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.getEsGuardarRelacionado() && TarjetaCreditoDescuentoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonTarjetaCreditoDescuentoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado() && FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFormaPagoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTarjetaCredito(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTarjetaCredito(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaTarjetaCreditoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarTarjetaCredito(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesTarjetaCredito(true);
			//this.isEsNuevoTarjetaCredito=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.tarjetacredito.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesTarjetaCredito("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesTarjetaCredito(false) ;
			
			if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleTarjetaCredito(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTarjetaCredito(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaBanco(List<Banco> bancosForeignKey)throws Exception{
		TableColumn tableColumnBanco=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDBANCO));
		TableCellEditor tableCellEditorBanco =tableColumnBanco.getCellEditor();

		BancoTableCell bancoTableCellFk=(BancoTableCell)tableCellEditorBanco;

		if(bancoTableCellFk!=null) {
			bancoTableCellFk.setbancosForeignKey(bancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bancoTableCellFk.setRowActual(intSelectedRow);
			//bancoTableCellFk.setbancosForeignKeyActual(bancosForeignKey);
		//}


		if(bancoTableCellFk!=null) {
			bancoTableCellFk.RecargarBancosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencion(List<TipoRetencion> tiporetencionsForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencion=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION));
		TableCellEditor tableCellEditorTipoRetencion =tableColumnTipoRetencion.getCellEditor();

		TipoRetencionTableCell tiporetencionTableCellFk=(TipoRetencionTableCell)tableCellEditorTipoRetencion;

		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.settiporetencionsForeignKey(tiporetencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionTableCellFk.settiporetencionsForeignKeyActual(tiporetencionsForeignKey);
		//}


		if(tiporetencionTableCellFk!=null) {
			tiporetencionTableCellFk.RecargarTipoRetencionsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContable(List<CuentaContable> cuentacontablesForeignKey)throws Exception{
		TableColumn tableColumnCuentaContable=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE));
		TableCellEditor tableCellEditorCuentaContable =tableColumnCuentaContable.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContable;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablesForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoRetencionIva(List<TipoRetencionIva> tiporetencionivasForeignKey)throws Exception{
		TableColumn tableColumnTipoRetencionIva=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA));
		TableCellEditor tableCellEditorTipoRetencionIva =tableColumnTipoRetencionIva.getCellEditor();

		TipoRetencionIvaTableCell tiporetencionivaTableCellFk=(TipoRetencionIvaTableCell)tableCellEditorTipoRetencionIva;

		if(tiporetencionivaTableCellFk!=null) {
			tiporetencionivaTableCellFk.settiporetencionivasForeignKey(tiporetencionivasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tiporetencionivaTableCellFk.setRowActual(intSelectedRow);
			//tiporetencionivaTableCellFk.settiporetencionivasForeignKeyActual(tiporetencionivasForeignKey);
		//}


		if(tiporetencionivaTableCellFk!=null) {
			tiporetencionivaTableCellFk.RecargarTipoRetencionIvasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableComision(List<CuentaContable> cuentacontablecomisionsForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableComision=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION));
		TableCellEditor tableCellEditorCuentaContableComision =tableColumnCuentaContableComision.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableComision;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablecomisionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablecomisionsForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormulaPagoBanco(List<Formula> formulapagobancosForeignKey)throws Exception{
		TableColumn tableColumnFormulaPagoBanco=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO));
		TableCellEditor tableCellEditorFormulaPagoBanco =tableColumnFormulaPagoBanco.getCellEditor();

		FormulaTableCell formulaTableCellFk=(FormulaTableCell)tableCellEditorFormulaPagoBanco;

		if(formulaTableCellFk!=null) {
			formulaTableCellFk.setformulasForeignKey(formulapagobancosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formulaTableCellFk.setRowActual(intSelectedRow);
			//formulaTableCellFk.setformulasForeignKeyActual(formulapagobancosForeignKey);
		//}


		if(formulaTableCellFk!=null) {
			formulaTableCellFk.RecargarFormulasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCuentaContableDiferencia(List<CuentaContable> cuentacontablediferenciasForeignKey)throws Exception{
		TableColumn tableColumnCuentaContableDiferencia=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA));
		TableCellEditor tableCellEditorCuentaContableDiferencia =tableColumnCuentaContableDiferencia.getCellEditor();

		CuentaContableTableCell cuentacontableTableCellFk=(CuentaContableTableCell)tableCellEditorCuentaContableDiferencia;

		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.setcuentacontablesForeignKey(cuentacontablediferenciasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cuentacontableTableCellFk.setRowActual(intSelectedRow);
			//cuentacontableTableCellFk.setcuentacontablesForeignKeyActual(cuentacontablediferenciasForeignKey);
		//}


		if(cuentacontableTableCellFk!=null) {
			cuentacontableTableCellFk.RecargarCuentaContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormulaRetencion(List<Formula> formularetencionsForeignKey)throws Exception{
		TableColumn tableColumnFormulaRetencion=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION));
		TableCellEditor tableCellEditorFormulaRetencion =tableColumnFormulaRetencion.getCellEditor();

		FormulaTableCell formulaTableCellFk=(FormulaTableCell)tableCellEditorFormulaRetencion;

		if(formulaTableCellFk!=null) {
			formulaTableCellFk.setformulasForeignKey(formularetencionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formulaTableCellFk.setRowActual(intSelectedRow);
			//formulaTableCellFk.setformulasForeignKeyActual(formularetencionsForeignKey);
		//}


		if(formulaTableCellFk!=null) {
			formulaTableCellFk.RecargarFormulasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormulaComision(List<Formula> formulacomisionsForeignKey)throws Exception{
		TableColumn tableColumnFormulaComision=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION));
		TableCellEditor tableCellEditorFormulaComision =tableColumnFormulaComision.getCellEditor();

		FormulaTableCell formulaTableCellFk=(FormulaTableCell)tableCellEditorFormulaComision;

		if(formulaTableCellFk!=null) {
			formulaTableCellFk.setformulasForeignKey(formulacomisionsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formulaTableCellFk.setRowActual(intSelectedRow);
			//formulaTableCellFk.setformulasForeignKeyActual(formulacomisionsForeignKey);
		//}


		if(formulaTableCellFk!=null) {
			formulaTableCellFk.RecargarFormulasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesTarjetaCredito(false);
			
			//if(!this.isEsNuevoTarjetaCredito) {								
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				
			}
			
			if(this.permiteMantenimiento(this.tarjetacredito)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoTarjetaCredito=true;
					this.inicializarActualizarBindingTablaTarjetaCredito(false);
					this.isEsNuevoTarjetaCredito=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoTarjetaCredito=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoTarjetaCredito=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesTarjetaCredito(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTarjetaCredito(false);
				
				this.habilitarDeshabilitarControlesTarjetaCredito(false);
			
												
				
				if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleTarjetaCredito();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoTarjetaCreditoActionPerformed(evt,tarjetacreditoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualTarjetaCredito(this.tarjetacredito,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,tarjetacreditoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.tarjetacredito.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				this.tarjetacredito.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				this.tarjetacredito.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.tarjetacredito)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((TarjetaCreditoModel) this.jTableDatosTarjetaCredito.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoTarjetaCredito=true;
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
				this.isEsNuevoTarjetaCredito=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesTarjetaCredito(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTarjetaCredito(false);
				
				this.habilitarDeshabilitarControlesTarjetaCredito(false);
				
				
				
				if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleTarjetaCredito();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosTarjetaCredito.getRowCount()>=1) {
				jTableDatosTarjetaCredito.removeRowSelectionInterval(0, jTableDatosTarjetaCredito.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesTarjetaCredito(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaTarjetaCredito(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesTarjetaCredito(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualTarjetaCredito(false) ;
			
			this.isEsNuevoTarjetaCredito=false;
			
			if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleTarjetaCredito();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingTarjetaCredito(false);
				
				//SI ES MANUAL
				if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualTarjetaCredito();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoTarjetaCredito--;			
			//TarjetaCredito tarjetacreditoAux= new TarjetaCredito();			
			//tarjetacreditoAux.setId(this.iIdNuevoTarjetaCredito);
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaTarjetaCredito();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
			
			this.tarjetacredito.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.tarjetacreditoLogic.getTarjetaCreditos().add(this.tarjetacreditoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.tarjetacreditos.add(this.tarjetacreditoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaTarjetaCredito(false);
			
			this.jTableDatosTarjetaCredito.setRowSelectionInterval(this.getIndiceNuevoTarjetaCredito(), this.getIndiceNuevoTarjetaCredito());
			
			int iLastRow =  this.jTableDatosTarjetaCredito.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosTarjetaCredito.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosTarjetaCredito.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTarjetaCredito(false);
			
			//SI ES MANUAL
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTarjetaCredito();
			}
			
			//this.abrirFrameTreeTarjetaCredito();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Tarjeta CreditoS ?", "MANTENIMIENTO DE Tarjeta Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionTarjetaCredito.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralTarjetaCredito();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.tarjetacreditoReturnGeneral=tarjetacreditoLogic.procesarImportacionTarjetaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.tarjetacreditoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarTarjetaCreditoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionTarjetaCredito.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionTarjetaCredito.setFileImportacion(this.jInternalFrameImportacionTarjetaCredito.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionTarjetaCredito.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionTarjetaCredito.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionTarjetaCredito.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionTarjetaCredito.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		

		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("TarjetaCreditoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"TarjetaCreditoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Banco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Banco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Banco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Banco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_CODIGO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreCorto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreCorto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreCorto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreCorto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_gitoValido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_gitoValido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_gitoValido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_gitoValido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_gitoTarjeta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_gitoTarjeta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_gitoTarjeta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_gitoTarjeta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_INTERES:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_teres_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_teres_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_teres_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_teres_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoMinimo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoMinimo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoMinimo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoMinimo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentajeRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentajeRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentajeRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentajeRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_misionRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_misionRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_misionRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_misionRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_RetencionRedondeo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_RetencionRedondeo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_RetencionRedondeo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_RetencionRedondeo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_PagoBancoRedondeo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_PagoBancoRedondeo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_PagoBancoRedondeo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_PagoBancoRedondeo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ComisionRedondeo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ComisionRedondeo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ComisionRedondeo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ComisionRedondeo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoRetencionIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoRetencionIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoRetencionIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoRetencionIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableComision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableComision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableComision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableComision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormulaPagoBanco_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormulaPagoBanco_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormulaPagoBanco_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormulaPagoBanco_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_CuentaContableDiferencia_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_CuentaContableDiferencia_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_CuentaContableDiferencia_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_CuentaContableDiferencia_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormulaRetencion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormulaRetencion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormulaRetencion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormulaRetencion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_FormulaComision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_FormulaComision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_FormulaComision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_FormulaComision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoria="id_banco";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoria="codigo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO:
					sNombreCampoCategoria="nombre_corto";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO:
					sNombreCampoCategoria="digito_valido";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA:
					sNombreCampoCategoria="digito_tarjeta";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISION:
					sNombreCampoCategoria="comision";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_INTERES:
					sNombreCampoCategoria="interes";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO:
					sNombreCampoCategoria="monto_minimo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION:
					sNombreCampoCategoria="porcentaje_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION:
					sNombreCampoCategoria="comision_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO:
					sNombreCampoCategoria="es_retencion_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO:
					sNombreCampoCategoria="es_pago_banco_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO:
					sNombreCampoCategoria="es_comision_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoria="id_tipo_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoria="id_cuenta_contable";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA:
					sNombreCampoCategoria="id_tipo_retencion_iva";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION:
					sNombreCampoCategoria="id_cuenta_contable_comision";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO:
					sNombreCampoCategoria="id_formula_pago_banco";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA:
					sNombreCampoCategoria="id_cuenta_contable_diferencia";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION:
					sNombreCampoCategoria="id_formula_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION:
					sNombreCampoCategoria="id_formula_comision";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDBANCO:
					sNombreCampoCategoriaValor="id_banco";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_CODIGO:
					sNombreCampoCategoriaValor="codigo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO:
					sNombreCampoCategoriaValor="nombre_corto";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO:
					sNombreCampoCategoriaValor="digito_valido";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA:
					sNombreCampoCategoriaValor="digito_tarjeta";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISION:
					sNombreCampoCategoriaValor="comision";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_INTERES:
					sNombreCampoCategoriaValor="interes";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO:
					sNombreCampoCategoriaValor="monto_minimo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION:
					sNombreCampoCategoriaValor="porcentaje_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION:
					sNombreCampoCategoriaValor="comision_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO:
					sNombreCampoCategoriaValor="es_retencion_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO:
					sNombreCampoCategoriaValor="es_pago_banco_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO:
					sNombreCampoCategoriaValor="es_comision_redondeo";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION:
					sNombreCampoCategoriaValor="id_tipo_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					sNombreCampoCategoriaValor="id_cuenta_contable";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA:
					sNombreCampoCategoriaValor="id_tipo_retencion_iva";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION:
					sNombreCampoCategoriaValor="id_cuenta_contable_comision";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO:
					sNombreCampoCategoriaValor="id_formula_pago_banco";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA:
					sNombreCampoCategoriaValor="id_cuenta_contable_diferencia";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION:
					sNombreCampoCategoriaValor="id_formula_retencion";
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION:
					sNombreCampoCategoriaValor="id_formula_comision";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_banco");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_CODIGO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Corto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_corto");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Digito Valido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"digito_valido");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Digito Tarjeta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"digito_tarjeta");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Comision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"comision");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_INTERES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Interes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"interes");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Monto Minimo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"monto_minimo");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"% Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje_retencion");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Comision Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"comision_retencion");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Retencion Redondeo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_retencion_redondeo");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pago Banco Redondeo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_pago_banco_redondeo");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Comision Redondeo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"es_comision_redondeo");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta Contable",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Retencion Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_retencion_iva");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta Contable Comision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_comision");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formula Pago Banco",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formula_pago_banco");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cta Contable Diferencia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cuenta_contable_diferencia");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formula Retencion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formula_retencion");
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formula Comision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formula_comision");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("TarjetaCreditos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDBANCO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getbanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_CODIGO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_CODIGO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcodigo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getnombre_corto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getdigito_valido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getdigito_tarjeta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcomision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_INTERES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_INTERES);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getinteres());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getmonto_minimo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getporcentaje_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcomision_retencion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getes_retencion_redondeo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getes_pago_banco_redondeo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getes_comision_redondeo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.gettiporetencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcuentacontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.gettiporetencioniva_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcuentacontablecomision_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getformulapagobanco_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getcuentacontablediferencia_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getformularetencion_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION);
					iRow++;

					for(TarjetaCredito tarjetacredito:tarjetacreditosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(tarjetacredito.getformulacomision_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelTarjetaCredito(row);				
			//	iRow++;
			//}				
			
			//for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelTarjetaCredito(tarjetacreditoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTarjetaCredito(false);
			
			//SI ES MANUAL
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualTarjetaCredito();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTarjetaCredito(false);
			
			//SI ES MANUAL
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualTarjetaCredito();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingTarjetaCredito(false);
			
			//SI ES MANUAL
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualTarjetaCredito();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaTarjetaCredito() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosTarjetaCredito.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosTarjetaCredito.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosTarjetaCredito.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosTarjetaCredito.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosTarjetaCredito.setMinimumSize(dimensionMinimum);
		this.jTableDatosTarjetaCredito.setMaximumSize(dimensionMaximum);
		this.jTableDatosTarjetaCredito.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingTarjetaCredito(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingTarjetaCredito(esInicializar,true);
	}
	
	public void inicializarActualizarBindingTarjetaCredito(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaTarjetaCredito(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesTarjetaCredito(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasTarjetaCredito(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesTarjetaCredito(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesTarjetaCredito(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualTarjetaCredito() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaTarjetaCredito();
		
		this.inicializarActualizarBindingBotonesManualTarjetaCredito(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualTarjetaCredito();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesTarjetaCredito() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualTarjetaCredito(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualTarjetaCredito(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosTarjetaCredito.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosTarjetaCredito.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteTarjetaCredito.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionNuevoTarjetaCredito.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionSinCerrarTarjetaCredito.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionSinMensajeTarjetaCredito.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosTarjetaCredito.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosTarjetaCredito.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteTarjetaCredito.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
				this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionNuevoTarjetaCredito.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionSinCerrarTarjetaCredito.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxPostAccionSinMensajeTarjetaCredito.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionTarjetaCredito.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionTarjetaCredito.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesTarjetaCredito.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesTarjetaCredito.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesTarjetaCredito.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarTarjetaCredito.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesTarjetaCredito.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesTarjetaCredito.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralTarjetaCredito.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesTarjetaCredito(Boolean esInicializar) throws Exception {
		try	{	
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualTarjetaCredito(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesTarjetaCredito() throws Exception {
		try	{
			if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualTarjetaCredito();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleTarjetaCredito() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualTarjetaCredito() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesTarjetaCredito.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesTarjetaCredito.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesTarjetaCredito.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionTarjetaCredito.addItem(reporte);
			}
			
			
			if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionTarjetaCredito.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionTarjetaCredito.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesTarjetaCredito.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesTarjetaCredito.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarTarjetaCredito.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarTarjetaCredito.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarTarjetaCredito.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTarjetaCredito();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualTarjetaCredito() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
				
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=TarjetaCreditoConstantesFunciones.getTiposSeleccionarTarjetaCredito(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=TarjetaCreditoConstantesFunciones.getTiposSeleccionarTarjetaCredito(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=TarjetaCreditoConstantesFunciones.getTiposSeleccionarTarjetaCredito(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoTarjetaCredito.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualTarjetaCredito()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.getSelectedItem()!=null){this.id_bancoFK_IdBanco=((Banco)this.jComboBoxid_bancoFK_IdBancoTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.getSelectedItem()!=null){this.id_cuenta_contableFK_IdCuentaContable=((CuentaContable)this.jComboBoxid_cuenta_contableFK_IdCuentaContableTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.getSelectedItem()!=null){this.id_cuenta_contable_comisionFK_IdCuentaContableComision=((CuentaContable)this.jComboBoxid_cuenta_contable_comisionFK_IdCuentaContableComisionTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.getSelectedItem()!=null){this.id_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia=((CuentaContable)this.jComboBoxid_cuenta_contable_diferenciaFK_IdCuentaContableDiferenciaTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.getSelectedItem()!=null){this.id_formula_comisionFK_IdFormulaComision=((Formula)this.jComboBoxid_formula_comisionFK_IdFormulaComisionTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.getSelectedItem()!=null){this.id_formula_pago_bancoFK_IdFormulaPagoBanco=((Formula)this.jComboBoxid_formula_pago_bancoFK_IdFormulaPagoBancoTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.getSelectedItem()!=null){this.id_formula_retencionFK_IdFormulaRetencion=((Formula)this.jComboBoxid_formula_retencionFK_IdFormulaRetencionTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.getSelectedItem()!=null){this.id_tipo_retencionFK_IdTipoRetencion=((TipoRetencion)this.jComboBoxid_tipo_retencionFK_IdTipoRetencionTarjetaCredito.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.getSelectedItem()!=null){this.id_tipo_retencion_ivaFK_IdTipoRetencionIva=((TipoRetencionIva)this.jComboBoxid_tipo_retencion_ivaFK_IdTipoRetencionIvaTarjetaCredito.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasTarjetaCredito(Boolean esInicializar) throws Exception {				
		if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualTarjetaCredito();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaTarjetaCredito() throws Exception {
		this.inicializarActualizarBindingTablaTarjetaCredito(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByTarjetaCredito() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosTarjetaCreditoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCreditoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaTarjetaCredito(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=tarjetacreditoLogic.getTarjetaCreditos().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=tarjetacreditos.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosTarjetaCredito.setModel(new TarjetaCreditoModel(this.tarjetacreditoLogic.getTarjetaCreditos(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosTarjetaCredito.setModel(new TarjetaCreditoModel(this.tarjetacreditos,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByTarjetaCredito!=null && this.jInternalFrameOrderByTarjetaCredito.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByTarjetaCredito();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+TarjetaCreditoConstantesFunciones.SCLASSWEBTITULO,tarjetacreditoConstantesFunciones.resaltarSeleccionarTarjetaCredito,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+TarjetaCreditoConstantesFunciones.SCLASSWEBTITULO,tarjetacreditoConstantesFunciones.resaltarSeleccionarTarjetaCredito,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_ID));

		if(this.tarjetacreditoConstantesFunciones.mostraridTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltaridTarjetaCredito,this.tarjetacreditoConstantesFunciones.activaridTarjetaCredito,iSizeTabla,this,true,"idTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltaridTarjetaCredito,this.tarjetacreditoConstantesFunciones.activaridTarjetaCredito,this,true,"idTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_empresaTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_empresaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_empresaTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_empresaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_empresaTarjetaCredito,false,"id_empresaTarjetaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_sucursalTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_sucursalTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_sucursalTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_sucursalTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_sucursalTarjetaCredito,false,"id_sucursalTarjetaCredito","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDBANCO));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_bancoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BancoTableCell(this.bancosForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_bancoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_bancoTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new BancoTableCell(this.bancosForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_bancoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_bancoTarjetaCredito,true,"id_bancoTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_CODIGO));

		if(this.tarjetacreditoConstantesFunciones.mostrarcodigoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_CODIGO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.tarjetacreditoConstantesFunciones.resaltarcodigoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcodigoTarjetaCredito,iSizeTabla,this,true,"codigoTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarcodigoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcodigoTarjetaCredito,this,true,"codigoTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_NOMBRE));

		if(this.tarjetacreditoConstantesFunciones.mostrarnombreTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.tarjetacreditoConstantesFunciones.resaltarnombreTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarnombreTarjetaCredito,iSizeTabla,this,true,"nombreTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarnombreTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarnombreTarjetaCredito,this,true,"nombreTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO));

		if(this.tarjetacreditoConstantesFunciones.mostrarnombre_cortoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.tarjetacreditoConstantesFunciones.resaltarnombre_cortoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarnombre_cortoTarjetaCredito,iSizeTabla,this,true,"nombre_cortoTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarnombre_cortoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarnombre_cortoTarjetaCredito,this,true,"nombre_cortoTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO));

		if(this.tarjetacreditoConstantesFunciones.mostrardigito_validoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltardigito_validoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activardigito_validoTarjetaCredito,iSizeTabla,this,true,"digito_validoTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltardigito_validoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activardigito_validoTarjetaCredito,this,true,"digito_validoTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA));

		if(this.tarjetacreditoConstantesFunciones.mostrardigito_tarjetaTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltardigito_tarjetaTarjetaCredito,this.tarjetacreditoConstantesFunciones.activardigito_tarjetaTarjetaCredito,iSizeTabla,this,true,"digito_tarjetaTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltardigito_tarjetaTarjetaCredito,this.tarjetacreditoConstantesFunciones.activardigito_tarjetaTarjetaCredito,this,true,"digito_tarjetaTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_COMISION));

		if(this.tarjetacreditoConstantesFunciones.mostrarcomisionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_COMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltarcomisionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcomisionTarjetaCredito,iSizeTabla,this,true,"comisionTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarcomisionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcomisionTarjetaCredito,this,true,"comisionTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_INTERES));

		if(this.tarjetacreditoConstantesFunciones.mostrarinteresTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_INTERES,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltarinteresTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarinteresTarjetaCredito,iSizeTabla,this,true,"interesTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarinteresTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarinteresTarjetaCredito,this,true,"interesTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO));

		if(this.tarjetacreditoConstantesFunciones.mostrarmonto_minimoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltarmonto_minimoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarmonto_minimoTarjetaCredito,iSizeTabla,this,true,"monto_minimoTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarmonto_minimoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarmonto_minimoTarjetaCredito,this,true,"monto_minimoTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION));

		if(this.tarjetacreditoConstantesFunciones.mostrarporcentaje_retencionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltarporcentaje_retencionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarporcentaje_retencionTarjetaCredito,iSizeTabla,this,true,"porcentaje_retencionTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarporcentaje_retencionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarporcentaje_retencionTarjetaCredito,this,true,"porcentaje_retencionTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION));

		if(this.tarjetacreditoConstantesFunciones.mostrarcomision_retencionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.tarjetacreditoConstantesFunciones.resaltarcomision_retencionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcomision_retencionTarjetaCredito,iSizeTabla,this,true,"comision_retencionTarjetaCredito","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltarcomision_retencionTarjetaCredito,this.tarjetacreditoConstantesFunciones.activarcomision_retencionTarjetaCredito,this,true,"comision_retencionTarjetaCredito","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO));

		if(this.tarjetacreditoConstantesFunciones.mostrares_retencion_redondeoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.tarjetacreditoConstantesFunciones.resaltares_retencion_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_retencion_redondeoTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltares_retencion_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_retencion_redondeoTarjetaCredito,this,true,"es_retencion_redondeoTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO));

		if(this.tarjetacreditoConstantesFunciones.mostrares_pago_banco_redondeoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.tarjetacreditoConstantesFunciones.resaltares_pago_banco_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_pago_banco_redondeoTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltares_pago_banco_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_pago_banco_redondeoTarjetaCredito,this,true,"es_pago_banco_redondeoTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO));

		if(this.tarjetacreditoConstantesFunciones.mostrares_comision_redondeoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.tarjetacreditoConstantesFunciones.resaltares_comision_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_comision_redondeoTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.tarjetacreditoConstantesFunciones.resaltares_comision_redondeoTarjetaCredito,this.tarjetacreditoConstantesFunciones.activares_comision_redondeoTarjetaCredito,this,true,"es_comision_redondeoTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_tipo_retencionTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionTableCell(this.tiporetencionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_tipo_retencionTarjetaCredito,true,"id_tipo_retencionTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contableTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contableTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contableTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablesForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contableTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contableTarjetaCredito,true,"id_cuenta_contableTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencion_ivaTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoRetencionIvaTableCell(this.tiporetencionivasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencion_ivaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_tipo_retencion_ivaTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new TipoRetencionIvaTableCell(this.tiporetencionivasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencion_ivaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_tipo_retencion_ivaTarjetaCredito,true,"id_tipo_retencion_ivaTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_comisionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablecomisionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_comisionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_comisionTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablecomisionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_comisionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_comisionTarjetaCredito,true,"id_cuenta_contable_comisionTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_formula_pago_bancoTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormulaTableCell(this.formulapagobancosForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_pago_bancoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_pago_bancoTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new FormulaTableCell(this.formulapagobancosForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_pago_bancoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_pago_bancoTarjetaCredito,true,"id_formula_pago_bancoTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_diferenciaTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CuentaContableTableCell(this.cuentacontablediferenciasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_diferenciaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_diferenciaTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new CuentaContableTableCell(this.cuentacontablediferenciasForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_diferenciaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_diferenciaTarjetaCredito,true,"id_cuenta_contable_diferenciaTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,70);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_formula_retencionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormulaTableCell(this.formularetencionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_retencionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_retencionTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new FormulaTableCell(this.formularetencionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_retencionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_retencionTarjetaCredito,true,"id_formula_retencionTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION));

		if(this.tarjetacreditoConstantesFunciones.mostrarid_formula_comisionTarjetaCredito && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormulaTableCell(this.formulacomisionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_comisionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_comisionTarjetaCredito,iSizeTabla));
			tableColumn.setCellEditor(new FormulaTableCell(this.formulacomisionsForeignKey,this.tarjetacreditoConstantesFunciones.resaltarid_formula_comisionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarid_formula_comisionTarjetaCredito,true,"id_formula_comisionTarjetaCredito","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new TarjetaCreditoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosTarjetaCreditoConexion && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoConexionTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Tarjeta Credito Conexiones");
				tableColumn.setHeaderValue("Tarjeta Credito Conexiones");
				tableColumn.setCellRenderer(new TarjetaCreditoConexionTableCell(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoConexionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoConexionTarjetaCredito));
				tableColumn.setCellEditor(new TarjetaCreditoConexionTableCell(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoConexionTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoConexionTarjetaCredito));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosTarjetaCredito.addColumn(tableColumn);
			}

			if(this.isTienePermisosTarjetaCreditoDescuento && this.tarjetacreditoConstantesFunciones.mostrarTarjetaCreditoDescuentoTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Tarjeta Credito Descuentos");
				tableColumn.setHeaderValue("Tarjeta Credito Descuentos");
				tableColumn.setCellRenderer(new TarjetaCreditoDescuentoTableCell(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoDescuentoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoDescuentoTarjetaCredito));
				tableColumn.setCellEditor(new TarjetaCreditoDescuentoTableCell(tarjetacreditoConstantesFunciones.resaltarTarjetaCreditoDescuentoTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarTarjetaCreditoDescuentoTarjetaCredito));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosTarjetaCredito.addColumn(tableColumn);
			}

			if(this.isTienePermisosFormaPagoPuntoVenta && this.tarjetacreditoConstantesFunciones.mostrarFormaPagoPuntoVentaTarjetaCredito && !TarjetaCreditoConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Forma Pagoes");
				tableColumn.setHeaderValue("Forma Pagoes");
				tableColumn.setCellRenderer(new FormaPagoPuntoVentaTableCell(tarjetacreditoConstantesFunciones.resaltarFormaPagoPuntoVentaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarFormaPagoPuntoVentaTarjetaCredito));
				tableColumn.setCellEditor(new FormaPagoPuntoVentaTableCell(tarjetacreditoConstantesFunciones.resaltarFormaPagoPuntoVentaTarjetaCredito,this,this.tarjetacreditoConstantesFunciones.activarFormaPagoPuntoVentaTarjetaCredito));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosTarjetaCredito.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosTarjetaCredito.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosTarjetaCredito.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosTarjetaCredito.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosTarjetaCredito.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosTarjetaCredito.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosTarjetaCredito.moveColumn(this.jTableDatosTarjetaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosTarjetaCredito.moveColumn(this.jTableDatosTarjetaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosTarjetaCredito.moveColumn(this.jTableDatosTarjetaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosTarjetaCredito.moveColumn(this.jTableDatosTarjetaCredito.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosTarjetaCredito.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosTarjetaCredito.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosTarjetaCredito,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosTarjetaCredito.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosTarjetaCredito.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosTarjetaCredito.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosTarjetaCredito.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosTarjetaCredito.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=tarjetacreditoLogic.getTarjetaCreditos().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=tarjetacreditos.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosTarjetaCredito.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosTarjetaCredito.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosTarjetaCredito();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoTarjetaCredito=false;
					
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
				if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormTarjetaCredito==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosTarjetaCredito.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.tarjetacredito.getsType().equals("DUPLICADO")
				   || this.tarjetacredito.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoTarjetaCredito=true;
				
				} else {
					this.isEsNuevoTarjetaCredito=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					if(this.tarjetacredito.getId()>=0 && !this.tarjetacredito.getIsNew()) {						
						this.isEsNuevoTarjetaCredito=false;
						
					} else {
						this.isEsNuevoTarjetaCredito=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoTarjetaCredito(esRelaciones);						
				
				this.seleccionarTarjetaCredito(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.tarjetacredito.getId()<0) {
					this.isEsNuevoTarjetaCredito=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarTarjetaCredito(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarTarjetaCredito(evt,rowIndex);
				}	
				
				if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion TarjetaCredito: " + this.dDif); 
					}
				}								
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarTarjetaCredito(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.tarjetacredito)) {
					if(this.tarjetacredito.getId()>0) {
						this.tarjetacredito.setIsDeleted(true);
						
						this.tarjetacreditosEliminados.add(this.tarjetacredito);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.tarjetacreditoLogic.getTarjetaCreditos().remove(this.tarjetacredito);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.tarjetacreditos.remove(this.tarjetacredito);				
					}
					
					
					((TarjetaCreditoModel) this.jTableDatosTarjetaCredito.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaTarjetaCredito(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarTarjetaCredito(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoTarjetaCredito) {
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosTarjetaCredito.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosTarjetaCredito.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioTarjetaCredito(this.tarjetacredito);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.tarjetacreditoConstantesFunciones.cargarid_empresaTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_empresaTarjetaCredito) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.tarjetacredito.getid_empresa());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(tarjetacredito.getEmpresa()!=null) {
							this.empresasForeignKey.add(tarjetacredito.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.tarjetacredito.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.tarjetacreditoConstantesFunciones.cargarid_sucursalTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_sucursalTarjetaCredito) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.tarjetacredito.getid_sucursal());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(tarjetacredito.getSucursal()!=null) {
							this.sucursalsForeignKey.add(tarjetacredito.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.tarjetacredito.getid_sucursal(),false,"Formulario");

					//Banco
					if(!this.tarjetacreditoConstantesFunciones.cargarid_bancoTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_bancoTarjetaCredito) {
						//this.cargarCombosBancosForeignKeyLista(" where id="+this.tarjetacredito.getid_banco());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.bancosForeignKey=new ArrayList<Banco>();

						if(tarjetacredito.getBanco()!=null) {
							this.bancosForeignKey.add(tarjetacredito.getBanco());
						}

						this.addItemDefectoCombosForeignKeyBanco();
						this.cargarCombosFrameBancosForeignKey("Todos");
					}
					this.setActualBancoForeignKey(this.tarjetacredito.getid_banco(),false,"Formulario");

					//TipoRetencion
					if(!this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencionTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_tipo_retencionTarjetaCredito) {
						//this.cargarCombosTipoRetencionsForeignKeyLista(" where id="+this.tarjetacredito.getid_tipo_retencion());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.tiporetencionsForeignKey=new ArrayList<TipoRetencion>();

						if(tarjetacredito.getTipoRetencion()!=null) {
							this.tiporetencionsForeignKey.add(tarjetacredito.getTipoRetencion());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencion();
						this.cargarCombosFrameTipoRetencionsForeignKey("Todos");
					}
					this.setActualTipoRetencionForeignKey(this.tarjetacredito.getid_tipo_retencion(),false,"Formulario");

					//CuentaContable
					if(!this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contableTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_cuenta_contableTarjetaCredito) {
						//this.cargarCombosCuentaContablesForeignKeyLista(" where id="+this.tarjetacredito.getid_cuenta_contable());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.cuentacontablesForeignKey=new ArrayList<CuentaContable>();

						if(tarjetacredito.getCuentaContable()!=null) {
							this.cuentacontablesForeignKey.add(tarjetacredito.getCuentaContable());
						}

						this.addItemDefectoCombosForeignKeyCuentaContable();
						this.cargarCombosFrameCuentaContablesForeignKey("Todos");
					}
					this.setActualCuentaContableForeignKey(this.tarjetacredito.getid_cuenta_contable(),false,"Formulario");

					//TipoRetencionIva
					if(!this.tarjetacreditoConstantesFunciones.cargarid_tipo_retencion_ivaTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_tipo_retencion_ivaTarjetaCredito) {
						//this.cargarCombosTipoRetencionIvasForeignKeyLista(" where id="+this.tarjetacredito.getid_tipo_retencion_iva());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.tiporetencionivasForeignKey=new ArrayList<TipoRetencionIva>();

						if(tarjetacredito.getTipoRetencionIva()!=null) {
							this.tiporetencionivasForeignKey.add(tarjetacredito.getTipoRetencionIva());
						}

						this.addItemDefectoCombosForeignKeyTipoRetencionIva();
						this.cargarCombosFrameTipoRetencionIvasForeignKey("Todos");
					}
					this.setActualTipoRetencionIvaForeignKey(this.tarjetacredito.getid_tipo_retencion_iva(),false,"Formulario");

					//CuentaContableComision
					if(!this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_comisionTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_cuenta_contable_comisionTarjetaCredito) {
						//this.cargarCombosCuentaContableComisionsForeignKeyLista(" where id="+this.tarjetacredito.getid_cuenta_contable_comision());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.cuentacontablecomisionsForeignKey=new ArrayList<CuentaContable>();

						if(tarjetacredito.getCuentaContableComision()!=null) {
							this.cuentacontablecomisionsForeignKey.add(tarjetacredito.getCuentaContableComision());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableComision();
						this.cargarCombosFrameCuentaContableComisionsForeignKey("Todos");
					}
					this.setActualCuentaContableComisionForeignKey(this.tarjetacredito.getid_cuenta_contable_comision(),false,"Formulario");

					//FormulaPagoBanco
					if(!this.tarjetacreditoConstantesFunciones.cargarid_formula_pago_bancoTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_formula_pago_bancoTarjetaCredito) {
						//this.cargarCombosFormulaPagoBancosForeignKeyLista(" where id="+this.tarjetacredito.getid_formula_pago_banco());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.formulapagobancosForeignKey=new ArrayList<Formula>();

						if(tarjetacredito.getFormulaPagoBanco()!=null) {
							this.formulapagobancosForeignKey.add(tarjetacredito.getFormulaPagoBanco());
						}

						this.addItemDefectoCombosForeignKeyFormulaPagoBanco();
						this.cargarCombosFrameFormulaPagoBancosForeignKey("Todos");
					}
					this.setActualFormulaPagoBancoForeignKey(this.tarjetacredito.getid_formula_pago_banco(),false,"Formulario");

					//CuentaContableDiferencia
					if(!this.tarjetacreditoConstantesFunciones.cargarid_cuenta_contable_diferenciaTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_cuenta_contable_diferenciaTarjetaCredito) {
						//this.cargarCombosCuentaContableDiferenciasForeignKeyLista(" where id="+this.tarjetacredito.getid_cuenta_contable_diferencia());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.cuentacontablediferenciasForeignKey=new ArrayList<CuentaContable>();

						if(tarjetacredito.getCuentaContableDiferencia()!=null) {
							this.cuentacontablediferenciasForeignKey.add(tarjetacredito.getCuentaContableDiferencia());
						}

						this.addItemDefectoCombosForeignKeyCuentaContableDiferencia();
						this.cargarCombosFrameCuentaContableDiferenciasForeignKey("Todos");
					}
					this.setActualCuentaContableDiferenciaForeignKey(this.tarjetacredito.getid_cuenta_contable_diferencia(),false,"Formulario");

					//FormulaRetencion
					if(!this.tarjetacreditoConstantesFunciones.cargarid_formula_retencionTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_formula_retencionTarjetaCredito) {
						//this.cargarCombosFormulaRetencionsForeignKeyLista(" where id="+this.tarjetacredito.getid_formula_retencion());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.formularetencionsForeignKey=new ArrayList<Formula>();

						if(tarjetacredito.getFormulaRetencion()!=null) {
							this.formularetencionsForeignKey.add(tarjetacredito.getFormulaRetencion());
						}

						this.addItemDefectoCombosForeignKeyFormulaRetencion();
						this.cargarCombosFrameFormulaRetencionsForeignKey("Todos");
					}
					this.setActualFormulaRetencionForeignKey(this.tarjetacredito.getid_formula_retencion(),false,"Formulario");

					//FormulaComision
					if(!this.tarjetacreditoConstantesFunciones.cargarid_formula_comisionTarjetaCredito || this.tarjetacreditoConstantesFunciones.event_dependid_formula_comisionTarjetaCredito) {
						//this.cargarCombosFormulaComisionsForeignKeyLista(" where id="+this.tarjetacredito.getid_formula_comision());
									//this.inicializarActualizarBindingTarjetaCredito(false,false);
						this.formulacomisionsForeignKey=new ArrayList<Formula>();

						if(tarjetacredito.getFormulaComision()!=null) {
							this.formulacomisionsForeignKey.add(tarjetacredito.getFormulaComision());
						}

						this.addItemDefectoCombosForeignKeyFormulaComision();
						this.cargarCombosFrameFormulaComisionsForeignKey("Todos");
					}
					this.setActualFormulaComisionForeignKey(this.tarjetacredito.getid_formula_comision(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesTarjetaCredito("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesTarjetaCredito(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualTarjetaCredito() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoTarjetaCredito(TarjetaCredito tarjetacredito) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoTarjetaCredito(tarjetacredito,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoTarjetaCredito(TarjetaCredito tarjetacredito,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioTarjetaCredito(tarjetacredito);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyTarjetaCredito(tarjetacredito,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyTarjetaCredito(tarjetacredito);
	}
	
	public void setVariablesObjetoActualToFormularioTarjetaCredito(TarjetaCredito tarjetacredito) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setText(tarjetacredito.getId().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setText(tarjetacredito.getcodigo());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setText(tarjetacredito.getnombre());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setText(tarjetacredito.getnombre_corto());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setText(tarjetacredito.getdigito_valido().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setText(tarjetacredito.getdigito_tarjeta().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setText(tarjetacredito.getcomision().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setText(tarjetacredito.getinteres().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setText(tarjetacredito.getmonto_minimo().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setText(tarjetacredito.getporcentaje_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setText(tarjetacredito.getcomision_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_retencion_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_pago_banco_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_comision_redondeo());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,TarjetaCredito tarjetacreditoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,tarjetacreditoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,TarjetaCredito tarjetacreditoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				tarjetacreditoLocal=this.tarjetacredito;
			} else {
				tarjetacreditoLocal=this.tarjetacreditoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(tarjetacreditoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoTarjetaCredito(tarjetacreditoLocal,true);
					
					if(tarjetacreditoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(tarjetacreditoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(tarjetacreditoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoTarjetaCredito(TarjetaCredito tarjetacredito,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualTarjetaCredito(tarjetacredito,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(tarjetacredito);
	}
	
	public void setVariablesFormularioToObjetoActualTarjetaCredito(TarjetaCredito tarjetacredito,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualTarjetaCredito(tarjetacredito,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualTarjetaCredito(TarjetaCredito tarjetacredito,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.getText()==null || this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.getText()=="" || this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.getText()=="Id") {
				this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setText("0");
			}

			if(conColumnasBase) {tarjetacredito.setId(Long.parseLong(this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelIdTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setcodigo(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_CODIGO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcodigoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setnombre(this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombreTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setnombre_corto(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelnombre_cortoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setdigito_valido(Integer.parseInt(this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_validoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setdigito_tarjeta(Integer.parseInt(this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeldigito_tarjetaTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setcomision(Double.parseDouble(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_COMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomisionTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setinteres(Double.parseDouble(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_INTERES+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelinteresTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setmonto_minimo(Double.parseDouble(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelmonto_minimoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setporcentaje_retencion(Double.parseDouble(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelporcentaje_retencionTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setcomision_retencion(Double.parseDouble(this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabelcomision_retencionTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setes_retencion_redondeo(this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_retencion_redondeoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setes_pago_banco_redondeo(this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_pago_banco_redondeoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			tarjetacredito.setes_comision_redondeo(this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormTarjetaCredito.jLabeles_comision_redondeoTarjetaCredito,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualTarjetaCredito(TarjetaCredito tarjetacreditoBean,TarjetaCredito tarjetacredito,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_banco()!=null && !tarjetacreditoBean.getid_banco().equals(-1L))) {tarjetacredito.setid_banco(tarjetacreditoBean.getid_banco());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_tipo_retencion()!=null && !tarjetacreditoBean.getid_tipo_retencion().equals(-1L))) {tarjetacredito.setid_tipo_retencion(tarjetacreditoBean.getid_tipo_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_cuenta_contable()!=null && !tarjetacreditoBean.getid_cuenta_contable().equals(-1L))) {tarjetacredito.setid_cuenta_contable(tarjetacreditoBean.getid_cuenta_contable());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_tipo_retencion_iva()!=null && !tarjetacreditoBean.getid_tipo_retencion_iva().equals(-1L))) {tarjetacredito.setid_tipo_retencion_iva(tarjetacreditoBean.getid_tipo_retencion_iva());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_cuenta_contable_comision()!=null && !tarjetacreditoBean.getid_cuenta_contable_comision().equals(-1L))) {tarjetacredito.setid_cuenta_contable_comision(tarjetacreditoBean.getid_cuenta_contable_comision());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_formula_pago_banco()!=null && !tarjetacreditoBean.getid_formula_pago_banco().equals(-1L))) {tarjetacredito.setid_formula_pago_banco(tarjetacreditoBean.getid_formula_pago_banco());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_cuenta_contable_diferencia()!=null && !tarjetacreditoBean.getid_cuenta_contable_diferencia().equals(-1L))) {tarjetacredito.setid_cuenta_contable_diferencia(tarjetacreditoBean.getid_cuenta_contable_diferencia());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_formula_retencion()!=null && !tarjetacreditoBean.getid_formula_retencion().equals(-1L))) {tarjetacredito.setid_formula_retencion(tarjetacreditoBean.getid_formula_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoBean.getid_formula_comision()!=null && !tarjetacreditoBean.getid_formula_comision().equals(-1L))) {tarjetacredito.setid_formula_comision(tarjetacreditoBean.getid_formula_comision());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosTarjetaCredito(TarjetaCredito tarjetacreditoOrigen,TarjetaCredito tarjetacredito,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && tarjetacreditoOrigen.getId()!=null && !tarjetacreditoOrigen.getId().equals(0L))) {tarjetacredito.setId(tarjetacreditoOrigen.getId());}}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_banco()!=null && !tarjetacreditoOrigen.getid_banco().equals(-1L))) {tarjetacredito.setid_banco(tarjetacreditoOrigen.getid_banco());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getcodigo()!=null && !tarjetacreditoOrigen.getcodigo().equals(""))) {tarjetacredito.setcodigo(tarjetacreditoOrigen.getcodigo());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getnombre()!=null && !tarjetacreditoOrigen.getnombre().equals(""))) {tarjetacredito.setnombre(tarjetacreditoOrigen.getnombre());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getnombre_corto()!=null && !tarjetacreditoOrigen.getnombre_corto().equals(""))) {tarjetacredito.setnombre_corto(tarjetacreditoOrigen.getnombre_corto());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getdigito_valido()!=null && !tarjetacreditoOrigen.getdigito_valido().equals(0))) {tarjetacredito.setdigito_valido(tarjetacreditoOrigen.getdigito_valido());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getdigito_tarjeta()!=null && !tarjetacreditoOrigen.getdigito_tarjeta().equals(0))) {tarjetacredito.setdigito_tarjeta(tarjetacreditoOrigen.getdigito_tarjeta());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getcomision()!=null && !tarjetacreditoOrigen.getcomision().equals(0.0))) {tarjetacredito.setcomision(tarjetacreditoOrigen.getcomision());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getinteres()!=null && !tarjetacreditoOrigen.getinteres().equals(0.0))) {tarjetacredito.setinteres(tarjetacreditoOrigen.getinteres());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getmonto_minimo()!=null && !tarjetacreditoOrigen.getmonto_minimo().equals(0.0))) {tarjetacredito.setmonto_minimo(tarjetacreditoOrigen.getmonto_minimo());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getporcentaje_retencion()!=null && !tarjetacreditoOrigen.getporcentaje_retencion().equals(0.0))) {tarjetacredito.setporcentaje_retencion(tarjetacreditoOrigen.getporcentaje_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getcomision_retencion()!=null && !tarjetacreditoOrigen.getcomision_retencion().equals(0.0))) {tarjetacredito.setcomision_retencion(tarjetacreditoOrigen.getcomision_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getes_retencion_redondeo()!=null && !tarjetacreditoOrigen.getes_retencion_redondeo().equals(false))) {tarjetacredito.setes_retencion_redondeo(tarjetacreditoOrigen.getes_retencion_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getes_pago_banco_redondeo()!=null && !tarjetacreditoOrigen.getes_pago_banco_redondeo().equals(false))) {tarjetacredito.setes_pago_banco_redondeo(tarjetacreditoOrigen.getes_pago_banco_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getes_comision_redondeo()!=null && !tarjetacreditoOrigen.getes_comision_redondeo().equals(false))) {tarjetacredito.setes_comision_redondeo(tarjetacreditoOrigen.getes_comision_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_tipo_retencion()!=null && !tarjetacreditoOrigen.getid_tipo_retencion().equals(-1L))) {tarjetacredito.setid_tipo_retencion(tarjetacreditoOrigen.getid_tipo_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_cuenta_contable()!=null && !tarjetacreditoOrigen.getid_cuenta_contable().equals(-1L))) {tarjetacredito.setid_cuenta_contable(tarjetacreditoOrigen.getid_cuenta_contable());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_tipo_retencion_iva()!=null && !tarjetacreditoOrigen.getid_tipo_retencion_iva().equals(-1L))) {tarjetacredito.setid_tipo_retencion_iva(tarjetacreditoOrigen.getid_tipo_retencion_iva());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_cuenta_contable_comision()!=null && !tarjetacreditoOrigen.getid_cuenta_contable_comision().equals(-1L))) {tarjetacredito.setid_cuenta_contable_comision(tarjetacreditoOrigen.getid_cuenta_contable_comision());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_formula_pago_banco()!=null && !tarjetacreditoOrigen.getid_formula_pago_banco().equals(-1L))) {tarjetacredito.setid_formula_pago_banco(tarjetacreditoOrigen.getid_formula_pago_banco());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_cuenta_contable_diferencia()!=null && !tarjetacreditoOrigen.getid_cuenta_contable_diferencia().equals(-1L))) {tarjetacredito.setid_cuenta_contable_diferencia(tarjetacreditoOrigen.getid_cuenta_contable_diferencia());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_formula_retencion()!=null && !tarjetacreditoOrigen.getid_formula_retencion().equals(-1L))) {tarjetacredito.setid_formula_retencion(tarjetacreditoOrigen.getid_formula_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoOrigen.getid_formula_comision()!=null && !tarjetacreditoOrigen.getid_formula_comision().equals(-1L))) {tarjetacredito.setid_formula_comision(tarjetacreditoOrigen.getid_formula_comision());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioTarjetaCredito(TarjetaCredito tarjetacredito) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setText(tarjetacredito.getId().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setText(tarjetacredito.getcodigo());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setText(tarjetacredito.getnombre());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setText(tarjetacredito.getnombre_corto());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setText(tarjetacredito.getdigito_valido().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setText(tarjetacredito.getdigito_tarjeta().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setText(tarjetacredito.getcomision().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setText(tarjetacredito.getinteres().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setText(tarjetacredito.getmonto_minimo().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setText(tarjetacredito.getporcentaje_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setText(tarjetacredito.getcomision_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_retencion_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_pago_banco_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setSelected(tarjetacredito.getes_comision_redondeo());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioTarjetaCredito(TarjetaCreditoBean tarjetacreditoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setText(tarjetacreditoBean.getId().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setText(tarjetacreditoBean.getcodigo());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setText(tarjetacreditoBean.getnombre());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setText(tarjetacreditoBean.getnombre_corto());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setText(tarjetacreditoBean.getdigito_valido().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setText(tarjetacreditoBean.getdigito_tarjeta().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setText(tarjetacreditoBean.getcomision().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setText(tarjetacreditoBean.getinteres().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setText(tarjetacreditoBean.getmonto_minimo().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setText(tarjetacreditoBean.getporcentaje_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setText(tarjetacreditoBean.getcomision_retencion().toString());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setSelected(tarjetacreditoBean.getes_retencion_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setSelected(tarjetacreditoBean.getes_pago_banco_redondeo());
			this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setSelected(tarjetacreditoBean.getes_comision_redondeo());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanTarjetaCredito(TarjetaCreditoParameterReturnGeneral tarjetacreditoReturnGeneral,TarjetaCreditoBean tarjetacreditoBean,Boolean conDefault) throws Exception { 
		try {
			TarjetaCredito tarjetacreditoLocal=new TarjetaCredito();
			
			tarjetacreditoLocal=tarjetacreditoReturnGeneral.getTarjetaCredito();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && tarjetacreditoLocal.getId()!=null && !tarjetacreditoLocal.getId().equals(0L))) {tarjetacreditoBean.setId(tarjetacreditoLocal.getId());}}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_banco()!=null && !tarjetacreditoLocal.getid_banco().equals(-1L))) {tarjetacreditoBean.setid_banco(tarjetacreditoLocal.getid_banco());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getcodigo()!=null && !tarjetacreditoLocal.getcodigo().equals(""))) {tarjetacreditoBean.setcodigo(tarjetacreditoLocal.getcodigo());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getnombre()!=null && !tarjetacreditoLocal.getnombre().equals(""))) {tarjetacreditoBean.setnombre(tarjetacreditoLocal.getnombre());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getnombre_corto()!=null && !tarjetacreditoLocal.getnombre_corto().equals(""))) {tarjetacreditoBean.setnombre_corto(tarjetacreditoLocal.getnombre_corto());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getdigito_valido()!=null && !tarjetacreditoLocal.getdigito_valido().equals(0))) {tarjetacreditoBean.setdigito_valido(tarjetacreditoLocal.getdigito_valido());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getdigito_tarjeta()!=null && !tarjetacreditoLocal.getdigito_tarjeta().equals(0))) {tarjetacreditoBean.setdigito_tarjeta(tarjetacreditoLocal.getdigito_tarjeta());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getcomision()!=null && !tarjetacreditoLocal.getcomision().equals(0.0))) {tarjetacreditoBean.setcomision(tarjetacreditoLocal.getcomision());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getinteres()!=null && !tarjetacreditoLocal.getinteres().equals(0.0))) {tarjetacreditoBean.setinteres(tarjetacreditoLocal.getinteres());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getmonto_minimo()!=null && !tarjetacreditoLocal.getmonto_minimo().equals(0.0))) {tarjetacreditoBean.setmonto_minimo(tarjetacreditoLocal.getmonto_minimo());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getporcentaje_retencion()!=null && !tarjetacreditoLocal.getporcentaje_retencion().equals(0.0))) {tarjetacreditoBean.setporcentaje_retencion(tarjetacreditoLocal.getporcentaje_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getcomision_retencion()!=null && !tarjetacreditoLocal.getcomision_retencion().equals(0.0))) {tarjetacreditoBean.setcomision_retencion(tarjetacreditoLocal.getcomision_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getes_retencion_redondeo()!=null && !tarjetacreditoLocal.getes_retencion_redondeo().equals(false))) {tarjetacreditoBean.setes_retencion_redondeo(tarjetacreditoLocal.getes_retencion_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getes_pago_banco_redondeo()!=null && !tarjetacreditoLocal.getes_pago_banco_redondeo().equals(false))) {tarjetacreditoBean.setes_pago_banco_redondeo(tarjetacreditoLocal.getes_pago_banco_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getes_comision_redondeo()!=null && !tarjetacreditoLocal.getes_comision_redondeo().equals(false))) {tarjetacreditoBean.setes_comision_redondeo(tarjetacreditoLocal.getes_comision_redondeo());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_tipo_retencion()!=null && !tarjetacreditoLocal.getid_tipo_retencion().equals(-1L))) {tarjetacreditoBean.setid_tipo_retencion(tarjetacreditoLocal.getid_tipo_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_cuenta_contable()!=null && !tarjetacreditoLocal.getid_cuenta_contable().equals(-1L))) {tarjetacreditoBean.setid_cuenta_contable(tarjetacreditoLocal.getid_cuenta_contable());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_tipo_retencion_iva()!=null && !tarjetacreditoLocal.getid_tipo_retencion_iva().equals(-1L))) {tarjetacreditoBean.setid_tipo_retencion_iva(tarjetacreditoLocal.getid_tipo_retencion_iva());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_cuenta_contable_comision()!=null && !tarjetacreditoLocal.getid_cuenta_contable_comision().equals(-1L))) {tarjetacreditoBean.setid_cuenta_contable_comision(tarjetacreditoLocal.getid_cuenta_contable_comision());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_formula_pago_banco()!=null && !tarjetacreditoLocal.getid_formula_pago_banco().equals(-1L))) {tarjetacreditoBean.setid_formula_pago_banco(tarjetacreditoLocal.getid_formula_pago_banco());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_cuenta_contable_diferencia()!=null && !tarjetacreditoLocal.getid_cuenta_contable_diferencia().equals(-1L))) {tarjetacreditoBean.setid_cuenta_contable_diferencia(tarjetacreditoLocal.getid_cuenta_contable_diferencia());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_formula_retencion()!=null && !tarjetacreditoLocal.getid_formula_retencion().equals(-1L))) {tarjetacreditoBean.setid_formula_retencion(tarjetacreditoLocal.getid_formula_retencion());}
			if(conDefault || (!conDefault && tarjetacreditoLocal.getid_formula_comision()!=null && !tarjetacreditoLocal.getid_formula_comision().equals(-1L))) {tarjetacreditoBean.setid_formula_comision(tarjetacreditoLocal.getid_formula_comision());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxTarjetaCreditoGenerico(Long idTarjetaCreditoSeleccionado,JComboBox jComboBoxTarjetaCredito,List<TarjetaCredito> tarjetacreditosLocal)throws Exception {
		try {
			TarjetaCredito  tarjetacreditoTemp=null;

			for(TarjetaCredito tarjetacreditoAux:tarjetacreditosLocal) {
				if(tarjetacreditoAux.getId()!=null && tarjetacreditoAux.getId().equals(idTarjetaCreditoSeleccionado)) {
					tarjetacreditoTemp=tarjetacreditoAux;
					break;
				}
			}

			jComboBoxTarjetaCredito.setSelectedItem(tarjetacreditoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxTarjetaCreditoGenerico(JComboBox jComboBoxTarjetaCredito,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxTarjetaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxTarjetaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxTarjetaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxTarjetaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxTarjetaCredito.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxTarjetaCredito.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxTarjetaCredito.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxTarjetaCredito.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxTarjetaCredito.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxTarjetaCredito.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("TarjetaCreditoConexion")) {
			jButtonTarjetaCreditoConexionActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("TarjetaCreditoDescuento")) {
			jButtonTarjetaCreditoDescuentoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("FormaPagoPuntoVenta")) {
			jButtonFormaPagoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tarjetacredito=(TarjetaCredito) tarjetacreditoLogic.getTarjetaCreditos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			tarjetacredito =(TarjetaCredito) tarjetacreditos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Banco")) {
			//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getbanco_descripcion();
			} else {
				//sDescripcion=this.getActualBancoForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getbanco_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencion")) {
			//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.gettiporetencion_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.gettiporetencion_descripcion();
			}
		}

		if(sTipo.equals("CuentaContable")) {
			//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getcuentacontable_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getcuentacontable_descripcion();
			}
		}

		if(sTipo.equals("TipoRetencionIva")) {
			//sDescripcion=this.getActualTipoRetencionIvaForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.gettiporetencioniva_descripcion();
			} else {
				//sDescripcion=this.getActualTipoRetencionIvaForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.gettiporetencioniva_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableComision")) {
			//sDescripcion=this.getActualCuentaContableComisionForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getcuentacontablecomision_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableComisionForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getcuentacontablecomision_descripcion();
			}
		}

		if(sTipo.equals("FormulaPagoBanco")) {
			//sDescripcion=this.getActualFormulaPagoBancoForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getformulapagobanco_descripcion();
			} else {
				//sDescripcion=this.getActualFormulaPagoBancoForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getformulapagobanco_descripcion();
			}
		}

		if(sTipo.equals("CuentaContableDiferencia")) {
			//sDescripcion=this.getActualCuentaContableDiferenciaForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getcuentacontablediferencia_descripcion();
			} else {
				//sDescripcion=this.getActualCuentaContableDiferenciaForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getcuentacontablediferencia_descripcion();
			}
		}

		if(sTipo.equals("FormulaRetencion")) {
			//sDescripcion=this.getActualFormulaRetencionForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getformularetencion_descripcion();
			} else {
				//sDescripcion=this.getActualFormulaRetencionForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getformularetencion_descripcion();
			}
		}

		if(sTipo.equals("FormulaComision")) {
			//sDescripcion=this.getActualFormulaComisionForeignKeyDescripcion((Long)value);
			if(!tarjetacredito.getIsNew() && !tarjetacredito.getIsChanged() && !tarjetacredito.getIsDeleted()) {
				sDescripcion=tarjetacredito.getformulacomision_descripcion();
			} else {
				//sDescripcion=this.getActualFormulaComisionForeignKeyDescripcion((Long)value);
				sDescripcion=tarjetacredito.getformulacomision_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		TarjetaCredito tarjetacreditoRow=new TarjetaCredito();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tarjetacreditoRow=(TarjetaCredito) tarjetacreditoLogic.getTarjetaCreditos().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			tarjetacreditoRow=(TarjetaCredito) tarjetacreditos.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonTarjetaCreditoConexionActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,TarjetaCredito tarjetacredito) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormTarjetaCredito==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(tarjetacredito!=null) {
						this.tarjetacredito = tarjetacredito;
					} else {
						this.tarjetacredito = new TarjetaCredito();
					}
				}

				if(this.isTienePermisosTarjetaCreditoConexion && this.permiteMantenimiento(this.tarjetacredito)) {
					TarjetaCreditoConexionBeanSwingJInternalFrame tarjetacreditoconexionBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup=new TarjetaCreditoConexionBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						tarjetacreditoconexionBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup;
					} else {
						tarjetacreditoconexionBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame;
					}

					List<TarjetaCredito> tarjetacreditos=new ArrayList<TarjetaCredito>();
					tarjetacreditos.add(this.tarjetacredito);
					if(!esRelacionado) {
						//tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.setConGuardarRelaciones(false);
						//tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					tarjetacreditoconexionBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormTarjetaCredito.cargarTarjetaCreditoConexionBeanSwingJInternalFrame(tarjetacreditos,this.tarjetacredito,tarjetacreditoconexionBeanSwingJInternalFrame,/*conInicializar,*/tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.getConGuardarRelaciones(),tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionSessionBean.getEsGuardarRelacionado());
					tarjetacreditoconexionBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						tarjetacreditoconexionBeanSwingJInternalFrame.actualizarEstadoPanelsTarjetaCreditoConexion("no_relacionado");

						tarjetacreditoconexionBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(TarjetaCreditoConexionConstantesFunciones.ITAMANIOFILATABLA + (TarjetaCreditoConexionConstantesFunciones.ITAMANIOFILATABLA/2));

						tarjetacreditoconexionBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderTarjetaCreditoConexion=(TitledBorder)tarjetacreditoconexionBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoConexion.getBorder();

						titledBorderTarjetaCreditoConexion.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Tarjeta Credito Conexion");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,tarjetacreditoconexionBeanSwingJInternalFrame);
						}

						tarjetacreditoconexionBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(tarjetacreditoconexionBeanSwingJInternalFrame);

						tarjetacreditoconexionBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Tarjeta Credito Conexion",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonTarjetaCreditoDescuentoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,TarjetaCredito tarjetacredito) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormTarjetaCredito==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(tarjetacredito!=null) {
						this.tarjetacredito = tarjetacredito;
					} else {
						this.tarjetacredito = new TarjetaCredito();
					}
				}

				if(this.isTienePermisosTarjetaCreditoDescuento && this.permiteMantenimiento(this.tarjetacredito)) {
					TarjetaCreditoDescuentoBeanSwingJInternalFrame tarjetacreditodescuentoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup=new TarjetaCreditoDescuentoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						tarjetacreditodescuentoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup;
					} else {
						tarjetacreditodescuentoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame;
					}

					List<TarjetaCredito> tarjetacreditos=new ArrayList<TarjetaCredito>();
					tarjetacreditos.add(this.tarjetacredito);
					if(!esRelacionado) {
						//tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.setConGuardarRelaciones(false);
						//tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					tarjetacreditodescuentoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormTarjetaCredito.cargarTarjetaCreditoDescuentoBeanSwingJInternalFrame(tarjetacreditos,this.tarjetacredito,tarjetacreditodescuentoBeanSwingJInternalFrame,/*conInicializar,*/tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.getConGuardarRelaciones(),tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoSessionBean.getEsGuardarRelacionado());
					tarjetacreditodescuentoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						tarjetacreditodescuentoBeanSwingJInternalFrame.actualizarEstadoPanelsTarjetaCreditoDescuento("no_relacionado");

						tarjetacreditodescuentoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(TarjetaCreditoDescuentoConstantesFunciones.ITAMANIOFILATABLA + (TarjetaCreditoDescuentoConstantesFunciones.ITAMANIOFILATABLA/2));

						tarjetacreditodescuentoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderTarjetaCreditoDescuento=(TitledBorder)tarjetacreditodescuentoBeanSwingJInternalFrame.jScrollPanelDatosTarjetaCreditoDescuento.getBorder();

						titledBorderTarjetaCreditoDescuento.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Tarjeta Credito Descuento");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,tarjetacreditodescuentoBeanSwingJInternalFrame);
						}

						tarjetacreditodescuentoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(tarjetacreditodescuentoBeanSwingJInternalFrame);

						tarjetacreditodescuentoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Tarjeta Credito Descuento",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonFormaPagoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,TarjetaCredito tarjetacredito) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormTarjetaCredito==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.tarjetacredito = (TarjetaCredito)this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(tarjetacredito!=null) {
						this.tarjetacredito = tarjetacredito;
					} else {
						this.tarjetacredito = new TarjetaCredito();
					}
				}

				if(this.isTienePermisosFormaPagoPuntoVenta && this.permiteMantenimiento(this.tarjetacredito)) {
					FormaPagoPuntoVentaBeanSwingJInternalFrame formapagopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup=new FormaPagoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						formapagopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup;
					} else {
						formapagopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame;
					}

					List<TarjetaCredito> tarjetacreditos=new ArrayList<TarjetaCredito>();
					tarjetacreditos.add(this.tarjetacredito);
					if(!esRelacionado) {
						//formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setConGuardarRelaciones(false);
						//formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					formapagopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormTarjetaCredito.cargarFormaPagoPuntoVentaBeanSwingJInternalFrame(tarjetacreditos,this.tarjetacredito,formapagopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getConGuardarRelaciones(),formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado());
					formapagopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						formapagopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsFormaPagoPuntoVenta("no_relacionado");

						formapagopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(FormaPagoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (FormaPagoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						formapagopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
						TitledBorder titledBorderFormaPagoPuntoVenta=(TitledBorder)formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.getBorder();

						titledBorderFormaPagoPuntoVenta.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Forma Pago");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,formapagopuntoventaBeanSwingJInternalFrame);
						}

						formapagopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(formapagopuntoventaBeanSwingJInternalFrame);

						formapagopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Forma Pago",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualTarjetaCredito(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito));			
			this.jButtonDuplicarTarjetaCredito.setVisible((this.isVisibilidadCeldaDuplicarTarjetaCredito && this.isPermisoDuplicarTarjetaCredito));			
			this.jButtonCopiarTarjetaCredito.setVisible((this.isVisibilidadCeldaCopiarTarjetaCredito && this.isPermisoCopiarTarjetaCredito));
			this.jButtonVerFormTarjetaCredito.setVisible((this.isVisibilidadCeldaVerFormTarjetaCredito && this.isPermisoVerFormTarjetaCredito));
			
			this.jButtonAbrirOrderByTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));			
			
			this.jButtonNuevoRelacionesTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito && this.isPermisoNuevoTarjetaCredito));			
			this.jButtonNuevoGuardarCambiosTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarTarjetaCredito.setVisible((this.isVisibilidadCeldaModificarTarjetaCredito && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.setVisible((this.isVisibilidadCeldaActualizarTarjetaCredito && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.setVisible((this.isVisibilidadCeldaEliminarTarjetaCredito && this.isPermisoEliminarTarjetaCredito));
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.setVisible(this.isVisibilidadCeldaCancelarTarjetaCredito);							
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));			
			
			}
						
			this.jButtonGuardarCambiosTablaTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito));						
			this.jButtonDuplicarToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaDuplicarTarjetaCredito && this.isPermisoDuplicarTarjetaCredito));						
			this.jButtonCopiarToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaCopiarTarjetaCredito && this.isPermisoCopiarTarjetaCredito));			
			this.jButtonVerFormToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaVerFormTarjetaCredito && this.isPermisoVerFormTarjetaCredito));			
			this.jButtonAbrirOrderByToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));
			this.jButtonNuevoRelacionesToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito && this.isPermisoNuevoTarjetaCredito));			
			this.jButtonNuevoGuardarCambiosToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));			
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaModificarTarjetaCredito && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaActualizarTarjetaCredito  && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaEliminarTarjetaCredito && this.isPermisoEliminarTarjetaCredito));
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarToolBarTarjetaCredito.setVisible(this.isVisibilidadCeldaCancelarTarjetaCredito);				
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito));			
			this.jMenuItemDuplicarTarjetaCredito.setVisible((this.isVisibilidadCeldaDuplicarTarjetaCredito && this.isPermisoDuplicarTarjetaCredito));			
			this.jMenuItemCopiarTarjetaCredito.setVisible((this.isVisibilidadCeldaCopiarTarjetaCredito && this.isPermisoCopiarTarjetaCredito));			
			this.jMenuItemVerFormTarjetaCredito.setVisible((this.isVisibilidadCeldaVerFormTarjetaCredito && this.isPermisoVerFormTarjetaCredito));			
			this.jMenuItemAbrirOrderByTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));			
			//this.jMenuItemMostrarOcultarTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));
			this.jMenuItemDetalleAbrirOrderByTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));			
			//this.jMenuItemDetalleMostrarOcultarTarjetaCredito.setVisible((this.isVisibilidadCeldaOrdenTarjetaCredito && this.isPermisoOrdenTarjetaCredito));			
			this.jMenuItemNuevoRelacionesTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito && this.isPermisoNuevoTarjetaCredito));			
			this.jMenuItemNuevoGuardarCambiosTarjetaCredito.setVisible((this.isVisibilidadCeldaNuevoTarjetaCredito && this.isPermisoNuevoTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));									
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemModificarTarjetaCredito.setVisible((this.isVisibilidadCeldaModificarTarjetaCredito && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemActualizarTarjetaCredito.setVisible((this.isVisibilidadCeldaActualizarTarjetaCredito && this.isPermisoActualizarTarjetaCredito));	
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemEliminarTarjetaCredito.setVisible((this.isVisibilidadCeldaEliminarTarjetaCredito && this.isPermisoEliminarTarjetaCredito));
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemCancelarTarjetaCredito.setVisible(this.isVisibilidadCeldaCancelarTarjetaCredito);				
			}
			
			this.jMenuItemGuardarCambiosTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));						
			this.jMenuItemGuardarCambiosTablaTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarCambiosTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoTarjetaCredito=this.jButtonNuevoTarjetaCredito.isVisible();
			this.isVisibilidadCeldaDuplicarTarjetaCredito=this.jButtonDuplicarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaCopiarTarjetaCredito=this.jButtonCopiarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaVerFormTarjetaCredito=this.jButtonVerFormTarjetaCredito.isVisible();
			
			this.isVisibilidadCeldaOrdenTarjetaCredito=this.jButtonAbrirOrderByTarjetaCredito.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=this.jButtonNuevoRelacionesTarjetaCredito.isVisible();
			this.isVisibilidadCeldaModificarTarjetaCredito=this.jButtonModificarTarjetaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.isVisibilidadCeldaActualizarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaEliminarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaCancelarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaGuardarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=this.jButtonGuardarCambiosTablaTarjetaCredito.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoTarjetaCredito=this.jButtonNuevoToolBarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=this.jButtonNuevoRelacionesToolBarTarjetaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.isVisibilidadCeldaModificarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarToolBarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaActualizarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarToolBarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaEliminarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarToolBarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaCancelarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarToolBarTarjetaCredito.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarTarjetaCredito=this.jButtonGuardarCambiosToolBarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=this.jButtonGuardarCambiosTablaToolBarTarjetaCredito.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoTarjetaCredito=this.jMenuItemNuevoTarjetaCredito.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=this.jMenuItemNuevoRelacionesTarjetaCredito.isVisible();
			
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.isVisibilidadCeldaModificarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemModificarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaActualizarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemActualizarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaEliminarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemEliminarTarjetaCredito.isVisible();
			this.isVisibilidadCeldaCancelarTarjetaCredito=this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemCancelarTarjetaCredito.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarTarjetaCredito=this.jMenuItemGuardarCambiosTarjetaCredito.isVisible();
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=this.jMenuItemGuardarCambiosTablaTarjetaCredito.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesTarjetaCredito(Boolean esInicializar) {
		if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
				//if(this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesTarjetaCredito();
			}
			
			this.inicializarActualizarBindingBotonesManualTarjetaCredito(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualTarjetaCredito() {
		this.jButtonNuevoTarjetaCredito.setVisible(this.isPermisoNuevoTarjetaCredito);			
		this.jButtonDuplicarTarjetaCredito.setVisible(this.isPermisoDuplicarTarjetaCredito);			
		this.jButtonCopiarTarjetaCredito.setVisible(this.isPermisoCopiarTarjetaCredito);			
		this.jButtonVerFormTarjetaCredito.setVisible(this.isPermisoVerFormTarjetaCredito);			
		
		this.jButtonAbrirOrderByTarjetaCredito.setVisible(this.isPermisoOrdenTarjetaCredito);					
		
		this.jButtonNuevoRelacionesTarjetaCredito.setVisible(this.isPermisoNuevoTarjetaCredito);			
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarTarjetaCredito.setVisible(this.isPermisoActualizarTarjetaCredito);	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.setVisible(this.isPermisoActualizarTarjetaCredito);	
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.setVisible(this.isPermisoEliminarTarjetaCredito);
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.setVisible(this.isVisibilidadCeldaCancelarTarjetaCredito);						
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.setVisible(this.isPermisoGuardarCambiosTarjetaCredito);							
		}
		
		this.jButtonGuardarCambiosTablaTarjetaCredito.setVisible(this.isPermisoActualizarTarjetaCredito);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleTarjetaCredito() {
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarTarjetaCredito.setVisible(this.isPermisoActualizarTarjetaCredito);	
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.setVisible(this.isPermisoActualizarTarjetaCredito);	
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.setVisible(this.isPermisoEliminarTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.setVisible(this.isVisibilidadCeldaCancelarTarjetaCredito);							
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.setVisible((this.isVisibilidadCeldaGuardarTarjetaCredito && this.isPermisoGuardarCambiosTarjetaCredito));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosTarjetaCredito() {
		if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualTarjetaCredito();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesTarjetaCredito() {
	}
	
	public void jTableDatosTarjetaCreditoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarTarjetaCredito(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.tarjetacredito.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.tarjetacredito.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.tarjetacredito.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bancoTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobanco=true;

			idTienePermisobanco=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(BancoConstantesFunciones.CLASSNAME);

			if(idTienePermisobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.bancoBeanSwingJInternalFrame=new BancoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bancoBeanSwingJInternalFrame.getBancoLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_banco()!=null) {
					this.bancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bancoBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_banco());
					this.bancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaBanco();
				}

				JInternalFrameBase jinternalFrame =this.bancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBorderbanco=(TitledBorder)this.bancoBeanSwingJInternalFrame.jScrollPanelDatosBanco.getBorder();

				titledBorderbanco.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Banco");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bancoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_banco = "+this.tarjetacredito.getid_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getcodigo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo like '%"+this.tarjetacredito.getcodigo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.tarjetacredito.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_cortoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getnombre_corto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_corto like '%"+this.tarjetacredito.getnombre_corto()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondigito_validoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getdigito_valido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where digito_valido = "+this.tarjetacredito.getdigito_valido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondigito_tarjetaTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getdigito_tarjeta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where digito_tarjeta = "+this.tarjetacredito.getdigito_tarjeta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncomisionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getcomision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where comision = "+this.tarjetacredito.getcomision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoninteresTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getinteres()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where interes = "+this.tarjetacredito.getinteres().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonmonto_minimoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getmonto_minimo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where monto_minimo = "+this.tarjetacredito.getmonto_minimo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentaje_retencionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getporcentaje_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje_retencion = "+this.tarjetacredito.getporcentaje_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncomision_retencionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getcomision_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where comision_retencion = "+this.tarjetacredito.getcomision_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_retencion_redondeoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getes_retencion_redondeo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_retencion_redondeo = "+this.tarjetacredito.getes_retencion_redondeo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_pago_banco_redondeoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getes_pago_banco_redondeo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_pago_banco_redondeo = "+this.tarjetacredito.getes_pago_banco_redondeo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtones_comision_redondeoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getes_comision_redondeo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where es_comision_redondeo = "+this.tarjetacredito.getes_comision_redondeo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencionTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencion=true;

			idTienePermisotiporetencion=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(TipoRetencionConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.tiporetencionBeanSwingJInternalFrame=new TipoRetencionBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionBeanSwingJInternalFrame.getTipoRetencionLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_tipo_retencion()!=null) {
					this.tiporetencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_tipo_retencion());
					this.tiporetencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencion();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordertiporetencion=(TitledBorder)this.tiporetencionBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencion.getBorder();

				titledBordertiporetencion.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Tipo Retencion ");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_tipo_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion = "+this.tarjetacredito.getid_tipo_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contableTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontable=true;

			idTienePermisocuentacontable=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.cuentacontableBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontableBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_cuenta_contable()!=null) {
					this.cuentacontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontableBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_cuenta_contable());
					this.cuentacontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordercuentacontable=(TitledBorder)this.cuentacontableBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontable.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contableTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_cuenta_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable = "+this.tarjetacredito.getid_cuenta_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_retencion_ivaTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotiporetencioniva=true;

			idTienePermisotiporetencioniva=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(TipoRetencionIvaConstantesFunciones.CLASSNAME);

			if(idTienePermisotiporetencioniva) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.tiporetencionivaBeanSwingJInternalFrame=new TipoRetencionIvaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tiporetencionivaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tiporetencionivaBeanSwingJInternalFrame.getTipoRetencionIvaLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_tipo_retencion_iva()!=null) {
					this.tiporetencionivaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tiporetencionivaBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_tipo_retencion_iva());
					this.tiporetencionivaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tiporetencionivaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tiporetencionivaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoRetencionIva();
				}

				JInternalFrameBase jinternalFrame =this.tiporetencionivaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordertiporetencioniva=(TitledBorder)this.tiporetencionivaBeanSwingJInternalFrame.jScrollPanelDatosTipoRetencionIva.getBorder();

				titledBordertiporetencioniva.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Tipo Retencion Iva");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_retencion_ivaTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_tipo_retencion_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_retencion_iva = "+this.tarjetacredito.getid_tipo_retencion_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_comisionTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablecomision=true;

			idTienePermisocuentacontablecomision=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablecomision) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.cuentacontablecomisionBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablecomisionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablecomisionBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_cuenta_contable_comision()!=null) {
					this.cuentacontablecomisionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablecomisionBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_cuenta_contable_comision());
					this.cuentacontablecomisionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablecomisionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablecomisionBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablecomisionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordercuentacontablecomision=(TitledBorder)this.cuentacontablecomisionBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablecomision.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_comisionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_cuenta_contable_comision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_comision = "+this.tarjetacredito.getid_cuenta_contable_comision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formula_pago_bancoTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformulapagobanco=true;

			idTienePermisoformulapagobanco=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(FormulaConstantesFunciones.CLASSNAME);

			if(idTienePermisoformulapagobanco) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.formulapagobancoBeanSwingJInternalFrame=new FormulaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formulapagobancoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formulapagobancoBeanSwingJInternalFrame.getFormulaLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_formula_pago_banco()!=null) {
					this.formulapagobancoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formulapagobancoBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_formula_pago_banco());
					this.formulapagobancoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formulapagobancoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formulapagobancoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormula();
				}

				JInternalFrameBase jinternalFrame =this.formulapagobancoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBorderformulapagobanco=(TitledBorder)this.formulapagobancoBeanSwingJInternalFrame.jScrollPanelDatosFormula.getBorder();

				titledBorderformulapagobanco.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Formula");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formula_pago_bancoTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_formula_pago_banco()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formula_pago_banco = "+this.tarjetacredito.getid_formula_pago_banco().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocuentacontablediferencia=true;

			idTienePermisocuentacontablediferencia=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(CuentaContableConstantesFunciones.CLASSNAME);

			if(idTienePermisocuentacontablediferencia) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.cuentacontablediferenciaBeanSwingJInternalFrame=new CuentaContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cuentacontablediferenciaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cuentacontablediferenciaBeanSwingJInternalFrame.getCuentaContableLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_cuenta_contable_diferencia()!=null) {
					this.cuentacontablediferenciaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cuentacontablediferenciaBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_cuenta_contable_diferencia());
					this.cuentacontablediferenciaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cuentacontablediferenciaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cuentacontablediferenciaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCuentaContable();
				}

				JInternalFrameBase jinternalFrame =this.cuentacontablediferenciaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBordercuentacontablediferencia=(TitledBorder)this.cuentacontablediferenciaBeanSwingJInternalFrame.jScrollPanelDatosCuentaContable.getBorder();

				titledBordercuentacontablediferencia.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Cuenta Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_cuenta_contable_diferencia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cuenta_contable_diferencia = "+this.tarjetacredito.getid_cuenta_contable_diferencia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formula_retencionTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformularetencion=true;

			idTienePermisoformularetencion=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(FormulaConstantesFunciones.CLASSNAME);

			if(idTienePermisoformularetencion) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.formularetencionBeanSwingJInternalFrame=new FormulaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formularetencionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formularetencionBeanSwingJInternalFrame.getFormulaLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_formula_retencion()!=null) {
					this.formularetencionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formularetencionBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_formula_retencion());
					this.formularetencionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formularetencionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formularetencionBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormula();
				}

				JInternalFrameBase jinternalFrame =this.formularetencionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBorderformularetencion=(TitledBorder)this.formularetencionBeanSwingJInternalFrame.jScrollPanelDatosFormula.getBorder();

				titledBorderformularetencion.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Formula");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formula_retencionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_formula_retencion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formula_retencion = "+this.tarjetacredito.getid_formula_retencion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formula_comisionTarjetaCreditoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformulacomision=true;

			idTienePermisoformulacomision=this.tienePermisosUsuarioEnPaginaWebTarjetaCredito(FormulaConstantesFunciones.CLASSNAME);

			if(idTienePermisoformulacomision) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosTarjetaCredito.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosTarjetaCredito.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);

				this.formulacomisionBeanSwingJInternalFrame=new FormulaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formulacomisionBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formulacomisionBeanSwingJInternalFrame.getFormulaLogic().setConnexion(this.tarjetacreditoLogic.getConnexion());

				if(this.tarjetacredito.getid_formula_comision()!=null) {
					this.formulacomisionBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formulacomisionBeanSwingJInternalFrame.setIdActual(this.tarjetacredito.getid_formula_comision());
					this.formulacomisionBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formulacomisionBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formulacomisionBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormula();
				}

				JInternalFrameBase jinternalFrame =this.formulacomisionBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderTarjetaCredito=(TitledBorder)this.jScrollPanelDatosTarjetaCredito.getBorder();
				TitledBorder titledBorderformulacomision=(TitledBorder)this.formulacomisionBeanSwingJInternalFrame.jScrollPanelDatosFormula.getBorder();

				titledBorderformulacomision.setTitle(titledBorderTarjetaCredito.getTitle() + " -> Formula");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formula_comisionTarjetaCreditoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.gettarjetacredito(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.tarjetacredito==null) {
						this.tarjetacredito = new TarjetaCredito();
					}

					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);
				}

				if(this.tarjetacredito.getid_formula_comision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formula_comision = "+this.tarjetacredito.getid_formula_comision().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingTarjetaCredito(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBancoTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdBanco();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdCuentaContable();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableComisionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdCuentaContableComision();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCuentaContableDiferenciaTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdCuentaContableDiferencia();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdEmpresa();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormulaComisionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdFormulaComision();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormulaPagoBancoTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdFormulaPagoBanco();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormulaRetencionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdFormulaRetencion();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdSucursal();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdTipoRetencion();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoRetencionIvaTarjetaCreditoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingTarjetaCredito(false,false);

			this.getTarjetaCreditosFK_IdTipoRetencionIva();

			this.inicializarActualizarBindingTarjetaCredito(false);

			//if(TarjetaCreditoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingTarjetaCredito(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.tarjetacreditoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameTarjetaCredito() {
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
		

		if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
			this.jInternalFrameDetalleFormTarjetaCredito.setVisible(false);	    			
			this.jInternalFrameDetalleFormTarjetaCredito.dispose();
			this.jInternalFrameDetalleFormTarjetaCredito=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
			this.jInternalFrameReporteDinamicoTarjetaCredito.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoTarjetaCredito.dispose();
			this.jInternalFrameReporteDinamicoTarjetaCredito=null;
		}
		
		if(this.jInternalFrameImportacionTarjetaCredito!=null) {
			this.jInternalFrameImportacionTarjetaCredito.setVisible(false);	    			
			this.jInternalFrameImportacionTarjetaCredito.dispose();
			this.jInternalFrameImportacionTarjetaCredito=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessTarjetaCredito();
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			
			if(sTipo.equals("NuevoTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarTarjetaCredito")) {
				jButtonDuplicarTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarTarjetaCredito")) {
				jButtonCopiarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("VerFormTarjetaCredito")) {
				jButtonVerFormTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarTarjetaCredito")) {
				jButtonDuplicarTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarTarjetaCredito")) {
				jButtonDuplicarTarjetaCreditoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarTarjetaCredito")) {
				jButtonModificarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarTarjetaCredito")) {
				jButtonModificarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarTarjetaCredito")) {
				jButtonModificarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarTarjetaCredito")) {
				jButtonActualizarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarTarjetaCredito")) {
				jButtonActualizarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarTarjetaCredito")) {
				jButtonActualizarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("EliminarTarjetaCredito")) {
				jButtonEliminarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarTarjetaCredito")) {
				jButtonEliminarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarTarjetaCredito")) {
				jButtonEliminarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CancelarTarjetaCredito")) {
				jButtonCancelarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarTarjetaCredito")) {
				jButtonCancelarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarTarjetaCredito")) {
				jButtonCancelarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CerrarTarjetaCredito")) {
				jButtonCerrarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarTarjetaCredito")) {
				jButtonCerrarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarTarjetaCredito")) {
				jButtonCerrarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarTarjetaCredito")) {
				jButtonMostrarOcultarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarTarjetaCredito")) {
				jButtonCancelarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarTarjetaCredito")) {
				jButtonCopiarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarTarjetaCredito")) {
				jButtonVerFormTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarTarjetaCredito")) {
				jButtonCopiarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormTarjetaCredito")) {
				jButtonVerFormTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionTarjetaCredito")) {
				jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarTarjetaCredito")) {
				jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionTarjetaCredito")) {
				jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresTarjetaCredito")) {
				jButtonAnterioresTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarTarjetaCredito")) {
				jButtonAnterioresTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreTarjetaCredito")) {
				jButtonAnterioresTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesTarjetaCredito")) {
				jButtonSiguientesTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarTarjetaCredito")) {
				jButtonSiguientesTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesTarjetaCredito")) {
				jButtonSiguientesTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByTarjetaCredito") || sTipo.equals("MenuItemDetalleAbrirOrderByTarjetaCredito")) {
				jButtonAbrirOrderByTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarTarjetaCredito") || sTipo.equals("MenuItemDetalleMostrarOcultarTarjetaCredito")) {
				jButtonMostrarOcultarTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosTarjetaCredito")) {
				jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarTarjetaCredito")) {
				jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosTarjetaCredito")) {
				jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoTarjetaCredito")) {
				jButtonCerrarReporteDinamicoTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoTarjetaCredito")) {
				jButtonGenerarReporteDinamicoTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoTarjetaCredito")) {
				
				jButtonGenerarExcelReporteDinamicoTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionTarjetaCredito")) {
				jButtonCerrarImportacionTarjetaCreditoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionTarjetaCredito")) {
				
				jButtonGenerarImportacionTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionTarjetaCredito")) {
				
				jButtonAbrirImportacionTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesTarjetaCredito")) {
				jComboBoxTiposAccionesTarjetaCreditoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesTarjetaCredito")) {
				jComboBoxTiposRelacionesTarjetaCreditoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioTarjetaCredito")) {
				jComboBoxTiposAccionesTarjetaCreditoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarTarjetaCredito")) {
				
				jComboBoxTiposSeleccionarTarjetaCreditoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralTarjetaCredito")) {
				jTextFieldValorCampoGeneralTarjetaCreditoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByTarjetaCredito")) {
				jButtonAbrirOrderByTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarTarjetaCredito")) {
				jButtonAbrirOrderByTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByTarjetaCredito")) {
				jButtonCerrarOrderByTarjetaCreditoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idTarjetaCreditoBusqueda")) {
				this.jButtonidTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaTarjetaCreditoUpdate")) {
				this.jButtonid_empresaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaTarjetaCreditoBusqueda")) {
				this.jButtonid_empresaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalTarjetaCreditoUpdate")) {
				this.jButtonid_sucursalTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalTarjetaCreditoBusqueda")) {
				this.jButtonid_sucursalTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoTarjetaCreditoUpdate")) {
				this.jButtonid_bancoTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoTarjetaCreditoBusqueda")) {
				this.jButtonid_bancoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoTarjetaCreditoBusqueda")) {
				this.jButtoncodigoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreTarjetaCreditoBusqueda")) {
				this.jButtonnombreTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_cortoTarjetaCreditoBusqueda")) {
				this.jButtonnombre_cortoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("digito_validoTarjetaCreditoBusqueda")) {
				this.jButtondigito_validoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("digito_tarjetaTarjetaCreditoBusqueda")) {
				this.jButtondigito_tarjetaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comisionTarjetaCreditoBusqueda")) {
				this.jButtoncomisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("interesTarjetaCreditoBusqueda")) {
				this.jButtoninteresTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_minimoTarjetaCreditoBusqueda")) {
				this.jButtonmonto_minimoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_retencionTarjetaCreditoBusqueda")) {
				this.jButtonporcentaje_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comision_retencionTarjetaCreditoBusqueda")) {
				this.jButtoncomision_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencion_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_retencion_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_pago_banco_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_pago_banco_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_comision_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_comision_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionTarjetaCreditoUpdate")) {
				this.jButtonid_tipo_retencionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionTarjetaCreditoBusqueda")) {
				this.jButtonid_tipo_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contableTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contableTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_ivaTarjetaCreditoUpdate")) {
				this.jButtonid_tipo_retencion_ivaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_ivaTarjetaCreditoBusqueda")) {
				this.jButtonid_tipo_retencion_ivaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_comisionTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contable_comisionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_comisionTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contable_comisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_pago_bancoTarjetaCreditoUpdate")) {
				this.jButtonid_formula_pago_bancoTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_pago_bancoTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_pago_bancoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_diferenciaTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_diferenciaTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_retencionTarjetaCreditoUpdate")) {
				this.jButtonid_formula_retencionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_retencionTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_comisionTarjetaCreditoUpdate")) {
				this.jButtonid_formula_comisionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_comisionTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_comisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdBancoTarjetaCredito")) {
				this.jButtonFK_IdBancoTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableTarjetaCredito")) {
				this.jButtonFK_IdCuentaContableTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableComisionTarjetaCredito")) {
				this.jButtonFK_IdCuentaContableComisionTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCuentaContableDiferenciaTarjetaCredito")) {
				this.jButtonFK_IdCuentaContableDiferenciaTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormulaComisionTarjetaCredito")) {
				this.jButtonFK_IdFormulaComisionTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormulaPagoBancoTarjetaCredito")) {
				this.jButtonFK_IdFormulaPagoBancoTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormulaRetencionTarjetaCredito")) {
				this.jButtonFK_IdFormulaRetencionTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionTarjetaCredito")) {
				this.jButtonFK_IdTipoRetencionTarjetaCreditoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoRetencionIvaTarjetaCredito")) {
				this.jButtonFK_IdTipoRetencionIvaTarjetaCreditoActionPerformed(evt);
			}
			
			;
			
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessTarjetaCredito();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			TarjetaCredito tarjetacreditoLocal=null;
			
			if(!this.getEsControlTabla()) {
				tarjetacreditoLocal=this.tarjetacredito;
			} else {
				tarjetacreditoLocal=this.tarjetacreditoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
							
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
								
						
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
								
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
							
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
								
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
			
			this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosTarjetaCredito")) {
					jCheckBoxSeleccionarTodosTarjetaCreditoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosTarjetaCredito")) {
					jCheckBoxSeleccionadosTarjetaCreditoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarTarjetaCredito")) {
					
				}
				
				


				
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
												
				
				


				
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaTarjetaCreditoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.tarjetacredito);
				
				this.actualizarInformacion("INFO_PADRE",false,this.tarjetacredito);
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(TarjetaCredito.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",TarjetaCredito.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaTarjetaCreditoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.tarjetacreditoAnterior =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarTarjetaCredito")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosTarjetaCreditoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosTarjetaCredito.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.tarjetacredito =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.tarjetacredito =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.tarjetacredito);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarTarjetaCredito")) {
				
				}
				
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarTarjetaCredito")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosTarjetaCredito.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarTarjetaCredito")) {
			
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessTarjetaCredito();
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			if(sTipo.equals("NuevoTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarTarjetaCredito")) {
				jButtonDuplicarTarjetaCreditoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarTarjetaCredito")) {
				jButtonCopiarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormTarjetaCredito")) {
				jButtonVerFormTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesTarjetaCredito")) {
				jButtonNuevoTarjetaCreditoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarTarjetaCredito")) {
				jButtonModificarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarTarjetaCredito")) {
				jButtonActualizarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarTarjetaCredito")) {
				jButtonEliminarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarTarjetaCredito")) {
				jButtonCancelarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarTarjetaCredito")) {
				jButtonCerrarTarjetaCreditoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTarjetaCredito")) {
				jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosTarjetaCredito")) {
				jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByTarjetaCredito")) {
				jButtonAbrirOrderByTarjetaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionTarjetaCredito")) {
				jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresTarjetaCredito")) {
				jButtonAnterioresTarjetaCreditoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesTarjetaCredito")) {
				jButtonSiguientesTarjetaCreditoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idTarjetaCreditoBusqueda")) {
				this.jButtonidTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaTarjetaCreditoUpdate")) {
				this.jButtonid_empresaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaTarjetaCreditoBusqueda")) {
				this.jButtonid_empresaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalTarjetaCreditoUpdate")) {
				this.jButtonid_sucursalTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalTarjetaCreditoBusqueda")) {
				this.jButtonid_sucursalTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bancoTarjetaCreditoUpdate")) {
				this.jButtonid_bancoTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bancoTarjetaCreditoBusqueda")) {
				this.jButtonid_bancoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigoTarjetaCreditoBusqueda")) {
				this.jButtoncodigoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreTarjetaCreditoBusqueda")) {
				this.jButtonnombreTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_cortoTarjetaCreditoBusqueda")) {
				this.jButtonnombre_cortoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("digito_validoTarjetaCreditoBusqueda")) {
				this.jButtondigito_validoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("digito_tarjetaTarjetaCreditoBusqueda")) {
				this.jButtondigito_tarjetaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comisionTarjetaCreditoBusqueda")) {
				this.jButtoncomisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("interesTarjetaCreditoBusqueda")) {
				this.jButtoninteresTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("monto_minimoTarjetaCreditoBusqueda")) {
				this.jButtonmonto_minimoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentaje_retencionTarjetaCreditoBusqueda")) {
				this.jButtonporcentaje_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("comision_retencionTarjetaCreditoBusqueda")) {
				this.jButtoncomision_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_retencion_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_retencion_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_pago_banco_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_pago_banco_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("es_comision_redondeoTarjetaCreditoBusqueda")) {
				this.jButtones_comision_redondeoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencionTarjetaCreditoUpdate")) {
				this.jButtonid_tipo_retencionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencionTarjetaCreditoBusqueda")) {
				this.jButtonid_tipo_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contableTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contableTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contableTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contableTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_retencion_ivaTarjetaCreditoUpdate")) {
				this.jButtonid_tipo_retencion_ivaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_retencion_ivaTarjetaCreditoBusqueda")) {
				this.jButtonid_tipo_retencion_ivaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_comisionTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contable_comisionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_comisionTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contable_comisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_pago_bancoTarjetaCreditoUpdate")) {
				this.jButtonid_formula_pago_bancoTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_pago_bancoTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_pago_bancoTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cuenta_contable_diferenciaTarjetaCreditoUpdate")) {
				this.jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cuenta_contable_diferenciaTarjetaCreditoBusqueda")) {
				this.jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_retencionTarjetaCreditoUpdate")) {
				this.jButtonid_formula_retencionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_retencionTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_retencionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formula_comisionTarjetaCreditoUpdate")) {
				this.jButtonid_formula_comisionTarjetaCreditoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formula_comisionTarjetaCreditoBusqueda")) {
				this.jButtonid_formula_comisionTarjetaCreditoBusquedaActionPerformed(evt);
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessTarjetaCredito();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameTarjetaCredito")) {
				closingInternalFrameTarjetaCredito();
				
			} else if(sTipo.equals("jButtonCancelarTarjetaCredito")) {
				JInternalFrameBase jInternalFrameDetalleFormTarjetaCredito = (JInternalFrameBase)evt.getSource();
	            	
	            TarjetaCreditoBeanSwingJInternalFrame jInternalFrameParent=(TarjetaCreditoBeanSwingJInternalFrame)jInternalFrameDetalleFormTarjetaCredito.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarTarjetaCreditoActionPerformed(null);
			}
			
			TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.tarjetacredito,new Object(),this.tarjetacreditoParameterGeneral,this.tarjetacreditoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormTarjetaCredito(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormTarjetaCredito(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormTarjetaCredito(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.tarjetacredito)) {
			if(!esControlTabla) {
				if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);			
				}
				
				if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualTarjetaCredito(this.tarjetacredito,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.tarjetacreditoReturnGeneral=tarjetacreditoLogic.procesarEventosTarjetaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.tarjetacreditoLogic.getTarjetaCreditos(),this.tarjetacredito,this.tarjetacreditoParameterGeneral,this.isEsNuevoTarjetaCredito,classes);//this.tarjetacreditoLogic.getTarjetaCredito()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanTarjetaCredito(this.tarjetacreditoReturnGeneral,this.tarjetacreditoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanTarjetaCredito(classes,this.tarjetacreditoReturnGeneral,this.tarjetacreditoBean,false);
					}
						
					if(this.tarjetacreditoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito());	
					}
						
					if(this.tarjetacreditoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito(),classes);//this.tarjetacreditoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioTarjetaCredito(this.tarjetacredito,classes);//this.tarjetacreditoBean);									
				}
			
				if(TarjetaCreditoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualTarjetaCredito(this.tarjetacredito,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysTarjetaCredito(this.tarjetacredito);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.tarjetacreditoAnterior!=null) {
						this.tarjetacredito=this.tarjetacreditoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.tarjetacreditoReturnGeneral=tarjetacreditoLogic.procesarEventosTarjetaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.tarjetacreditoLogic.getTarjetaCreditos(),this.tarjetacredito,this.tarjetacreditoParameterGeneral,this.isEsNuevoTarjetaCredito,classes);//this.tarjetacreditoLogic.getTarjetaCredito()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.tarjetacreditoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.tarjetacreditoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.tarjetacreditoReturnGeneral.getTarjetaCredito(),tarjetacreditoLogic.getTarjetaCreditos());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.tarjetacreditoReturnGeneral.getTarjetaCredito(),this.tarjetacreditos);
				}
				//ARCHITECTURE
				
				//this.jTableDatosTarjetaCredito.repaint();
				
				//((AbstractTableModel) this.jTableDatosTarjetaCredito.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosTarjetaCredito();
			}
		}
	}
	
	public void actualizarVisualTableDatosTarjetaCredito() throws Exception {
		
		TarjetaCreditoModel tarjetacreditoModel=(TarjetaCreditoModel)this.jTableDatosTarjetaCredito.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tarjetacreditoModel.tarjetacreditos=this.tarjetacreditoLogic.getTarjetaCreditos();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			tarjetacreditoModel.tarjetacreditos=this.tarjetacreditos;
		}
		
		
		((TarjetaCreditoModel) this.jTableDatosTarjetaCredito.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaTarjetaCredito() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.gettarjetacreditoAnterior(),this.tarjetacreditoLogic.getTarjetaCreditos());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.gettarjetacreditoAnterior(),this.tarjetacreditos);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosTarjetaCredito();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioTarjetaCredito(TarjetaCredito tarjetacredito,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoConexion.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.setTarjetaCreditoConexions(tarjetacredito.getTarjetaCreditoConexions());
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTarjetaCreditoConexion(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoDescuento.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.setTarjetaCreditoDescuentos(tarjetacredito.getTarjetaCreditoDescuentos());
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTarjetaCreditoDescuento(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(tarjetacredito.getFormaPagoPuntoVentas());
					this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormaPagoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.tarjetacredito,new Object(),generalEntityParameterGeneral,this.tarjetacreditoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.tarjetacreditoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=TarjetaCreditoConstantesFunciones.getClassesRelationshipsOfTarjetaCredito(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=TarjetaCreditoConstantesFunciones.getClassesRelationshipsFromStringsOfTarjetaCredito(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormTarjetaCredito(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				TarjetaCreditoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.tarjetacredito,new Object(),generalEntityParameterGeneral,this.tarjetacreditoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioTarjetaCredito(TarjetaCreditoBean tarjetacreditoBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoConexion.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.setTarjetaCreditoConexions(tarjetacredito.getTarjetaCreditoConexions());
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.inicializarActualizarBindingTablaTarjetaCreditoConexion(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoDescuento.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.setTarjetaCreditoDescuentos(tarjetacredito.getTarjetaCreditoDescuentos());
					this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.inicializarActualizarBindingTablaTarjetaCreditoDescuento(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(tarjetacredito.getFormaPagoPuntoVentas());
					this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormaPagoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanTarjetaCredito(ArrayList<Classe> classes,TarjetaCreditoReturnGeneral tarjetacreditoReturnGeneral,TarjetaCreditoBean tarjetacreditoBean,Boolean conDefault) throws Exception {
		
			this.tarjetacreditoBean.setTarjetaCreditoConexions(tarjetacreditoReturnGeneral.getTarjetaCredito().getTarjetaCreditoConexions());
			this.tarjetacreditoBean.setTarjetaCreditoDescuentos(tarjetacreditoReturnGeneral.getTarjetaCredito().getTarjetaCreditoDescuentos());
			this.tarjetacreditoBean.setFormaPagoPuntoVentas(tarjetacreditoReturnGeneral.getTarjetaCredito().getFormaPagoPuntoVentas());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualTarjetaCredito(TarjetaCredito tarjetacredito,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoConexion.class)) {
					tarjetacredito.setTarjetaCreditoConexions(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionBeanSwingJInternalFrame.tarjetacreditoconexionLogic.getTarjetaCreditoConexions());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(TarjetaCreditoDescuento.class)) {
					tarjetacredito.setTarjetaCreditoDescuentos(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoBeanSwingJInternalFrame.tarjetacreditodescuentoLogic.getTarjetaCreditoDescuentos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					tarjetacredito.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.tarjetacredito)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormTarjetaCredito = new TarjetaCreditoDetalleFormJInternalFrame(jDesktopPane,this.tarjetacreditoSessionBean.getConGuardarRelaciones(),this.tarjetacreditoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.setVisible(false);
		this.jInternalFrameDetalleFormTarjetaCredito.setSelected(false);						
		
		this.jInternalFrameDetalleFormTarjetaCredito.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoLogic=this.tarjetacreditoLogic;
		
		this.cargarCombosFrameForeignKeyTarjetaCredito("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleTarjetaCredito();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleTarjetaCredito();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyTarjetaCredito("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyTarjetaCredito();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormTarjetaCredito.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarTarjetaCredito"));
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ModificarTarjetaCredito"));

		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ModificarToolBarTarjetaCredito"));
					
		this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemModificarTarjetaCredito.addActionListener(new ButtonActionListener(this,"MenuItemModificarTarjetaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.addActionListener (new ButtonActionListener(this,"ActualizarTarjetaCredito"));
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ActualizarToolBarTarjetaCredito"));
						
		this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemActualizarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemActualizarTarjetaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.addActionListener (new ButtonActionListener(this,"EliminarTarjetaCredito"));
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"EliminarToolBarTarjetaCredito"));
								
		this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemEliminarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemEliminarTarjetaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CancelarTarjetaCredito"));
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CancelarToolBarTarjetaCredito"));
					
		this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemCancelarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCancelarTarjetaCredito"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemDetalleCerrarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarTarjetaCredito"));		
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTarjetaCredito"));
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTarjetaCredito"));
		
		
		
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioTarjetaCredito"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonidTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncodigoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombreTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombreTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombre_cortoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_cortoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_validoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_validoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_tarjetaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_tarjetaTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comisionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoninteresTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"interesTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonmonto_minimoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"monto_minimoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonporcentaje_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomision_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comision_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_retencion_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_pago_banco_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_pago_banco_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_comision_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_comision_redondeoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesTarjetaCredito"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameTarjetaCredito"));
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarTarjetaCredito"));
		}
		
		this.jTableDatosTarjetaCredito.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarTarjetaCredito"));
		
		this.jTableDatosTarjetaCredito.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarTarjetaCredito"));
		
		this.jButtonNuevoTarjetaCredito.addActionListener(new ButtonActionListener(this,"NuevoTarjetaCredito"));
		
		this.jButtonDuplicarTarjetaCredito.addActionListener(new ButtonActionListener(this,"DuplicarTarjetaCredito"));
		
		this.jButtonCopiarTarjetaCredito.addActionListener(new ButtonActionListener(this,"CopiarTarjetaCredito"));
		
		this.jButtonVerFormTarjetaCredito.addActionListener(new ButtonActionListener(this,"VerFormTarjetaCredito"));
		
		
		this.jButtonNuevoToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"NuevoToolBarTarjetaCredito"));
			
		this.jButtonDuplicarToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"DuplicarToolBarTarjetaCredito"));
			
		this.jMenuItemNuevoTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemNuevoTarjetaCredito"));
			
		this.jMenuItemDuplicarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarTarjetaCredito"));		
		
		
		this.jButtonNuevoRelacionesTarjetaCredito.addActionListener (new ButtonActionListener(this,"NuevoRelacionesTarjetaCredito"));
		
		
		this.jButtonNuevoRelacionesToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarTarjetaCredito"));
			
		this.jMenuItemNuevoRelacionesTarjetaCredito.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesTarjetaCredito"));		
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ModificarTarjetaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonModificarToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ModificarToolBarTarjetaCredito"));
			
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemModificarTarjetaCredito.addActionListener(new ButtonActionListener(this,"MenuItemModificarTarjetaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarTarjetaCredito.addActionListener (new ButtonActionListener(this,"ActualizarTarjetaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonActualizarToolBarTarjetaCredito.addActionListener(new ButtonActionListener(this,"ActualizarToolBarTarjetaCredito"));
				
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemActualizarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemActualizarTarjetaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarTarjetaCredito.addActionListener (new ButtonActionListener(this,"EliminarTarjetaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonEliminarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"EliminarToolBarTarjetaCredito"));
						
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemEliminarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemEliminarTarjetaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CancelarTarjetaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonCancelarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CancelarToolBarTarjetaCredito"));
			
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemCancelarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCancelarTarjetaCredito"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarTarjetaCredito"));		
		
		
		this.jButtonCerrarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CerrarTarjetaCredito"));
		
		
		this.jButtonCerrarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CerrarToolBarTarjetaCredito"));
			
		this.jMenuItemCerrarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCerrarTarjetaCredito"));
			
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jMenuItemDetalleCerrarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarTarjetaCredito"));		
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTarjetaCredito"));
		}
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarTarjetaCredito"));
		}
		
		this.jButtonCopiarToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"CopiarToolBarTarjetaCredito"));
			
		this.jButtonVerFormToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"VerFormToolBarTarjetaCredito"));
		
		this.jMenuItemGuardarCambiosTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosTarjetaCredito"));
			
		this.jMenuItemCopiarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemCopiarTarjetaCredito"));		
		
		this.jMenuItemVerFormTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemVerFormTarjetaCredito"));		
		
		
		this.jButtonGuardarCambiosTablaTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaTarjetaCredito"));
		
		
		this.jButtonGuardarCambiosTablaToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarTarjetaCredito"));
			
		this.jMenuItemGuardarCambiosTablaTarjetaCredito.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaTarjetaCredito"));		
		
		
		
		this.jButtonRecargarInformacionTarjetaCredito.addActionListener (new ButtonActionListener(this,"RecargarInformacionTarjetaCredito"));
					
		this.jButtonRecargarInformacionToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarTarjetaCredito"));
		
		this.jMenuItemRecargarInformacionTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionTarjetaCredito"));		
		
		
		
		this.jButtonAnterioresTarjetaCredito.addActionListener (new ButtonActionListener(this,"AnterioresTarjetaCredito"));
		
		
		this.jButtonAnterioresToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"AnterioresToolBarTarjetaCredito"));
		
		this.jMenuItemAnterioresTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresTarjetaCredito"));		
		
		
		this.jButtonSiguientesTarjetaCredito.addActionListener (new ButtonActionListener(this,"SiguientesTarjetaCredito"));
		
		
		this.jButtonSiguientesToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"SiguientesToolBarTarjetaCredito"));
			
		this.jMenuItemSiguientesTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesTarjetaCredito"));
			
		this.jMenuItemAbrirOrderByTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByTarjetaCredito"));
			
		this.jMenuItemMostrarOcultarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarTarjetaCredito"));
			
		this.jMenuItemDetalleAbrirOrderByTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByTarjetaCredito"));
			
		this.jMenuItemDetalleMostarOcultarTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarTarjetaCredito"));		
		
		
		this.jButtonNuevoGuardarCambiosTarjetaCredito.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosTarjetaCredito"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarTarjetaCredito"));
			
		this.jMenuItemNuevoGuardarCambiosTarjetaCredito.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosTarjetaCredito"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosTarjetaCredito.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosTarjetaCredito"));

		this.jCheckBoxSeleccionadosTarjetaCredito.addItemListener(new CheckBoxItemListener(this,"SeleccionadosTarjetaCredito"));
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioTarjetaCredito"));
		}
		
		
		this.jComboBoxTiposRelacionesTarjetaCredito.addActionListener (new ButtonActionListener(this,"TiposRelacionesTarjetaCredito"));
			
		this.jComboBoxTiposAccionesTarjetaCredito.addActionListener (new ButtonActionListener(this,"TiposAccionesTarjetaCredito"));
					
		this.jComboBoxTiposSeleccionarTarjetaCredito.addActionListener (new ButtonActionListener(this,"TiposSeleccionarTarjetaCredito"));
			
		this.jTextFieldValorCampoGeneralTarjetaCredito.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralTarjetaCredito"));		
		
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonidTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncodigoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombreTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombreTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombre_cortoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_cortoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_validoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_validoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_tarjetaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_tarjetaTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comisionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoninteresTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"interesTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonmonto_minimoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"monto_minimoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonporcentaje_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomision_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comision_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_retencion_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_pago_banco_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_pago_banco_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_comision_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_comision_redondeoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBancoTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdBancoTarjetaCredito"));

			this.jButtonFK_IdCuentaContableTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableTarjetaCredito"));

			this.jButtonFK_IdCuentaContableComisionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableComisionTarjetaCredito"));

			this.jButtonFK_IdCuentaContableDiferenciaTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDiferenciaTarjetaCredito"));

			this.jButtonFK_IdFormulaComisionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaComisionTarjetaCredito"));

			this.jButtonFK_IdFormulaPagoBancoTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaPagoBancoTarjetaCredito"));

			this.jButtonFK_IdFormulaRetencionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaRetencionTarjetaCredito"));

			this.jButtonFK_IdTipoRetencionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionTarjetaCredito"));

			this.jButtonFK_IdTipoRetencionIvaTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaTarjetaCredito"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoTarjetaCredito!=null) {
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTarjetaCredito"));
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTarjetaCredito"));
				this.jInternalFrameReporteDinamicoTarjetaCredito.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTarjetaCredito"));
			}
			
			//this.jButtonCerrarReporteDinamicoTarjetaCredito.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoTarjetaCredito"));				
			//this.jButtonGenerarReporteDinamicoTarjetaCredito.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoTarjetaCredito"));
			//this.jButtonGenerarExcelReporteDinamicoTarjetaCredito.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoTarjetaCredito"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionTarjetaCredito!=null) {
				this.jInternalFrameImportacionTarjetaCredito.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionTarjetaCredito"));
				this.jInternalFrameImportacionTarjetaCredito.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionTarjetaCredito"));
				this.jInternalFrameImportacionTarjetaCredito.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionTarjetaCredito"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByTarjetaCredito.addActionListener (new ButtonActionListener(this,"AbrirOrderByTarjetaCredito"));
			
			this.jButtonAbrirOrderByToolBarTarjetaCredito.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarTarjetaCredito"));			
			
			if(this.jInternalFrameOrderByTarjetaCredito!=null) {
				this.jInternalFrameOrderByTarjetaCredito.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByTarjetaCredito"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormTarjetaCredito.jTabbedPaneRelacionesTarjetaCredito.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesTarjetaCredito"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameTarjetaCredito();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormTarjetaCredito.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormTarjetaCredito = (JInternalFrameBase)event.getSource();
	            	
	            TarjetaCreditoBeanSwingJInternalFrame jInternalFrameParent=(TarjetaCreditoBeanSwingJInternalFrame)jInternalFrameDetalleFormTarjetaCredito.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarTarjetaCreditoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosTarjetaCredito.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosTarjetaCreditoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosTarjetaCredito.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosTarjetaCredito.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoTarjetaCredito";
		inputMap = this.jButtonNuevoTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoTarjetaCreditoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoTarjetaCreditoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesTarjetaCredito";
		inputMap = this.jButtonNuevoRelacionesTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoTarjetaCreditoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarTarjetaCredito";
		inputMap = this.jButtonModificarTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarTarjetaCredito";
		inputMap = this.jButtonActualizarTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarTarjetaCredito";
		inputMap = this.jButtonEliminarTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarTarjetaCredito";
		inputMap = this.jButtonCancelarTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarTarjetaCredito";
		inputMap = this.jButtonCerrarTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosTarjetaCredito";
		inputMap = this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonGuardarCambiosTarjetaCredito.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosTarjetaCreditoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosTarjetaCredito.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosTarjetaCreditoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesTarjetaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesTarjetaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarTarjetaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarTarjetaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralTarjetaCredito.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralTarjetaCreditoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonidTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"idTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_empresaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_sucursalTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_bancoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncodigoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"codigoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombreTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombreTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonnombre_cortoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"nombre_cortoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_validoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_validoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtondigito_tarjetaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"digito_tarjetaTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comisionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoninteresTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"interesTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonmonto_minimoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"monto_minimoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonporcentaje_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"porcentaje_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtoncomision_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"comision_retencionTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_retencion_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_retencion_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_pago_banco_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_pago_banco_redondeoTarjetaCreditoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtones_comision_redondeoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"es_comision_redondeoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contableTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contableTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_tipo_retencion_ivaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_retencion_ivaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_comisionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_pago_bancoTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_pago_bancoTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_cuenta_contable_diferenciaTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_cuenta_contable_diferenciaTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_retencionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_retencionTarjetaCreditoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoUpdate.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormTarjetaCredito.jButtonid_formula_comisionTarjetaCreditoBusqueda.addActionListener(new ButtonActionListener(this,"id_formula_comisionTarjetaCreditoBusqueda"));
		
		
		this.jButtonFK_IdBancoTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdBancoTarjetaCredito"));

		this.jButtonFK_IdCuentaContableTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableTarjetaCredito"));

		this.jButtonFK_IdCuentaContableComisionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableComisionTarjetaCredito"));

		this.jButtonFK_IdCuentaContableDiferenciaTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdCuentaContableDiferenciaTarjetaCredito"));

		this.jButtonFK_IdFormulaComisionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaComisionTarjetaCredito"));

		this.jButtonFK_IdFormulaPagoBancoTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaPagoBancoTarjetaCredito"));

		this.jButtonFK_IdFormulaRetencionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdFormulaRetencionTarjetaCredito"));

		this.jButtonFK_IdTipoRetencionTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionTarjetaCredito"));

		this.jButtonFK_IdTipoRetencionIvaTarjetaCredito.addActionListener(new ButtonActionListener(this,"FK_IdTipoRetencionIvaTarjetaCredito"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionTarjetaCredito.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionTarjetaCreditoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarTarjetaCreditoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarTarjetaCredito.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosTarjetaCredito(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
					tarjetacreditoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(TarjetaCredito tarjetacreditoAux:tarjetacreditos) {
					tarjetacreditoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosTarjetaCreditoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
						tarjetacreditoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(TarjetaCredito tarjetacreditoAux:tarjetacreditos) {
						tarjetacreditoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
					
						if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_retencion_redondeo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_pago_banco_redondeo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_comision_redondeo(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(TarjetaCredito tarjetacreditoAux:tarjetacreditos) {
						
						if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_retencion_redondeo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_pago_banco_redondeo(this.isSeleccionarTodos);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO)) {
							existe=true;
							tarjetacreditoAux.setes_comision_redondeo(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosTarjetaCredito.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosTarjetaCredito.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosTarjetaCreditoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosTarjetaCredito.getSelectedRows();
			
			TarjetaCredito tarjetacreditoLocal=new TarjetaCredito();
			
			//this.seleccionarTodosTarjetaCredito(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					tarjetacreditoLocal =(TarjetaCredito) this.tarjetacreditoLogic.getTarjetaCreditos().toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					tarjetacreditoLocal =(TarjetaCredito) this.tarjetacreditos.toArray()[this.jTableDatosTarjetaCredito.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				tarjetacreditoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
						tarjetacreditoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(TarjetaCredito tarjetacreditoAux:tarjetacreditos) {
						tarjetacreditoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosTarjetaCredito.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosTarjetaCredito.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosTarjetaCredito,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualTarjetaCreditoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarTarjetaCreditoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralTarjetaCreditoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralTarjetaCredito.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditoLogic.getTarjetaCreditos()) {
				
						if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							tarjetacreditoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							tarjetacreditoAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO)) {
							existe=true;
							tarjetacreditoAux.setnombre_corto(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO)) {
							existe=true;
							tarjetacreditoAux.setdigito_valido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA)) {
							existe=true;
							tarjetacreditoAux.setdigito_tarjeta(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_COMISION)) {
							existe=true;
							tarjetacreditoAux.setcomision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_INTERES)) {
							existe=true;
							tarjetacreditoAux.setinteres(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO)) {
							existe=true;
							tarjetacreditoAux.setmonto_minimo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION)) {
							existe=true;
							tarjetacreditoAux.setporcentaje_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION)) {
							existe=true;
							tarjetacreditoAux.setcomision_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(TarjetaCredito tarjetacreditoAux:tarjetacreditos) {
					
						if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_CODIGO)) {
							existe=true;
							tarjetacreditoAux.setcodigo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							tarjetacreditoAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO)) {
							existe=true;
							tarjetacreditoAux.setnombre_corto(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO)) {
							existe=true;
							tarjetacreditoAux.setdigito_valido(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA)) {
							existe=true;
							tarjetacreditoAux.setdigito_tarjeta(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_COMISION)) {
							existe=true;
							tarjetacreditoAux.setcomision(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_INTERES)) {
							existe=true;
							tarjetacreditoAux.setinteres(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO)) {
							existe=true;
							tarjetacreditoAux.setmonto_minimo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION)) {
							existe=true;
							tarjetacreditoAux.setporcentaje_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION)) {
							existe=true;
							tarjetacreditoAux.setcomision_retencion(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaTarjetaCredito(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesTarjetaCreditoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioTarjetaCredito=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesTarjetaCredito.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteTarjetaCredito) {				
					conSplash=true;//false;										
					
					//this.startProcessTarjetaCredito(conSplash);
				
					this.generarReporteTarjetaCreditosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoTarjetaCreditosSeleccionados();
				//this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoTarjetaCreditosSeleccionados(false);
				//this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoTarjetaCreditosSeleccionados(true);
				//this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessTarjetaCredito();
				
				this.exportarTarjetaCreditosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionTarjetaCreditos();
				//this.importarTarjetaCreditos();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessTarjetaCredito();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelTarjetaCreditosSeleccionados();
				//this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Tarjeta Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessTarjetaCredito();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoTarjetaCredito)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyTarjetaCredito(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
				}	
			} 			
			else if(TarjetaCreditoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteTarjetaCredito) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessTarjetaCredito(conSplash);
					
						//this.actualizarParametrosGeneralTarjetaCredito();
						
						this.generarReporteProcesoAccionTarjetaCreditosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(TarjetaCreditoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Tarjeta CreditoS SELECCIONADOS?", "MANTENIMIENTO DE Tarjeta Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessTarjetaCredito();
				
						this.actualizarParametrosGeneralTarjetaCredito();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.tarjetacreditoReturnGeneral=tarjetacreditoLogic.procesarAccionTarjetaCreditosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.tarjetacreditoLogic.getTarjetaCreditos(),this.tarjetacreditoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarTarjetaCreditoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralTarjetaCredito();
					
					TarjetaCreditoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarTarjetaCreditoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesTarjetaCredito.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxTiposAccionesFormularioTarjetaCredito.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessTarjetaCredito(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesTarjetaCreditoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessTarjetaCredito();
			
			if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
			TarjetaCredito tarjetacredito=new TarjetaCredito();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingTarjetaCredito(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesTarjetaCredito.getSelectedItem();
			
			
			
			
			tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
			//this.sTipoAccion;
			
			if(tarjetacreditosSeleccionados.size()==1) {
				for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
					tarjetacredito=tarjetacreditoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Tarjeta Credito Conexion")) {
					jButtonTarjetaCreditoConexionActionPerformed(null,rowIndex,true,false,tarjetacredito);
				}
				else if(this.sTipoRelacion.equals("Tarjeta Credito Descuento")) {
					jButtonTarjetaCreditoDescuentoActionPerformed(null,rowIndex,true,false,tarjetacredito);
				}
				else if(this.sTipoRelacion.equals("Forma Pago")) {
					jButtonFormaPagoPuntoVentaActionPerformed(null,rowIndex,true,false,tarjetacredito);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessTarjetaCredito();
			
      		//this.finishProcessTarjetaCredito(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarTarjetaCreditoReturnGeneral() throws Exception {
		if(this.tarjetacreditoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.tarjetacreditoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.tarjetacreditoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.tarjetacreditoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.tarjetacreditoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.tarjetacreditoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingTarjetaCredito(false);
		}
		
		if(this.tarjetacreditoReturnGeneral.getConRetornoLista() || this.tarjetacreditoReturnGeneral.getConRetornoObjeto()) {
			if(this.tarjetacreditoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.tarjetacreditoLogic.setTarjetaCreditos(this.tarjetacreditoReturnGeneral.getTarjetaCreditos());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.tarjetacreditoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.tarjetacreditoLogic.setTarjetaCredito(this.tarjetacreditoReturnGeneral.getTarjetaCredito());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingTarjetaCredito(false);
		}
	}
	
	public void actualizarParametrosGeneralTarjetaCredito() throws Exception {
		
		
	}
	
	public ArrayList<TarjetaCredito> getTarjetaCreditosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioTarjetaCredito) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(TarjetaCredito tarjetacreditoAux:tarjetacreditoLogic.getTarjetaCreditos()) {
					if(tarjetacreditoAux.getIsSelected()) {
						tarjetacreditosSeleccionados.add(tarjetacreditoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(TarjetaCredito tarjetacreditoAux:this.tarjetacreditos) {
					if(tarjetacreditoAux.getIsSelected()) {
						tarjetacreditosSeleccionados.add(tarjetacreditoAux);				
					}
				}
			}
			
			if(tarjetacreditosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						tarjetacreditosSeleccionados.addAll(this.tarjetacreditoLogic.getTarjetaCreditos());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						tarjetacreditosSeleccionados.addAll(this.tarjetacreditos);				
					}
				}
			}
		} else {
			tarjetacreditosSeleccionados.add(this.tarjetacredito);
		}
		
		return tarjetacreditosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteTarjetaCreditosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalTarjetaCreditosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoTarjetaCreditosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoTarjetaCreditosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoTarjetaCreditosSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesTarjetaCreditosSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Tarjeta Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados);
		
	}	
	
	public void generarReporteNormalTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionTarjetaCreditosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		
		this.abrirInicializarFrameReporteDinamicoTarjetaCredito();
		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoTarjetaCredito();
		
		
		//this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados ,tarjetacreditoImplementable,tarjetacreditoImplementableHome);
	}
	
	public void mostrarImportacionTarjetaCreditos() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionTarjetaCredito();
		
		this.abrirFrameImportacionTarjetaCredito();		
		
			
		//this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados ,tarjetacreditoImplementable,tarjetacreditoImplementableHome);
	}
	
	public void importarTarjetaCreditos() throws Exception {		
	
	}
	
	public void exportarTarjetaCreditosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelTarjetaCreditosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoTarjetaCreditosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlTarjetaCreditosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Tarjeta Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarTarjetaCredito(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarTarjetaCredito(tarjetacreditoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//tarjetacreditoAux.setsDetalleGeneralEntityReporte(tarjetacreditoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarTarjetaCredito(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_CODIGO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_COMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_INTERES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarTarjetaCredito(TarjetaCredito tarjetacredito,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=tarjetacredito.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getbanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcodigo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getnombre_corto();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getdigito_valido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getdigito_tarjeta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcomision().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getinteres().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getmonto_minimo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getporcentaje_retencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcomision_retencion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getes_retencion_redondeo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getes_pago_banco_redondeo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getes_comision_redondeo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.gettiporetencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcuentacontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.gettiporetencioniva_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcuentacontablecomision_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getformulapagobanco_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getcuentacontablediferencia_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getformularetencion_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=tarjetacredito.getformulacomision_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("TarjetaCreditos");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelTarjetaCredito(row);				
				iRow++;
			}				
			
			for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelTarjetaCredito(tarjetacreditoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlTarjetaCreditosSeleccionados() throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();		
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"tarjetacredito.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("tarjetacreditos");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("tarjetacredito");
			//elementRoot.appendChild(element);
		
			for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
				element = document.createElement("tarjetacredito");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlTarjetaCredito(tarjetacreditoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Tarjeta Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelTarjetaCredito(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_CODIGO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_INTERES);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_MONTOMINIMO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_PORCENTAJERETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_COMISIONRETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION);
		cell = row.createCell(iColumn++);cell.setCellValue(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelTarjetaCredito(TarjetaCredito tarjetacredito,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getbanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcodigo());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getnombre_corto());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getdigito_valido());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getdigito_tarjeta());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcomision());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getinteres());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getmonto_minimo());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getporcentaje_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcomision_retencion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getes_retencion_redondeo());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getes_pago_banco_redondeo());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getes_comision_redondeo());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.gettiporetencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcuentacontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.gettiporetencioniva_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcuentacontablecomision_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getformulapagobanco_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getcuentacontablediferencia_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getformularetencion_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(tarjetacredito.getformulacomision_descripcion());				
	}
	
	public void setFilaDatosExportarXmlTarjetaCredito(TarjetaCredito tarjetacredito,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(TarjetaCreditoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(tarjetacredito.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(TarjetaCreditoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(tarjetacredito.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(tarjetacredito.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(tarjetacredito.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbanco_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDBANCO);
		elementbanco_descripcion.appendChild(document.createTextNode(tarjetacredito.getbanco_descripcion()));
		element.appendChild(elementbanco_descripcion);

		Element elementcodigo = document.createElement(TarjetaCreditoConstantesFunciones.CODIGO);
		elementcodigo.appendChild(document.createTextNode(tarjetacredito.getcodigo().trim()));
		element.appendChild(elementcodigo);

		Element elementnombre = document.createElement(TarjetaCreditoConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(tarjetacredito.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementnombre_corto = document.createElement(TarjetaCreditoConstantesFunciones.NOMBRECORTO);
		elementnombre_corto.appendChild(document.createTextNode(tarjetacredito.getnombre_corto().trim()));
		element.appendChild(elementnombre_corto);

		Element elementdigito_valido = document.createElement(TarjetaCreditoConstantesFunciones.DIGITOVALIDO);
		elementdigito_valido.appendChild(document.createTextNode(tarjetacredito.getdigito_valido().toString().trim()));
		element.appendChild(elementdigito_valido);

		Element elementdigito_tarjeta = document.createElement(TarjetaCreditoConstantesFunciones.DIGITOTARJETA);
		elementdigito_tarjeta.appendChild(document.createTextNode(tarjetacredito.getdigito_tarjeta().toString().trim()));
		element.appendChild(elementdigito_tarjeta);

		Element elementcomision = document.createElement(TarjetaCreditoConstantesFunciones.COMISION);
		elementcomision.appendChild(document.createTextNode(tarjetacredito.getcomision().toString().trim()));
		element.appendChild(elementcomision);

		Element elementinteres = document.createElement(TarjetaCreditoConstantesFunciones.INTERES);
		elementinteres.appendChild(document.createTextNode(tarjetacredito.getinteres().toString().trim()));
		element.appendChild(elementinteres);

		Element elementmonto_minimo = document.createElement(TarjetaCreditoConstantesFunciones.MONTOMINIMO);
		elementmonto_minimo.appendChild(document.createTextNode(tarjetacredito.getmonto_minimo().toString().trim()));
		element.appendChild(elementmonto_minimo);

		Element elementporcentaje_retencion = document.createElement(TarjetaCreditoConstantesFunciones.PORCENTAJERETENCION);
		elementporcentaje_retencion.appendChild(document.createTextNode(tarjetacredito.getporcentaje_retencion().toString().trim()));
		element.appendChild(elementporcentaje_retencion);

		Element elementcomision_retencion = document.createElement(TarjetaCreditoConstantesFunciones.COMISIONRETENCION);
		elementcomision_retencion.appendChild(document.createTextNode(tarjetacredito.getcomision_retencion().toString().trim()));
		element.appendChild(elementcomision_retencion);

		Element elementes_retencion_redondeo = document.createElement(TarjetaCreditoConstantesFunciones.ESRETENCIONREDONDEO);
		elementes_retencion_redondeo.appendChild(document.createTextNode(tarjetacredito.getes_retencion_redondeo().toString().trim()));
		element.appendChild(elementes_retencion_redondeo);

		Element elementes_pago_banco_redondeo = document.createElement(TarjetaCreditoConstantesFunciones.ESPAGOBANCOREDONDEO);
		elementes_pago_banco_redondeo.appendChild(document.createTextNode(tarjetacredito.getes_pago_banco_redondeo().toString().trim()));
		element.appendChild(elementes_pago_banco_redondeo);

		Element elementes_comision_redondeo = document.createElement(TarjetaCreditoConstantesFunciones.ESCOMISIONREDONDEO);
		elementes_comision_redondeo.appendChild(document.createTextNode(tarjetacredito.getes_comision_redondeo().toString().trim()));
		element.appendChild(elementes_comision_redondeo);

		Element elementtiporetencion_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDTIPORETENCION);
		elementtiporetencion_descripcion.appendChild(document.createTextNode(tarjetacredito.gettiporetencion_descripcion()));
		element.appendChild(elementtiporetencion_descripcion);

		Element elementcuentacontable_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLE);
		elementcuentacontable_descripcion.appendChild(document.createTextNode(tarjetacredito.getcuentacontable_descripcion()));
		element.appendChild(elementcuentacontable_descripcion);

		Element elementtiporetencioniva_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDTIPORETENCIONIVA);
		elementtiporetencioniva_descripcion.appendChild(document.createTextNode(tarjetacredito.gettiporetencioniva_descripcion()));
		element.appendChild(elementtiporetencioniva_descripcion);

		Element elementcuentacontablecomision_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLECOMISION);
		elementcuentacontablecomision_descripcion.appendChild(document.createTextNode(tarjetacredito.getcuentacontablecomision_descripcion()));
		element.appendChild(elementcuentacontablecomision_descripcion);

		Element elementformulapagobanco_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDFORMULAPAGOBANCO);
		elementformulapagobanco_descripcion.appendChild(document.createTextNode(tarjetacredito.getformulapagobanco_descripcion()));
		element.appendChild(elementformulapagobanco_descripcion);

		Element elementcuentacontablediferencia_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDCUENTACONTABLEDIFERENCIA);
		elementcuentacontablediferencia_descripcion.appendChild(document.createTextNode(tarjetacredito.getcuentacontablediferencia_descripcion()));
		element.appendChild(elementcuentacontablediferencia_descripcion);

		Element elementformularetencion_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDFORMULARETENCION);
		elementformularetencion_descripcion.appendChild(document.createTextNode(tarjetacredito.getformularetencion_descripcion()));
		element.appendChild(elementformularetencion_descripcion);

		Element elementformulacomision_descripcion = document.createElement(TarjetaCreditoConstantesFunciones.IDFORMULACOMISION);
		elementformulacomision_descripcion.appendChild(document.createTextNode(tarjetacredito.getformulacomision_descripcion()));
		element.appendChild(elementformulacomision_descripcion);
	}
	
	public void generarReporteGroupGenericoTarjetaCreditosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<TarjetaCredito> tarjetacreditosSeleccionados=new ArrayList<TarjetaCredito>();
		
		tarjetacreditosSeleccionados=this.getTarjetaCreditosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoTarjetaCredito(tarjetacreditosSeleccionados);
		
		this.generarReporteTarjetaCreditos("Todos",tarjetacreditosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoTarjetaCredito(ArrayList<TarjetaCredito> tarjetacreditosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(TarjetaCredito tarjetacreditoAux:tarjetacreditosSeleccionados) {
				tarjetacreditoAux.setsDetalleGeneralEntityReporte(tarjetacreditoAux.toString());
			
				if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDBANCO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getbanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_CODIGO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getcodigo());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_NOMBRECORTO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getnombre_corto());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOVALIDO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getdigito_valido().toString());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_DIGITOTARJETA)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getdigito_tarjeta().toString());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESRETENCIONREDONDEO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(tarjetacreditoAux.getes_retencion_redondeo()));
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESPAGOBANCOREDONDEO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(tarjetacreditoAux.getes_pago_banco_redondeo()));
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_ESCOMISIONREDONDEO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(tarjetacreditoAux.getes_comision_redondeo()));
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCION)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.gettiporetencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLE)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getcuentacontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDTIPORETENCIONIVA)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.gettiporetencioniva_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLECOMISION)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getcuentacontablecomision_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULAPAGOBANCO)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getformulapagobanco_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDCUENTACONTABLEDIFERENCIA)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getcuentacontablediferencia_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULARETENCION)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getformularetencion_descripcion());
				}
				 else if(sTipoSeleccionar.equals(TarjetaCreditoConstantesFunciones.LABEL_IDFORMULACOMISION)) {
					existe=true;
					tarjetacreditoAux.setsDescripcionGeneralEntityReporte1(tarjetacreditoAux.getformulacomision_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,TarjetaCreditoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesTarjetaCredito(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoTarjetaCredito=true;
				this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=true;
				this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=true;
			}
			
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=true;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=true;
			this.isVisibilidadCeldaEliminarTarjetaCredito=true;
			this.isVisibilidadCeldaCancelarTarjetaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=true;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=true;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=true;
			this.isVisibilidadCeldaModificarTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=true;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
			this.isVisibilidadCeldaModificarTarjetaCredito=true;
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
			this.isVisibilidadCeldaCancelarTarjetaCredito=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				} else {
					this.isVisibilidadCeldaGuardarTarjetaCredito=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(TarjetaCreditoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoTarjetaCredito=true;
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=true;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=true;
		} else {
			this.actualizarEstadoPanelsTarjetaCredito(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarTarjetaCredito=false;
			//this.isVisibilidadCeldaVerFormTarjetaCredito=false;
			this.isVisibilidadCeldaDuplicarTarjetaCredito=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!tarjetacreditoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
		} else {
			this.isVisibilidadCeldaNuevoTarjetaCredito=false;
			this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			if(!tarjetacreditoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;												
			}
			
			this.jButtonCerrarTarjetaCredito.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesTarjetaCredito=false;
		}
		
		if(!this.permiteMantenimiento(this.tarjetacredito)) {
			this.isVisibilidadCeldaActualizarTarjetaCredito=false;
			this.isVisibilidadCeldaEliminarTarjetaCredito=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesTarjetaCredito() {
		this.isVisibilidadCeldaNuevoTarjetaCredito=false;
		this.isVisibilidadCeldaGuardarCambiosTarjetaCredito=false;
	}
	
	public void actualizarEstadoPanelsTarjetaCredito(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionTarjetaCredito!=null) {
				this.jScrollPanelDatosEdicionTarjetaCredito.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosTarjetaCredito!=null) {
				this.jScrollPanelDatosTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelPaginacionTarjetaCredito!=null) {
				this.jPanelPaginacionTarjetaCredito.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
					this.jTabbedPaneBusquedasTarjetaCredito.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.tarjetacreditoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasTarjetaCredito!=null) {
				this.jTabbedPaneBusquedasTarjetaCredito.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesTarjetaCredito!=null) {
				this.jPanelParametrosReportesTarjetaCredito.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaBanco(Boolean isParaBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBancoNegation=!isParaBanco;

			this.isVisibilidadFK_IdBanco=isParaBanco;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaBancoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencion(Boolean isParaTipoRetencion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionNegation=!isParaTipoRetencion;

			this.isVisibilidadFK_IdBanco=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoRetencion;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaTipoRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContable(Boolean isParaCuentaContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableNegation=!isParaCuentaContable;

			this.isVisibilidadFK_IdBanco=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContable;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaCuentaContableNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoRetencionIva(Boolean isParaTipoRetencionIva){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoRetencionIvaNegation=!isParaTipoRetencionIva;

			this.isVisibilidadFK_IdBanco=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaTipoRetencionIvaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaTipoRetencionIva;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableComision(Boolean isParaCuentaContableComision){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableComisionNegation=!isParaCuentaContableComision;

			this.isVisibilidadFK_IdBanco=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaCuentaContableComision;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaCuentaContableComisionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormulaPagoBanco(Boolean isParaFormulaPagoBanco){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormulaPagoBancoNegation=!isParaFormulaPagoBanco;

			this.isVisibilidadFK_IdBanco=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaFormulaPagoBanco;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaFormulaPagoBancoNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaCuentaContableDiferencia(Boolean isParaCuentaContableDiferencia){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCuentaContableDiferenciaNegation=!isParaCuentaContableDiferencia;

			this.isVisibilidadFK_IdBanco=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaCuentaContableDiferencia;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaCuentaContableDiferenciaNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormulaRetencion(Boolean isParaFormulaRetencion){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormulaRetencionNegation=!isParaFormulaRetencion;

			this.isVisibilidadFK_IdBanco=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaFormulaRetencion;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaFormulaRetencionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormulaComision(Boolean isParaFormulaComision){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormulaComisionNegation=!isParaFormulaComision;

			this.isVisibilidadFK_IdBanco=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdBancoTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContable=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdCuentaContable) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableComision=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableComisionTarjetaCredito);}

			this.isVisibilidadFK_IdCuentaContableDiferencia=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdCuentaContableDiferencia) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaComision=isParaFormulaComision;
			if(!this.isVisibilidadFK_IdFormulaComision) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaComisionTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaPagoBanco=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdFormulaPagoBanco) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaPagoBancoTarjetaCredito);}

			this.isVisibilidadFK_IdFormulaRetencion=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdFormulaRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdFormulaRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencion=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencion) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionTarjetaCredito);}

			this.isVisibilidadFK_IdTipoRetencionIva=isParaFormulaComisionNegation;
			if(!this.isVisibilidadFK_IdTipoRetencionIva) {this.jTabbedPaneBusquedasTarjetaCredito.remove(jPanelFK_IdTipoRetencionIvaTarjetaCredito);}
		}
		
	}
	
	

	public String registrarSesionTarjetaCreditoParaTarjetaCreditoConexiones() throws Exception {
		Boolean isPaginaPopupTarjetaCreditoConexion=false;

		try {

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean==null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean=new TarjetaCreditoConexionSessionBean();
			}

			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setsPathNavegacionActual(tarjetacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TarjetaCreditoConexionConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupTarjetaCreditoConexion=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTarjetaCreditoConexion(true);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTarjetaCreditoConexion(TarjetaCreditoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setisBusquedaDesdeForeignKeySesionTarjetaCredito(true);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditoconexionSessionBean.setlidTarjetaCreditoActual(this.idTarjetaCreditoActual);

			tarjetacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTarjetaCredito(true);
			tarjetacreditoSessionBean.setlIdTarjetaCreditoActualForeignKey(this.idTarjetaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionTarjetaCreditoParaTarjetaCreditoDescuentos() throws Exception {
		Boolean isPaginaPopupTarjetaCreditoDescuento=false;

		try {

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean==null) {
				this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean=new TarjetaCreditoDescuentoSessionBean();
			}

			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setsPathNavegacionActual(tarjetacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+TarjetaCreditoDescuentoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupTarjetaCreditoDescuento=this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeTarjetaCreditoDescuento(true);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeTarjetaCreditoDescuento(TarjetaCreditoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setisBusquedaDesdeForeignKeySesionTarjetaCredito(true);
			this.jInternalFrameDetalleFormTarjetaCredito.tarjetacreditodescuentoSessionBean.setlidTarjetaCreditoActual(this.idTarjetaCreditoActual);

			tarjetacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTarjetaCredito(true);
			tarjetacreditoSessionBean.setlIdTarjetaCreditoActualForeignKey(this.idTarjetaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionTarjetaCreditoParaFormaPagoPuntoVentaes() throws Exception {
		Boolean isPaginaPopupFormaPagoPuntoVenta=false;

		try {

			if(this.tarjetacreditoSessionBean==null) {
				this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
			}

			if(this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean=new FormaPagoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setsPathNavegacionActual(tarjetacreditoSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupFormaPagoPuntoVenta=this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFormaPagoPuntoVenta(true);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFormaPagoPuntoVenta(TarjetaCreditoConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionTarjetaCredito(true);
			this.jInternalFrameDetalleFormTarjetaCredito.formapagopuntoventaSessionBean.setlidTarjetaCreditoActual(this.idTarjetaCreditoActual);

			tarjetacreditoSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyTarjetaCredito(true);
			tarjetacreditoSessionBean.setlIdTarjetaCreditoActualForeignKey(this.idTarjetaCreditoActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//TarjetaCreditoSessionBean tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
		
		if(this.tarjetacreditoSessionBean==null) {
			this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
		}
		
		this.tarjetacreditoSessionBean.setsUltimaBusquedaTarjetaCredito(this.getsAccionBusqueda());
		this.tarjetacreditoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.tarjetacreditoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
			tarjetacreditoSessionBean.setid_banco(this.getid_bancoFK_IdBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
			tarjetacreditoSessionBean.setid_cuenta_contable(this.getid_cuenta_contableFK_IdCuentaContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableComision")) {
			tarjetacreditoSessionBean.setid_cuenta_contable_comision(this.getid_cuenta_contable_comisionFK_IdCuentaContableComision());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDiferencia")) {
			tarjetacreditoSessionBean.setid_cuenta_contable_diferencia(this.getid_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			tarjetacreditoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormulaComision")) {
			tarjetacreditoSessionBean.setid_formula_comision(this.getid_formula_comisionFK_IdFormulaComision());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormulaPagoBanco")) {
			tarjetacreditoSessionBean.setid_formula_pago_banco(this.getid_formula_pago_bancoFK_IdFormulaPagoBanco());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormulaRetencion")) {
			tarjetacreditoSessionBean.setid_formula_retencion(this.getid_formula_retencionFK_IdFormulaRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			tarjetacreditoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
			tarjetacreditoSessionBean.setid_tipo_retencion(this.getid_tipo_retencionFK_IdTipoRetencion());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva")) {
			tarjetacreditoSessionBean.setid_tipo_retencion_iva(this.getid_tipo_retencion_ivaFK_IdTipoRetencionIva());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//TarjetaCreditoSessionBean tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
		
		if(this.tarjetacreditoSessionBean==null) {
			this.tarjetacreditoSessionBean=new TarjetaCreditoSessionBean();
		}
		
		if(this.tarjetacreditoSessionBean.getsUltimaBusquedaTarjetaCredito()!=null&&!this.tarjetacreditoSessionBean.getsUltimaBusquedaTarjetaCredito().equals("")) {
			this.setsAccionBusqueda(tarjetacreditoSessionBean.getsUltimaBusquedaTarjetaCredito());
			this.setiNumeroPaginacion(tarjetacreditoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(tarjetacreditoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBanco")) {
				this.setid_bancoFK_IdBanco(tarjetacreditoSessionBean.getid_banco());
				tarjetacreditoSessionBean.setid_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContable")) {
				this.setid_cuenta_contableFK_IdCuentaContable(tarjetacreditoSessionBean.getid_cuenta_contable());
				tarjetacreditoSessionBean.setid_cuenta_contable(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableComision")) {
				this.setid_cuenta_contable_comisionFK_IdCuentaContableComision(tarjetacreditoSessionBean.getid_cuenta_contable_comision());
				tarjetacreditoSessionBean.setid_cuenta_contable_comision(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCuentaContableDiferencia")) {
				this.setid_cuenta_contable_diferenciaFK_IdCuentaContableDiferencia(tarjetacreditoSessionBean.getid_cuenta_contable_diferencia());
				tarjetacreditoSessionBean.setid_cuenta_contable_diferencia(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(tarjetacreditoSessionBean.getid_empresa());
				tarjetacreditoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormulaComision")) {
				this.setid_formula_comisionFK_IdFormulaComision(tarjetacreditoSessionBean.getid_formula_comision());
				tarjetacreditoSessionBean.setid_formula_comision(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormulaPagoBanco")) {
				this.setid_formula_pago_bancoFK_IdFormulaPagoBanco(tarjetacreditoSessionBean.getid_formula_pago_banco());
				tarjetacreditoSessionBean.setid_formula_pago_banco(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormulaRetencion")) {
				this.setid_formula_retencionFK_IdFormulaRetencion(tarjetacreditoSessionBean.getid_formula_retencion());
				tarjetacreditoSessionBean.setid_formula_retencion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(tarjetacreditoSessionBean.getid_sucursal());
				tarjetacreditoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencion")) {
				this.setid_tipo_retencionFK_IdTipoRetencion(tarjetacreditoSessionBean.getid_tipo_retencion());
				tarjetacreditoSessionBean.setid_tipo_retencion(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoRetencionIva")) {
				this.setid_tipo_retencion_ivaFK_IdTipoRetencionIva(tarjetacreditoSessionBean.getid_tipo_retencion_iva());
				tarjetacreditoSessionBean.setid_tipo_retencion_iva(-1L);
			}
		}
		
		this.tarjetacreditoSessionBean.setsUltimaBusquedaTarjetaCredito("");
		this.tarjetacreditoSessionBean.setiNumeroPaginacion(TarjetaCreditoConstantesFunciones.INUMEROPAGINACION);
		this.tarjetacreditoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaTarjetaCredito(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioTarjetaCredito() {
		this.updateBorderResaltarBusquedasFormularioTarjetaCredito();
		this.updateVisibilidadBusquedasFormularioTarjetaCredito();
		this.updateHabilitarBusquedasFormularioTarjetaCredito();
	}
	
	public void updateBorderResaltarBusquedasFormularioTarjetaCredito() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasTarjetaCredito.getComponents().length>0) {
	

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdBancoTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdBancoTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdBancoTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableComisionTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableComisionTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableComisionTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableDiferenciaTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableDiferenciaTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaComisionTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaComisionTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaComisionTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaPagoBancoTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaPagoBancoTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaPagoBancoTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaRetencionTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaRetencionTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaRetencionTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionTarjetaCredito);
			}
		}

		if(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionIvaTarjetaCredito!=null) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaTarjetaCredito);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionIvaTarjetaCredito);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioTarjetaCredito() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasTarjetaCredito.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdBancoTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdBancoTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdBancoTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableComisionTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableComisionTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableComisionTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableDiferenciaTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdCuentaContableDiferenciaTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaComisionTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaComisionTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaComisionTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaPagoBancoTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaPagoBancoTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaPagoBancoTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaRetencionTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaRetencionTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdFormulaRetencionTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdTipoRetencionTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdTipoRetencionTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaTarjetaCredito);
			jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.tarjetacreditoConstantesFunciones.mostrarFK_IdTipoRetencionIvaTarjetaCredito);
			if(!this.tarjetacreditoConstantesFunciones.mostrarFK_IdTipoRetencionIvaTarjetaCredito && index>-1) {
				this.jTabbedPaneBusquedasTarjetaCredito.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioTarjetaCredito() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasTarjetaCredito.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdBancoTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdBancoTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdBancoTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableComisionTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableComisionTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableComisionTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableDiferenciaTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdCuentaContableDiferenciaTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaComisionTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaComisionTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaComisionTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaPagoBancoTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaPagoBancoTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaPagoBancoTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaRetencionTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaRetencionTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdFormulaRetencionTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdTipoRetencionTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdTipoRetencionTarjetaCredito);
			}

			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaTarjetaCredito);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.tarjetacreditoConstantesFunciones.activarFK_IdTipoRetencionIvaTarjetaCredito);
				this.jTabbedPaneBusquedasTarjetaCredito.setEnabledAt(index,this.tarjetacreditoConstantesFunciones.activarFK_IdTipoRetencionIvaTarjetaCredito);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaTarjetaCredito(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBanco")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdBancoTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdBancoTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdBancoTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContable")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdCuentaContableTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableComision")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableComisionTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdCuentaContableComisionTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableComisionTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCuentaContableDiferencia")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdCuentaContableDiferenciaTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdCuentaContableDiferenciaTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdCuentaContableDiferenciaTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormulaComision")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaComisionTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdFormulaComisionTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaComisionTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormulaPagoBanco")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaPagoBancoTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdFormulaPagoBancoTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaPagoBancoTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormulaRetencion")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdFormulaRetencionTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdFormulaRetencionTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdFormulaRetencionTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencion")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdTipoRetencionTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionTarjetaCredito);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoRetencionIva")) {
			index= this.jTabbedPaneBusquedasTarjetaCredito.indexOfComponent(this.jPanelFK_IdTipoRetencionIvaTarjetaCredito);

			this.jTabbedPaneBusquedasTarjetaCredito.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasTarjetaCredito.getComponent(index);

			this.tarjetacreditoConstantesFunciones.setResaltarFK_IdTipoRetencionIvaTarjetaCredito(resaltar);

			jPanel.setBorder(this.tarjetacreditoConstantesFunciones.resaltarFK_IdTipoRetencionIvaTarjetaCredito);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarTarjetaCredito.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioTarjetaCredito() throws Exception {

		if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioTarjetaCredito();
		this.updateVisibilidadResaltarControlesFormularioTarjetaCredito();
		this.updateHabilitarResaltarControlesFormularioTarjetaCredito();
		
	}
	
	public void updateBorderResaltarControlesFormularioTarjetaCredito() throws Exception {
		if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.tarjetacreditoConstantesFunciones.resaltaridTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltaridTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_empresaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_empresaTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_sucursalTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_sucursalTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_bancoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_bancoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarcodigoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarcodigoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarnombreTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarnombreTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarnombre_cortoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarnombre_cortoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltardigito_validoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltardigito_validoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltardigito_tarjetaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltardigito_tarjetaTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarcomisionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarcomisionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarinteresTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarinteresTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarmonto_minimoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarmonto_minimoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarporcentaje_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarporcentaje_retencionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarcomision_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarcomision_retencionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltares_retencion_redondeoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setBorderPainted(true);this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltares_retencion_redondeoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltares_pago_banco_redondeoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setBorderPainted(true);this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltares_pago_banco_redondeoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltares_comision_redondeoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setBorderPainted(true);this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltares_comision_redondeoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contableTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contableTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencion_ivaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_tipo_retencion_ivaTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_comisionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_comisionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_formula_pago_bancoTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_formula_pago_bancoTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_diferenciaTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_cuenta_contable_diferenciaTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_formula_retencionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_formula_retencionTarjetaCredito);}
		if(this.tarjetacreditoConstantesFunciones.resaltarid_formula_comisionTarjetaCredito!=null && this.jInternalFrameDetalleFormTarjetaCredito!=null) {this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setBorder(this.tarjetacreditoConstantesFunciones.resaltarid_formula_comisionTarjetaCredito);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioTarjetaCredito() throws Exception {		
		if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
	
		//this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostraridTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelidTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostraridTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_empresaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_empresaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_empresaTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_sucursalTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_sucursalTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_sucursalTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_bancoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_bancoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcodigoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelcodigoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcodigoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarnombreTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelnombreTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarnombreTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarnombre_cortoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelnombre_cortoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarnombre_cortoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrardigito_validoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPaneldigito_validoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrardigito_validoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrardigito_tarjetaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPaneldigito_tarjetaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrardigito_tarjetaTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcomisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelcomisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcomisionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarinteresTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelinteresTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarinteresTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarmonto_minimoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelmonto_minimoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarmonto_minimoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarporcentaje_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelporcentaje_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarporcentaje_retencionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcomision_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelcomision_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarcomision_retencionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_retencion_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPaneles_retencion_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_retencion_redondeoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_pago_banco_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPaneles_pago_banco_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_pago_banco_redondeoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_comision_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPaneles_comision_redondeoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrares_comision_redondeoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_tipo_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contableTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_cuenta_contableTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contableTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencion_ivaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_tipo_retencion_ivaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_tipo_retencion_ivaTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_comisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_cuenta_contable_comisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_comisionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_pago_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_formula_pago_bancoTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_pago_bancoTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_diferenciaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_cuenta_contable_diferenciaTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_cuenta_contable_diferenciaTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_formula_retencionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_retencionTarjetaCredito);
		//this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_comisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jPanelid_formula_comisionTarjetaCredito.setVisible(this.tarjetacreditoConstantesFunciones.mostrarid_formula_comisionTarjetaCredito);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioTarjetaCredito() throws Exception {
		if(this.jInternalFrameDetalleFormTarjetaCredito==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormTarjetaCredito!=null) {
	
		this.jInternalFrameDetalleFormTarjetaCredito.jLabelidTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activaridTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_empresaTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_empresaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_sucursalTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_sucursalTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_bancoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcodigoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarcodigoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextAreanombreTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarnombreTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldnombre_cortoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarnombre_cortoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_validoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activardigito_validoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFielddigito_tarjetaTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activardigito_tarjetaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomisionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarcomisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldinteresTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarinteresTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldmonto_minimoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarmonto_minimoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldporcentaje_retencionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarporcentaje_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jTextFieldcomision_retencionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarcomision_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_retencion_redondeoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activares_retencion_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_pago_banco_redondeoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activares_pago_banco_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jCheckBoxes_comision_redondeoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activares_comision_redondeoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_tipo_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contableTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_cuenta_contableTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_tipo_retencion_ivaTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_tipo_retencion_ivaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_comisionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_comisionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_pago_bancoTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_formula_pago_bancoTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_cuenta_contable_diferenciaTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_cuenta_contable_diferenciaTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_retencionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_formula_retencionTarjetaCredito);
		this.jInternalFrameDetalleFormTarjetaCredito.jComboBoxid_formula_comisionTarjetaCredito.setEnabled(this.tarjetacreditoConstantesFunciones.activarid_formula_comisionTarjetaCredito);
		}
	}
	
		
}