/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.CajaConstantesFunciones;
import com.bydan.erp.puntoventa.util.CajaParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.CajaParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.CajaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.facturacion.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.facturacion.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.facturacion.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.facturacion.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.facturacion.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class CajaBeanSwingJInternalFrame extends CajaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(CajaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<Caja> cajaValidator = new ClassValidator<Caja>(Caja.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public Caja caja;	
	public Caja cajaAux;
	public Caja cajaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public Caja cajaTotales;
	public Long idCajaActual;
	public Long iIdNuevoCaja=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboCiudad="";

	public List<Ciudad> ciudadsForeignKey;

	public List<Ciudad> getciudadsForeignKey() {
		return ciudadsForeignKey;
	}

	public void setciudadsForeignKey(List<Ciudad> ciudadsForeignKey) {
		this.ciudadsForeignKey = ciudadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ciudad ciudadForeignKey;

	public Ciudad getciudadForeignKey() {
		return ciudadForeignKey;
	}

	public void setciudadForeignKey(Ciudad ciudadForeignKey) {
		this.ciudadForeignKey = ciudadForeignKey;
	}

	public String sFinalQueryComboZona="";

	public List<Zona> zonasForeignKey;

	public List<Zona> getzonasForeignKey() {
		return zonasForeignKey;
	}

	public void setzonasForeignKey(List<Zona> zonasForeignKey) {
		this.zonasForeignKey = zonasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Zona zonaForeignKey;

	public Zona getzonaForeignKey() {
		return zonaForeignKey;
	}

	public void setzonaForeignKey(Zona zonaForeignKey) {
		this.zonaForeignKey = zonaForeignKey;
	}

		
	
	
	
	
	

	public Boolean isTienePermisosNotaCreditoPuntoVenta=false;

	public Boolean getIsTienePermisosNotaCreditoPuntoVenta() {
		return isTienePermisosNotaCreditoPuntoVenta;
	}

	public void setIsTienePermisosNotaCreditoPuntoVenta(Boolean isTienePermisosNotaCreditoPuntoVenta) {
		this.isTienePermisosNotaCreditoPuntoVenta= isTienePermisosNotaCreditoPuntoVenta;
	}


	public Boolean isTienePermisosCajaCierre=false;

	public Boolean getIsTienePermisosCajaCierre() {
		return isTienePermisosCajaCierre;
	}

	public void setIsTienePermisosCajaCierre(Boolean isTienePermisosCajaCierre) {
		this.isTienePermisosCajaCierre= isTienePermisosCajaCierre;
	}


	public Boolean isTienePermisosFacturaPuntoVenta=false;

	public Boolean getIsTienePermisosFacturaPuntoVenta() {
		return isTienePermisosFacturaPuntoVenta;
	}

	public void setIsTienePermisosFacturaPuntoVenta(Boolean isTienePermisosFacturaPuntoVenta) {
		this.isTienePermisosFacturaPuntoVenta= isTienePermisosFacturaPuntoVenta;
	}


	public Boolean isTienePermisosCajaEgreso=false;

	public Boolean getIsTienePermisosCajaEgreso() {
		return isTienePermisosCajaEgreso;
	}

	public void setIsTienePermisosCajaEgreso(Boolean isTienePermisosCajaEgreso) {
		this.isTienePermisosCajaEgreso= isTienePermisosCajaEgreso;
	}


	public Boolean isTienePermisosCajeroTurno=false;

	public Boolean getIsTienePermisosCajeroTurno() {
		return isTienePermisosCajeroTurno;
	}

	public void setIsTienePermisosCajeroTurno(Boolean isTienePermisosCajeroTurno) {
		this.isTienePermisosCajeroTurno= isTienePermisosCajeroTurno;
	}


	public Boolean isTienePermisosPresupuestoVentasPunVen=false;

	public Boolean getIsTienePermisosPresupuestoVentasPunVen() {
		return isTienePermisosPresupuestoVentasPunVen;
	}

	public void setIsTienePermisosPresupuestoVentasPunVen(Boolean isTienePermisosPresupuestoVentasPunVen) {
		this.isTienePermisosPresupuestoVentasPunVen= isTienePermisosPresupuestoVentasPunVen;
	}


	public Boolean isTienePermisosPedidoPuntoVenta=false;

	public Boolean getIsTienePermisosPedidoPuntoVenta() {
		return isTienePermisosPedidoPuntoVenta;
	}

	public void setIsTienePermisosPedidoPuntoVenta(Boolean isTienePermisosPedidoPuntoVenta) {
		this.isTienePermisosPedidoPuntoVenta= isTienePermisosPedidoPuntoVenta;
	}


	public Boolean isTienePermisosCajaIngreso=false;

	public Boolean getIsTienePermisosCajaIngreso() {
		return isTienePermisosCajaIngreso;
	}

	public void setIsTienePermisosCajaIngreso(Boolean isTienePermisosCajaIngreso) {
		this.isTienePermisosCajaIngreso= isTienePermisosCajaIngreso;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoCaja;
	public Boolean isPermisoNuevoCaja;
	public Boolean isPermisoActualizarCaja;
	public Boolean isPermisoActualizarOriginalCaja;
	public Boolean isPermisoEliminarCaja;
	public Boolean isPermisoGuardarCambiosCaja;
	public Boolean isPermisoConsultaCaja;
	public Boolean isPermisoBusquedaCaja;
	public Boolean isPermisoReporteCaja;
	public Boolean isPermisoPaginacionMedioCaja;
	public Boolean isPermisoPaginacionAltoCaja;
	public Boolean isPermisoPaginacionTodoCaja;
	public Boolean isPermisoCopiarCaja;
	public Boolean isPermisoVerFormCaja;
	public Boolean isPermisoDuplicarCaja;
	public Boolean isPermisoOrdenCaja;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public CajaParameterReturnGeneral cajaReturnGeneral;
	public CajaParameterReturnGeneral cajaParameterGeneral;
	
	

	public NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic=null;

	public NotaCreditoPuntoVentaLogic getNotaCreditoPuntoVentaLogic() {
		return notacreditopuntoventaLogic;
	}

	public void setNotaCreditoPuntoVentaLogic(NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic) {
		this.notacreditopuntoventaLogic = notacreditopuntoventaLogic;
	}


	public CajaCierreLogic cajacierreLogic=null;

	public CajaCierreLogic getCajaCierreLogic() {
		return cajacierreLogic;
	}

	public void setCajaCierreLogic(CajaCierreLogic cajacierreLogic) {
		this.cajacierreLogic = cajacierreLogic;
	}


	public FacturaPuntoVentaLogic facturapuntoventaLogic=null;

	public FacturaPuntoVentaLogic getFacturaPuntoVentaLogic() {
		return facturapuntoventaLogic;
	}

	public void setFacturaPuntoVentaLogic(FacturaPuntoVentaLogic facturapuntoventaLogic) {
		this.facturapuntoventaLogic = facturapuntoventaLogic;
	}


	public CajaEgresoLogic cajaegresoLogic=null;

	public CajaEgresoLogic getCajaEgresoLogic() {
		return cajaegresoLogic;
	}

	public void setCajaEgresoLogic(CajaEgresoLogic cajaegresoLogic) {
		this.cajaegresoLogic = cajaegresoLogic;
	}


	public CajeroTurnoLogic cajeroturnoLogic=null;

	public CajeroTurnoLogic getCajeroTurnoLogic() {
		return cajeroturnoLogic;
	}

	public void setCajeroTurnoLogic(CajeroTurnoLogic cajeroturnoLogic) {
		this.cajeroturnoLogic = cajeroturnoLogic;
	}


	public PresupuestoVentasPunVenLogic presupuestoventaspunvenLogic=null;

	public PresupuestoVentasPunVenLogic getPresupuestoVentasPunVenLogic() {
		return presupuestoventaspunvenLogic;
	}

	public void setPresupuestoVentasPunVenLogic(PresupuestoVentasPunVenLogic presupuestoventaspunvenLogic) {
		this.presupuestoventaspunvenLogic = presupuestoventaspunvenLogic;
	}


	public PedidoPuntoVentaLogic pedidopuntoventaLogic=null;

	public PedidoPuntoVentaLogic getPedidoPuntoVentaLogic() {
		return pedidopuntoventaLogic;
	}

	public void setPedidoPuntoVentaLogic(PedidoPuntoVentaLogic pedidopuntoventaLogic) {
		this.pedidopuntoventaLogic = pedidopuntoventaLogic;
	}


	public CajaIngresoLogic cajaingresoLogic=null;

	public CajaIngresoLogic getCajaIngresoLogic() {
		return cajaingresoLogic;
	}

	public void setCajaIngresoLogic(CajaIngresoLogic cajaingresoLogic) {
		this.cajaingresoLogic = cajaingresoLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoCaja=false;
	public Boolean esParaAccionDesdeFormularioCaja=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	
	
	//ESTA EN PADRE
	
	//public CajaLogic cajaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public Caja cajaBean;
	public CajaConstantesFunciones cajaConstantesFunciones;
	//public CajaParameterReturnGeneral cajaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public PaisLogic paisLogic;
	public CiudadLogic ciudadLogic;
	public ZonaLogic zonaLogic;
	
	//PARAMETROS
	
	
	//public List<Caja> cajas;	
	//public List<Caja> cajasEliminados;
	//public List<Caja> cajasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoCaja=false;
	public Boolean isVisibilidadCeldaDuplicarCaja=true;
	public Boolean isVisibilidadCeldaCopiarCaja=true;
	public Boolean isVisibilidadCeldaVerFormCaja=true;
	public Boolean isVisibilidadCeldaOrdenCaja=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesCaja=false;
	public Boolean isVisibilidadCeldaModificarCaja=false;
	public Boolean isVisibilidadCeldaActualizarCaja=false;
	public Boolean isVisibilidadCeldaEliminarCaja=false;
	public Boolean isVisibilidadCeldaCancelarCaja=false;
	public Boolean isVisibilidadCeldaGuardarCaja=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosCaja=false;	
	
	
	public Boolean isVisibilidadFK_IdCiudad=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdZona=false;
	
	public Long getiIdNuevoCaja() {
		return this.iIdNuevoCaja;
	}

	public void setiIdNuevoCaja(Long iIdNuevoCaja) {
		this.iIdNuevoCaja = iIdNuevoCaja;
	}
	
	public Long getidCajaActual() {
		return this.idCajaActual;
	}

	public void setidCajaActual(Long idCajaActual) {
		this.idCajaActual = idCajaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public Caja getcaja() {
		return this.caja;
	}

	public void setcaja(Caja caja) {
		this.caja = caja;
	}
	
	public Caja getcajaAux() {
		return this.cajaAux;
	}

	public void setcajaAux(Caja cajaAux) {
		this.cajaAux = cajaAux;
	}				
	
	public Caja getcajaAnterior() {
		return this.cajaAnterior;
	}

	public void setcajaAnterior(Caja cajaAnterior) {
		this.cajaAnterior = cajaAnterior;
	}	
	
	public Caja getcajaTotales() {
		return this.cajaTotales;
	}

	public void setcajaTotales(Caja cajaTotales) {
		this.cajaTotales = cajaTotales;
	}	
	
	public Caja getcajaBean() {
		return this.cajaBean;
	}

	public void setcajaBean(Caja cajaBean) {
		this.cajaBean = cajaBean;
	}	
	
	public CajaParameterReturnGeneral getcajaReturnGeneral() {
		return this.cajaReturnGeneral;
	}

	public void setcajaReturnGeneral(CajaParameterReturnGeneral cajaReturnGeneral) {
		this.cajaReturnGeneral = cajaReturnGeneral;
	}	
	
	
	public Long id_ciudadFK_IdCiudad=-1L;

	public Long getid_ciudadFK_IdCiudad() {
		return this.id_ciudadFK_IdCiudad;
	}

	public void setid_ciudadFK_IdCiudad(Long id_ciudadFK_IdCiudad) {
		this.id_ciudadFK_IdCiudad = id_ciudadFK_IdCiudad;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_zonaFK_IdZona=-1L;

	public Long getid_zonaFK_IdZona() {
		return this.id_zonaFK_IdZona;
	}

	public void setid_zonaFK_IdZona(Long id_zonaFK_IdZona) {
		this.id_zonaFK_IdZona = id_zonaFK_IdZona;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public CajaLogic getCajaLogic()	{		
		return cajaLogic;
	}

	public void setCajaLogic(CajaLogic cajaLogic) {
		this.cajaLogic = cajaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoCaja() {
		return isEsNuevoCaja;
	}

	public void setIsEsNuevoCaja(Boolean isEsNuevoCaja) {
		this.isEsNuevoCaja = isEsNuevoCaja;
	}

	public Boolean getEsParaAccionDesdeFormularioCaja() {
		return esParaAccionDesdeFormularioCaja;
	}
	
	public void setEsParaAccionDesdeFormularioCaja(Boolean esParaAccionDesdeFormularioCaja) {
		this.esParaAccionDesdeFormularioCaja = esParaAccionDesdeFormularioCaja;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(cajaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(cajaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(cajaSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCiudadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ciudadsForeignKey=new ArrayList<Ciudad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CiudadLogic ciudadLogic=new CiudadLogic();

			//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

					ciudadLogic.getTodosCiudadsWithConnection(sFinalQuery,new Pagination());

					this.ciudadsForeignKey=ciudadLogic.getCiudads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCiudad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ciudadLogic.getEntityWithConnection(cajaSessionBean.getlidCiudadActual());
					this.ciudadsForeignKey.add(ciudadLogic.getCiudad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosZonasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.zonasForeignKey=new ArrayList<Zona>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ZonaLogic zonaLogic=new ZonaLogic();

			//zonaLogic.getZonaDataAccess().setIsForForeingKeyData(true);

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//zonaLogic.getZonaDataAccess().setIsForForeingKeyData(true);

					zonaLogic.getTodosZonasWithConnection(sFinalQuery,new Pagination());

					this.zonasForeignKey=zonaLogic.getZonas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaZona(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					zonaLogic.getEntityWithConnection(cajaSessionBean.getlidZonaActual());
					this.zonasForeignKey.add(zonaLogic.getZona());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.caja!=null) {
						this.caja.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormCaja!=null) {
						this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaCaja.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormCaja!=null) {
						if(this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.getItemCount()>0) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaCajaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaCajaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaCajaGenerico!=null && jComboBoxid_empresaCajaGenerico.getItemCount()>0) {
					jComboBoxid_empresaCajaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.caja!=null) {
						this.caja.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormCaja!=null) {
						this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalCaja.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormCaja!=null) {
						if(this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.getItemCount()>0) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalCajaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalCajaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalCajaGenerico!=null && jComboBoxid_sucursalCajaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalCajaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.caja!=null) {
						this.caja.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormCaja!=null) {
						this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisCaja.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormCaja!=null) {
						if(this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.getItemCount()>0) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisCaja!=null) {
						jComboBoxid_paisFK_IdPaisCaja.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisCaja!=null) {
							//jComboBoxid_paisFK_IdPaisCaja.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisCaja.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisCaja.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisCajaGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisCajaGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisCajaGenerico!=null && jComboBoxid_paisCajaGenerico.getItemCount()>0) {
					jComboBoxid_paisCajaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCiudadForeignKey(Long idCiudadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ciudadTemp!=null) {

					if(this.caja!=null) {
						this.caja.setCiudad(ciudadTemp);
					}

					if(this.jInternalFrameDetalleFormCaja!=null) {
						this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setSelectedItem(ciudadTemp);
					}
				} else {
					//jComboBoxid_ciudadCaja.setSelectedItem(ciudadTemp);
					if(this.jInternalFrameDetalleFormCaja!=null) {
						if(this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.getItemCount()>0) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){
					if(ciudadTemp!=null && jComboBoxid_ciudadFK_IdCiudadCaja!=null) {
						jComboBoxid_ciudadFK_IdCiudadCaja.setSelectedItem(ciudadTemp);
					} else {
						if(jComboBoxid_ciudadFK_IdCiudadCaja!=null) {
							//jComboBoxid_ciudadFK_IdCiudadCaja.setSelectedItem(ciudadTemp);
							if(jComboBoxid_ciudadFK_IdCiudadCaja.getItemCount()>0) {
								jComboBoxid_ciudadFK_IdCiudadCaja.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCiudadForeignKeyDescripcion(Long idCiudadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}


			sDescripcion=CiudadConstantesFunciones.getCiudadDescripcion(ciudadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCiudadForeignKeyGenerico(Long idCiudadSeleccionado,JComboBox jComboBoxid_ciudadCajaGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(ciudadTemp!=null) {
				jComboBoxid_ciudadCajaGenerico.setSelectedItem(ciudadTemp);
			} else {
				if(jComboBoxid_ciudadCajaGenerico!=null && jComboBoxid_ciudadCajaGenerico.getItemCount()>0) {
					jComboBoxid_ciudadCajaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualZonaForeignKey(Long idZonaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(zonaTemp!=null) {

					if(this.caja!=null) {
						this.caja.setZona(zonaTemp);
					}

					if(this.jInternalFrameDetalleFormCaja!=null) {
						this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setSelectedItem(zonaTemp);
					}
				} else {
					//jComboBoxid_zonaCaja.setSelectedItem(zonaTemp);
					if(this.jInternalFrameDetalleFormCaja!=null) {
						if(this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.getItemCount()>0) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdZona") || sFormularioTipoBusqueda.equals("Todos")){
					if(zonaTemp!=null && jComboBoxid_zonaFK_IdZonaCaja!=null) {
						jComboBoxid_zonaFK_IdZonaCaja.setSelectedItem(zonaTemp);
					} else {
						if(jComboBoxid_zonaFK_IdZonaCaja!=null) {
							//jComboBoxid_zonaFK_IdZonaCaja.setSelectedItem(zonaTemp);
							if(jComboBoxid_zonaFK_IdZonaCaja.getItemCount()>0) {
								jComboBoxid_zonaFK_IdZonaCaja.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualZonaForeignKeyDescripcion(Long idZonaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}


			sDescripcion=ZonaConstantesFunciones.getZonaDescripcion(zonaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualZonaForeignKeyGenerico(Long idZonaSeleccionado,JComboBox jComboBoxid_zonaCajaGenerico)throws Exception
	{
		try
		{
			Zona  zonaTemp=null;

			for(Zona zonaAux:zonasForeignKey) {
				if(zonaAux.getId()!=null && zonaAux.getId().equals(idZonaSeleccionado)) {
					zonaTemp=zonaAux;
					break;
				}
			}

			if(zonaTemp!=null) {
				jComboBoxid_zonaCajaGenerico.setSelectedItem(zonaTemp);
			} else {
				if(jComboBoxid_zonaCajaGenerico!=null && jComboBoxid_zonaCajaGenerico.getItemCount()>0) {
					jComboBoxid_zonaCajaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(Caja caja,JComboBox jComboBoxid_empresaCajaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaCajaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaCajaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				caja.setid_empresa(empresaAux.getId());
				caja.setempresa_descripcion(CajaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				caja.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(Caja caja,JComboBox jComboBoxid_sucursalCajaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalCajaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalCajaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				caja.setid_sucursal(sucursalAux.getId());
				caja.setsucursal_descripcion(CajaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				caja.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(Caja caja,JComboBox jComboBoxid_paisCajaGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisCajaGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisCajaGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				caja.setid_pais(paisAux.getId());
				caja.setpais_descripcion(CajaConstantesFunciones.getPaisDescripcion(paisAux));
				caja.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCiudadForeignKey(Caja caja,JComboBox jComboBoxid_ciudadCajaGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadAux=new Ciudad();

			if(jComboBoxid_ciudadCajaGenerico==null) {
				ciudadAux=(Ciudad)this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.getSelectedItem();
			} else {
				ciudadAux=(Ciudad)jComboBoxid_ciudadCajaGenerico.getSelectedItem();
			}

			if(ciudadAux!=null && ciudadAux.getId()!=null) {
				caja.setid_ciudad(ciudadAux.getId());
				caja.setciudad_descripcion(CajaConstantesFunciones.getCiudadDescripcion(ciudadAux));
				caja.setCiudad(ciudadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarZonaForeignKey(Caja caja,JComboBox jComboBoxid_zonaCajaGenerico)throws Exception
	{
		try
		{
			Zona  zonaAux=new Zona();

			if(jComboBoxid_zonaCajaGenerico==null) {
				zonaAux=(Zona)this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.getSelectedItem();
			} else {
				zonaAux=(Zona)jComboBoxid_zonaCajaGenerico.getSelectedItem();
			}

			if(zonaAux!=null && zonaAux.getId()!=null) {
				caja.setid_zona(zonaAux.getId());
				caja.setzona_descripcion(CajaConstantesFunciones.getZonaDescripcion(zonaAux));
				caja.setZona(zonaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) { 
							this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCaja!=null) { 
					}

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) { 
							this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCaja!=null) { 
					}

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) { 
							this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCaja!=null) { 
					}

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisCaja.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisCaja.addItem(pais);
							}
						}

						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCiudadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCiudad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) { 
							this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.addItem(ciudad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCaja!=null) { 
					}

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadCaja.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jComboBoxid_ciudadFK_IdCiudadCaja.addItem(ciudad);
							}
						}

						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameZonasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingZona=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) { 
							this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.removeAllItems();

							for(Zona zona:this.zonasForeignKey) {
								this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.addItem(zona);
							}
						}
					}

					if(this.jInternalFrameDetalleFormCaja!=null) { 
					}

					if(!CajaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdZona") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_zonaFK_IdZonaCaja.removeAllItems();

							for(Zona zona:this.zonasForeignKey) {
								this.jComboBoxid_zonaFK_IdZonaCaja.addItem(zona);
							}
						}

						if(!CajaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisCaja.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisCaja.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCiudadForeignKey(Ciudad ciudad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setSelectedItem(ciudad);
						}
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_ciudadFK_IdCiudadCaja.setSelectedItem(ciudad);
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadCaja.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameZonaForeignKey(Zona zona,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setSelectedItem(zona);
						}
					} else {
						if(this.jInternalFrameDetalleFormCaja!=null) {
							this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_zonaFK_IdZonaCaja.setSelectedItem(zona);
						} else {
							this.jComboBoxid_zonaFK_IdZonaCaja.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesCaja() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			CajaConstantesFunciones.refrescarForeignKeysDescripcionesCaja(this.cajaLogic.getCajas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			CajaConstantesFunciones.refrescarForeignKeysDescripcionesCaja(this.cajas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Ciudad.class));
		classes.add(new Classe(Zona.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//cajaLogic.setCajas(this.cajas);
			cajaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public CajaParameterReturnGeneral getCajaParameterGeneral() {
		return this.cajaParameterGeneral;
	}
	
	public void setCajaParameterGeneral(CajaParameterReturnGeneral cajaParameterGeneral) {
		this.cajaParameterGeneral = cajaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoCaja() {
		return isPermisoTodoCaja;
	}

	public void setIsPermisoTodoCaja(Boolean isPermisoTodoCaja) {
		this.isPermisoTodoCaja = isPermisoTodoCaja;
	}

	public Boolean getIsPermisoNuevoCaja() {
		return isPermisoNuevoCaja;
	}

	public void setIsPermisoNuevoCaja(Boolean isPermisoNuevoCaja) {
		this.isPermisoNuevoCaja = isPermisoNuevoCaja;
	}

	public Boolean getIsPermisoActualizarCaja() {
		return isPermisoActualizarCaja;
	}

	public void setIsPermisoActualizarCaja(Boolean isPermisoActualizarCaja) {
		this.isPermisoActualizarCaja = isPermisoActualizarCaja;
	}

	public Boolean getIsPermisoEliminarCaja() {
		return isPermisoEliminarCaja;
	}

	public void setIsPermisoEliminarCaja(Boolean isPermisoEliminarCaja) {
		this.isPermisoEliminarCaja = isPermisoEliminarCaja;
	}

	public Boolean getIsPermisoGuardarCambiosCaja() {
		return isPermisoGuardarCambiosCaja;
	}

	public void setIsPermisoGuardarCambiosCaja(Boolean isPermisoGuardarCambiosCaja) {
		this.isPermisoGuardarCambiosCaja = isPermisoGuardarCambiosCaja;
	}
	
	public Boolean getIsPermisoConsultaCaja() {
		return isPermisoConsultaCaja;
	}

	public void setIsPermisoConsultaCaja(Boolean isPermisoConsultaCaja) {
		this.isPermisoConsultaCaja = isPermisoConsultaCaja;
	}

	public Boolean getIsPermisoBusquedaCaja() {
		return isPermisoBusquedaCaja;
	}

	public void setIsPermisoBusquedaCaja(Boolean isPermisoBusquedaCaja) {
		this.isPermisoBusquedaCaja = isPermisoBusquedaCaja;
	}

	public Boolean getIsPermisoReporteCaja() {
		return isPermisoReporteCaja;
	}

	public void setIsPermisoReporteCaja(Boolean isPermisoReporteCaja) {
		this.isPermisoReporteCaja = isPermisoReporteCaja;
	}
	
	public Boolean getIsPermisoPaginacionMedioCaja() {
		return isPermisoPaginacionMedioCaja;
	}

	public void setIsPermisoPaginacionMedioCaja(Boolean isPermisoPaginacionMedioCaja) {
		this.isPermisoPaginacionMedioCaja = isPermisoPaginacionMedioCaja;
	}
	
	public Boolean getIsPermisoPaginacionTodoCaja() {
		return isPermisoPaginacionTodoCaja;
	}

	public void setIsPermisoPaginacionTodoCaja(Boolean isPermisoPaginacionTodoCaja) {
		this.isPermisoPaginacionTodoCaja = isPermisoPaginacionTodoCaja;
	}
	
	public Boolean getIsPermisoPaginacionAltoCaja() {
		return isPermisoPaginacionAltoCaja;
	}

	public void setIsPermisoPaginacionAltoCaja(Boolean isPermisoPaginacionAltoCaja) {
		this.isPermisoPaginacionAltoCaja = isPermisoPaginacionAltoCaja;
	}
	
	public Boolean getIsPermisoCopiarCaja() {
		return isPermisoCopiarCaja;
	}

	public void setIsPermisoCopiarCaja(Boolean isPermisoCopiarCaja) {
		this.isPermisoCopiarCaja = isPermisoCopiarCaja;
	}
	
	public Boolean getIsPermisoVerFormCaja() {
		return isPermisoVerFormCaja;
	}

	public void setIsPermisoVerFormCaja(Boolean isPermisoVerFormCaja) {
		this.isPermisoVerFormCaja = isPermisoVerFormCaja;
	}
	
	public Boolean getIsPermisoDuplicarCaja() {
		return isPermisoDuplicarCaja;
	}

	public void setIsPermisoDuplicarCaja(Boolean isPermisoDuplicarCaja) {
		this.isPermisoDuplicarCaja = isPermisoDuplicarCaja;
	}
	
	public Boolean getIsPermisoOrdenCaja() {
		return isPermisoOrdenCaja;
	}

	public void setIsPermisoOrdenCaja(Boolean isPermisoOrdenCaja) {
		this.isPermisoOrdenCaja = isPermisoOrdenCaja;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoCaja() {
		return isVisibilidadCeldaNuevoCaja;
	}

	public void setIsVisibilidadCeldaNuevoCaja(Boolean isVisibilidadCeldaNuevoCaja) {
		this.isVisibilidadCeldaNuevoCaja = isVisibilidadCeldaNuevoCaja;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarCaja() {
		return isVisibilidadCeldaDuplicarCaja;
	}

	public void setIsVisibilidadCeldaDuplicarCaja(Boolean isVisibilidadCeldaDuplicarCaja) {
		this.isVisibilidadCeldaDuplicarCaja = isVisibilidadCeldaDuplicarCaja;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarCaja() {
		return isVisibilidadCeldaCopiarCaja;
	}

	public void setIsVisibilidadCeldaCopiarCaja(Boolean isVisibilidadCeldaCopiarCaja) {
		this.isVisibilidadCeldaCopiarCaja = isVisibilidadCeldaCopiarCaja;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormCaja() {
		return isVisibilidadCeldaVerFormCaja;
	}

	public void setIsVisibilidadCeldaVerFormCaja(Boolean isVisibilidadCeldaVerFormCaja) {
		this.isVisibilidadCeldaVerFormCaja = isVisibilidadCeldaVerFormCaja;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenCaja() {
		return isVisibilidadCeldaOrdenCaja;
	}

	public void setIsVisibilidadCeldaOrdenCaja(Boolean isVisibilidadCeldaOrdenCaja) {
		this.isVisibilidadCeldaOrdenCaja = isVisibilidadCeldaOrdenCaja;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesCaja() {
		return isVisibilidadCeldaNuevoRelacionesCaja;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesCaja(Boolean isVisibilidadCeldaNuevoRelacionesCaja) {
		this.isVisibilidadCeldaNuevoRelacionesCaja = isVisibilidadCeldaNuevoRelacionesCaja;
	}
	
	public Boolean getIsVisibilidadCeldaModificarCaja() {
		return isVisibilidadCeldaModificarCaja;
	}

	public void setIsVisibilidadCeldaModificarCaja(Boolean isVisibilidadCeldaModificarCaja) {
		this.isVisibilidadCeldaModificarCaja = isVisibilidadCeldaModificarCaja;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarCaja() {
		return isVisibilidadCeldaActualizarCaja;
	}

	public void setIsVisibilidadCeldaActualizarCaja(Boolean isVisibilidadCeldaActualizarCaja) {
		this.isVisibilidadCeldaActualizarCaja = isVisibilidadCeldaActualizarCaja;
	}

	public Boolean getIsVisibilidadCeldaEliminarCaja() {
		return isVisibilidadCeldaEliminarCaja;
	}

	public void setIsVisibilidadCeldaEliminarCaja(Boolean isVisibilidadCeldaEliminarCaja) {
		this.isVisibilidadCeldaEliminarCaja = isVisibilidadCeldaEliminarCaja;
	}

	public Boolean getIsVisibilidadCeldaCancelarCaja() {
		return isVisibilidadCeldaCancelarCaja;
	}

	public void setIsVisibilidadCeldaCancelarCaja(Boolean isVisibilidadCeldaCancelarCaja) {
		this.isVisibilidadCeldaCancelarCaja = isVisibilidadCeldaCancelarCaja;
	}

	public Boolean getIsVisibilidadCeldaGuardarCaja() {
		return isVisibilidadCeldaGuardarCaja;
	}

	public void setIsVisibilidadCeldaGuardarCaja(Boolean isVisibilidadCeldaGuardarCaja) {
		this.isVisibilidadCeldaGuardarCaja = isVisibilidadCeldaGuardarCaja;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosCaja() {
		return isVisibilidadCeldaGuardarCambiosCaja;
	}

	public void setIsVisibilidadCeldaGuardarCambiosCaja(Boolean isVisibilidadCeldaGuardarCambiosCaja) {
		this.isVisibilidadCeldaGuardarCambiosCaja = isVisibilidadCeldaGuardarCambiosCaja;
	}
		
	public CajaSessionBean getcajaSessionBean() {
		return this.cajaSessionBean;
	}
	
	public void setcajaSessionBean(CajaSessionBean cajaSessionBean) {
		this.cajaSessionBean=cajaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCiudad() {
		return this.isVisibilidadFK_IdCiudad;
	}

	public void setisVisibilidadFK_IdCiudad(Boolean isVisibilidadFK_IdCiudad) {
		this.isVisibilidadFK_IdCiudad=isVisibilidadFK_IdCiudad;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdZona() {
		return this.isVisibilidadFK_IdZona;
	}

	public void setisVisibilidadFK_IdZona(Boolean isVisibilidadFK_IdZona) {
		this.isVisibilidadFK_IdZona=isVisibilidadFK_IdZona;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysCaja(Caja caja)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(caja,null);
				this.setActualParaGuardarSucursalForeignKey(caja,null);
				this.setActualParaGuardarPaisForeignKey(caja,null);
				this.setActualParaGuardarCiudadForeignKey(caja,null);
				this.setActualParaGuardarZonaForeignKey(caja,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(Caja caja,Caja cajaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalCaja(caja);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		cajaAux.setId(caja.getId());
		cajaAux.setVersionRow(caja.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessCaja();
		
			int intSelectedRow = this.jTableDatosCaja.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = cajaValidator.getInvalidValues(this.caja);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			cajaLogic.setDatosCliente(datosCliente);
			cajaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				cajaAux=new  Caja();
				
				cajaAux.setIsNew(true);
				cajaAux.setIsChanged(true);
				
				cajaAux.setCajaOriginal(this.caja);
				
				cajaAux.setId(this.caja.getId());	
				cajaAux.setVersionRow(this.caja.getVersionRow());	
				cajaAux.setid_empresa(this.caja.getid_empresa());	
				cajaAux.setid_sucursal(this.caja.getid_sucursal());	
				cajaAux.setnombre(this.caja.getnombre());	
				cajaAux.setnombre_equipo(this.caja.getnombre_equipo());	
				cajaAux.setnombre_impresora(this.caja.getnombre_impresora());	
				cajaAux.setsecuencial_pedido(this.caja.getsecuencial_pedido());	
				cajaAux.setsecuencial_pedido_formato(this.caja.getsecuencial_pedido_formato());	
				cajaAux.setpunto_emision(this.caja.getpunto_emision());	
				cajaAux.setestablecimiento(this.caja.getestablecimiento());	
				cajaAux.setfecha_inicio(this.caja.getfecha_inicio());	
				cajaAux.setfecha_final(this.caja.getfecha_final());	
				cajaAux.setesta_activo(this.caja.getesta_activo());	
				cajaAux.setdescripcion(this.caja.getdescripcion());	
				cajaAux.setsecuencial_factura(this.caja.getsecuencial_factura());	
				cajaAux.setsecuencial_factura_formato(this.caja.getsecuencial_factura_formato());	
				cajaAux.setsecuencial_nota_venta(this.caja.getsecuencial_nota_venta());	
				cajaAux.setsecuencial_nota_venta_formato(this.caja.getsecuencial_nota_venta_formato());	
				cajaAux.setsecuencia_nota_credito(this.caja.getsecuencia_nota_credito());	
				cajaAux.setsecuencia_nota_credito_formato(this.caja.getsecuencia_nota_credito_formato());	
				cajaAux.setautorizacion_factura(this.caja.getautorizacion_factura());	
				cajaAux.setautorizacion_nota_venta(this.caja.getautorizacion_nota_venta());	
				cajaAux.setautorizacion_nota_credito(this.caja.getautorizacion_nota_credito());	
				cajaAux.setfecha_caduca_factura(this.caja.getfecha_caduca_factura());	
				cajaAux.setfecha_caduca_nota_venta(this.caja.getfecha_caduca_nota_venta());	
				cajaAux.setfecha_caduca_nota_credito(this.caja.getfecha_caduca_nota_credito());	
				cajaAux.setserie_factura(this.caja.getserie_factura());	
				cajaAux.setserie_nota_venta(this.caja.getserie_nota_venta());	
				cajaAux.setserie_nota_credito(this.caja.getserie_nota_credito());	
				cajaAux.setsec_inicial_factura(this.caja.getsec_inicial_factura());	
				cajaAux.setsec_inicial_nota_venta(this.caja.getsec_inicial_nota_venta());	
				cajaAux.setsec_inicial_nota_credito(this.caja.getsec_inicial_nota_credito());	
				cajaAux.setsec_final_factura(this.caja.getsec_final_factura());	
				cajaAux.setsec_final_nota_venta(this.caja.getsec_final_nota_venta());	
				cajaAux.setsec_final_nota_credito(this.caja.getsec_final_nota_credito());	
				cajaAux.setid_pais(this.caja.getid_pais());	
				cajaAux.setid_ciudad(this.caja.getid_ciudad());	
				cajaAux.setid_zona(this.caja.getid_zona());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cajaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cajaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(cajaAux,cajaLogic.getCajas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cajaAux,cajas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.cajaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cajaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.saveCajas();//WithConnection
						//cajaLogic.getSetVersionRowCajas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.caja,cajaAux);
					
					this.refrescarForeignKeysDescripcionesCaja();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cajaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				cajaAux=new  Caja();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.cajaSessionBean.getEsGuardarRelacionado() 
					|| (this.cajaSessionBean.getEsGuardarRelacionado() && this.caja.getId()>=0)) {
						
					cajaAux.setIsNew(false);
				}
				
				cajaAux.setIsDeleted(false);
			
				cajaAux.setId(this.caja.getId());	
				cajaAux.setVersionRow(this.caja.getVersionRow());	
				cajaAux.setid_empresa(this.caja.getid_empresa());	
				cajaAux.setid_sucursal(this.caja.getid_sucursal());	
				cajaAux.setnombre(this.caja.getnombre());	
				cajaAux.setnombre_equipo(this.caja.getnombre_equipo());	
				cajaAux.setnombre_impresora(this.caja.getnombre_impresora());	
				cajaAux.setsecuencial_pedido(this.caja.getsecuencial_pedido());	
				cajaAux.setsecuencial_pedido_formato(this.caja.getsecuencial_pedido_formato());	
				cajaAux.setpunto_emision(this.caja.getpunto_emision());	
				cajaAux.setestablecimiento(this.caja.getestablecimiento());	
				cajaAux.setfecha_inicio(this.caja.getfecha_inicio());	
				cajaAux.setfecha_final(this.caja.getfecha_final());	
				cajaAux.setesta_activo(this.caja.getesta_activo());	
				cajaAux.setdescripcion(this.caja.getdescripcion());	
				cajaAux.setsecuencial_factura(this.caja.getsecuencial_factura());	
				cajaAux.setsecuencial_factura_formato(this.caja.getsecuencial_factura_formato());	
				cajaAux.setsecuencial_nota_venta(this.caja.getsecuencial_nota_venta());	
				cajaAux.setsecuencial_nota_venta_formato(this.caja.getsecuencial_nota_venta_formato());	
				cajaAux.setsecuencia_nota_credito(this.caja.getsecuencia_nota_credito());	
				cajaAux.setsecuencia_nota_credito_formato(this.caja.getsecuencia_nota_credito_formato());	
				cajaAux.setautorizacion_factura(this.caja.getautorizacion_factura());	
				cajaAux.setautorizacion_nota_venta(this.caja.getautorizacion_nota_venta());	
				cajaAux.setautorizacion_nota_credito(this.caja.getautorizacion_nota_credito());	
				cajaAux.setfecha_caduca_factura(this.caja.getfecha_caduca_factura());	
				cajaAux.setfecha_caduca_nota_venta(this.caja.getfecha_caduca_nota_venta());	
				cajaAux.setfecha_caduca_nota_credito(this.caja.getfecha_caduca_nota_credito());	
				cajaAux.setserie_factura(this.caja.getserie_factura());	
				cajaAux.setserie_nota_venta(this.caja.getserie_nota_venta());	
				cajaAux.setserie_nota_credito(this.caja.getserie_nota_credito());	
				cajaAux.setsec_inicial_factura(this.caja.getsec_inicial_factura());	
				cajaAux.setsec_inicial_nota_venta(this.caja.getsec_inicial_nota_venta());	
				cajaAux.setsec_inicial_nota_credito(this.caja.getsec_inicial_nota_credito());	
				cajaAux.setsec_final_factura(this.caja.getsec_final_factura());	
				cajaAux.setsec_final_nota_venta(this.caja.getsec_final_nota_venta());	
				cajaAux.setsec_final_nota_credito(this.caja.getsec_final_nota_credito());	
				cajaAux.setid_pais(this.caja.getid_pais());	
				cajaAux.setid_ciudad(this.caja.getid_ciudad());	
				cajaAux.setid_zona(this.caja.getid_zona());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cajaAux,cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cajaAux,cajas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.cajaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cajaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.saveCajas();//WithConnection
						//cajaLogic.getSetVersionRowCajas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.caja,cajaAux);
					
					this.refrescarForeignKeysDescripcionesCaja();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cajaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				cajaAux=new  Caja();
				
				cajaAux.setIsNew(false);
				cajaAux.setIsChanged(false);
				
				cajaAux.setIsDeleted(true);
				
				cajaAux.setId(this.caja.getId());	
				cajaAux.setVersionRow(this.caja.getVersionRow());	
				cajaAux.setid_empresa(this.caja.getid_empresa());	
				cajaAux.setid_sucursal(this.caja.getid_sucursal());	
				cajaAux.setnombre(this.caja.getnombre());	
				cajaAux.setnombre_equipo(this.caja.getnombre_equipo());	
				cajaAux.setnombre_impresora(this.caja.getnombre_impresora());	
				cajaAux.setsecuencial_pedido(this.caja.getsecuencial_pedido());	
				cajaAux.setsecuencial_pedido_formato(this.caja.getsecuencial_pedido_formato());	
				cajaAux.setpunto_emision(this.caja.getpunto_emision());	
				cajaAux.setestablecimiento(this.caja.getestablecimiento());	
				cajaAux.setfecha_inicio(this.caja.getfecha_inicio());	
				cajaAux.setfecha_final(this.caja.getfecha_final());	
				cajaAux.setesta_activo(this.caja.getesta_activo());	
				cajaAux.setdescripcion(this.caja.getdescripcion());	
				cajaAux.setsecuencial_factura(this.caja.getsecuencial_factura());	
				cajaAux.setsecuencial_factura_formato(this.caja.getsecuencial_factura_formato());	
				cajaAux.setsecuencial_nota_venta(this.caja.getsecuencial_nota_venta());	
				cajaAux.setsecuencial_nota_venta_formato(this.caja.getsecuencial_nota_venta_formato());	
				cajaAux.setsecuencia_nota_credito(this.caja.getsecuencia_nota_credito());	
				cajaAux.setsecuencia_nota_credito_formato(this.caja.getsecuencia_nota_credito_formato());	
				cajaAux.setautorizacion_factura(this.caja.getautorizacion_factura());	
				cajaAux.setautorizacion_nota_venta(this.caja.getautorizacion_nota_venta());	
				cajaAux.setautorizacion_nota_credito(this.caja.getautorizacion_nota_credito());	
				cajaAux.setfecha_caduca_factura(this.caja.getfecha_caduca_factura());	
				cajaAux.setfecha_caduca_nota_venta(this.caja.getfecha_caduca_nota_venta());	
				cajaAux.setfecha_caduca_nota_credito(this.caja.getfecha_caduca_nota_credito());	
				cajaAux.setserie_factura(this.caja.getserie_factura());	
				cajaAux.setserie_nota_venta(this.caja.getserie_nota_venta());	
				cajaAux.setserie_nota_credito(this.caja.getserie_nota_credito());	
				cajaAux.setsec_inicial_factura(this.caja.getsec_inicial_factura());	
				cajaAux.setsec_inicial_nota_venta(this.caja.getsec_inicial_nota_venta());	
				cajaAux.setsec_inicial_nota_credito(this.caja.getsec_inicial_nota_credito());	
				cajaAux.setsec_final_factura(this.caja.getsec_final_factura());	
				cajaAux.setsec_final_nota_venta(this.caja.getsec_final_nota_venta());	
				cajaAux.setsec_final_nota_credito(this.caja.getsec_final_nota_credito());	
				cajaAux.setid_pais(this.caja.getid_pais());	
				cajaAux.setid_ciudad(this.caja.getid_ciudad());	
				cajaAux.setid_zona(this.caja.getid_zona());	
				
				if(this.cajaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.cajaAux.getId()>=0) {	
						this.cajasEliminados.add(cajaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(cajaAux,cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cajaAux,cajas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.cajaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.cajaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.saveCajas();//WithConnection
						//cajaLogic.getSetVersionRowCajas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.cajaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
					}  else {
							
						

							if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());

							if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setCajaCierres(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreLogic.getCajaCierres());

							if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setFacturaPuntoVentas(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaLogic.getFacturaPuntoVentas());

							if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setCajaEgresos(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoLogic.getCajaEgresos());

							if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setCajeroTurnos(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());

							if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setPresupuestoVentasPunVens(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenLogic.getPresupuestoVentasPunVens());

							if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setPedidoPuntoVentas(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaLogic.getPedidoPuntoVentas());

							if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.quitarFilaTotales();}
							cajaAux.setCajaIngresos(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoLogic.getCajaIngresos());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.cajaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.cajaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(cajaAux,cajaLogic.getCajas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(cajaAux,cajas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getCajas().addAll(this.cajasEliminados);
					
					cajaLogic.saveCajas();//WithConnection
					//cajaLogic.getSetVersionRowCajas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesCaja();
				
				this.cajasEliminados= new ArrayList<Caja>();		
			}
			
			if(this.cajaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Caja GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.caja=cajaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessCaja();
      	}
		
	}	
	
	public void actualizarRelaciones(Caja cajaLocal) throws Exception {
		
		if(this.cajaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				cajaLocal.setNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
				cajaLocal.setCajaCierres(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreLogic.getCajaCierres());
				cajaLocal.setFacturaPuntoVentas(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaLogic.getFacturaPuntoVentas());
				cajaLocal.setCajaEgresos(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoLogic.getCajaEgresos());
				cajaLocal.setCajeroTurnos(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());
				cajaLocal.setPresupuestoVentasPunVens(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenLogic.getPresupuestoVentasPunVens());
				cajaLocal.setPedidoPuntoVentas(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaLogic.getPedidoPuntoVentas());
				cajaLocal.setCajaIngresos(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoLogic.getCajaIngresos());
			
			} else {
			
				cajaLocal.setNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventas);
				cajaLocal.setCajaCierres(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierres);
				cajaLocal.setFacturaPuntoVentas(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventas);
				cajaLocal.setCajaEgresos(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresos);
				cajaLocal.setCajeroTurnos(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnos);
				cajaLocal.setPresupuestoVentasPunVens(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvens);
				cajaLocal.setPedidoPuntoVentas(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventas);
				cajaLocal.setCajaIngresos(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresos);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(Caja cajaLocal) throws Exception {	
		if(this.cajaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				cajaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				cajaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				cajaLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CiudadDetalleFormJInternalFrame.class)) {
				CiudadBeanSwingJInternalFrame ciudadBeanSwingJInternalFrameLocal=(CiudadBeanSwingJInternalFrame) ((CiudadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ciudadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCiudad(ciudadBeanSwingJInternalFrameLocal.getciudad(),true);
				ciudadBeanSwingJInternalFrameLocal.actualizarLista(ciudadBeanSwingJInternalFrameLocal.ciudad,this.ciudadsForeignKey);

				ciudadBeanSwingJInternalFrameLocal.actualizarRelaciones(ciudadBeanSwingJInternalFrameLocal.ciudad);

				cajaLocal.setCiudad(ciudadBeanSwingJInternalFrameLocal.ciudad);

				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey("Formulario");
				this.setActualCiudadForeignKey(ciudadBeanSwingJInternalFrameLocal.ciudad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ZonaDetalleFormJInternalFrame.class)) {
				ZonaBeanSwingJInternalFrame zonaBeanSwingJInternalFrameLocal=(ZonaBeanSwingJInternalFrame) ((ZonaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				zonaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoZona(zonaBeanSwingJInternalFrameLocal.getzona(),true);
				zonaBeanSwingJInternalFrameLocal.actualizarLista(zonaBeanSwingJInternalFrameLocal.zona,this.zonasForeignKey);

				zonaBeanSwingJInternalFrameLocal.actualizarRelaciones(zonaBeanSwingJInternalFrameLocal.zona);

				cajaLocal.setZona(zonaBeanSwingJInternalFrameLocal.zona);

				this.addItemDefectoCombosForeignKeyZona();
				this.cargarCombosFrameZonasForeignKey("Formulario");
				this.setActualZonaForeignKey(zonaBeanSwingJInternalFrameLocal.zona.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarCajaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosCaja.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = cajaValidator.getInvalidValues(this.caja);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(Caja caja,List<Caja> cajas) throws Exception {
		try	{		
			CajaConstantesFunciones.actualizarLista(caja,cajas,this.cajaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(Caja caja,List<Caja> cajas) throws Exception {
		try	{			
			CajaConstantesFunciones.actualizarSelectedLista(caja,cajas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<Caja> cajasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				cajasLocal=this.cajaLogic.getCajas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				cajasLocal=this.cajas;
			}
			//ARCHITECTURE
		
			for(Caja cajaLocal:cajasLocal) {
				if(this.permiteMantenimiento(cajaLocal) && cajaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+CajaConstantesFunciones.getCajaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelid_empresaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelid_sucursalCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.NOMBRE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombreCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.NOMBREEQUIPO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombre_equipoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.NOMBREIMPRESORA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombre_impresoraCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALPEDIDO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedidoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALPEDIDOFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedido_formatoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.PUNTOEMISION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelpunto_emisionCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.ESTABLECIMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelestablecimientoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.FECHAINICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_inicioCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.FECHAFINAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_finalCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.ESTAACTIVO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelesta_activoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabeldescripcionCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALFACTURAFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_factura_formatoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALNOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIALNOTAVENTAFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_venta_formatoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIANOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECUENCIANOTACREDITOFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_credito_formatoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.AUTORIZACIONFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.AUTORIZACIONNOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.AUTORIZACIONNOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.FECHACADUCAFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.FECHACADUCANOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.FECHACADUCANOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SERIEFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SERIENOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SERIENOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECINICIALFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECINICIALNOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECINICIALNOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECFINALFACTURA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_facturaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECFINALNOTAVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_ventaCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.SECFINALNOTACREDITO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_creditoCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelid_paisCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.IDCIUDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelid_ciudadCaja,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(CajaConstantesFunciones.IDZONA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelid_zonaCaja,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelid_empresaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelid_sucursalCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelnombreCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelnombre_equipoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelnombre_impresoraCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedidoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedido_formatoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelpunto_emisionCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelestablecimientoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelfecha_inicioCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelfecha_finalCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelesta_activoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabeldescripcionCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_factura_formatoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_venta_formatoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_credito_formatoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelserie_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_final_facturaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_ventaCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_creditoCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelid_paisCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelid_ciudadCaja,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormCaja.jLabelid_zonaCaja,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("NotaCreditoPuntoVenta")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.getnotacreditopuntoventa().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("CajaCierre")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.getcajacierre().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("FacturaPuntoVenta")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.getfacturapuntoventa().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("CajaEgreso")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.getcajaegreso().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("CajeroTurno")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.getcajeroturno().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("PresupuestoVentasPunVen")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.getpresupuestoventaspunven().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("PedidoPuntoVenta")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.getpedidopuntoventa().setCaja(this.caja);
			}

			return;
		}
		 else  if(sTipo.equals("CajaIngreso")) {
			if(this.caja==null) {
				this.caja= new Caja();
			}

			if(this.cajaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoCaja
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.getcajaingreso().setCaja(this.caja);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoCaja--;	
		
		
		this.cajaAux=new Caja();
		
		this.cajaAux.setId(this.iIdNuevoCaja);
		this.cajaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.cajaLogic.getCajas().add(this.cajaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.cajas.add(this.cajaAux);
		}
		//ARCHITECTURE
		
		this.caja=this.cajaAux;
		
		if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioCaja(this.caja);
			this.setVariablesObjetoActualToFormularioForeignKeyCaja(this.caja);
		}
				
		//this.setDefaultControlesCaja();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyCaja();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyCaja();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyCaja();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCaja(this.cajaBean,this.caja,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(CajaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.cajaSessionBean.getConGuardarRelaciones()) {
			classes=CajaConstantesFunciones.getClassesRelationshipsOfCaja(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.cajaReturnGeneral=cajaLogic.procesarEventosCajasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.cajaLogic.getCajas(),this.caja,this.cajaParameterGeneral,this.isEsNuevoCaja,classes);//this.cajaLogic.getCaja()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanCaja(this.cajaReturnGeneral,this.cajaBean,false);
		
		if(this.cajaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyCaja(this.cajaReturnGeneral.getCaja());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioCaja(this.cajaReturnGeneral.getCaja());
		}
		
		if(this.cajaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioCaja(this.cajaReturnGeneral.getCaja(),classes);//this.cajaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualCaja(this.caja,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyCaja();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyCaja();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingCaja(false);
						
			if(cajaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() && NotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNotaCreditoPuntoVentaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.getEsGuardarRelacionado() && CajaCierreJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaCierreActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.getEsGuardarRelacionado() && FacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFacturaPuntoVentaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.getEsGuardarRelacionado() && CajaEgresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaEgresoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado() && CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajeroTurnoActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.getEsGuardarRelacionado() && PresupuestoVentasPunVenJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasPunVenActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.getEsGuardarRelacionado() && PedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPedidoPuntoVentaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.getEsGuardarRelacionado() && CajaIngresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaIngresoActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCaja();
			}
			
			this.actualizarVisualTableDatosCaja();
			
			this.jTableDatosCaja.setRowSelectionInterval(this.getIndiceNuevoCaja(), this.getIndiceNuevoCaja());
			
			this.seleccionarFilaTablaCajaActual();
						
			this.actualizarEstadoCeldasBotonesCaja("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesCaja(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarnombreCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarnombre_equipoCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarnombre_impresoraCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_pedidoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_pedido_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarpunto_emisionCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarestablecimientoCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarfecha_inicioCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarfecha_finalCaja);
		this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activaresta_activoCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activardescripcionCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_factura_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencial_nota_venta_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencia_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsecuencia_nota_credito_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarautorizacion_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarautorizacion_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarautorizacion_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarfecha_caduca_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarfecha_caduca_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarfecha_caduca_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarserie_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarserie_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarserie_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_inicial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_inicial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_inicial_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_final_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_final_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarsec_final_nota_creditoCaja);	
		//
		this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarid_empresaCaja);//
		this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarid_sucursalCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarid_paisCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarid_ciudadCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setEnabled(isHabilitar && this.cajaConstantesFunciones.activarid_zonaCaja);
	};
	
	public void setDefaultControlesCaja() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoCaja(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.cajaSessionBean.setConGuardarRelaciones(true);			
			this.cajaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.cajaSessionBean.setConGuardarRelaciones(false);			
			this.cajaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoCaja() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Caja cajaAux:this.cajaLogic.getCajas()) {
				if(cajaAux.getId().equals(this.iIdNuevoCaja)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Caja cajaAux:this.cajas) {
				if(cajaAux.getId().equals(this.iIdNuevoCaja)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualCaja(Caja caja,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Caja cajaAux:this.cajaLogic.getCajas()) {
				if(cajaAux.getId().equals(caja.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Caja cajaAux:this.cajas) {
				if(cajaAux.getId().equals(caja.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalCaja(Caja cajaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Caja cajaAux:this.cajaLogic.getCajas()) {
				if(cajaAux.getCajaOriginal().getId().equals(cajaOriginal.getId())) {
					existe=true;
					cajaOriginal.setId(cajaAux.getId());
					cajaOriginal.setVersionRow(cajaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Caja cajaAux:this.cajas) {
				if(cajaAux.getCajaOriginal().getId().equals(cajaOriginal.getId())) {
					existe=true;
					cajaOriginal.setId(cajaAux.getId());
					cajaOriginal.setVersionRow(cajaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosCaja(Boolean esParaCancelar) throws Exception {
		cajasAux=new ArrayList<Caja>();
		cajaAux=new Caja();
		
		if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Caja cajaAux:this.cajaLogic.getCajas()) {
					if(cajaAux.getId()<0) {
						cajasAux.add(cajaAux);
					}		
				}
				this.iIdNuevoCaja=0L;
				this.cajaLogic.getCajas().removeAll(cajasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Caja cajaAux:this.cajas) {
					if(cajaAux.getId()<0) {
						cajasAux.add(cajaAux);
					}		
				}
				this.iIdNuevoCaja=0L;
				this.cajas.removeAll(cajasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoCaja 
					&& this.cajaLogic.getCajas().size()>0
					) {
					cajaAux=this.cajaLogic.getCajas().get(this.cajaLogic.getCajas().size() - 1);
				
					if(cajaAux.getId()<0) {
						this.cajaLogic.getCajas().remove(cajaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoCaja && this.cajas.size()>0) {
					cajaAux=this.cajas.get(this.cajas.size() - 1);
				
					if(cajaAux.getId()<0) {
						this.cajas.remove(cajaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoCaja(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(caja.getId()<0) {
				this.cajaLogic.getCajas().remove(this.caja);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(caja.getId()<0) {
				this.cajas.remove(this.caja);
			}
		}			
	}
	
	public void setEstadosInicialesCaja(List<Caja> cajasAux) throws Exception {
		CajaConstantesFunciones.setEstadosInicialesCaja(cajasAux);
	}
	
	public void setEstadosInicialesCaja(Caja cajaAux) throws Exception {
		CajaConstantesFunciones.setEstadosInicialesCaja(cajaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarCajaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarCajaActual()) {
				if(!this.isEsNuevoCaja) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoCaja=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarCajaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Caja ?", "MANTENIMIENTO DE Caja", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(Caja caja) throws Exception {
		CajaConstantesFunciones.seleccionarAsignar(this.caja,caja);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarCaja=this.isPermisoActualizarOriginalCaja;
			
			
			this.seleccionarAsignar(caja);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			CajaConstantesFunciones.quitarEspaciosCaja(this.caja,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesCaja("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.cajaSessionBean.setsFuncionBusquedaRapida(this.cajaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoCaja) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosCaja(esParaCancelar);				
				this.cancelarNuevoCaja(esParaCancelar);								
			}
			
			this.caja=new Caja();
			
			this.inicializarCaja();
			
			this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarCaja() throws Exception {
		try {
			CajaConstantesFunciones.inicializarCaja(this.caja);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.cajaLogic.getCajas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteCajas(String sAccionBusqueda,List<Caja> cajasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="Caja"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="CajaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("CajaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="Caja"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Cajas");		
		parameters.put("busquedapor", CajaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(NotaCreditoPuntoVenta.class));
			classes.add(new Classe(CajaCierre.class));
			classes.add(new Classe(FacturaPuntoVenta.class));
			classes.add(new Classe(CajaEgreso.class));
			classes.add(new Classe(CajeroTurno.class));
			classes.add(new Classe(PresupuestoVentasPunVen.class));
			classes.add(new Classe(PedidoPuntoVenta.class));
			classes.add(new Classe(CajaIngreso.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					CajaLogic cajaLogicAuxiliar=new CajaLogic();
					cajaLogicAuxiliar.setDatosCliente(cajaLogic.getDatosCliente());				
					cajaLogicAuxiliar.setCajas(cajasParaReportes);
					
					cajaLogicAuxiliar.cargarRelacionesLoteForeignKeyCajaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					cajasParaReportes=cajaLogicAuxiliar.getCajas();
					
					//cajaLogic.getNewConnexionToDeep();
					
					//for (Caja caja:cajasParaReportes) {
					//	cajaLogic.deepLoad(caja, false, DeepLoadType.INCLUDE, classes);
					//}						
					//cajaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//cajaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileNotaCreditoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("NotaCreditoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_notacreditopuntoventa", reportFileNotaCreditoPuntoVenta);

			InputStream reportFileCajaCierre = AuxiliarReportes.class.getResourceAsStream("CajaCierreDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cajacierre", reportFileCajaCierre);

			InputStream reportFileFacturaPuntoVenta = AuxiliarReportes.class.getResourceAsStream("FacturaPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_facturapuntoventa", reportFileFacturaPuntoVenta);

			InputStream reportFileCajaEgreso = AuxiliarReportes.class.getResourceAsStream("CajaEgresoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cajaegreso", reportFileCajaEgreso);

			InputStream reportFileCajeroTurno = AuxiliarReportes.class.getResourceAsStream("CajeroTurnoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cajeroturno", reportFileCajeroTurno);

			InputStream reportFilePresupuestoVentasPunVen = AuxiliarReportes.class.getResourceAsStream("PresupuestoVentasPunVenDetalleRelacionesDesign.jasper");
			parameters.put("subreport_presupuestoventaspunven", reportFilePresupuestoVentasPunVen);

			InputStream reportFilePedidoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("PedidoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_pedidopuntoventa", reportFilePedidoPuntoVenta);

			InputStream reportFileCajaIngreso = AuxiliarReportes.class.getResourceAsStream("CajaIngresoDetalleRelacionesDesign.jasper");
			parameters.put("subreport_cajaingreso", reportFileCajaIngreso);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceCaja=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			CajaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			CajaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceCaja=new JRBeanArrayDataSource(CajaJInternalFrame.TraerCajaBeans(cajasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceCaja);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+CajaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+CajaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(CajaBean.TraerCajaBeans(cajasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoCajaActionPerformed(null);
					//this.generarExcelReporteCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesCajas(sAccionBusqueda,sTipoArchivoReporte,cajasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteCajas(String sAccionBusqueda,String sTipoArchivoReporte,List<Caja> cajasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Cajas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCaja("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(Caja caja : cajasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			CajaConstantesFunciones.generarExcelReporteDataCaja("NORMAL",row,workbook,caja,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderCaja(String sTipo,Row row,Workbook workbook) {
		
		CajaConstantesFunciones.generarExcelReporteHeaderCaja(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalCajas(String sAccionBusqueda,String sTipoArchivoReporte,List<Caja> cajasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Cajas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(Caja caja : cajasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(CajaConstantesFunciones.getCajaDescripcion(caja));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_NOMBRE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBRE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getnombre());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_NOMBREEQUIPO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREEQUIPO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getnombre_equipo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getnombre_impresora());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_pedido());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_pedido_formato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_PUNTOEMISION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_PUNTOEMISION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getpunto_emision());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getestablecimiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_FECHAINICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAINICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getfecha_inicio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_FECHAFINAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAFINAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getfecha_final());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_ESTAACTIVO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_ESTAACTIVO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(Funciones2.getDescripcionBoolean(caja.getesta_activo()));


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getdescripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_factura_formato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencial_nota_venta_formato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencia_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsecuencia_nota_credito_formato());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getautorizacion_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getautorizacion_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getautorizacion_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getfecha_caduca_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getfecha_caduca_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getfecha_caduca_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SERIEFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SERIEFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getserie_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SERIENOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getserie_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SERIENOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getserie_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECINICIALFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_inicial_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_inicial_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_inicial_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECFINALFACTURA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALFACTURA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_final_factura());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_final_nota_venta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getsec_final_nota_credito());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_IDCIUDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_IDCIUDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getciudad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(CajaConstantesFunciones.LABEL_IDZONA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(CajaConstantesFunciones.LABEL_IDZONA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(caja.getzona_descripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesCajas(String sAccionBusqueda,String sTipoArchivoReporte,List<Caja> cajasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<Caja> cajasRespaldo=null;
		
		classes=CajaConstantesFunciones.getClassesRelationshipsOfCaja(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.cajaLogic.setDatosCliente(this.datosCliente);
		this.cajaLogic.setDatosDeep(this.datosDeep);
		this.cajaLogic.setIsConDeep(true);
		
		cajasRespaldo=this.cajaLogic.getCajas();
		
		this.cajaLogic.setCajas(cajasParaReportes);	
		this.cajaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		cajasParaReportes=this.cajaLogic.getCajas();
		this.cajaLogic.setCajas(cajasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("Cajas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderCaja("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(Caja caja : cajasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderCaja("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			CajaConstantesFunciones.generarExcelReporteDataCaja("NORMAL",row,workbook,caja,cellStyleDataAux);
		
			
			


				//NotaCreditoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getNotaCreditoPuntoVentas()!=null && caja.getNotaCreditoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					NotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteHeaderNotaCreditoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(caja.getNotaCreditoPuntoVentas()!=null) {
					i2=0;
					for(NotaCreditoPuntoVenta notacreditopuntoventa : caja.getNotaCreditoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						NotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataNotaCreditoPuntoVenta("RELACIONADO",row,workbook,notacreditopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//CajaCierre
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(CajaCierreConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getCajaCierres()!=null && caja.getCajaCierres().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(CajaCierreConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					CajaCierreConstantesFunciones.generarExcelReporteHeaderCajaCierre("RELACIONADO",row,workbook);
				}

				if(caja.getCajaCierres()!=null) {
					i2=0;
					for(CajaCierre cajacierre : caja.getCajaCierres()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						CajaCierreConstantesFunciones.generarExcelReporteDataCajaCierre("RELACIONADO",row,workbook,cajacierre,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//FacturaPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getFacturaPuntoVentas()!=null && caja.getFacturaPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					FacturaPuntoVentaConstantesFunciones.generarExcelReporteHeaderFacturaPuntoVenta("RELACIONADO",row,workbook);
				}

				if(caja.getFacturaPuntoVentas()!=null) {
					i2=0;
					for(FacturaPuntoVenta facturapuntoventa : caja.getFacturaPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						FacturaPuntoVentaConstantesFunciones.generarExcelReporteDataFacturaPuntoVenta("RELACIONADO",row,workbook,facturapuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//CajaEgreso
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(CajaEgresoConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getCajaEgresos()!=null && caja.getCajaEgresos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(CajaEgresoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					CajaEgresoConstantesFunciones.generarExcelReporteHeaderCajaEgreso("RELACIONADO",row,workbook);
				}

				if(caja.getCajaEgresos()!=null) {
					i2=0;
					for(CajaEgreso cajaegreso : caja.getCajaEgresos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						CajaEgresoConstantesFunciones.generarExcelReporteDataCajaEgreso("RELACIONADO",row,workbook,cajaegreso,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//CajeroTurno
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getCajeroTurnos()!=null && caja.getCajeroTurnos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					CajeroTurnoConstantesFunciones.generarExcelReporteHeaderCajeroTurno("RELACIONADO",row,workbook);
				}

				if(caja.getCajeroTurnos()!=null) {
					i2=0;
					for(CajeroTurno cajeroturno : caja.getCajeroTurnos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						CajeroTurnoConstantesFunciones.generarExcelReporteDataCajeroTurno("RELACIONADO",row,workbook,cajeroturno,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//PresupuestoVentasPunVen
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PresupuestoVentasPunVenConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getPresupuestoVentasPunVens()!=null && caja.getPresupuestoVentasPunVens().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PresupuestoVentasPunVenConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PresupuestoVentasPunVenConstantesFunciones.generarExcelReporteHeaderPresupuestoVentasPunVen("RELACIONADO",row,workbook);
				}

				if(caja.getPresupuestoVentasPunVens()!=null) {
					i2=0;
					for(PresupuestoVentasPunVen presupuestoventaspunven : caja.getPresupuestoVentasPunVens()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PresupuestoVentasPunVenConstantesFunciones.generarExcelReporteDataPresupuestoVentasPunVen("RELACIONADO",row,workbook,presupuestoventaspunven,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//PedidoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getPedidoPuntoVentas()!=null && caja.getPedidoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					PedidoPuntoVentaConstantesFunciones.generarExcelReporteHeaderPedidoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(caja.getPedidoPuntoVentas()!=null) {
					i2=0;
					for(PedidoPuntoVenta pedidopuntoventa : caja.getPedidoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						PedidoPuntoVentaConstantesFunciones.generarExcelReporteDataPedidoPuntoVenta("RELACIONADO",row,workbook,pedidopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//CajaIngreso
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(CajaIngresoConstantesFunciones.SCLASSWEBTITULO))) {

				if(caja.getCajaIngresos()!=null && caja.getCajaIngresos().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(CajaIngresoConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					CajaIngresoConstantesFunciones.generarExcelReporteHeaderCajaIngreso("RELACIONADO",row,workbook);
				}

				if(caja.getCajaIngresos()!=null) {
					i2=0;
					for(CajaIngreso cajaingreso : caja.getCajaIngresos()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						CajaIngresoConstantesFunciones.generarExcelReporteDataCajaIngreso("RELACIONADO",row,workbook,cajaingreso,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(CajaConstantesFunciones.getCajaDescripcion(caja));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoCaja.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCaja.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessCaja() throws Exception {		
		this.startProcessCaja(true);
	}
	
	public void startProcessCaja(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasCaja ,this.jPanelParametrosReportesCaja, this.jScrollPanelDatosCaja,this.jPanelPaginacionCaja, this.jScrollPanelDatosEdicionCaja, this.jPanelAccionesCaja,this.jPanelAccionesFormularioCaja,this.jmenuBarCaja,this.jmenuBarDetalleCaja,this.jTtoolBarCaja,this.jTtoolBarDetalleCaja);		
		
		final JTabbedPane jTabbedPaneBusquedasCaja=this.jTabbedPaneBusquedasCaja; 
		
		final JPanel jPanelParametrosReportesCaja=this.jPanelParametrosReportesCaja;
		//final JScrollPane jScrollPanelDatosCaja=this.jScrollPanelDatosCaja;
		final JTable jTableDatosCaja=this.jTableDatosCaja;		
		final JPanel jPanelPaginacionCaja=this.jPanelPaginacionCaja;
		//final JScrollPane jScrollPanelDatosEdicionCaja=this.jScrollPanelDatosEdicionCaja;
		final JPanel jPanelAccionesCaja=this.jPanelAccionesCaja;
		
		JPanel jPanelCamposAuxiliarCaja=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarCaja=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
			jPanelCamposAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jPanelCamposCaja;
			jPanelAccionesFormularioAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jPanelAccionesFormularioCaja;
		}
		
		final JPanel jPanelCamposCaja=jPanelCamposAuxiliarCaja;
		final JPanel jPanelAccionesFormularioCaja=jPanelAccionesFormularioAuxiliarCaja;
		
		
		final JMenuBar jmenuBarCaja=this.jmenuBarCaja;
		final JToolBar jTtoolBarCaja=this.jTtoolBarCaja;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarCaja=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCaja=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
			jmenuBarDetalleAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jmenuBarDetalleCaja;
			jTtoolBarDetalleAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jTtoolBarDetalleCaja;
		}
		
		final JMenuBar jmenuBarDetalleCaja=jmenuBarDetalleAuxiliarCaja;
		final JToolBar jTtoolBarDetalleCaja=jTtoolBarDetalleAuxiliarCaja;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCaja;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCaja;
			processRunnable.jTableDatos=jTableDatosCaja;
			processRunnable.jPanelCampos=jPanelCamposCaja;
			processRunnable.jPanelPaginacion=jPanelPaginacionCaja;
			processRunnable.jPanelAcciones=jPanelAccionesCaja;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCaja;
			
			
			processRunnable.jmenuBar=jmenuBarCaja;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCaja;
			processRunnable.jTtoolBar=jTtoolBarCaja;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCaja;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCaja ,jPanelParametrosReportesCaja,jTableDatosCaja, /*jScrollPanelDatosCaja,*/jPanelCamposCaja,jPanelPaginacionCaja, /*jScrollPanelDatosEdicionCaja,*/ jPanelAccionesCaja,jPanelAccionesFormularioCaja,jmenuBarCaja,jmenuBarDetalleCaja,jTtoolBarCaja,jTtoolBarDetalleCaja);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasCaja ,jPanelParametrosReportesCaja, jScrollPanelDatosCaja,jPanelPaginacionCaja, jScrollPanelDatosEdicionCaja, jPanelAccionesCaja,jPanelAccionesFormularioCaja,jmenuBarCaja,jmenuBarDetalleCaja,jTtoolBarCaja,jTtoolBarDetalleCaja);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessCaja() {// throws Exception 
		this.finishProcessCaja(true);
	}
	
	public void finishProcessCaja(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasCaja ,this.jPanelParametrosReportesCaja, this.jScrollPanelDatosCaja,this.jPanelPaginacionCaja, this.jScrollPanelDatosEdicionCaja, this.jPanelAccionesCaja,this.jPanelAccionesFormularioCaja,this.jmenuBarCaja,this.jmenuBarDetalleCaja,this.jTtoolBarCaja,this.jTtoolBarDetalleCaja);		
		
		final JTabbedPane jTabbedPaneBusquedasCaja=this.jTabbedPaneBusquedasCaja; 
		
		final JPanel jPanelParametrosReportesCaja=this.jPanelParametrosReportesCaja;
		//final JScrollPane jScrollPanelDatosCaja=this.jScrollPanelDatosCaja;
		final JTable jTableDatosCaja=this.jTableDatosCaja;		
		final JPanel jPanelPaginacionCaja=this.jPanelPaginacionCaja;
		//final JScrollPane jScrollPanelDatosEdicionCaja=this.jScrollPanelDatosEdicionCaja;
		final JPanel jPanelAccionesCaja=this.jPanelAccionesCaja;
		
		JPanel jPanelCamposAuxiliarCaja=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarCaja=new JPanel();
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
			jPanelCamposAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jPanelCamposCaja;
			jPanelAccionesFormularioAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jPanelAccionesFormularioCaja;
		}
		
		final JPanel jPanelCamposCaja=jPanelCamposAuxiliarCaja;
		final JPanel jPanelAccionesFormularioCaja=jPanelAccionesFormularioAuxiliarCaja;
		
		
		final JMenuBar jmenuBarCaja=this.jmenuBarCaja;		
		final JToolBar jTtoolBarCaja=this.jTtoolBarCaja;
				
		JMenuBar jmenuBarDetalleAuxiliarCaja=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarCaja=new JToolBar();
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
			jmenuBarDetalleAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jmenuBarDetalleCaja;
			jTtoolBarDetalleAuxiliarCaja=this.jInternalFrameDetalleFormCaja.jTtoolBarDetalleCaja;		
		}
		
		final JMenuBar jmenuBarDetalleCaja=jmenuBarDetalleAuxiliarCaja;
		final JToolBar jTtoolBarDetalleCaja=jTtoolBarDetalleAuxiliarCaja;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasCaja;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesCaja;
			processRunnable.jTableDatos=jTableDatosCaja;
			processRunnable.jPanelCampos=jPanelCamposCaja;
			processRunnable.jPanelPaginacion=jPanelPaginacionCaja;
			processRunnable.jPanelAcciones=jPanelAccionesCaja;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioCaja;
			
			
			processRunnable.jmenuBar=jmenuBarCaja;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleCaja;
			processRunnable.jTtoolBar=jTtoolBarCaja;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleCaja;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasCaja ,jPanelParametrosReportesCaja, jTableDatosCaja,/*jScrollPanelDatosCaja,*/jPanelCamposCaja,jPanelPaginacionCaja, /*jScrollPanelDatosEdicionCaja,*/ jPanelAccionesCaja,jPanelAccionesFormularioCaja,jmenuBarCaja,jmenuBarDetalleCaja,jTtoolBarCaja,jTtoolBarDetalleCaja));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesCaja(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarCaja(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuCaja(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarCaja(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarCaja,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleCaja,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuCaja(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarCaja,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleCaja,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.cajaConstantesFunciones.getsFinalQueryCaja();
		String  finalQueryPaginacionTodos=this.cajaConstantesFunciones.getsFinalQueryCaja();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=CajaConstantesFunciones.getArrayColumnasGlobalesNoCaja(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.cajasEliminados= new ArrayList<Caja>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessCaja();
		
				///*CajaSessionBean*/this.cajaSessionBean=new CajaSessionBean();
			
			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=CajaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=CajaConstantesFunciones.getClassesForeignKeysOfCaja(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/caja."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			cajasAux= new ArrayList<Caja>();
			
				
			cajaLogic.setDatosCliente(this.datosCliente);
			cajaLogic.setDatosDeep(this.datosDeep);
			cajaLogic.setIsConDeep(true);
			
			
			cajaLogic.getCajaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					cajaLogic.getTodosCajas(finalQueryGlobal,pagination);
					
					//cajaLogic.getTodosCajasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(cajaLogic.getCajas()==null|| cajaLogic.getCajas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cajasAux= new ArrayList<Caja>();
							cajasAux.addAll(cajaLogic.getCajas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux= new ArrayList<Caja>();
							cajasAux.addAll(cajas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cajaLogic.getTodosCajas(finalQueryGlobal+"",this.pagination);												
							
							//cajaLogic.getTodosCajasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteCajas("Todos",cajaLogic.getCajas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							cajaLogic.setCajas(new ArrayList<Caja>());					
							cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idCaja=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idCaja=this.idActual;
				
				} else if(this.idCajaActual!=null && this.idCajaActual!=0L) {
					idCaja=idCajaActual;
				}
				
					
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndicePorId(idCaja);
				
				this.cajas=new ArrayList<Caja>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					cajaLogic.getEntity(idCaja);
					
					//cajaLogic.getEntityWithConnection(idCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.setCajas(new ArrayList<Caja>());
					cajaLogic.getCajas().add(cajaLogic.getCaja());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.cajas=new ArrayList<Caja>();
					this.cajas.add(caja);
				}
				
				if(cajaLogic.getCaja()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCiudad")) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cajaLogic.getCajasFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cajaLogic.getCajas()==null||cajaLogic.getCajas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cajas==null|| cajas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cajasAux=new ArrayList<Caja>();
						cajasAux.addAll(cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux=new ArrayList<Caja>();
							cajasAux.addAll(cajas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cajaLogic.getCajasFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCajas("FK_IdCiudad",cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCajas("FK_IdCiudad",cajas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.setCajas(new ArrayList<Caja>());
						cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cajaLogic.getCajasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cajaLogic.getCajas()==null||cajaLogic.getCajas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cajas==null|| cajas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cajasAux=new ArrayList<Caja>();
						cajasAux.addAll(cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux=new ArrayList<Caja>();
							cajasAux.addAll(cajas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cajaLogic.getCajasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCajas("FK_IdEmpresa",cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCajas("FK_IdEmpresa",cajas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.setCajas(new ArrayList<Caja>());
						cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cajaLogic.getCajasFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cajaLogic.getCajas()==null||cajaLogic.getCajas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cajas==null|| cajas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cajasAux=new ArrayList<Caja>();
						cajasAux.addAll(cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux=new ArrayList<Caja>();
							cajasAux.addAll(cajas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cajaLogic.getCajasFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCajas("FK_IdPais",cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCajas("FK_IdPais",cajas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.setCajas(new ArrayList<Caja>());
						cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cajaLogic.getCajasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cajaLogic.getCajas()==null||cajaLogic.getCajas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cajas==null|| cajas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cajasAux=new ArrayList<Caja>();
						cajasAux.addAll(cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux=new ArrayList<Caja>();
							cajasAux.addAll(cajas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cajaLogic.getCajasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCajas("FK_IdSucursal",cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCajas("FK_IdSucursal",cajas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.setCajas(new ArrayList<Caja>());
						cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdZona")) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					cajaLogic.getCajasFK_IdZona(finalQueryGlobal,pagination,id_zonaFK_IdZona);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=cajaLogic.getCajas()==null||cajaLogic.getCajas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=cajas==null|| cajas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						cajasAux=new ArrayList<Caja>();
						cajasAux.addAll(cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajasAux=new ArrayList<Caja>();
							cajasAux.addAll(cajas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							cajaLogic.getCajasFK_IdZona(finalQueryGlobal,pagination,id_zonaFK_IdZona);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=CajaConstantesFunciones.getDetalleIndiceFK_IdZona(id_zonaFK_IdZona);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteCajas("FK_IdZona",cajaLogic.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteCajas("FK_IdZona",cajas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaLogic.setCajas(new ArrayList<Caja>());
						cajaLogic.getCajas().addAll(cajasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajas=new ArrayList<Caja>();
							cajas.addAll(cajasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesCaja();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessCaja();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cajaLogic.getCajas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cajas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=cajaLogic.getCajas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=cajas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(Caja caja) {
		Boolean permite=true;
		
		if(this.caja.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=CajaConstantesFunciones.getOrderByListaCaja();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=CajaConstantesFunciones.getOrderByListaCaja();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Caja caja:cajaLogic.getCajas()) {
				if(caja.getsType().equals(Constantes2.S_TOTALES)) {
					cajaTotales=caja;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Caja caja:this.cajas) {
				if(caja.getsType().equals(Constantes2.S_TOTALES)) {
					cajaTotales=caja;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.cajaAux=new Caja();
			this.cajaAux.setsType(Constantes2.S_TOTALES);
			this.cajaAux.setIsNew(false);
			this.cajaAux.setIsChanged(false);
			this.cajaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				CajaConstantesFunciones.TotalizarValoresFilaCaja(this.cajaLogic.getCajas(),this.cajaAux);
				
				this.cajaLogic.getCajas().add(this.cajaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				CajaConstantesFunciones.TotalizarValoresFilaCaja(this.cajas,this.cajaAux);
				
				this.cajas.add(this.cajaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		cajaTotales=new Caja();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cajaLogic.getCajas().remove(cajaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.cajas.remove(cajaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		cajaTotales=new Caja();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(Caja caja:cajaLogic.getCajas()) {
				if(caja.getsType().equals(Constantes2.S_TOTALES)) {
					cajaTotales=caja;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CajaConstantesFunciones.TotalizarValoresFilaCaja(this.cajaLogic.getCajas(),cajaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(Caja caja:this.cajas) {
				if(caja.getsType().equals(Constantes2.S_TOTALES)) {
					cajaTotales=caja;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				CajaConstantesFunciones.TotalizarValoresFilaCaja(this.cajas,cajaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getCajasFK_IdCiudad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCiudad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCajasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCajasFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCajasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getCajasFK_IdZona()throws Exception {
		try {
			sAccionBusqueda="FK_IdZona";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getCajasFK_IdCiudad(String sFinalQuery,Long id_ciudad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getCajasFK_IdCiudad(sFinalQuery,this.pagination,id_ciudad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCajasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getCajasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCajasFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getCajasFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCajasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getCajasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getCajasFK_IdZona(String sFinalQuery,Long id_zona)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getCajasFK_IdZona(sFinalQuery,this.pagination,id_zona);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosCaja() {
		this.isPermisoTodoCaja=false;
		this.isPermisoNuevoCaja=false;
		this.isPermisoActualizarCaja=false;
		this.isPermisoActualizarOriginalCaja=false;
		this.isPermisoEliminarCaja=false;
		this.isPermisoGuardarCambiosCaja=false;
		this.isPermisoConsultaCaja=false;
		this.isPermisoBusquedaCaja=false;
		this.isPermisoReporteCaja=false;		
		this.isPermisoOrdenCaja=false;		
		this.isPermisoPaginacionMedioCaja=false;		
		this.isPermisoPaginacionAltoCaja=false;
		this.isPermisoPaginacionTodoCaja=false;
		this.isPermisoCopiarCaja=false;		
		this.isPermisoVerFormCaja=false;		
		this.isPermisoDuplicarCaja=false;		
		this.isPermisoOrdenCaja=false;		
	}
	
	public void setPermisosUsuarioCaja(Boolean isPermiso) {
		this.isPermisoTodoCaja=isPermiso;
		this.isPermisoNuevoCaja=isPermiso;
		this.isPermisoActualizarCaja=isPermiso;
		this.isPermisoActualizarOriginalCaja=isPermiso;
		this.isPermisoEliminarCaja=isPermiso;
		this.isPermisoGuardarCambiosCaja=isPermiso;
		this.isPermisoConsultaCaja=isPermiso;
		this.isPermisoBusquedaCaja=isPermiso;
		this.isPermisoReporteCaja=isPermiso;
		this.isPermisoOrdenCaja=isPermiso;		
		this.isPermisoPaginacionMedioCaja=isPermiso;		
		this.isPermisoPaginacionAltoCaja=isPermiso;		
		this.isPermisoPaginacionTodoCaja=isPermiso;		
		this.isPermisoCopiarCaja=isPermiso;		
		this.isPermisoVerFormCaja=isPermiso;		
		this.isPermisoDuplicarCaja=isPermiso;
		this.isPermisoOrdenCaja=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioCaja(Boolean isPermiso) {
		//this.isPermisoTodoCaja=isPermiso;
		this.isPermisoNuevoCaja=isPermiso;
		this.isPermisoActualizarCaja=isPermiso;
		this.isPermisoActualizarOriginalCaja=isPermiso;
		this.isPermisoEliminarCaja=isPermiso;
		this.isPermisoGuardarCambiosCaja=isPermiso;
		//this.isPermisoConsultaCaja=isPermiso;
		//this.isPermisoBusquedaCaja=isPermiso;
		//this.isPermisoReporteCaja=isPermiso;
		//this.isPermisoOrdenCaja=isPermiso;		
		//this.isPermisoPaginacionMedioCaja=isPermiso;		
		//this.isPermisoPaginacionAltoCaja=isPermiso;		
		//this.isPermisoPaginacionTodoCaja=isPermiso;		
		//this.isPermisoCopiarCaja=isPermiso;		
		//this.isPermisoDuplicarCaja=isPermiso;
		//this.isPermisoOrdenCaja=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioCajaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(CajaCierreConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(CajaEgresoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(CajeroTurnoConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(PresupuestoVentasPunVenConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(CajaIngresoConstantesFunciones.SNOMBREOPCION);
		
		if(CajaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosNotaCreditoPuntoVenta=false;
		this.isTienePermisosNotaCreditoPuntoVenta=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCajaCierre=false;
		this.isTienePermisosCajaCierre=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,CajaCierreConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosFacturaPuntoVenta=false;
		this.isTienePermisosFacturaPuntoVenta=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCajaEgreso=false;
		this.isTienePermisosCajaEgreso=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,CajaEgresoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCajeroTurno=false;
		this.isTienePermisosCajeroTurno=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,CajeroTurnoConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosPresupuestoVentasPunVen=false;
		this.isTienePermisosPresupuestoVentasPunVen=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,PresupuestoVentasPunVenConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosPedidoPuntoVenta=false;
		this.isTienePermisosPedidoPuntoVenta=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosCajaIngreso=false;
		this.isTienePermisosCajaIngreso=this.verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(this.opcionsRelacionadas,CajaIngresoConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebCaja(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioCajaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosNotaCreditoPuntoVenta=conPermiso;
		this.isTienePermisosCajaCierre=conPermiso;
		this.isTienePermisosFacturaPuntoVenta=conPermiso;
		this.isTienePermisosCajaEgreso=conPermiso;
		this.isTienePermisosCajeroTurno=conPermiso;
		this.isTienePermisosPresupuestoVentasPunVen=conPermiso;
		this.isTienePermisosPedidoPuntoVenta=conPermiso;
		this.isTienePermisosCajaIngreso=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioCajaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionCajaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioCajaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosNotaCreditoPuntoVenta && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCajaCierre && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosFacturaPuntoVenta && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCajaEgreso && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCajeroTurno && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosPresupuestoVentasPunVen && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosPedidoPuntoVenta && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosCajaIngreso && this.jInternalFrameDetalleFormCaja!=null && this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.remove(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioCaja() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(CajaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.cajaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, CajaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoCaja=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarCaja=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalCaja=this.isPermisoActualizarCaja;
			this.isPermisoEliminarCaja=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosCaja=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaCaja=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaCaja=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoCaja=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteCaja=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCaja=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioCaja=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoCaja=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoCaja=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarCaja=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormCaja=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarCaja=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenCaja=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.cajaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosCaja.setToolTipText(this.jTableDatosCaja.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioCaja(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioCaja(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(CajaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(CajaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioCaja() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosNotaCreditoPuntoVenta && this.cajaConstantesFunciones.mostrarNotaCreditoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Nota Credito");
			reporte.setsDescripcion("Nota Credito");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCajaCierre && this.cajaConstantesFunciones.mostrarCajaCierreCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Caja Cierre");
			reporte.setsDescripcion("Caja Cierre");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosFacturaPuntoVenta && this.cajaConstantesFunciones.mostrarFacturaPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Factura Punto Venta");
			reporte.setsDescripcion("Factura Punto Venta");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCajaEgreso && this.cajaConstantesFunciones.mostrarCajaEgresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Caja Egreso");
			reporte.setsDescripcion("Caja Egreso");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCajeroTurno && this.cajaConstantesFunciones.mostrarCajeroTurnoCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Cajero Turno");
			reporte.setsDescripcion("Cajero Turno");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosPresupuestoVentasPunVen && this.cajaConstantesFunciones.mostrarPresupuestoVentasPunVenCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Presupuesto Ventas");
			reporte.setsDescripcion("Presupuesto Ventas");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosPedidoPuntoVenta && this.cajaConstantesFunciones.mostrarPedidoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Pedido Punto Venta");
			reporte.setsDescripcion("Pedido Punto Venta");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosCajaIngreso && this.cajaConstantesFunciones.mostrarCajaIngresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Caja Ingreso");
			reporte.setsDescripcion("Caja Ingreso");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyCajaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.ciudadsForeignKey=new ArrayList();
				this.zonasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyCajaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(CajaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyCajaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyZonaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CiudadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyZonaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.zonasForeignKey==null||this.zonasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ZonaConstantesFunciones.getArrayColumnasGlobalesZona(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ZonaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ZonaConstantesFunciones.SFINALQUERY;

				this.cargarCombosZonasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyCajaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			CajaParameterReturnGeneral cajaReturnGeneral=new CajaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.cajaConstantesFunciones.cargarid_empresaCaja)
					 || (this.esRecargarFks && this.cajaConstantesFunciones.cargarid_empresaCaja)) {

					if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+cajaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.cajaConstantesFunciones.cargarid_sucursalCaja)
					 || (this.esRecargarFks && this.cajaConstantesFunciones.cargarid_sucursalCaja)) {

					if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+cajaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.cajaConstantesFunciones.cargarid_paisCaja)
					 || (this.esRecargarFks && this.cajaConstantesFunciones.cargarid_paisCaja)) {

					if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+cajaSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalCiudad="";

				if(((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0) && this.cajaConstantesFunciones.cargarid_ciudadCaja)
					 || (this.esRecargarFks && this.cajaConstantesFunciones.cargarid_ciudadCaja)) {

					if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCiudad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

						finalQueryGlobalCiudad=Funciones.GetFinalQueryAppend(finalQueryGlobalCiudad, "");
						finalQueryGlobalCiudad+=CiudadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCiudad=" WHERE " + ConstantesSql.ID + "="+cajaSessionBean.getlidCiudadActual();
					}
				} else {
					finalQueryGlobalCiudad="NONE";
				}


				String finalQueryGlobalZona="";

				if(((this.zonasForeignKey==null||this.zonasForeignKey.size()<=0) && this.cajaConstantesFunciones.cargarid_zonaCaja)
					 || (this.esRecargarFks && this.cajaConstantesFunciones.cargarid_zonaCaja)) {

					if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ZonaConstantesFunciones.getArrayColumnasGlobalesZona(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalZona=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ZonaConstantesFunciones.TABLENAME);

						finalQueryGlobalZona=Funciones.GetFinalQueryAppend(finalQueryGlobalZona, "");
						finalQueryGlobalZona+=ZonaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosZonasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalZona=" WHERE " + ConstantesSql.ID + "="+cajaSessionBean.getlidZonaActual();
					}
				} else {
					finalQueryGlobalZona="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				cajaReturnGeneral=cajaLogic.cargarCombosLoteForeignKeyCaja(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalPais,finalQueryGlobalCiudad,finalQueryGlobalZona);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=cajaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=cajaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=cajaReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalCiudad.equals("NONE")) {
				this.ciudadsForeignKey=cajaReturnGeneral.getciudadsForeignKey();
			}

			if(!finalQueryGlobalZona.equals("NONE")) {
				this.zonasForeignKey=cajaReturnGeneral.getzonasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyCaja()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyCiudad();
			this.addItemDefectoCombosForeignKeyZona();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCiudad()throws Exception {
		try {

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				Ciudad ciudad=new Ciudad();
				CiudadConstantesFunciones.setCiudadDescripcion(ciudad,Constantes.SMENSAJE_ESCOJA_OPCION);
				ciudad.setId(null);

				if(!CiudadConstantesFunciones.ExisteEnLista(this.ciudadsForeignKey,ciudad,true)) {

					this.ciudadsForeignKey.add(0,ciudad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyZona()throws Exception {
		try {

			if(!this.cajaSessionBean.getisBusquedaDesdeForeignKeySesionZona()) {
				Zona zona=new Zona();
				ZonaConstantesFunciones.setZonaDescripcion(zona,Constantes.SMENSAJE_ESCOJA_OPCION);
				zona.setId(null);

				if(!ZonaConstantesFunciones.ExisteEnLista(this.zonasForeignKey,zona,true)) {

					this.zonasForeignKey.add(0,zona);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyCaja()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyCaja(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyCaja()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
				this.caja.setfecha_inicio(this.parametroGeneralUsuario.getfecha_sistema());
				this.caja.setfecha_final(this.parametroGeneralUsuario.getfecha_sistema());
				this.caja.setfecha_caduca_factura(this.parametroGeneralUsuario.getfecha_sistema());
				this.caja.setfecha_caduca_nota_venta(this.parametroGeneralUsuario.getfecha_sistema());
				this.caja.setfecha_caduca_nota_credito(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyCaja();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyCaja(Caja caja)throws Exception {	
		try {
			
			this.setActualPaisForeignKey(caja.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(caja.getid_ciudad(),false,"Formulario");
			this.setActualZonaForeignKey(caja.getid_zona(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyCaja(Caja caja,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyCaja()throws Exception {	
		try {
			
			this.setActualPaisForeignKey(this.cajaConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(this.cajaConstantesFunciones.getid_ciudad(),false,"Formulario");
			this.setActualZonaForeignKey(this.cajaConstantesFunciones.getid_zona(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyCaja()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyCaja()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyCaja()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroCaja()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyCaja()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameCiudadsForeignKey("Todos");
			this.cargarCombosFrameZonasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyCaja(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameZonasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyCaja()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja!=null && this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.getItemCount()>0) {
				this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja!=null && this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.getItemCount()>0) {
				this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja!=null && this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.getItemCount()>0) {
				this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja!=null && this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.getItemCount()>0) {
				this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja!=null && this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.getItemCount()>0) {
				this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	










	
	

	public CajaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public CajaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public CajaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.cajaSessionBean=new CajaSessionBean(); 
		this.cajaConstantesFunciones=new CajaConstantesFunciones(); 
		this.cajaBean=new Caja();//(this.cajaConstantesFunciones); 		
		this.cajaReturnGeneral=new CajaParameterReturnGeneral(); 
		
		this.cajaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.cajaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public CajaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public CajaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public CajaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessCaja(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.cajaConstantesFunciones=new CajaConstantesFunciones(); 
			this.cajaBean=new Caja();//this.cajaConstantesFunciones); 			
			this.cajaReturnGeneral=new CajaParameterReturnGeneral(); 
		
			CajaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Caja Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.caja=new Caja();
			this.cajas = new ArrayList<Caja>();
			this.cajasAux = new ArrayList<Caja>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic=new CajaLogic();
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			//this.cajaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.cajaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormCaja);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoCaja!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCaja);	
					}
					
					if(this.jInternalFrameImportacionCaja!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCaja);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByCaja!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByCaja);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormCaja!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormCaja);
				this.jInternalFrameDetalleFormCaja.setVisible(false);
				this.jInternalFrameDetalleFormCaja.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoCaja!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCaja);
					this.jInternalFrameReporteDinamicoCaja.setVisible(false);
					this.jInternalFrameReporteDinamicoCaja.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionCaja!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionCaja);
					this.jInternalFrameImportacionCaja.setVisible(false);
					this.jInternalFrameImportacionCaja.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByCaja!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByCaja);
					this.jInternalFrameOrderByCaja.setVisible(false);
					this.jInternalFrameOrderByCaja.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idCajaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=CajaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.cajaReturnGeneral=new CajaParameterReturnGeneral();
			
			this.cajaParameterGeneral=new CajaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.cajaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(CajaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.cajaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(NotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(CajaCierreConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(CajaEgresoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(CajeroTurnoConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(PresupuestoVentasPunVenConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(CajaIngresoConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CajaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cajaSessionBean.getEsGuardarRelacionado(),this.cajaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,CajaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.cajaSessionBean.getEsGuardarRelacionado(),this.cajaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaDuplicarCaja=true;
			this.isVisibilidadCeldaCopiarCaja=true;
			this.isVisibilidadCeldaVerFormCaja=true;
			this.isVisibilidadCeldaOrdenCaja=true;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=false;
			this.isVisibilidadCeldaGuardarCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			
			
			this.isVisibilidadFK_IdCiudad=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdZona=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosCaja();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioCaja(false);
			
			this.setPermisosUsuarioCaja();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cajaSessionBean.getEsGuardarRelacionado() 
				|| (this.cajaSessionBean.getEsGuardarRelacionado() && this.cajaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioCajaClasesRelacionadas();
			}
			
			if(this.cajaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioCajaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!CajaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosCaja();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualCaja();
			}
			
			if(!this.isPermisoBusquedaCaja) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasCaja.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cajaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(false);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(false);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioCaja,this.isPermisoPaginacionMedioCaja,this.isPermisoPaginacionTodoCaja);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(CajaConstantesFunciones.getTiposSeleccionarCaja());
				
				this.tiposColumnasSelect=CajaConstantesFunciones.getTiposSeleccionarCaja(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectCaja();				
				//this.tiposRelacionesSelect=CajaConstantesFunciones.getTiposRelacionesCaja(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioCaja();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(false,false,true);
				this.setAccionesUsuarioCaja(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(false,false,true);							
				this.setAccionesUsuarioCaja(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesCaja() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.notacreditopuntoventaLogic=new NotaCreditoPuntoVentaLogic();
			this.cajacierreLogic=new CajaCierreLogic();
			this.facturapuntoventaLogic=new FacturaPuntoVentaLogic();
			this.cajaegresoLogic=new CajaEgresoLogic();
			this.cajeroturnoLogic=new CajeroTurnoLogic();
			this.presupuestoventaspunvenLogic=new PresupuestoVentasPunVenLogic();
			this.pedidopuntoventaLogic=new PedidoPuntoVentaLogic();
			this.cajaingresoLogic=new CajaIngresoLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.paisLogic=new PaisLogic();
			this.ciudadLogic=new CiudadLogic();
			this.zonaLogic=new ZonaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				cajaImplementable= (CajaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CajaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				cajaImplementableHome= (CajaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+CajaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.cajas= new ArrayList<Caja>();
			this.cajasEliminados= new ArrayList<Caja>();
						
			this.isEsNuevoCaja=false;
			this.esParaAccionDesdeFormularioCaja=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.ciudadsForeignKey=new ArrayList<Ciudad>() ;
			this.zonasForeignKey=new ArrayList<Zona>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyCaja(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroCaja();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=CajaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesCaja("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingCaja(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormCaja!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioCaja();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioCaja();
			}
			
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasCaja.getTabCount(); i++) {
					this.jTabbedPaneBusquedasCaja.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasCaja.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessCaja(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga Caja: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectCaja() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(CajaCierreConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(CajaCierreConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(CajaEgresoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(CajaEgresoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(PresupuestoVentasPunVenConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PresupuestoVentasPunVenConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(CajaIngresoConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(CajaIngresoConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesCaja")) {
				iIndex=this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosCaja.getSelectedRow();	
				
				

				if(sTitle.equals("Caja Cierres")) {
					if(!CajaCierreJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaCajaCierre(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Caja Egresos")) {
					if(!CajaEgresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaCajaEgreso(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Caja Ingresos")) {
					if(!CajaIngresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaCajaIngreso(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Cajero Turnos")) {
					if(!CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaCajeroTurno(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Factura Punto Ventas")) {
					if(!FacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaFacturaPuntoVenta(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Nota Creditos")) {
					if(!NotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaNotaCreditoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Pedido Punto Ventas")) {
					if(!PedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaPedidoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Presupuesto Ventases")) {
					if(!PresupuestoVentasPunVenJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessCaja();

						this.cargarParteTabPanelRelacionadaPresupuestoVentasPunVen(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessCaja();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaCajaCierre(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameCajaCierre(false,true,iIndex);
		this.jButtonCajaCierreActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCajaCierre();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaCajaEgreso(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameCajaEgreso(false,true,iIndex);
		this.jButtonCajaEgresoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCajaEgreso();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaCajaIngreso(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameCajaIngreso(false,true,iIndex);
		this.jButtonCajaIngresoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCajaIngreso();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaCajeroTurno(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameCajeroTurno(false,true,iIndex);
		this.jButtonCajeroTurnoActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaCajeroTurno();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaFacturaPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameFacturaPuntoVenta(false,true,iIndex);
		this.jButtonFacturaPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaFacturaPuntoVenta();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaNotaCreditoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFrameNotaCreditoPuntoVenta(false,true,iIndex);
		this.jButtonNotaCreditoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaNotaCreditoPuntoVenta();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPedidoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFramePedidoPuntoVenta(false,true,iIndex);
		this.jButtonPedidoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPedidoPuntoVenta();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaPresupuestoVentasPunVen(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormCaja.cargarSessionConBeanSwingJInternalFramePresupuestoVentasPunVen(false,true,iIndex);
		this.jButtonPresupuestoVentasPunVenActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaPresupuestoVentasPunVen();

		//this.jTabbedPaneRelacionesCaja.updateUI();
		//this.jTabbedPaneRelacionesCaja.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesCaja.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("NotaCreditoPuntoVenta")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonNotaCreditoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("CajaCierre")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonCajaCierreActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("FacturaPuntoVenta")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonFacturaPuntoVentaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("CajaEgreso")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonCajaEgresoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("CajeroTurno")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonCajeroTurnoActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("PresupuestoVentasPunVen")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonPresupuestoVentasPunVenActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("PedidoPuntoVenta")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonPedidoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("CajaIngreso")) {
				int row=this.jTableDatosCaja.getSelectedRow();
				jButtonCajaIngresoActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Nota Credito")) {

					if(this.isTienePermisosNotaCreditoPuntoVenta && this.cajaConstantesFunciones.mostrarNotaCreditoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Nota Creditos"+"("+NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Nota Creditos");

						if(cajaConstantesFunciones.resaltarNotaCreditoPuntoVentaCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarNotaCreditoPuntoVentaCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarNotaCreditoPuntoVentaCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"NotaCreditoPuntoVenta"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Caja Cierre")) {

					if(this.isTienePermisosCajaCierre && this.cajaConstantesFunciones.mostrarCajaCierreCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Caja Cierres"+"("+CajaCierreConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Caja Cierres");

						if(cajaConstantesFunciones.resaltarCajaCierreCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarCajaCierreCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarCajaCierreCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"CajaCierre"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Factura Punto Venta")) {

					if(this.isTienePermisosFacturaPuntoVenta && this.cajaConstantesFunciones.mostrarFacturaPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Factura Punto Ventas"+"("+FacturaPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Factura Punto Ventas");

						if(cajaConstantesFunciones.resaltarFacturaPuntoVentaCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarFacturaPuntoVentaCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarFacturaPuntoVentaCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"FacturaPuntoVenta"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Caja Egreso")) {

					if(this.isTienePermisosCajaEgreso && this.cajaConstantesFunciones.mostrarCajaEgresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Caja Egresos"+"("+CajaEgresoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Caja Egresos");

						if(cajaConstantesFunciones.resaltarCajaEgresoCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarCajaEgresoCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarCajaEgresoCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"CajaEgreso"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Cajero Turno")) {

					if(this.isTienePermisosCajeroTurno && this.cajaConstantesFunciones.mostrarCajeroTurnoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Cajero Turnos"+"("+CajeroTurnoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Cajero Turnos");

						if(cajaConstantesFunciones.resaltarCajeroTurnoCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarCajeroTurnoCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarCajeroTurnoCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"CajeroTurno"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Presupuesto Ventas")) {

					if(this.isTienePermisosPresupuestoVentasPunVen && this.cajaConstantesFunciones.mostrarPresupuestoVentasPunVenCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Presupuesto Ventases"+"("+PresupuestoVentasPunVenConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Presupuesto Ventases");

						if(cajaConstantesFunciones.resaltarPresupuestoVentasPunVenCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarPresupuestoVentasPunVenCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarPresupuestoVentasPunVenCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PresupuestoVentasPunVen"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Pedido Punto Venta")) {

					if(this.isTienePermisosPedidoPuntoVenta && this.cajaConstantesFunciones.mostrarPedidoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Pedido Punto Ventas"+"("+PedidoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Pedido Punto Ventas");

						if(cajaConstantesFunciones.resaltarPedidoPuntoVentaCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarPedidoPuntoVentaCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarPedidoPuntoVentaCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"PedidoPuntoVenta"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Caja Ingreso")) {

					if(this.isTienePermisosCajaIngreso && this.cajaConstantesFunciones.mostrarCajaIngresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Caja Ingresos"+"("+CajaIngresoConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Caja Ingresos");

						if(cajaConstantesFunciones.resaltarCajaIngresoCaja!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(cajaConstantesFunciones.resaltarCajaIngresoCaja);
						}

						jmenuItem.setEnabled(this.cajaConstantesFunciones.activarCajaIngresoCaja);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"CajaIngreso"));

						

						this.jInternalFrameDetalleFormCaja.jmenuDetalleCaja.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyCaja(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyCaja(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyCaja(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyCajaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyCaja();
		
		this.cargarCombosFrameForeignKeyCaja();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyCaja();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyCaja();
		}
	}
	
	

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCiudad(this.ciudadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyZona(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyZonaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyZona();
				this.cargarCombosFrameZonasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaZona(this.zonasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoCajaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.cajaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			
			if(jTableDatosCaja.getRowCount()>=1) {
				jTableDatosCaja.removeRowSelectionInterval(0, jTableDatosCaja.getRowCount()-1);						
			}
			
			this.isEsNuevoCaja=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoCaja(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesCaja(true);			
			//this.caja=new Caja();
			//this.caja.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCaja(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCaja() ;
			
			if(CajaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCaja(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.caja);	
			this.actualizarInformacion("INFO_PADRE",false,this.caja);				
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			if(this.cajaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar Caja: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarCajaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosCaja.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosCaja.getSelectedRows().length;			
			}
			
			cajasSeleccionados=this.getCajasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoCaja--;			
				//Caja cajaAux= new Caja();			
				//cajaAux.setId(this.iIdNuevoCaja);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//Caja cajaOrigen=new Caja();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(Caja cajaOrigen : cajasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosCaja.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							cajaOrigen =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							cajaOrigen =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaCaja();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.caja.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosCaja(cajaOrigen,this.caja,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cajaLogic.getCajas().add(this.cajaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cajas.add(this.cajaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaCaja(false);
				
				this.jTableDatosCaja.setRowSelectionInterval(this.getIndiceNuevoCaja(), this.getIndiceNuevoCaja());
				
				int iLastRow =  this.jTableDatosCaja.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCaja.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCaja.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCaja(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();									
		
			Caja cajaOrigen=new Caja();
			Caja cajaDestino=new Caja();
				
			cajasSeleccionados=this.getCajasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosCaja.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || cajasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosCaja.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaOrigen =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cajaOrigen =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						cajaDestino =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						cajaDestino =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				cajaOrigen =cajasSeleccionados.get(0);
				cajaDestino =cajasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosCaja(cajaOrigen,cajaDestino,true,false);
				
				cajaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(cajaDestino,cajaLogic.getCajas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(cajaDestino,cajas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaCaja(false);
				
				//this.jTableDatosCaja.setRowSelectionInterval(this.getIndiceNuevoCaja(), this.getIndiceNuevoCaja());
				
				int iLastRow =  this.jTableDatosCaja.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosCaja.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosCaja.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaCaja(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormCaja.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesCaja.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasCaja.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesCaja.setVisible(!isVisible);
			this.jPanelPaginacionCaja.setVisible(!isVisible);
			this.jPanelAccionesCaja.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameCaja();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoCaja();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionCaja();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByCaja();
			
			this.abrirFrameOrderByCaja();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByCaja();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleCaja(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormCaja);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormCaja.isMaximum()) {
					this.jInternalFrameDetalleFormCaja.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormCaja.setSize(this.jInternalFrameDetalleFormCaja.iWidthFormulario,this.jInternalFrameDetalleFormCaja.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormCaja.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormCaja.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormCaja.isMaximum()) {
						this.jInternalFrameDetalleFormCaja.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),CajaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),CajaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),CajaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(CajaCierreJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCajaCierre();
					}

					if(CajaEgresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCajaEgreso();
					}

					if(CajaIngresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCajaIngreso();
					}

					if(CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaCajeroTurno();
					}

					if(FacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaFacturaPuntoVenta();
					}

					if(NotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaNotaCreditoPuntoVenta();
					}

					if(PedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPedidoPuntoVenta();
					}

					if(PresupuestoVentasPunVenJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaPresupuestoVentasPunVen();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormCaja.setVisible(true);
	        this.jInternalFrameDetalleFormCaja.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByCaja() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByCaja==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByCaja=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCaja,false,this);
				} else {
					this.jInternalFrameOrderByCaja=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByCaja,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByCaja);
				this.jInternalFrameOrderByCaja.setVisible(false);
				this.jInternalFrameOrderByCaja.setSelected(false);
				
				this.jInternalFrameOrderByCaja.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCaja"));
				
				this.inicializarActualizarBindingTablaOrderByCaja();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionCaja() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionCaja==null) {
				
				this.jInternalFrameImportacionCaja=new ImportacionJInternalFrame(CajaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionCaja);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionCaja);
				this.jInternalFrameImportacionCaja.setVisible(false);
				this.jInternalFrameImportacionCaja.setSelected(false);


				this.jInternalFrameImportacionCaja.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCaja"));
				this.jInternalFrameImportacionCaja.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCaja"));
				this.jInternalFrameImportacionCaja.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCaja"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoCaja() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoCaja==null) {
				this.jInternalFrameReporteDinamicoCaja=new ReporteDinamicoJInternalFrame(CajaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoCaja);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoCaja);
				this.jInternalFrameReporteDinamicoCaja.setVisible(false);
				this.jInternalFrameReporteDinamicoCaja.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoCaja.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCaja"));
				this.jInternalFrameReporteDinamicoCaja.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCaja"));
				this.jInternalFrameReporteDinamicoCaja.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCaja"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCaja();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaCajaCierre() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.jScrollPanelDatosCajaCierre.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.jScrollPanelDatosCajaCierre.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.jScrollPanelDatosCajaCierre.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.jScrollPanelDatosCajaCierre.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaCajaEgreso() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.jScrollPanelDatosCajaEgreso.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.jScrollPanelDatosCajaEgreso.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.jScrollPanelDatosCajaEgreso.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.jScrollPanelDatosCajaEgreso.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaCajaIngreso() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.jScrollPanelDatosCajaIngreso.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.jScrollPanelDatosCajaIngreso.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.jScrollPanelDatosCajaIngreso.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.jScrollPanelDatosCajaIngreso.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaCajeroTurno() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaFacturaPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFacturaPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFacturaPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFacturaPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFacturaPuntoVenta.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaNotaCreditoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPedidoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosPedidoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosPedidoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosPedidoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosPedidoPuntoVenta.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaPresupuestoVentasPunVen() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasPunVen.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormCaja.jContentPaneDetalleCaja.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasPunVen.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasPunVen.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasPunVen.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleCaja() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormCaja);
			
	       	this.jInternalFrameDetalleFormCaja.setVisible(false);
	        this.jInternalFrameDetalleFormCaja.setSelected(false);
			
			//this.jInternalFrameDetalleFormCaja.dispose();
			//this.jInternalFrameDetalleFormCaja=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoCaja() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoCaja.setVisible(true);
	        this.jInternalFrameReporteDinamicoCaja.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionCaja() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionCaja.setVisible(true);
	        this.jInternalFrameImportacionCaja.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByCaja() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByCaja.setVisible(true);
	        this.jInternalFrameOrderByCaja.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByCaja() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByCaja.setVisible(false);
	        this.jInternalFrameOrderByCaja.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoCaja() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoCaja.setVisible(false);
	        this.jInternalFrameReporteDinamicoCaja.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionCaja() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionCaja.setVisible(false);
	        this.jInternalFrameImportacionCaja.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarCaja(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarCaja(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCaja.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesCaja(true);
			//this.isEsNuevoCaja=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesCaja("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCaja(false) ;
			
			if(cajaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.getEsGuardarRelacionado() && NotaCreditoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonNotaCreditoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.getEsGuardarRelacionado() && CajaCierreJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaCierreActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.getEsGuardarRelacionado() && FacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFacturaPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.getEsGuardarRelacionado() && CajaEgresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaEgresoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado() && CajeroTurnoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajeroTurnoActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.getEsGuardarRelacionado() && PresupuestoVentasPunVenJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPresupuestoVentasPunVenActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.getEsGuardarRelacionado() && PedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonPedidoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.getEsGuardarRelacionado() && CajaIngresoJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonCajaIngresoActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(CajaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCaja(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCaja(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaCajaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarCaja(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosCaja.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesCaja(true);
			//this.isEsNuevoCaja=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.caja.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesCaja("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesCaja(false) ;
			
			if(CajaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleCaja(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCaja(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCaja.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCiudad(List<Ciudad> ciudadsForeignKey)throws Exception{
		TableColumn tableColumnCiudad=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDCIUDAD));
		TableCellEditor tableCellEditorCiudad =tableColumnCiudad.getCellEditor();

		CiudadTableCell ciudadTableCellFk=(CiudadTableCell)tableCellEditorCiudad;

		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.setciudadsForeignKey(ciudadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCaja.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ciudadTableCellFk.setRowActual(intSelectedRow);
			//ciudadTableCellFk.setciudadsForeignKeyActual(ciudadsForeignKey);
		//}


		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.RecargarCiudadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaZona(List<Zona> zonasForeignKey)throws Exception{
		TableColumn tableColumnZona=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDZONA));
		TableCellEditor tableCellEditorZona =tableColumnZona.getCellEditor();

		ZonaTableCell zonaTableCellFk=(ZonaTableCell)tableCellEditorZona;

		if(zonaTableCellFk!=null) {
			zonaTableCellFk.setzonasForeignKey(zonasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosCaja.getSelectedRow();

		//if(intSelectedRow<=0) {
			//zonaTableCellFk.setRowActual(intSelectedRow);
			//zonaTableCellFk.setzonasForeignKeyActual(zonasForeignKey);
		//}


		if(zonaTableCellFk!=null) {
			zonaTableCellFk.RecargarZonasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesCaja(false);
			
			//if(!this.isEsNuevoCaja) {								
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				
			}
			
			if(this.permiteMantenimiento(this.caja)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.cajaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoCaja=true;
					this.inicializarActualizarBindingTablaCaja(false);
					this.isEsNuevoCaja=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoCaja=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoCaja=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCaja(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCaja(false);
				
				this.habilitarDeshabilitarControlesCaja(false);
			
												
				
				if(CajaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleCaja();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoCajaActionPerformed(evt,cajaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualCaja(this.caja,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosCaja.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,cajaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.caja.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarCajaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosCaja.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				this.caja.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				this.caja.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.caja)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.cajaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((CajaModel) this.jTableDatosCaja.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoCaja=true;
				this.inicializarActualizarBindingTablaCaja(false);
				this.isEsNuevoCaja=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesCaja(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCaja(false);
				
				this.habilitarDeshabilitarControlesCaja(false);
				
				
				
				if(CajaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleCaja();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarCajaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosCaja.getRowCount()>=1) {
				jTableDatosCaja.removeRowSelectionInterval(0, jTableDatosCaja.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesCaja(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaCaja(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesCaja(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualCaja(false) ;
			
			this.isEsNuevoCaja=false;
			
			if(CajaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleCaja();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosCajaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingCaja(false);
				
				//SI ES MANUAL
				if(CajaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualCaja();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosCajaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoCaja--;			
			//Caja cajaAux= new Caja();			
			//cajaAux.setId(this.iIdNuevoCaja);
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaCaja();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
			
			this.caja.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.cajaLogic.getCajas().add(this.cajaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.cajas.add(this.cajaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaCaja(false);
			
			this.jTableDatosCaja.setRowSelectionInterval(this.getIndiceNuevoCaja(), this.getIndiceNuevoCaja());
			
			int iLastRow =  this.jTableDatosCaja.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosCaja.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosCaja.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaCaja(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionCajaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingCaja(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCaja(false);
			
			//SI ES MANUAL
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCaja();
			}
			
			//this.abrirFrameTreeCaja();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionCajaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE CajaS ?", "MANTENIMIENTO DE Caja", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionCaja.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralCaja();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.cajaReturnGeneral=cajaLogic.procesarImportacionCajasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.cajaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarCajaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionCajaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionCaja.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionCaja.setFileImportacion(this.jInternalFrameImportacionCaja.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionCaja.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionCaja.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionCaja.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionCaja.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoCajaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		

		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("CajaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"CajaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteCajas("Todos",cajasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CajaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_NOMBRE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbre_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbre_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbre_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbre_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_NOMBREEQUIPO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreEquipo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreEquipo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreEquipo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreEquipo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_NOMBREIMPRESORA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreImpresora_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreImpresora_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreImpresora_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreImpresora_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialPedido_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialPedido_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialPedido_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialPedido_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialPedidoFormato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialPedidoFormato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialPedidoFormato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialPedidoFormato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_PUNTOEMISION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntoEmision_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntoEmision_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntoEmision_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntoEmision_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_ESTABLECIMIENTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tablecimiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tablecimiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tablecimiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tablecimiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_FECHAINICIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaInicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaInicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaInicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaInicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_FECHAFINAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaFinal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaFinal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaFinal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaFinal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_ESTAACTIVO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_taActivo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_taActivo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_taActivo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_taActivo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialFacturaFormato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialFacturaFormato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialFacturaFormato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialFacturaFormato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuencialNotaVentaFormato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuencialNotaVentaFormato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuencialNotaVentaFormato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuencialNotaVentaFormato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuenciaNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuenciaNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuenciaNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuenciaNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cuenciaNotaCreditoFormato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cuenciaNotaCreditoFormato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cuenciaNotaCreditoFormato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cuenciaNotaCreditoFormato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_torizacionFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_torizacionFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_torizacionFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_torizacionFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_torizacionNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_torizacionNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_torizacionNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_torizacionNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_torizacionNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_torizacionNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_torizacionNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_torizacionNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducaFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducaFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducaFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducaFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducaNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducaNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducaNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducaNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_chaCaducaNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_chaCaducaNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_chaCaducaNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_chaCaducaNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SERIEFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rieFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rieFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rieFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rieFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SERIENOTAVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rieNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rieNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rieNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rieNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SERIENOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rieNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rieNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rieNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rieNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECINICIALFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cInicialFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cInicialFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cInicialFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cInicialFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cInicialNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cInicialNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cInicialNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cInicialNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cInicialNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cInicialNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cInicialNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cInicialNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECFINALFACTURA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cFinalFactura_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cFinalFactura_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cFinalFactura_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cFinalFactura_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cFinalNotaVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cFinalNotaVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cFinalNotaVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cFinalNotaVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cFinalNotaCredito_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cFinalNotaCredito_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cFinalNotaCredito_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cFinalNotaCredito_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_IDCIUDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ciudad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ciudad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ciudad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ciudad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case CajaConstantesFunciones.LABEL_IDZONA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Zona_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Zona_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Zona_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Zona_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoCaja.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case CajaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case CajaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case CajaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoria="nombre";
					break;

				case CajaConstantesFunciones.LABEL_NOMBREEQUIPO:
					sNombreCampoCategoria="nombre_equipo";
					break;

				case CajaConstantesFunciones.LABEL_NOMBREIMPRESORA:
					sNombreCampoCategoria="nombre_impresora";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO:
					sNombreCampoCategoria="secuencial_pedido";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO:
					sNombreCampoCategoria="secuencial_pedido_formato";
					break;

				case CajaConstantesFunciones.LABEL_PUNTOEMISION:
					sNombreCampoCategoria="punto_emision";
					break;

				case CajaConstantesFunciones.LABEL_ESTABLECIMIENTO:
					sNombreCampoCategoria="establecimiento";
					break;

				case CajaConstantesFunciones.LABEL_FECHAINICIO:
					sNombreCampoCategoria="fecha_inicio";
					break;

				case CajaConstantesFunciones.LABEL_FECHAFINAL:
					sNombreCampoCategoria="fecha_final";
					break;

				case CajaConstantesFunciones.LABEL_ESTAACTIVO:
					sNombreCampoCategoria="esta_activo";
					break;

				case CajaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURA:
					sNombreCampoCategoria="secuencial_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO:
					sNombreCampoCategoria="secuencial_factura_formato";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA:
					sNombreCampoCategoria="secuencial_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO:
					sNombreCampoCategoria="secuencial_nota_venta_formato";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO:
					sNombreCampoCategoria="secuencia_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO:
					sNombreCampoCategoria="secuencia_nota_credito_formato";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA:
					sNombreCampoCategoria="autorizacion_factura";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA:
					sNombreCampoCategoria="autorizacion_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO:
					sNombreCampoCategoria="autorizacion_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA:
					sNombreCampoCategoria="fecha_caduca_factura";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA:
					sNombreCampoCategoria="fecha_caduca_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO:
					sNombreCampoCategoria="fecha_caduca_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SERIEFACTURA:
					sNombreCampoCategoria="serie_factura";
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTAVENTA:
					sNombreCampoCategoria="serie_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTACREDITO:
					sNombreCampoCategoria="serie_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALFACTURA:
					sNombreCampoCategoria="sec_inicial_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA:
					sNombreCampoCategoria="sec_inicial_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO:
					sNombreCampoCategoria="sec_inicial_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALFACTURA:
					sNombreCampoCategoria="sec_final_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA:
					sNombreCampoCategoria="sec_final_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO:
					sNombreCampoCategoria="sec_final_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case CajaConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoria="id_ciudad";
					break;

				case CajaConstantesFunciones.LABEL_IDZONA:
					sNombreCampoCategoria="id_zona";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case CajaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case CajaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case CajaConstantesFunciones.LABEL_NOMBRE:
					sNombreCampoCategoriaValor="nombre";
					break;

				case CajaConstantesFunciones.LABEL_NOMBREEQUIPO:
					sNombreCampoCategoriaValor="nombre_equipo";
					break;

				case CajaConstantesFunciones.LABEL_NOMBREIMPRESORA:
					sNombreCampoCategoriaValor="nombre_impresora";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO:
					sNombreCampoCategoriaValor="secuencial_pedido";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO:
					sNombreCampoCategoriaValor="secuencial_pedido_formato";
					break;

				case CajaConstantesFunciones.LABEL_PUNTOEMISION:
					sNombreCampoCategoriaValor="punto_emision";
					break;

				case CajaConstantesFunciones.LABEL_ESTABLECIMIENTO:
					sNombreCampoCategoriaValor="establecimiento";
					break;

				case CajaConstantesFunciones.LABEL_FECHAINICIO:
					sNombreCampoCategoriaValor="fecha_inicio";
					break;

				case CajaConstantesFunciones.LABEL_FECHAFINAL:
					sNombreCampoCategoriaValor="fecha_final";
					break;

				case CajaConstantesFunciones.LABEL_ESTAACTIVO:
					sNombreCampoCategoriaValor="esta_activo";
					break;

				case CajaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURA:
					sNombreCampoCategoriaValor="secuencial_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO:
					sNombreCampoCategoriaValor="secuencial_factura_formato";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA:
					sNombreCampoCategoriaValor="secuencial_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO:
					sNombreCampoCategoriaValor="secuencial_nota_venta_formato";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO:
					sNombreCampoCategoriaValor="secuencia_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO:
					sNombreCampoCategoriaValor="secuencia_nota_credito_formato";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA:
					sNombreCampoCategoriaValor="autorizacion_factura";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA:
					sNombreCampoCategoriaValor="autorizacion_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO:
					sNombreCampoCategoriaValor="autorizacion_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA:
					sNombreCampoCategoriaValor="fecha_caduca_factura";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA:
					sNombreCampoCategoriaValor="fecha_caduca_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO:
					sNombreCampoCategoriaValor="fecha_caduca_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SERIEFACTURA:
					sNombreCampoCategoriaValor="serie_factura";
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTAVENTA:
					sNombreCampoCategoriaValor="serie_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTACREDITO:
					sNombreCampoCategoriaValor="serie_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALFACTURA:
					sNombreCampoCategoriaValor="sec_inicial_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA:
					sNombreCampoCategoriaValor="sec_inicial_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO:
					sNombreCampoCategoriaValor="sec_inicial_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALFACTURA:
					sNombreCampoCategoriaValor="sec_final_factura";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA:
					sNombreCampoCategoriaValor="sec_final_nota_venta";
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO:
					sNombreCampoCategoriaValor="sec_final_nota_credito";
					break;

				case CajaConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case CajaConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoriaValor="id_ciudad";
					break;

				case CajaConstantesFunciones.LABEL_IDZONA:
					sNombreCampoCategoriaValor="id_zona";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoCaja.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoCaja.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case CajaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case CajaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case CajaConstantesFunciones.LABEL_NOMBRE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre");
					break;

				case CajaConstantesFunciones.LABEL_NOMBREEQUIPO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Equipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_equipo");
					break;

				case CajaConstantesFunciones.LABEL_NOMBREIMPRESORA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Impresora",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_impresora");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Pedido",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_pedido");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Pedido Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_pedido_formato");
					break;

				case CajaConstantesFunciones.LABEL_PUNTOEMISION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Punto Emision",sNombreCampoCategoria,sNombreCampoCategoriaValor,"punto_emision");
					break;

				case CajaConstantesFunciones.LABEL_ESTABLECIMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Establecimiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"establecimiento");
					break;

				case CajaConstantesFunciones.LABEL_FECHAINICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Inicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_inicio");
					break;

				case CajaConstantesFunciones.LABEL_FECHAFINAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Final",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_final");
					break;

				case CajaConstantesFunciones.LABEL_ESTAACTIVO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Esta Activo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"esta_activo");
					break;

				case CajaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_factura");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_factura_formato");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial  Formato ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencial_nota_venta_formato");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencia_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Secuencial  Formato  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"secuencia_nota_credito_formato");
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Autorizacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"autorizacion_factura");
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Autorizacion ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"autorizacion_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Autorizacion  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"autorizacion_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Caduca",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caduca_factura");
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Caduca ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caduca_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha Caduca  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha_caduca_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_SERIEFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie_factura");
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Inicial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_inicial_factura");
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Inicial ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_inicial_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Inicial  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_inicial_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_SECFINALFACTURA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Final",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_final_factura");
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Final ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_final_nota_venta");
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sec Final  ",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sec_final_nota_credito");
					break;

				case CajaConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case CajaConstantesFunciones.LABEL_IDCIUDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ciudad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ciudad");
					break;

				case CajaConstantesFunciones.LABEL_IDZONA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Zona",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_zona");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoCajaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("Cajas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case CajaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_NOMBRE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBRE);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getnombre());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_NOMBREEQUIPO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREEQUIPO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getnombre_equipo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_NOMBREIMPRESORA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getnombre_impresora());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_pedido());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_pedido_formato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_PUNTOEMISION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_PUNTOEMISION);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getpunto_emision());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_ESTABLECIMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getestablecimiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_FECHAINICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAINICIO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getfecha_inicio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_FECHAFINAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAFINAL);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getfecha_final());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_ESTAACTIVO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_ESTAACTIVO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getesta_activo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_factura_formato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencial_nota_venta_formato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencia_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsecuencia_nota_credito_formato());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getautorizacion_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getautorizacion_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getautorizacion_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getfecha_caduca_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getfecha_caduca_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getfecha_caduca_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SERIEFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SERIEFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getserie_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getserie_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SERIENOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getserie_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_inicial_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_inicial_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_inicial_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECFINALFACTURA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALFACTURA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_final_factura());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_final_nota_venta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getsec_final_nota_credito());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_IDCIUDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_IDCIUDAD);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getciudad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case CajaConstantesFunciones.LABEL_IDZONA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(CajaConstantesFunciones.LABEL_IDZONA);
					iRow++;

					for(Caja caja:cajasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(caja.getzona_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelCaja(row);				
			//	iRow++;
			//}				
			
			//for(Caja cajaAux:cajasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelCaja(cajaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCaja(false);
			
			//SI ES MANUAL
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualCaja();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresCajaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCaja(false);
			
			//SI ES MANUAL
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCaja();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesCajaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingCaja(false);
			
			//SI ES MANUAL
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualCaja();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaCaja() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosCaja.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosCaja.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosCaja.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosCaja.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosCaja.setMinimumSize(dimensionMinimum);
		this.jTableDatosCaja.setMaximumSize(dimensionMaximum);
		this.jTableDatosCaja.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingCaja(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingCaja(esInicializar,true);
	}
	
	public void inicializarActualizarBindingCaja(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaCaja(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesCaja(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasCaja(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCaja(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesCaja(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !CajaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!CajaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualCaja() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaCaja();
		
		this.inicializarActualizarBindingBotonesManualCaja(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualCaja();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesCaja() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualCaja(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualCaja(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosCaja.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosCaja.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteCaja.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormCaja!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionNuevoCaja.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionSinCerrarCaja.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionSinMensajeCaja.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosCaja.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosCaja.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteCaja.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormCaja!=null) {
				this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionNuevoCaja.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionSinCerrarCaja.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormCaja.jCheckBoxPostAccionSinMensajeCaja.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionCaja.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionCaja.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesCaja.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoCaja!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesCaja.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesCaja.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarCaja.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesCaja.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoCaja!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesCaja.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralCaja.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesCaja(Boolean esInicializar) throws Exception {
		try	{	
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualCaja(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesCaja() throws Exception {
		try	{
			if(CajaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualCaja();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCaja() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualCaja() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesCaja.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesCaja.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesCaja.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionCaja.addItem(reporte);
			}
			
			
			if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionCaja.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionCaja.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesCaja.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesCaja.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarCaja.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarCaja.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarCaja.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCaja();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualCaja() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCaja!=null) {
				this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoCaja!=null) {
				this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoCaja.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoCaja!=null) {
				
				if(this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCaja.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoCaja.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoCaja.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoCaja.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualCaja()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_ciudadFK_IdCiudadCaja.getSelectedItem()!=null){this.id_ciudadFK_IdCiudad=((Ciudad)this.jComboBoxid_ciudadFK_IdCiudadCaja.getSelectedItem()).getId();}
		if(this.jComboBoxid_paisFK_IdPaisCaja.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisCaja.getSelectedItem()).getId();}
		if(this.jComboBoxid_zonaFK_IdZonaCaja.getSelectedItem()!=null){this.id_zonaFK_IdZona=((Zona)this.jComboBoxid_zonaFK_IdZonaCaja.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasCaja(Boolean esInicializar) throws Exception {				
		if(CajaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualCaja();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaCaja() throws Exception {
		this.inicializarActualizarBindingTablaCaja(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByCaja() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByCaja.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByCaja.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCaja.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByCaja.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCaja.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosCajaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCajaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByCaja.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByCaja.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByCaja.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaCaja(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=cajaLogic.getCajas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=cajas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosCaja.setModel(new CajaModel(this.cajaLogic.getCajas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosCaja.setModel(new CajaModel(this.cajas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByCaja!=null && this.jInternalFrameOrderByCaja.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByCaja();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+CajaConstantesFunciones.SCLASSWEBTITULO,cajaConstantesFunciones.resaltarSeleccionarCaja,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+CajaConstantesFunciones.SCLASSWEBTITULO,cajaConstantesFunciones.resaltarSeleccionarCaja,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_ID));

		if(this.cajaConstantesFunciones.mostraridCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cajaConstantesFunciones.resaltaridCaja,this.cajaConstantesFunciones.activaridCaja,this,true,"idCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltaridCaja,this.cajaConstantesFunciones.activaridCaja,this,true,"idCaja","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.cajaConstantesFunciones.mostrarid_empresaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.cajaConstantesFunciones.resaltarid_empresaCaja,this,this.cajaConstantesFunciones.activarid_empresaCaja));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.cajaConstantesFunciones.resaltarid_empresaCaja,this,this.cajaConstantesFunciones.activarid_empresaCaja,false,"id_empresaCaja","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.cajaConstantesFunciones.mostrarid_sucursalCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.cajaConstantesFunciones.resaltarid_sucursalCaja,this,this.cajaConstantesFunciones.activarid_sucursalCaja));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.cajaConstantesFunciones.resaltarid_sucursalCaja,this,this.cajaConstantesFunciones.activarid_sucursalCaja,false,"id_sucursalCaja","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_NOMBRE));

		if(this.cajaConstantesFunciones.mostrarnombreCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_NOMBRE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarnombreCaja,this.cajaConstantesFunciones.activarnombreCaja,this,true,"nombreCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarnombreCaja,this.cajaConstantesFunciones.activarnombreCaja,this,true,"nombreCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_NOMBREEQUIPO));

		if(this.cajaConstantesFunciones.mostrarnombre_equipoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_NOMBREEQUIPO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarnombre_equipoCaja,this.cajaConstantesFunciones.activarnombre_equipoCaja,this,true,"nombre_equipoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarnombre_equipoCaja,this.cajaConstantesFunciones.activarnombre_equipoCaja,this,true,"nombre_equipoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_NOMBREIMPRESORA));

		if(this.cajaConstantesFunciones.mostrarnombre_impresoraCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_NOMBREIMPRESORA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarnombre_impresoraCaja,this.cajaConstantesFunciones.activarnombre_impresoraCaja,this,true,"nombre_impresoraCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarnombre_impresoraCaja,this.cajaConstantesFunciones.activarnombre_impresoraCaja,this,true,"nombre_impresoraCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO));

		if(this.cajaConstantesFunciones.mostrarsecuencial_pedidoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cajaConstantesFunciones.resaltarsecuencial_pedidoCaja,this.cajaConstantesFunciones.activarsecuencial_pedidoCaja,this,true,"secuencial_pedidoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_pedidoCaja,this.cajaConstantesFunciones.activarsecuencial_pedidoCaja,this,true,"secuencial_pedidoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO));

		if(this.cajaConstantesFunciones.mostrarsecuencial_pedido_formatoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsecuencial_pedido_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_pedido_formatoCaja,this,true,"secuencial_pedido_formatoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_pedido_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_pedido_formatoCaja,this,true,"secuencial_pedido_formatoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_PUNTOEMISION));

		if(this.cajaConstantesFunciones.mostrarpunto_emisionCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_PUNTOEMISION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarpunto_emisionCaja,this.cajaConstantesFunciones.activarpunto_emisionCaja,this,true,"punto_emisionCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarpunto_emisionCaja,this.cajaConstantesFunciones.activarpunto_emisionCaja,this,true,"punto_emisionCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_ESTABLECIMIENTO));

		if(this.cajaConstantesFunciones.mostrarestablecimientoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_ESTABLECIMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarestablecimientoCaja,this.cajaConstantesFunciones.activarestablecimientoCaja,this,true,"establecimientoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarestablecimientoCaja,this.cajaConstantesFunciones.activarestablecimientoCaja,this,true,"establecimientoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_FECHAINICIO));

		if(this.cajaConstantesFunciones.mostrarfecha_inicioCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_FECHAINICIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.cajaConstantesFunciones.resaltarfecha_inicioCaja,this.cajaConstantesFunciones.activarfecha_inicioCaja,this,true,"fecha_inicioCaja","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.cajaConstantesFunciones.resaltarfecha_inicioCaja,this.cajaConstantesFunciones.activarfecha_inicioCaja,this,true,"fecha_inicioCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_FECHAFINAL));

		if(this.cajaConstantesFunciones.mostrarfecha_finalCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_FECHAFINAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.cajaConstantesFunciones.resaltarfecha_finalCaja,this.cajaConstantesFunciones.activarfecha_finalCaja,this,true,"fecha_finalCaja","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.cajaConstantesFunciones.resaltarfecha_finalCaja,this.cajaConstantesFunciones.activarfecha_finalCaja,this,true,"fecha_finalCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_ESTAACTIVO));

		if(this.cajaConstantesFunciones.mostraresta_activoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_ESTAACTIVO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new BooleanRenderer(this.cajaConstantesFunciones.resaltaresta_activoCaja,this.cajaConstantesFunciones.activaresta_activoCaja));
			tableColumn.setCellEditor(new BooleanEditorRenderer(this.cajaConstantesFunciones.resaltaresta_activoCaja,this.cajaConstantesFunciones.activaresta_activoCaja,this,true,"esta_activoCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.cajaConstantesFunciones.mostrardescripcionCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltardescripcionCaja,this.cajaConstantesFunciones.activardescripcionCaja,this,true,"descripcionCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltardescripcionCaja,this.cajaConstantesFunciones.activardescripcionCaja,this,true,"descripcionCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALFACTURA));

		if(this.cajaConstantesFunciones.mostrarsecuencial_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cajaConstantesFunciones.resaltarsecuencial_facturaCaja,this.cajaConstantesFunciones.activarsecuencial_facturaCaja,this,true,"secuencial_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_facturaCaja,this.cajaConstantesFunciones.activarsecuencial_facturaCaja,this,true,"secuencial_facturaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO));

		if(this.cajaConstantesFunciones.mostrarsecuencial_factura_formatoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsecuencial_factura_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_factura_formatoCaja,this,true,"secuencial_factura_formatoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_factura_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_factura_formatoCaja,this,true,"secuencial_factura_formatoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarsecuencial_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cajaConstantesFunciones.resaltarsecuencial_nota_ventaCaja,this.cajaConstantesFunciones.activarsecuencial_nota_ventaCaja,this,true,"secuencial_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_nota_ventaCaja,this.cajaConstantesFunciones.activarsecuencial_nota_ventaCaja,this,true,"secuencial_nota_ventaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO));

		if(this.cajaConstantesFunciones.mostrarsecuencial_nota_venta_formatoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsecuencial_nota_venta_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_nota_venta_formatoCaja,this,true,"secuencial_nota_venta_formatoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencial_nota_venta_formatoCaja,this.cajaConstantesFunciones.activarsecuencial_nota_venta_formatoCaja,this,true,"secuencial_nota_venta_formatoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarsecuencia_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.cajaConstantesFunciones.resaltarsecuencia_nota_creditoCaja,this.cajaConstantesFunciones.activarsecuencia_nota_creditoCaja,this,true,"secuencia_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencia_nota_creditoCaja,this.cajaConstantesFunciones.activarsecuencia_nota_creditoCaja,this,true,"secuencia_nota_creditoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO));

		if(this.cajaConstantesFunciones.mostrarsecuencia_nota_credito_formatoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsecuencia_nota_credito_formatoCaja,this.cajaConstantesFunciones.activarsecuencia_nota_credito_formatoCaja,this,true,"secuencia_nota_credito_formatoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsecuencia_nota_credito_formatoCaja,this.cajaConstantesFunciones.activarsecuencia_nota_credito_formatoCaja,this,true,"secuencia_nota_credito_formatoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA));

		if(this.cajaConstantesFunciones.mostrarautorizacion_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarautorizacion_facturaCaja,this.cajaConstantesFunciones.activarautorizacion_facturaCaja,this,true,"autorizacion_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarautorizacion_facturaCaja,this.cajaConstantesFunciones.activarautorizacion_facturaCaja,this,true,"autorizacion_facturaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarautorizacion_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarautorizacion_nota_ventaCaja,this.cajaConstantesFunciones.activarautorizacion_nota_ventaCaja,this,true,"autorizacion_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarautorizacion_nota_ventaCaja,this.cajaConstantesFunciones.activarautorizacion_nota_ventaCaja,this,true,"autorizacion_nota_ventaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarautorizacion_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarautorizacion_nota_creditoCaja,this.cajaConstantesFunciones.activarautorizacion_nota_creditoCaja,this,true,"autorizacion_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarautorizacion_nota_creditoCaja,this.cajaConstantesFunciones.activarautorizacion_nota_creditoCaja,this,true,"autorizacion_nota_creditoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA));

		if(this.cajaConstantesFunciones.mostrarfecha_caduca_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_facturaCaja,this.cajaConstantesFunciones.activarfecha_caduca_facturaCaja,this,true,"fecha_caduca_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_facturaCaja,this.cajaConstantesFunciones.activarfecha_caduca_facturaCaja,this,true,"fecha_caduca_facturaCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_ventaCaja,this.cajaConstantesFunciones.activarfecha_caduca_nota_ventaCaja,this,true,"fecha_caduca_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_ventaCaja,this.cajaConstantesFunciones.activarfecha_caduca_nota_ventaCaja,this,true,"fecha_caduca_nota_ventaCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_creditoCaja,this.cajaConstantesFunciones.activarfecha_caduca_nota_creditoCaja,this,true,"fecha_caduca_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_creditoCaja,this.cajaConstantesFunciones.activarfecha_caduca_nota_creditoCaja,this,true,"fecha_caduca_nota_creditoCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SERIEFACTURA));

		if(this.cajaConstantesFunciones.mostrarserie_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SERIEFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarserie_facturaCaja,this.cajaConstantesFunciones.activarserie_facturaCaja,this,true,"serie_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarserie_facturaCaja,this.cajaConstantesFunciones.activarserie_facturaCaja,this,true,"serie_facturaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SERIENOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarserie_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SERIENOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarserie_nota_ventaCaja,this.cajaConstantesFunciones.activarserie_nota_ventaCaja,this,true,"serie_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarserie_nota_ventaCaja,this.cajaConstantesFunciones.activarserie_nota_ventaCaja,this,true,"serie_nota_ventaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SERIENOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarserie_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SERIENOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarserie_nota_creditoCaja,this.cajaConstantesFunciones.activarserie_nota_creditoCaja,this,true,"serie_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarserie_nota_creditoCaja,this.cajaConstantesFunciones.activarserie_nota_creditoCaja,this,true,"serie_nota_creditoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECINICIALFACTURA));

		if(this.cajaConstantesFunciones.mostrarsec_inicial_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECINICIALFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_facturaCaja,this.cajaConstantesFunciones.activarsec_inicial_facturaCaja,this,true,"sec_inicial_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_facturaCaja,this.cajaConstantesFunciones.activarsec_inicial_facturaCaja,this,true,"sec_inicial_facturaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarsec_inicial_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_nota_ventaCaja,this.cajaConstantesFunciones.activarsec_inicial_nota_ventaCaja,this,true,"sec_inicial_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_nota_ventaCaja,this.cajaConstantesFunciones.activarsec_inicial_nota_ventaCaja,this,true,"sec_inicial_nota_ventaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarsec_inicial_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_nota_creditoCaja,this.cajaConstantesFunciones.activarsec_inicial_nota_creditoCaja,this,true,"sec_inicial_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_inicial_nota_creditoCaja,this.cajaConstantesFunciones.activarsec_inicial_nota_creditoCaja,this,true,"sec_inicial_nota_creditoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECFINALFACTURA));

		if(this.cajaConstantesFunciones.mostrarsec_final_facturaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECFINALFACTURA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_final_facturaCaja,this.cajaConstantesFunciones.activarsec_final_facturaCaja,this,true,"sec_final_facturaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_final_facturaCaja,this.cajaConstantesFunciones.activarsec_final_facturaCaja,this,true,"sec_final_facturaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA));

		if(this.cajaConstantesFunciones.mostrarsec_final_nota_ventaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_final_nota_ventaCaja,this.cajaConstantesFunciones.activarsec_final_nota_ventaCaja,this,true,"sec_final_nota_ventaCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_final_nota_ventaCaja,this.cajaConstantesFunciones.activarsec_final_nota_ventaCaja,this,true,"sec_final_nota_ventaCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO));

		if(this.cajaConstantesFunciones.mostrarsec_final_nota_creditoCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.cajaConstantesFunciones.resaltarsec_final_nota_creditoCaja,this.cajaConstantesFunciones.activarsec_final_nota_creditoCaja,this,true,"sec_final_nota_creditoCaja","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.cajaConstantesFunciones.resaltarsec_final_nota_creditoCaja,this.cajaConstantesFunciones.activarsec_final_nota_creditoCaja,this,true,"sec_final_nota_creditoCaja","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDPAIS));

		if(this.cajaConstantesFunciones.mostrarid_paisCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.cajaConstantesFunciones.resaltarid_paisCaja,this,this.cajaConstantesFunciones.activarid_paisCaja));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.cajaConstantesFunciones.resaltarid_paisCaja,this,this.cajaConstantesFunciones.activarid_paisCaja,true,"id_paisCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDCIUDAD));

		if(this.cajaConstantesFunciones.mostrarid_ciudadCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_IDCIUDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CiudadTableCell(this.ciudadsForeignKey,this.cajaConstantesFunciones.resaltarid_ciudadCaja,this,this.cajaConstantesFunciones.activarid_ciudadCaja));
			tableColumn.setCellEditor(new CiudadTableCell(this.ciudadsForeignKey,this.cajaConstantesFunciones.resaltarid_ciudadCaja,this,this.cajaConstantesFunciones.activarid_ciudadCaja,true,"id_ciudadCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosCaja,CajaConstantesFunciones.LABEL_IDZONA));

		if(this.cajaConstantesFunciones.mostrarid_zonaCaja && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,CajaConstantesFunciones.LABEL_IDZONA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ZonaTableCell(this.zonasForeignKey,this.cajaConstantesFunciones.resaltarid_zonaCaja,this,this.cajaConstantesFunciones.activarid_zonaCaja));
			tableColumn.setCellEditor(new ZonaTableCell(this.zonasForeignKey,this.cajaConstantesFunciones.resaltarid_zonaCaja,this,this.cajaConstantesFunciones.activarid_zonaCaja,true,"id_zonaCaja","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new CajaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.cajaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosNotaCreditoPuntoVenta && this.cajaConstantesFunciones.mostrarNotaCreditoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Nota Creditos");
				tableColumn.setHeaderValue("Nota Creditos");
				tableColumn.setCellRenderer(new NotaCreditoPuntoVentaTableCell(cajaConstantesFunciones.resaltarNotaCreditoPuntoVentaCaja,this,this.cajaConstantesFunciones.activarNotaCreditoPuntoVentaCaja));
				tableColumn.setCellEditor(new NotaCreditoPuntoVentaTableCell(cajaConstantesFunciones.resaltarNotaCreditoPuntoVentaCaja,this,this.cajaConstantesFunciones.activarNotaCreditoPuntoVentaCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosCajaCierre && this.cajaConstantesFunciones.mostrarCajaCierreCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Caja Cierres");
				tableColumn.setHeaderValue("Caja Cierres");
				tableColumn.setCellRenderer(new CajaCierreTableCell(cajaConstantesFunciones.resaltarCajaCierreCaja,this,this.cajaConstantesFunciones.activarCajaCierreCaja));
				tableColumn.setCellEditor(new CajaCierreTableCell(cajaConstantesFunciones.resaltarCajaCierreCaja,this,this.cajaConstantesFunciones.activarCajaCierreCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosFacturaPuntoVenta && this.cajaConstantesFunciones.mostrarFacturaPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Factura Punto Ventas");
				tableColumn.setHeaderValue("Factura Punto Ventas");
				tableColumn.setCellRenderer(new FacturaPuntoVentaTableCell(cajaConstantesFunciones.resaltarFacturaPuntoVentaCaja,this,this.cajaConstantesFunciones.activarFacturaPuntoVentaCaja));
				tableColumn.setCellEditor(new FacturaPuntoVentaTableCell(cajaConstantesFunciones.resaltarFacturaPuntoVentaCaja,this,this.cajaConstantesFunciones.activarFacturaPuntoVentaCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosCajaEgreso && this.cajaConstantesFunciones.mostrarCajaEgresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Caja Egresos");
				tableColumn.setHeaderValue("Caja Egresos");
				tableColumn.setCellRenderer(new CajaEgresoTableCell(cajaConstantesFunciones.resaltarCajaEgresoCaja,this,this.cajaConstantesFunciones.activarCajaEgresoCaja));
				tableColumn.setCellEditor(new CajaEgresoTableCell(cajaConstantesFunciones.resaltarCajaEgresoCaja,this,this.cajaConstantesFunciones.activarCajaEgresoCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosCajeroTurno && this.cajaConstantesFunciones.mostrarCajeroTurnoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Cajero Turnos");
				tableColumn.setHeaderValue("Cajero Turnos");
				tableColumn.setCellRenderer(new CajeroTurnoTableCell(cajaConstantesFunciones.resaltarCajeroTurnoCaja,this,this.cajaConstantesFunciones.activarCajeroTurnoCaja));
				tableColumn.setCellEditor(new CajeroTurnoTableCell(cajaConstantesFunciones.resaltarCajeroTurnoCaja,this,this.cajaConstantesFunciones.activarCajeroTurnoCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosPresupuestoVentasPunVen && this.cajaConstantesFunciones.mostrarPresupuestoVentasPunVenCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Presupuesto Ventases");
				tableColumn.setHeaderValue("Presupuesto Ventases");
				tableColumn.setCellRenderer(new PresupuestoVentasPunVenTableCell(cajaConstantesFunciones.resaltarPresupuestoVentasPunVenCaja,this,this.cajaConstantesFunciones.activarPresupuestoVentasPunVenCaja));
				tableColumn.setCellEditor(new PresupuestoVentasPunVenTableCell(cajaConstantesFunciones.resaltarPresupuestoVentasPunVenCaja,this,this.cajaConstantesFunciones.activarPresupuestoVentasPunVenCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosPedidoPuntoVenta && this.cajaConstantesFunciones.mostrarPedidoPuntoVentaCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Pedido Punto Ventas");
				tableColumn.setHeaderValue("Pedido Punto Ventas");
				tableColumn.setCellRenderer(new PedidoPuntoVentaTableCell(cajaConstantesFunciones.resaltarPedidoPuntoVentaCaja,this,this.cajaConstantesFunciones.activarPedidoPuntoVentaCaja));
				tableColumn.setCellEditor(new PedidoPuntoVentaTableCell(cajaConstantesFunciones.resaltarPedidoPuntoVentaCaja,this,this.cajaConstantesFunciones.activarPedidoPuntoVentaCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}

			if(this.isTienePermisosCajaIngreso && this.cajaConstantesFunciones.mostrarCajaIngresoCaja && !CajaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Caja Ingresos");
				tableColumn.setHeaderValue("Caja Ingresos");
				tableColumn.setCellRenderer(new CajaIngresoTableCell(cajaConstantesFunciones.resaltarCajaIngresoCaja,this,this.cajaConstantesFunciones.activarCajaIngresoCaja));
				tableColumn.setCellEditor(new CajaIngresoTableCell(cajaConstantesFunciones.resaltarCajaIngresoCaja,this,this.cajaConstantesFunciones.activarCajaIngresoCaja));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosCaja.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cajaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cajaSessionBean.getEsGuardarRelacionado()));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCaja.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.cajaSessionBean.getEsGuardarRelacionado()));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.cajaSessionBean.getEsGuardarRelacionado()));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosCaja.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarCaja && this.isPermisoGuardarCambiosCaja) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.cajaSessionBean.getEsGuardarRelacionado()));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.cajaSessionBean.getEsGuardarRelacionado()));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosCaja.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.cajaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false));
					tableColumn.setCellEditor(new IdTableCell(this,true,false));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosCaja.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosCaja.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCaja && this.isPermisoGuardarCambiosCaja) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.cajaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarCaja && this.isPermisoGuardarCambiosCaja) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosCaja.moveColumn(this.jTableDatosCaja.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosCaja.moveColumn(this.jTableDatosCaja.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.cajaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosCaja.moveColumn(this.jTableDatosCaja.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosCaja.moveColumn(this.jTableDatosCaja.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosCaja.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosCaja.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosCaja,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosCaja.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosCaja.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosCaja.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosCaja.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosCaja.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=cajaLogic.getCajas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=cajas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosCaja.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosCaja.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosCaja();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoCaja=false;
					
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
				if(this.cajaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCaja.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCaja.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.caja.getsType().equals("DUPLICADO")
				   || this.caja.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoCaja=true;
				
				} else {
					this.isEsNuevoCaja=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.cajaSessionBean.getEsGuardarRelacionado()) {
					if(this.caja.getId()>=0 && !this.caja.getIsNew()) {						
						this.isEsNuevoCaja=false;
						
					} else {
						this.isEsNuevoCaja=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoCaja(esRelaciones);						
				
				this.seleccionarCaja(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.caja.getId()<0) {
					this.isEsNuevoCaja=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarCaja(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarCaja(evt,rowIndex);
				}	
				
				if(this.cajaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion Caja: " + this.dDif); 
					}
				}								
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarCaja(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.caja)) {
					if(this.caja.getId()>0) {
						this.caja.setIsDeleted(true);
						
						this.cajasEliminados.add(this.caja);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.cajaLogic.getCajas().remove(this.caja);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.cajas.remove(this.caja);				
					}
					
					
					((CajaModel) this.jTableDatosCaja.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaCaja(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarCaja(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoCaja) {
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosCaja.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosCaja.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioCaja(this.caja);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.cajaConstantesFunciones.cargarid_empresaCaja || this.cajaConstantesFunciones.event_dependid_empresaCaja) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.caja.getid_empresa());
									//this.inicializarActualizarBindingCaja(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(caja.getEmpresa()!=null) {
							this.empresasForeignKey.add(caja.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.caja.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.cajaConstantesFunciones.cargarid_sucursalCaja || this.cajaConstantesFunciones.event_dependid_sucursalCaja) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.caja.getid_sucursal());
									//this.inicializarActualizarBindingCaja(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(caja.getSucursal()!=null) {
							this.sucursalsForeignKey.add(caja.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.caja.getid_sucursal(),false,"Formulario");

					//Pais
					if(!this.cajaConstantesFunciones.cargarid_paisCaja || this.cajaConstantesFunciones.event_dependid_paisCaja) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.caja.getid_pais());
									//this.inicializarActualizarBindingCaja(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(caja.getPais()!=null) {
							this.paissForeignKey.add(caja.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.caja.getid_pais(),false,"Formulario");

					//Ciudad
					if(!this.cajaConstantesFunciones.cargarid_ciudadCaja || this.cajaConstantesFunciones.event_dependid_ciudadCaja) {
						//this.cargarCombosCiudadsForeignKeyLista(" where id="+this.caja.getid_ciudad());
									//this.inicializarActualizarBindingCaja(false,false);
						this.ciudadsForeignKey=new ArrayList<Ciudad>();

						if(caja.getCiudad()!=null) {
							this.ciudadsForeignKey.add(caja.getCiudad());
						}

						this.addItemDefectoCombosForeignKeyCiudad();
						this.cargarCombosFrameCiudadsForeignKey("Todos");
					}
					this.setActualCiudadForeignKey(this.caja.getid_ciudad(),false,"Formulario");

					//Zona
					if(!this.cajaConstantesFunciones.cargarid_zonaCaja || this.cajaConstantesFunciones.event_dependid_zonaCaja) {
						//this.cargarCombosZonasForeignKeyLista(" where id="+this.caja.getid_zona());
									//this.inicializarActualizarBindingCaja(false,false);
						this.zonasForeignKey=new ArrayList<Zona>();

						if(caja.getZona()!=null) {
							this.zonasForeignKey.add(caja.getZona());
						}

						this.addItemDefectoCombosForeignKeyZona();
						this.cargarCombosFrameZonasForeignKey("Todos");
					}
					this.setActualZonaForeignKey(this.caja.getid_zona(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesCaja("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesCaja(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualCaja() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoCaja(Caja caja) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoCaja(caja,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoCaja(Caja caja,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioCaja(caja);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyCaja(caja,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyCaja(caja);
	}
	
	public void setVariablesObjetoActualToFormularioCaja(Caja caja) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormCaja.jLabelidCaja.setText(caja.getId().toString());
			this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setText(caja.getnombre());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setText(caja.getnombre_equipo());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setText(caja.getnombre_impresora());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setText(caja.getsecuencial_pedido().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setText(caja.getsecuencial_pedido_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setText(caja.getpunto_emision());
			this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setText(caja.getestablecimiento());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setDate(caja.getfecha_inicio());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setDate(caja.getfecha_final());
			this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setSelected(caja.getesta_activo());
			this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setText(caja.getdescripcion());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setText(caja.getsecuencial_factura().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setText(caja.getsecuencial_factura_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setText(caja.getsecuencial_nota_venta().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setText(caja.getsecuencial_nota_venta_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setText(caja.getsecuencia_nota_credito().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setText(caja.getsecuencia_nota_credito_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setText(caja.getautorizacion_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setText(caja.getautorizacion_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setText(caja.getautorizacion_nota_credito());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setDate(caja.getfecha_caduca_factura());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setDate(caja.getfecha_caduca_nota_venta());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setDate(caja.getfecha_caduca_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setText(caja.getserie_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setText(caja.getserie_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setText(caja.getserie_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setText(caja.getsec_inicial_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setText(caja.getsec_inicial_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setText(caja.getsec_inicial_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setText(caja.getsec_final_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setText(caja.getsec_final_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setText(caja.getsec_final_nota_credito());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,Caja cajaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,cajaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,Caja cajaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				cajaLocal=this.caja;
			} else {
				cajaLocal=this.cajaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(cajaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoCaja(cajaLocal,true);
					
					if(cajaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(cajaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.cajaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(cajaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoCaja(Caja caja,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCaja(caja,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysCaja(caja);
	}
	
	public void setVariablesFormularioToObjetoActualCaja(Caja caja,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualCaja(caja,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualCaja(Caja caja,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormCaja.jLabelidCaja.getText()==null || this.jInternalFrameDetalleFormCaja.jLabelidCaja.getText()=="" || this.jInternalFrameDetalleFormCaja.jLabelidCaja.getText()=="Id") {
				this.jInternalFrameDetalleFormCaja.jLabelidCaja.setText("0");
			}

			if(conColumnasBase) {caja.setId(Long.parseLong(this.jInternalFrameDetalleFormCaja.jLabelidCaja.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelIdCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setnombre(this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_NOMBRE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombreCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setnombre_equipo(this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_NOMBREEQUIPO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombre_equipoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setnombre_impresora(this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_NOMBREIMPRESORA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelnombre_impresoraCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_pedido(Long.parseLong(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedidoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_pedido_formato(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_pedido_formatoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setpunto_emision(this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_PUNTOEMISION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelpunto_emisionCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setestablecimiento(this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_ESTABLECIMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelestablecimientoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setfecha_inicio(this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_FECHAINICIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_inicioCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setfecha_final(this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_FECHAFINAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_finalCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setesta_activo(this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.isSelected());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_ESTAACTIVO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelesta_activoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setdescripcion(this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabeldescripcionCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_factura(Long.parseLong(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_factura_formato(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_factura_formatoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_nota_venta(Long.parseLong(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencial_nota_venta_formato(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencial_nota_venta_formatoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencia_nota_credito(Long.parseLong(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsecuencia_nota_credito_formato(this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsecuencia_nota_credito_formatoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setautorizacion_factura(this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setautorizacion_nota_venta(this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setautorizacion_nota_credito(this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelautorizacion_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setfecha_caduca_factura(this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setfecha_caduca_nota_venta(this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setfecha_caduca_nota_credito(this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelfecha_caduca_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setserie_factura(this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SERIEFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setserie_nota_venta(this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SERIENOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setserie_nota_credito(this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SERIENOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelserie_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_inicial_factura(this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECINICIALFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_inicial_nota_venta(this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_inicial_nota_credito(this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_inicial_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_final_factura(this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECFINALFACTURA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_facturaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_final_nota_venta(this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_ventaCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			caja.setsec_final_nota_credito(this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormCaja.jLabelsec_final_nota_creditoCaja,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualCaja(Caja cajaBean,Caja caja,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && cajaBean.getid_pais()!=null && !cajaBean.getid_pais().equals(-1L))) {caja.setid_pais(cajaBean.getid_pais());}
			if(conDefault || (!conDefault && cajaBean.getid_ciudad()!=null && !cajaBean.getid_ciudad().equals(-1L))) {caja.setid_ciudad(cajaBean.getid_ciudad());}
			if(conDefault || (!conDefault && cajaBean.getid_zona()!=null && !cajaBean.getid_zona().equals(-1L))) {caja.setid_zona(cajaBean.getid_zona());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosCaja(Caja cajaOrigen,Caja caja,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cajaOrigen.getId()!=null && !cajaOrigen.getId().equals(0L))) {caja.setId(cajaOrigen.getId());}}
			if(conDefault || (!conDefault && cajaOrigen.getnombre()!=null && !cajaOrigen.getnombre().equals(""))) {caja.setnombre(cajaOrigen.getnombre());}
			if(conDefault || (!conDefault && cajaOrigen.getnombre_equipo()!=null && !cajaOrigen.getnombre_equipo().equals(""))) {caja.setnombre_equipo(cajaOrigen.getnombre_equipo());}
			if(conDefault || (!conDefault && cajaOrigen.getnombre_impresora()!=null && !cajaOrigen.getnombre_impresora().equals(""))) {caja.setnombre_impresora(cajaOrigen.getnombre_impresora());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_pedido()!=null && !cajaOrigen.getsecuencial_pedido().equals(0L))) {caja.setsecuencial_pedido(cajaOrigen.getsecuencial_pedido());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_pedido_formato()!=null && !cajaOrigen.getsecuencial_pedido_formato().equals(""))) {caja.setsecuencial_pedido_formato(cajaOrigen.getsecuencial_pedido_formato());}
			if(conDefault || (!conDefault && cajaOrigen.getpunto_emision()!=null && !cajaOrigen.getpunto_emision().equals(""))) {caja.setpunto_emision(cajaOrigen.getpunto_emision());}
			if(conDefault || (!conDefault && cajaOrigen.getestablecimiento()!=null && !cajaOrigen.getestablecimiento().equals(""))) {caja.setestablecimiento(cajaOrigen.getestablecimiento());}
			if(conDefault || (!conDefault && cajaOrigen.getfecha_inicio()!=null && !cajaOrigen.getfecha_inicio().equals(new Date()))) {caja.setfecha_inicio(cajaOrigen.getfecha_inicio());}
			if(conDefault || (!conDefault && cajaOrigen.getfecha_final()!=null && !cajaOrigen.getfecha_final().equals(new Date()))) {caja.setfecha_final(cajaOrigen.getfecha_final());}
			if(conDefault || (!conDefault && cajaOrigen.getesta_activo()!=null && !cajaOrigen.getesta_activo().equals(false))) {caja.setesta_activo(cajaOrigen.getesta_activo());}
			if(conDefault || (!conDefault && cajaOrigen.getdescripcion()!=null && !cajaOrigen.getdescripcion().equals(""))) {caja.setdescripcion(cajaOrigen.getdescripcion());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_factura()!=null && !cajaOrigen.getsecuencial_factura().equals(0L))) {caja.setsecuencial_factura(cajaOrigen.getsecuencial_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_factura_formato()!=null && !cajaOrigen.getsecuencial_factura_formato().equals(""))) {caja.setsecuencial_factura_formato(cajaOrigen.getsecuencial_factura_formato());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_nota_venta()!=null && !cajaOrigen.getsecuencial_nota_venta().equals(0L))) {caja.setsecuencial_nota_venta(cajaOrigen.getsecuencial_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencial_nota_venta_formato()!=null && !cajaOrigen.getsecuencial_nota_venta_formato().equals(""))) {caja.setsecuencial_nota_venta_formato(cajaOrigen.getsecuencial_nota_venta_formato());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencia_nota_credito()!=null && !cajaOrigen.getsecuencia_nota_credito().equals(0L))) {caja.setsecuencia_nota_credito(cajaOrigen.getsecuencia_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getsecuencia_nota_credito_formato()!=null && !cajaOrigen.getsecuencia_nota_credito_formato().equals(""))) {caja.setsecuencia_nota_credito_formato(cajaOrigen.getsecuencia_nota_credito_formato());}
			if(conDefault || (!conDefault && cajaOrigen.getautorizacion_factura()!=null && !cajaOrigen.getautorizacion_factura().equals(""))) {caja.setautorizacion_factura(cajaOrigen.getautorizacion_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getautorizacion_nota_venta()!=null && !cajaOrigen.getautorizacion_nota_venta().equals(""))) {caja.setautorizacion_nota_venta(cajaOrigen.getautorizacion_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getautorizacion_nota_credito()!=null && !cajaOrigen.getautorizacion_nota_credito().equals(""))) {caja.setautorizacion_nota_credito(cajaOrigen.getautorizacion_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getfecha_caduca_factura()!=null && !cajaOrigen.getfecha_caduca_factura().equals(new Date()))) {caja.setfecha_caduca_factura(cajaOrigen.getfecha_caduca_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getfecha_caduca_nota_venta()!=null && !cajaOrigen.getfecha_caduca_nota_venta().equals(new Date()))) {caja.setfecha_caduca_nota_venta(cajaOrigen.getfecha_caduca_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getfecha_caduca_nota_credito()!=null && !cajaOrigen.getfecha_caduca_nota_credito().equals(new Date()))) {caja.setfecha_caduca_nota_credito(cajaOrigen.getfecha_caduca_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getserie_factura()!=null && !cajaOrigen.getserie_factura().equals(""))) {caja.setserie_factura(cajaOrigen.getserie_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getserie_nota_venta()!=null && !cajaOrigen.getserie_nota_venta().equals(""))) {caja.setserie_nota_venta(cajaOrigen.getserie_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getserie_nota_credito()!=null && !cajaOrigen.getserie_nota_credito().equals(""))) {caja.setserie_nota_credito(cajaOrigen.getserie_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_inicial_factura()!=null && !cajaOrigen.getsec_inicial_factura().equals(""))) {caja.setsec_inicial_factura(cajaOrigen.getsec_inicial_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_inicial_nota_venta()!=null && !cajaOrigen.getsec_inicial_nota_venta().equals(""))) {caja.setsec_inicial_nota_venta(cajaOrigen.getsec_inicial_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_inicial_nota_credito()!=null && !cajaOrigen.getsec_inicial_nota_credito().equals(""))) {caja.setsec_inicial_nota_credito(cajaOrigen.getsec_inicial_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_final_factura()!=null && !cajaOrigen.getsec_final_factura().equals(""))) {caja.setsec_final_factura(cajaOrigen.getsec_final_factura());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_final_nota_venta()!=null && !cajaOrigen.getsec_final_nota_venta().equals(""))) {caja.setsec_final_nota_venta(cajaOrigen.getsec_final_nota_venta());}
			if(conDefault || (!conDefault && cajaOrigen.getsec_final_nota_credito()!=null && !cajaOrigen.getsec_final_nota_credito().equals(""))) {caja.setsec_final_nota_credito(cajaOrigen.getsec_final_nota_credito());}
			if(conDefault || (!conDefault && cajaOrigen.getid_pais()!=null && !cajaOrigen.getid_pais().equals(-1L))) {caja.setid_pais(cajaOrigen.getid_pais());}
			if(conDefault || (!conDefault && cajaOrigen.getid_ciudad()!=null && !cajaOrigen.getid_ciudad().equals(-1L))) {caja.setid_ciudad(cajaOrigen.getid_ciudad());}
			if(conDefault || (!conDefault && cajaOrigen.getid_zona()!=null && !cajaOrigen.getid_zona().equals(-1L))) {caja.setid_zona(cajaOrigen.getid_zona());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCaja(Caja caja) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCaja.jLabelidCaja.setText(caja.getId().toString());
			this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setText(caja.getnombre());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setText(caja.getnombre_equipo());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setText(caja.getnombre_impresora());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setText(caja.getsecuencial_pedido().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setText(caja.getsecuencial_pedido_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setText(caja.getpunto_emision());
			this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setText(caja.getestablecimiento());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setDate(caja.getfecha_inicio());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setDate(caja.getfecha_final());
			this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setSelected(caja.getesta_activo());
			this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setText(caja.getdescripcion());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setText(caja.getsecuencial_factura().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setText(caja.getsecuencial_factura_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setText(caja.getsecuencial_nota_venta().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setText(caja.getsecuencial_nota_venta_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setText(caja.getsecuencia_nota_credito().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setText(caja.getsecuencia_nota_credito_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setText(caja.getautorizacion_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setText(caja.getautorizacion_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setText(caja.getautorizacion_nota_credito());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setDate(caja.getfecha_caduca_factura());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setDate(caja.getfecha_caduca_nota_venta());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setDate(caja.getfecha_caduca_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setText(caja.getserie_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setText(caja.getserie_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setText(caja.getserie_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setText(caja.getsec_inicial_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setText(caja.getsec_inicial_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setText(caja.getsec_inicial_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setText(caja.getsec_final_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setText(caja.getsec_final_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setText(caja.getsec_final_nota_credito());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioCaja(CajaBean cajaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormCaja.jLabelidCaja.setText(cajaBean.getId().toString());
			this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setText(cajaBean.getnombre());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setText(cajaBean.getnombre_equipo());
			this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setText(cajaBean.getnombre_impresora());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setText(cajaBean.getsecuencial_pedido().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setText(cajaBean.getsecuencial_pedido_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setText(cajaBean.getpunto_emision());
			this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setText(cajaBean.getestablecimiento());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setDate(cajaBean.getfecha_inicio());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setDate(cajaBean.getfecha_final());
			this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setSelected(cajaBean.getesta_activo());
			this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setText(cajaBean.getdescripcion());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setText(cajaBean.getsecuencial_factura().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setText(cajaBean.getsecuencial_factura_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setText(cajaBean.getsecuencial_nota_venta().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setText(cajaBean.getsecuencial_nota_venta_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setText(cajaBean.getsecuencia_nota_credito().toString());
			this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setText(cajaBean.getsecuencia_nota_credito_formato());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setText(cajaBean.getautorizacion_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setText(cajaBean.getautorizacion_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setText(cajaBean.getautorizacion_nota_credito());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setDate(cajaBean.getfecha_caduca_factura());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setDate(cajaBean.getfecha_caduca_nota_venta());
			this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setDate(cajaBean.getfecha_caduca_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setText(cajaBean.getserie_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setText(cajaBean.getserie_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setText(cajaBean.getserie_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setText(cajaBean.getsec_inicial_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setText(cajaBean.getsec_inicial_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setText(cajaBean.getsec_inicial_nota_credito());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setText(cajaBean.getsec_final_factura());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setText(cajaBean.getsec_final_nota_venta());
			this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setText(cajaBean.getsec_final_nota_credito());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanCaja(CajaParameterReturnGeneral cajaReturnGeneral,CajaBean cajaBean,Boolean conDefault) throws Exception { 
		try {
			Caja cajaLocal=new Caja();
			
			cajaLocal=cajaReturnGeneral.getCaja();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && cajaLocal.getId()!=null && !cajaLocal.getId().equals(0L))) {cajaBean.setId(cajaLocal.getId());}}
			if(conDefault || (!conDefault && cajaLocal.getnombre()!=null && !cajaLocal.getnombre().equals(""))) {cajaBean.setnombre(cajaLocal.getnombre());}
			if(conDefault || (!conDefault && cajaLocal.getnombre_equipo()!=null && !cajaLocal.getnombre_equipo().equals(""))) {cajaBean.setnombre_equipo(cajaLocal.getnombre_equipo());}
			if(conDefault || (!conDefault && cajaLocal.getnombre_impresora()!=null && !cajaLocal.getnombre_impresora().equals(""))) {cajaBean.setnombre_impresora(cajaLocal.getnombre_impresora());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_pedido()!=null && !cajaLocal.getsecuencial_pedido().equals(0L))) {cajaBean.setsecuencial_pedido(cajaLocal.getsecuencial_pedido());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_pedido_formato()!=null && !cajaLocal.getsecuencial_pedido_formato().equals(""))) {cajaBean.setsecuencial_pedido_formato(cajaLocal.getsecuencial_pedido_formato());}
			if(conDefault || (!conDefault && cajaLocal.getpunto_emision()!=null && !cajaLocal.getpunto_emision().equals(""))) {cajaBean.setpunto_emision(cajaLocal.getpunto_emision());}
			if(conDefault || (!conDefault && cajaLocal.getestablecimiento()!=null && !cajaLocal.getestablecimiento().equals(""))) {cajaBean.setestablecimiento(cajaLocal.getestablecimiento());}
			if(conDefault || (!conDefault && cajaLocal.getfecha_inicio()!=null && !cajaLocal.getfecha_inicio().equals(new Date()))) {cajaBean.setfecha_inicio(cajaLocal.getfecha_inicio());}
			if(conDefault || (!conDefault && cajaLocal.getfecha_final()!=null && !cajaLocal.getfecha_final().equals(new Date()))) {cajaBean.setfecha_final(cajaLocal.getfecha_final());}
			if(conDefault || (!conDefault && cajaLocal.getesta_activo()!=null && !cajaLocal.getesta_activo().equals(false))) {cajaBean.setesta_activo(cajaLocal.getesta_activo());}
			if(conDefault || (!conDefault && cajaLocal.getdescripcion()!=null && !cajaLocal.getdescripcion().equals(""))) {cajaBean.setdescripcion(cajaLocal.getdescripcion());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_factura()!=null && !cajaLocal.getsecuencial_factura().equals(0L))) {cajaBean.setsecuencial_factura(cajaLocal.getsecuencial_factura());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_factura_formato()!=null && !cajaLocal.getsecuencial_factura_formato().equals(""))) {cajaBean.setsecuencial_factura_formato(cajaLocal.getsecuencial_factura_formato());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_nota_venta()!=null && !cajaLocal.getsecuencial_nota_venta().equals(0L))) {cajaBean.setsecuencial_nota_venta(cajaLocal.getsecuencial_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencial_nota_venta_formato()!=null && !cajaLocal.getsecuencial_nota_venta_formato().equals(""))) {cajaBean.setsecuencial_nota_venta_formato(cajaLocal.getsecuencial_nota_venta_formato());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencia_nota_credito()!=null && !cajaLocal.getsecuencia_nota_credito().equals(0L))) {cajaBean.setsecuencia_nota_credito(cajaLocal.getsecuencia_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getsecuencia_nota_credito_formato()!=null && !cajaLocal.getsecuencia_nota_credito_formato().equals(""))) {cajaBean.setsecuencia_nota_credito_formato(cajaLocal.getsecuencia_nota_credito_formato());}
			if(conDefault || (!conDefault && cajaLocal.getautorizacion_factura()!=null && !cajaLocal.getautorizacion_factura().equals(""))) {cajaBean.setautorizacion_factura(cajaLocal.getautorizacion_factura());}
			if(conDefault || (!conDefault && cajaLocal.getautorizacion_nota_venta()!=null && !cajaLocal.getautorizacion_nota_venta().equals(""))) {cajaBean.setautorizacion_nota_venta(cajaLocal.getautorizacion_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getautorizacion_nota_credito()!=null && !cajaLocal.getautorizacion_nota_credito().equals(""))) {cajaBean.setautorizacion_nota_credito(cajaLocal.getautorizacion_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getfecha_caduca_factura()!=null && !cajaLocal.getfecha_caduca_factura().equals(new Date()))) {cajaBean.setfecha_caduca_factura(cajaLocal.getfecha_caduca_factura());}
			if(conDefault || (!conDefault && cajaLocal.getfecha_caduca_nota_venta()!=null && !cajaLocal.getfecha_caduca_nota_venta().equals(new Date()))) {cajaBean.setfecha_caduca_nota_venta(cajaLocal.getfecha_caduca_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getfecha_caduca_nota_credito()!=null && !cajaLocal.getfecha_caduca_nota_credito().equals(new Date()))) {cajaBean.setfecha_caduca_nota_credito(cajaLocal.getfecha_caduca_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getserie_factura()!=null && !cajaLocal.getserie_factura().equals(""))) {cajaBean.setserie_factura(cajaLocal.getserie_factura());}
			if(conDefault || (!conDefault && cajaLocal.getserie_nota_venta()!=null && !cajaLocal.getserie_nota_venta().equals(""))) {cajaBean.setserie_nota_venta(cajaLocal.getserie_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getserie_nota_credito()!=null && !cajaLocal.getserie_nota_credito().equals(""))) {cajaBean.setserie_nota_credito(cajaLocal.getserie_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getsec_inicial_factura()!=null && !cajaLocal.getsec_inicial_factura().equals(""))) {cajaBean.setsec_inicial_factura(cajaLocal.getsec_inicial_factura());}
			if(conDefault || (!conDefault && cajaLocal.getsec_inicial_nota_venta()!=null && !cajaLocal.getsec_inicial_nota_venta().equals(""))) {cajaBean.setsec_inicial_nota_venta(cajaLocal.getsec_inicial_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getsec_inicial_nota_credito()!=null && !cajaLocal.getsec_inicial_nota_credito().equals(""))) {cajaBean.setsec_inicial_nota_credito(cajaLocal.getsec_inicial_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getsec_final_factura()!=null && !cajaLocal.getsec_final_factura().equals(""))) {cajaBean.setsec_final_factura(cajaLocal.getsec_final_factura());}
			if(conDefault || (!conDefault && cajaLocal.getsec_final_nota_venta()!=null && !cajaLocal.getsec_final_nota_venta().equals(""))) {cajaBean.setsec_final_nota_venta(cajaLocal.getsec_final_nota_venta());}
			if(conDefault || (!conDefault && cajaLocal.getsec_final_nota_credito()!=null && !cajaLocal.getsec_final_nota_credito().equals(""))) {cajaBean.setsec_final_nota_credito(cajaLocal.getsec_final_nota_credito());}
			if(conDefault || (!conDefault && cajaLocal.getid_pais()!=null && !cajaLocal.getid_pais().equals(-1L))) {cajaBean.setid_pais(cajaLocal.getid_pais());}
			if(conDefault || (!conDefault && cajaLocal.getid_ciudad()!=null && !cajaLocal.getid_ciudad().equals(-1L))) {cajaBean.setid_ciudad(cajaLocal.getid_ciudad());}
			if(conDefault || (!conDefault && cajaLocal.getid_zona()!=null && !cajaLocal.getid_zona().equals(-1L))) {cajaBean.setid_zona(cajaLocal.getid_zona());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxCajaGenerico(Long idCajaSeleccionado,JComboBox jComboBoxCaja,List<Caja> cajasLocal)throws Exception {
		try {
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasLocal) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			jComboBoxCaja.setSelectedItem(cajaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxCajaGenerico(JComboBox jComboBoxCaja,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxCaja.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCaja.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxCaja.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxCaja.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCaja.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxCaja.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxCaja.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxCaja.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxCaja.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxCaja.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("NotaCreditoPuntoVenta")) {
			jButtonNotaCreditoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("CajaCierre")) {
			jButtonCajaCierreActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("FacturaPuntoVenta")) {
			jButtonFacturaPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("CajaEgreso")) {
			jButtonCajaEgresoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("CajeroTurno")) {
			jButtonCajeroTurnoActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("PresupuestoVentasPunVen")) {
			jButtonPresupuestoVentasPunVenActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("PedidoPuntoVenta")) {
			jButtonPedidoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("CajaIngreso")) {
			jButtonCajaIngresoActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			caja=(Caja) cajaLogic.getCajas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			caja =(Caja) cajas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!caja.getIsNew() && !caja.getIsChanged() && !caja.getIsDeleted()) {
				sDescripcion=caja.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=caja.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!caja.getIsNew() && !caja.getIsChanged() && !caja.getIsDeleted()) {
				sDescripcion=caja.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=caja.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!caja.getIsNew() && !caja.getIsChanged() && !caja.getIsDeleted()) {
				sDescripcion=caja.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=caja.getpais_descripcion();
			}
		}

		if(sTipo.equals("Ciudad")) {
			//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
			if(!caja.getIsNew() && !caja.getIsChanged() && !caja.getIsDeleted()) {
				sDescripcion=caja.getciudad_descripcion();
			} else {
				//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
				sDescripcion=caja.getciudad_descripcion();
			}
		}

		if(sTipo.equals("Zona")) {
			//sDescripcion=this.getActualZonaForeignKeyDescripcion((Long)value);
			if(!caja.getIsNew() && !caja.getIsChanged() && !caja.getIsDeleted()) {
				sDescripcion=caja.getzona_descripcion();
			} else {
				//sDescripcion=this.getActualZonaForeignKeyDescripcion((Long)value);
				sDescripcion=caja.getzona_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		Caja cajaRow=new Caja();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cajaRow=(Caja) cajaLogic.getCajas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			cajaRow=(Caja) cajas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosNotaCreditoPuntoVenta && this.permiteMantenimiento(this.caja)) {
					NotaCreditoPuntoVentaBeanSwingJInternalFrame notacreditopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup=new NotaCreditoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						notacreditopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup;
					} else {
						notacreditopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.setConGuardarRelaciones(false);
						//notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					notacreditopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarNotaCreditoPuntoVentaBeanSwingJInternalFrame(cajas,this.caja,notacreditopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.getConGuardarRelaciones(),notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaSessionBean.getEsGuardarRelacionado());
					notacreditopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						notacreditopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsNotaCreditoPuntoVenta("no_relacionado");

						notacreditopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(NotaCreditoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (NotaCreditoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						notacreditopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderNotaCreditoPuntoVenta=(TitledBorder)notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();

						titledBorderNotaCreditoPuntoVenta.setTitle(titledBorderCaja.getTitle() + " -> Nota Credito");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,notacreditopuntoventaBeanSwingJInternalFrame);
						}

						notacreditopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(notacreditopuntoventaBeanSwingJInternalFrame);

						notacreditopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Nota Credito",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonCajaCierreActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosCajaCierre && this.permiteMantenimiento(this.caja)) {
					CajaCierreBeanSwingJInternalFrame cajacierreBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup=new CajaCierreBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						cajacierreBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup;
					} else {
						cajacierreBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.setConGuardarRelaciones(false);
						//cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					cajacierreBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarCajaCierreBeanSwingJInternalFrame(cajas,this.caja,cajacierreBeanSwingJInternalFrame,/*conInicializar,*/cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.getConGuardarRelaciones(),cajacierreBeanSwingJInternalFrame.cajacierreSessionBean.getEsGuardarRelacionado());
					cajacierreBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						cajacierreBeanSwingJInternalFrame.actualizarEstadoPanelsCajaCierre("no_relacionado");

						cajacierreBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(CajaCierreConstantesFunciones.ITAMANIOFILATABLA + (CajaCierreConstantesFunciones.ITAMANIOFILATABLA/2));

						cajacierreBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderCajaCierre=(TitledBorder)cajacierreBeanSwingJInternalFrame.jScrollPanelDatosCajaCierre.getBorder();

						titledBorderCajaCierre.setTitle(titledBorderCaja.getTitle() + " -> Caja Cierre");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cajacierreBeanSwingJInternalFrame);
						}

						cajacierreBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(cajacierreBeanSwingJInternalFrame);

						cajacierreBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Caja Cierre",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonFacturaPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosFacturaPuntoVenta && this.permiteMantenimiento(this.caja)) {
					FacturaPuntoVentaBeanSwingJInternalFrame facturapuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup=new FacturaPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						facturapuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup;
					} else {
						facturapuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.setConGuardarRelaciones(false);
						//facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					facturapuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarFacturaPuntoVentaBeanSwingJInternalFrame(cajas,this.caja,facturapuntoventaBeanSwingJInternalFrame,/*conInicializar,*/facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.getConGuardarRelaciones(),facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaSessionBean.getEsGuardarRelacionado());
					facturapuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						facturapuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsFacturaPuntoVenta("no_relacionado");

						facturapuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(FacturaPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (FacturaPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						facturapuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)facturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFacturaPuntoVenta.getBorder();

						titledBorderFacturaPuntoVenta.setTitle(titledBorderCaja.getTitle() + " -> Factura Punto Venta");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,facturapuntoventaBeanSwingJInternalFrame);
						}

						facturapuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(facturapuntoventaBeanSwingJInternalFrame);

						facturapuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Factura Punto Venta",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonCajaEgresoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosCajaEgreso && this.permiteMantenimiento(this.caja)) {
					CajaEgresoBeanSwingJInternalFrame cajaegresoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup=new CajaEgresoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						cajaegresoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup;
					} else {
						cajaegresoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.setConGuardarRelaciones(false);
						//cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					cajaegresoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarCajaEgresoBeanSwingJInternalFrame(cajas,this.caja,cajaegresoBeanSwingJInternalFrame,/*conInicializar,*/cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.getConGuardarRelaciones(),cajaegresoBeanSwingJInternalFrame.cajaegresoSessionBean.getEsGuardarRelacionado());
					cajaegresoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						cajaegresoBeanSwingJInternalFrame.actualizarEstadoPanelsCajaEgreso("no_relacionado");

						cajaegresoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(CajaEgresoConstantesFunciones.ITAMANIOFILATABLA + (CajaEgresoConstantesFunciones.ITAMANIOFILATABLA/2));

						cajaegresoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderCajaEgreso=(TitledBorder)cajaegresoBeanSwingJInternalFrame.jScrollPanelDatosCajaEgreso.getBorder();

						titledBorderCajaEgreso.setTitle(titledBorderCaja.getTitle() + " -> Caja Egreso");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cajaegresoBeanSwingJInternalFrame);
						}

						cajaegresoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(cajaegresoBeanSwingJInternalFrame);

						cajaegresoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Caja Egreso",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonCajeroTurnoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosCajeroTurno && this.permiteMantenimiento(this.caja)) {
					CajeroTurnoBeanSwingJInternalFrame cajeroturnoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup=new CajeroTurnoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						cajeroturnoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup;
					} else {
						cajeroturnoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setConGuardarRelaciones(false);
						//cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					cajeroturnoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarCajeroTurnoBeanSwingJInternalFrame(cajas,this.caja,cajeroturnoBeanSwingJInternalFrame,/*conInicializar,*/cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getConGuardarRelaciones(),cajeroturnoBeanSwingJInternalFrame.cajeroturnoSessionBean.getEsGuardarRelacionado());
					cajeroturnoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						cajeroturnoBeanSwingJInternalFrame.actualizarEstadoPanelsCajeroTurno("no_relacionado");

						cajeroturnoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(CajeroTurnoConstantesFunciones.ITAMANIOFILATABLA + (CajeroTurnoConstantesFunciones.ITAMANIOFILATABLA/2));

						cajeroturnoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderCajeroTurno=(TitledBorder)cajeroturnoBeanSwingJInternalFrame.jScrollPanelDatosCajeroTurno.getBorder();

						titledBorderCajeroTurno.setTitle(titledBorderCaja.getTitle() + " -> Cajero Turno");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cajeroturnoBeanSwingJInternalFrame);
						}

						cajeroturnoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(cajeroturnoBeanSwingJInternalFrame);

						cajeroturnoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Cajero Turno",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonPresupuestoVentasPunVenActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosPresupuestoVentasPunVen && this.permiteMantenimiento(this.caja)) {
					PresupuestoVentasPunVenBeanSwingJInternalFrame presupuestoventaspunvenBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup=new PresupuestoVentasPunVenBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						presupuestoventaspunvenBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup;
					} else {
						presupuestoventaspunvenBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.setConGuardarRelaciones(false);
						//presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					presupuestoventaspunvenBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarPresupuestoVentasPunVenBeanSwingJInternalFrame(cajas,this.caja,presupuestoventaspunvenBeanSwingJInternalFrame,/*conInicializar,*/presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.getConGuardarRelaciones(),presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenSessionBean.getEsGuardarRelacionado());
					presupuestoventaspunvenBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						presupuestoventaspunvenBeanSwingJInternalFrame.actualizarEstadoPanelsPresupuestoVentasPunVen("no_relacionado");

						presupuestoventaspunvenBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PresupuestoVentasPunVenConstantesFunciones.ITAMANIOFILATABLA + (PresupuestoVentasPunVenConstantesFunciones.ITAMANIOFILATABLA/2));

						presupuestoventaspunvenBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderPresupuestoVentasPunVen=(TitledBorder)presupuestoventaspunvenBeanSwingJInternalFrame.jScrollPanelDatosPresupuestoVentasPunVen.getBorder();

						titledBorderPresupuestoVentasPunVen.setTitle(titledBorderCaja.getTitle() + " -> Presupuesto Ventas");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,presupuestoventaspunvenBeanSwingJInternalFrame);
						}

						presupuestoventaspunvenBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(presupuestoventaspunvenBeanSwingJInternalFrame);

						presupuestoventaspunvenBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Presupuesto Ventas",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonPedidoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosPedidoPuntoVenta && this.permiteMantenimiento(this.caja)) {
					PedidoPuntoVentaBeanSwingJInternalFrame pedidopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup=new PedidoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						pedidopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup;
					} else {
						pedidopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.setConGuardarRelaciones(false);
						//pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					pedidopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarPedidoPuntoVentaBeanSwingJInternalFrame(cajas,this.caja,pedidopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.getConGuardarRelaciones(),pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaSessionBean.getEsGuardarRelacionado());
					pedidopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						pedidopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsPedidoPuntoVenta("no_relacionado");

						pedidopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(PedidoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (PedidoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						pedidopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)pedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosPedidoPuntoVenta.getBorder();

						titledBorderPedidoPuntoVenta.setTitle(titledBorderCaja.getTitle() + " -> Pedido Punto Venta");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,pedidopuntoventaBeanSwingJInternalFrame);
						}

						pedidopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(pedidopuntoventaBeanSwingJInternalFrame);

						pedidopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Pedido Punto Venta",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonCajaIngresoActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,Caja caja) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormCaja==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja = (Caja)this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.caja = (Caja)this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(caja!=null) {
						this.caja = caja;
					} else {
						this.caja = new Caja();
					}
				}

				if(this.isTienePermisosCajaIngreso && this.permiteMantenimiento(this.caja)) {
					CajaIngresoBeanSwingJInternalFrame cajaingresoBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup=new CajaIngresoBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						cajaingresoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup;
					} else {
						cajaingresoBeanSwingJInternalFrame=this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame;
					}

					List<Caja> cajas=new ArrayList<Caja>();
					cajas.add(this.caja);
					if(!esRelacionado) {
						//cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.setConGuardarRelaciones(false);
						//cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					cajaingresoBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormCaja.cargarCajaIngresoBeanSwingJInternalFrame(cajas,this.caja,cajaingresoBeanSwingJInternalFrame,/*conInicializar,*/cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.getConGuardarRelaciones(),cajaingresoBeanSwingJInternalFrame.cajaingresoSessionBean.getEsGuardarRelacionado());
					cajaingresoBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						cajaingresoBeanSwingJInternalFrame.actualizarEstadoPanelsCajaIngreso("no_relacionado");

						cajaingresoBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(CajaIngresoConstantesFunciones.ITAMANIOFILATABLA + (CajaIngresoConstantesFunciones.ITAMANIOFILATABLA/2));

						cajaingresoBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
						TitledBorder titledBorderCajaIngreso=(TitledBorder)cajaingresoBeanSwingJInternalFrame.jScrollPanelDatosCajaIngreso.getBorder();

						titledBorderCajaIngreso.setTitle(titledBorderCaja.getTitle() + " -> Caja Ingreso");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,cajaingresoBeanSwingJInternalFrame);
						}

						cajaingresoBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(cajaingresoBeanSwingJInternalFrame);

						cajaingresoBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.cajaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Caja Ingreso",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualCaja(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja));			
			this.jButtonDuplicarCaja.setVisible((this.isVisibilidadCeldaDuplicarCaja && this.isPermisoDuplicarCaja));			
			this.jButtonCopiarCaja.setVisible((this.isVisibilidadCeldaCopiarCaja && this.isPermisoCopiarCaja));
			this.jButtonVerFormCaja.setVisible((this.isVisibilidadCeldaVerFormCaja && this.isPermisoVerFormCaja));
			
			this.jButtonAbrirOrderByCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));			
			
			this.jButtonNuevoRelacionesCaja.setVisible((this.isVisibilidadCeldaNuevoRelacionesCaja && this.isPermisoNuevoCaja));			
			this.jButtonNuevoGuardarCambiosCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja && this.isPermisoGuardarCambiosCaja));
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.jInternalFrameDetalleFormCaja.jButtonModificarCaja.setVisible((this.isVisibilidadCeldaModificarCaja && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.setVisible((this.isVisibilidadCeldaActualizarCaja && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.setVisible((this.isVisibilidadCeldaEliminarCaja && this.isPermisoEliminarCaja));
			this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.setVisible(this.isVisibilidadCeldaCancelarCaja);							
			this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.setVisible((this.isVisibilidadCeldaGuardarCaja && this.isPermisoGuardarCambiosCaja));			
			
			}
						
			this.jButtonGuardarCambiosTablaCaja.setVisible((this.isVisibilidadCeldaGuardarCambiosCaja && this.isPermisoGuardarCambiosCaja));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja));						
			this.jButtonDuplicarToolBarCaja.setVisible((this.isVisibilidadCeldaDuplicarCaja && this.isPermisoDuplicarCaja));						
			this.jButtonCopiarToolBarCaja.setVisible((this.isVisibilidadCeldaCopiarCaja && this.isPermisoCopiarCaja));			
			this.jButtonVerFormToolBarCaja.setVisible((this.isVisibilidadCeldaVerFormCaja && this.isPermisoVerFormCaja));			
			this.jButtonAbrirOrderByToolBarCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));
			this.jButtonNuevoRelacionesToolBarCaja.setVisible((this.isVisibilidadCeldaNuevoRelacionesCaja && this.isPermisoNuevoCaja));			
			this.jButtonNuevoGuardarCambiosToolBarCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja && this.isPermisoGuardarCambiosCaja));			
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.jInternalFrameDetalleFormCaja.jButtonModificarToolBarCaja.setVisible((this.isVisibilidadCeldaModificarCaja && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jButtonActualizarToolBarCaja.setVisible((this.isVisibilidadCeldaActualizarCaja  && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jButtonEliminarToolBarCaja.setVisible((this.isVisibilidadCeldaEliminarCaja && this.isPermisoEliminarCaja));
			this.jInternalFrameDetalleFormCaja.jButtonCancelarToolBarCaja.setVisible(this.isVisibilidadCeldaCancelarCaja);				
			this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosToolBarCaja.setVisible((this.isVisibilidadCeldaGuardarCaja && this.isPermisoGuardarCambiosCaja));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarCaja.setVisible((this.isVisibilidadCeldaGuardarCambiosCaja && this.isPermisoGuardarCambiosCaja));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja));			
			this.jMenuItemDuplicarCaja.setVisible((this.isVisibilidadCeldaDuplicarCaja && this.isPermisoDuplicarCaja));			
			this.jMenuItemCopiarCaja.setVisible((this.isVisibilidadCeldaCopiarCaja && this.isPermisoCopiarCaja));			
			this.jMenuItemVerFormCaja.setVisible((this.isVisibilidadCeldaVerFormCaja && this.isPermisoVerFormCaja));			
			this.jMenuItemAbrirOrderByCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));			
			//this.jMenuItemMostrarOcultarCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));
			this.jMenuItemDetalleAbrirOrderByCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));			
			//this.jMenuItemDetalleMostrarOcultarCaja.setVisible((this.isVisibilidadCeldaOrdenCaja && this.isPermisoOrdenCaja));			
			this.jMenuItemNuevoRelacionesCaja.setVisible((this.isVisibilidadCeldaNuevoRelacionesCaja && this.isPermisoNuevoCaja));			
			this.jMenuItemNuevoGuardarCambiosCaja.setVisible((this.isVisibilidadCeldaNuevoCaja && this.isPermisoNuevoCaja && this.isPermisoGuardarCambiosCaja));									
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.jInternalFrameDetalleFormCaja.jMenuItemModificarCaja.setVisible((this.isVisibilidadCeldaModificarCaja && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jMenuItemActualizarCaja.setVisible((this.isVisibilidadCeldaActualizarCaja && this.isPermisoActualizarCaja));	
			this.jInternalFrameDetalleFormCaja.jMenuItemEliminarCaja.setVisible((this.isVisibilidadCeldaEliminarCaja && this.isPermisoEliminarCaja));
			this.jInternalFrameDetalleFormCaja.jMenuItemCancelarCaja.setVisible(this.isVisibilidadCeldaCancelarCaja);				
			}
			
			this.jMenuItemGuardarCambiosCaja.setVisible((this.isVisibilidadCeldaGuardarCaja && this.isPermisoGuardarCambiosCaja));						
			this.jMenuItemGuardarCambiosTablaCaja.setVisible((this.isVisibilidadCeldaGuardarCambiosCaja && this.isPermisoGuardarCambiosCaja));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoCaja=this.jButtonNuevoCaja.isVisible();
			this.isVisibilidadCeldaDuplicarCaja=this.jButtonDuplicarCaja.isVisible();
			this.isVisibilidadCeldaCopiarCaja=this.jButtonCopiarCaja.isVisible();
			this.isVisibilidadCeldaVerFormCaja=this.jButtonVerFormCaja.isVisible();
			
			this.isVisibilidadCeldaOrdenCaja=this.jButtonAbrirOrderByCaja.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesCaja=this.jButtonNuevoRelacionesCaja.isVisible();
			this.isVisibilidadCeldaModificarCaja=this.jButtonModificarCaja.isVisible();
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.isVisibilidadCeldaActualizarCaja=this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.isVisible();
			this.isVisibilidadCeldaEliminarCaja=this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.isVisible();
			this.isVisibilidadCeldaCancelarCaja=this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.isVisible();
			this.isVisibilidadCeldaGuardarCaja=this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosCaja=this.jButtonGuardarCambiosTablaCaja.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoCaja=this.jButtonNuevoToolBarCaja.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCaja=this.jButtonNuevoRelacionesToolBarCaja.isVisible();
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.isVisibilidadCeldaModificarCaja=this.jInternalFrameDetalleFormCaja.jButtonModificarToolBarCaja.isVisible();
			this.isVisibilidadCeldaActualizarCaja=this.jInternalFrameDetalleFormCaja.jButtonActualizarToolBarCaja.isVisible();
			this.isVisibilidadCeldaEliminarCaja=this.jInternalFrameDetalleFormCaja.jButtonEliminarToolBarCaja.isVisible();
			this.isVisibilidadCeldaCancelarCaja=this.jInternalFrameDetalleFormCaja.jButtonCancelarToolBarCaja.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCaja=this.jButtonGuardarCambiosToolBarCaja.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCaja=this.jButtonGuardarCambiosTablaToolBarCaja.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoCaja=this.jMenuItemNuevoCaja.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesCaja=this.jMenuItemNuevoRelacionesCaja.isVisible();
			
			if(this.jInternalFrameDetalleFormCaja!=null) {
			this.isVisibilidadCeldaModificarCaja=this.jInternalFrameDetalleFormCaja.jMenuItemModificarCaja.isVisible();
			this.isVisibilidadCeldaActualizarCaja=this.jInternalFrameDetalleFormCaja.jMenuItemActualizarCaja.isVisible();
			this.isVisibilidadCeldaEliminarCaja=this.jInternalFrameDetalleFormCaja.jMenuItemEliminarCaja.isVisible();
			this.isVisibilidadCeldaCancelarCaja=this.jInternalFrameDetalleFormCaja.jMenuItemCancelarCaja.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarCaja=this.jMenuItemGuardarCambiosCaja.isVisible();
			this.isVisibilidadCeldaGuardarCambiosCaja=this.jMenuItemGuardarCambiosTablaCaja.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesCaja(Boolean esInicializar) {
		if(CajaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.cajaSessionBean.getConGuardarRelaciones()) {
				//if(this.cajaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesCaja();
			}
			
			this.inicializarActualizarBindingBotonesManualCaja(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualCaja() {
		this.jButtonNuevoCaja.setVisible(this.isPermisoNuevoCaja);			
		this.jButtonDuplicarCaja.setVisible(this.isPermisoDuplicarCaja);			
		this.jButtonCopiarCaja.setVisible(this.isPermisoCopiarCaja);			
		this.jButtonVerFormCaja.setVisible(this.isPermisoVerFormCaja);			
		
		this.jButtonAbrirOrderByCaja.setVisible(this.isPermisoOrdenCaja);					
		
		this.jButtonNuevoRelacionesCaja.setVisible(this.isPermisoNuevoCaja);			
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonModificarCaja.setVisible(this.isPermisoActualizarCaja);	
			this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.setVisible(this.isPermisoActualizarCaja);	
			this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.setVisible(this.isPermisoEliminarCaja);
			this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.setVisible(this.isVisibilidadCeldaCancelarCaja);						
			this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.setVisible(this.isPermisoGuardarCambiosCaja);							
		}
		
		this.jButtonGuardarCambiosTablaCaja.setVisible(this.isPermisoActualizarCaja);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleCaja() {
		this.jInternalFrameDetalleFormCaja.jButtonModificarCaja.setVisible(this.isPermisoActualizarCaja);	
		this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.setVisible(this.isPermisoActualizarCaja);	
		this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.setVisible(this.isPermisoEliminarCaja);
		this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.setVisible(this.isVisibilidadCeldaCancelarCaja);							
		this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.setVisible((this.isVisibilidadCeldaGuardarCaja && this.isPermisoGuardarCambiosCaja));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosCaja() {
		if(CajaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualCaja();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesCaja() {
	}
	
	public void jTableDatosCajaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarCaja(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.caja.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaCajaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebCaja(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCaja.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCaja.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.cajaLogic.getConnexion());

				if(this.caja.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.caja.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderCaja.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.caja.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalCajaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebCaja(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCaja.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCaja.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.cajaLogic.getConnexion());

				if(this.caja.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.caja.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderCaja.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.caja.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombreCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getnombre()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre like '%"+this.caja.getnombre()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_equipoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getnombre_equipo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_equipo like '%"+this.caja.getnombre_equipo()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_impresoraCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getnombre_impresora()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_impresora like '%"+this.caja.getnombre_impresora()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_pedidoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_pedido()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_pedido = "+this.caja.getsecuencial_pedido().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_pedido_formatoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_pedido_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_pedido_formato like '%"+this.caja.getsecuencial_pedido_formato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonpunto_emisionCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getpunto_emision()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where punto_emision like '%"+this.caja.getpunto_emision()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonestablecimientoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getestablecimiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where establecimiento like '%"+this.caja.getestablecimiento()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_inicioCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getfecha_inicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_inicio = '"+Funciones2.getStringPostgresDate(this.caja.getfecha_inicio())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_finalCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getfecha_final()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_final = '"+Funciones2.getStringPostgresDate(this.caja.getfecha_final())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonesta_activoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getesta_activo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where esta_activo = "+this.caja.getesta_activo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.caja.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_factura = "+this.caja.getsecuencial_factura().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_factura_formatoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_factura_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_factura_formato like '%"+this.caja.getsecuencial_factura_formato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_nota_venta = "+this.caja.getsecuencial_nota_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencial_nota_venta_formatoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencial_nota_venta_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencial_nota_venta_formato like '%"+this.caja.getsecuencial_nota_venta_formato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencia_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencia_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencia_nota_credito = "+this.caja.getsecuencia_nota_credito().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsecuencia_nota_credito_formatoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsecuencia_nota_credito_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where secuencia_nota_credito_formato like '%"+this.caja.getsecuencia_nota_credito_formato()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonautorizacion_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getautorizacion_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where autorizacion_factura like '%"+this.caja.getautorizacion_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonautorizacion_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getautorizacion_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where autorizacion_nota_venta like '%"+this.caja.getautorizacion_nota_venta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonautorizacion_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getautorizacion_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where autorizacion_nota_credito like '%"+this.caja.getautorizacion_nota_credito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caduca_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getfecha_caduca_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caduca_factura = '"+Funciones2.getStringPostgresDate(this.caja.getfecha_caduca_factura())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caduca_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getfecha_caduca_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caduca_nota_venta = '"+Funciones2.getStringPostgresDate(this.caja.getfecha_caduca_nota_venta())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfecha_caduca_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getfecha_caduca_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha_caduca_nota_credito = '"+Funciones2.getStringPostgresDate(this.caja.getfecha_caduca_nota_credito())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserie_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getserie_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie_factura like '%"+this.caja.getserie_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserie_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getserie_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie_nota_venta like '%"+this.caja.getserie_nota_venta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserie_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getserie_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie_nota_credito like '%"+this.caja.getserie_nota_credito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_inicial_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_inicial_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_inicial_factura like '%"+this.caja.getsec_inicial_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_inicial_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_inicial_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_inicial_nota_venta like '%"+this.caja.getsec_inicial_nota_venta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_inicial_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_inicial_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_inicial_nota_credito like '%"+this.caja.getsec_inicial_nota_credito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_final_facturaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_final_factura()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_final_factura like '%"+this.caja.getsec_final_factura()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_final_nota_ventaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_final_nota_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_final_nota_venta like '%"+this.caja.getsec_final_nota_venta()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsec_final_nota_creditoCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getsec_final_nota_credito()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sec_final_nota_credito like '%"+this.caja.getsec_final_nota_credito()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisCajaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebCaja(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCaja.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCaja.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.cajaLogic.getConnexion());

				if(this.caja.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.caja.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderCaja.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.caja.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ciudadCajaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisociudad=true;

			idTienePermisociudad=this.tienePermisosUsuarioEnPaginaWebCaja(CiudadConstantesFunciones.CLASSNAME);

			if(idTienePermisociudad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCaja.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCaja.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.ciudadBeanSwingJInternalFrame=new CiudadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ciudadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ciudadBeanSwingJInternalFrame.getCiudadLogic().setConnexion(this.cajaLogic.getConnexion());

				if(this.caja.getid_ciudad()!=null) {
					this.ciudadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ciudadBeanSwingJInternalFrame.setIdActual(this.caja.getid_ciudad());
					this.ciudadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCiudad();
				}

				JInternalFrameBase jinternalFrame =this.ciudadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
				TitledBorder titledBorderciudad=(TitledBorder)this.ciudadBeanSwingJInternalFrame.jScrollPanelDatosCiudad.getBorder();

				titledBorderciudad.setTitle(titledBorderCaja.getTitle() + " -> Ciudad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ciudadCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getid_ciudad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ciudad = "+this.caja.getid_ciudad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_zonaCajaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisozona=true;

			idTienePermisozona=this.tienePermisosUsuarioEnPaginaWebCaja(ZonaConstantesFunciones.CLASSNAME);

			if(idTienePermisozona) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosCaja.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosCaja.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);

				this.zonaBeanSwingJInternalFrame=new ZonaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.zonaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.zonaBeanSwingJInternalFrame.getZonaLogic().setConnexion(this.cajaLogic.getConnexion());

				if(this.caja.getid_zona()!=null) {
					this.zonaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.zonaBeanSwingJInternalFrame.setIdActual(this.caja.getid_zona());
					this.zonaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.zonaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.zonaBeanSwingJInternalFrame.inicializarActualizarBindingTablaZona();
				}

				JInternalFrameBase jinternalFrame =this.zonaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderCaja=(TitledBorder)this.jScrollPanelDatosCaja.getBorder();
				TitledBorder titledBorderzona=(TitledBorder)this.zonaBeanSwingJInternalFrame.jScrollPanelDatosZona.getBorder();

				titledBorderzona.setTitle(titledBorderCaja.getTitle() + " -> Zona");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_zonaCajaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosCaja.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualCaja(this.getcaja(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.caja==null) {
						this.caja = new Caja();
					}

					this.setVariablesFormularioToObjetoActualCaja(this.caja,true);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);
				}

				if(this.caja.getid_zona()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_zona = "+this.caja.getid_zona().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingCaja(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCiudadCajaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCaja(false,false);

			this.getCajasFK_IdCiudad();

			this.inicializarActualizarBindingCaja(false);

			//if(CajaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCaja(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaCajaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCaja(false,false);

			this.getCajasFK_IdEmpresa();

			this.inicializarActualizarBindingCaja(false);

			//if(CajaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCaja(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisCajaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCaja(false,false);

			this.getCajasFK_IdPais();

			this.inicializarActualizarBindingCaja(false);

			//if(CajaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCaja(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalCajaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCaja(false,false);

			this.getCajasFK_IdSucursal();

			this.inicializarActualizarBindingCaja(false);

			//if(CajaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCaja(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdZonaCajaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingCaja(false,false);

			this.getCajasFK_IdZona();

			this.inicializarActualizarBindingCaja(false);

			//if(CajaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingCaja(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.cajaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameCaja() {
		if(this.jInternalFrameDetalleFormCaja!=null) {
		

		if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
			this.jInternalFrameDetalleFormCaja.setVisible(false);	    			
			this.jInternalFrameDetalleFormCaja.dispose();
			this.jInternalFrameDetalleFormCaja=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoCaja!=null) {
			this.jInternalFrameReporteDinamicoCaja.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoCaja.dispose();
			this.jInternalFrameReporteDinamicoCaja=null;
		}
		
		if(this.jInternalFrameImportacionCaja!=null) {
			this.jInternalFrameImportacionCaja.setVisible(false);	    			
			this.jInternalFrameImportacionCaja.dispose();
			this.jInternalFrameImportacionCaja=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessCaja();
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			
			if(sTipo.equals("NuevoCaja")) {
				jButtonNuevoCajaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarCaja")) {
				jButtonDuplicarCajaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarCaja")) {
				jButtonCopiarCajaActionPerformed(evt);
			} else if(sTipo.equals("VerFormCaja")) {
				jButtonVerFormCajaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarCaja")) {
				jButtonNuevoCajaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarCaja")) {
				jButtonDuplicarCajaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoCaja")) {
				jButtonNuevoCajaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarCaja")) {
				jButtonDuplicarCajaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesCaja")) {
				jButtonNuevoCajaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarCaja")) {
				jButtonNuevoCajaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesCaja")) {
				jButtonNuevoCajaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarCaja")) {
				jButtonModificarCajaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarCaja")) {
				jButtonModificarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarCaja")) {
				jButtonModificarCajaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarCaja")) {
				jButtonActualizarCajaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarCaja")) {
				jButtonActualizarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarCaja")) {
				jButtonActualizarCajaActionPerformed(evt);
			} else if(sTipo.equals("EliminarCaja")) {
				jButtonEliminarCajaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarCaja")) {
				jButtonEliminarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarCaja")) {
				jButtonEliminarCajaActionPerformed(evt);
			} else if(sTipo.equals("CancelarCaja")) {
				jButtonCancelarCajaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarCaja")) {
				jButtonCancelarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarCaja")) {
				jButtonCancelarCajaActionPerformed(evt);
			} else if(sTipo.equals("CerrarCaja")) {
				jButtonCerrarCajaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarCaja")) {
				jButtonCerrarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarCaja")) {
				jButtonCerrarCajaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarCaja")) {
				jButtonMostrarOcultarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarCaja")) {
				jButtonCancelarCajaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarCaja")) {
				jButtonCopiarCajaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarCaja")) {
				jButtonVerFormCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarCaja")) {
				jButtonCopiarCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormCaja")) {
				jButtonVerFormCajaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionCaja")) {
				jButtonRecargarInformacionCajaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarCaja")) {
				jButtonRecargarInformacionCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionCaja")) {
				jButtonRecargarInformacionCajaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresCaja")) {
				jButtonAnterioresCajaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarCaja")) {
				jButtonAnterioresCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreCaja")) {
				jButtonAnterioresCajaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesCaja")) {
				jButtonSiguientesCajaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarCaja")) {
				jButtonSiguientesCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesCaja")) {
				jButtonSiguientesCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByCaja") || sTipo.equals("MenuItemDetalleAbrirOrderByCaja")) {
				jButtonAbrirOrderByCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarCaja") || sTipo.equals("MenuItemDetalleMostrarOcultarCaja")) {
				jButtonMostrarOcultarCajaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosCaja")) {
				jButtonNuevoGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarCaja")) {
				jButtonNuevoGuardarCambiosCajaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosCaja")) {
				jButtonNuevoGuardarCambiosCajaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoCaja")) {
				jButtonCerrarReporteDinamicoCajaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoCaja")) {
				jButtonGenerarReporteDinamicoCajaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoCaja")) {
				
				jButtonGenerarExcelReporteDinamicoCajaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionCaja")) {
				jButtonCerrarImportacionCajaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionCaja")) {
				
				jButtonGenerarImportacionCajaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionCaja")) {
				
				jButtonAbrirImportacionCajaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesCaja")) {
				jComboBoxTiposAccionesCajaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesCaja")) {
				jComboBoxTiposRelacionesCajaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioCaja")) {
				jComboBoxTiposAccionesCajaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarCaja")) {
				
				jComboBoxTiposSeleccionarCajaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralCaja")) {
				jTextFieldValorCampoGeneralCajaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByCaja")) {
				jButtonAbrirOrderByCajaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarCaja")) {
				jButtonAbrirOrderByCajaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByCaja")) {
				jButtonCerrarOrderByCajaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCajaBusqueda")) {
				this.jButtonidCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCajaUpdate")) {
				this.jButtonid_empresaCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCajaBusqueda")) {
				this.jButtonid_empresaCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalCajaUpdate")) {
				this.jButtonid_sucursalCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalCajaBusqueda")) {
				this.jButtonid_sucursalCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreCajaBusqueda")) {
				this.jButtonnombreCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_equipoCajaBusqueda")) {
				this.jButtonnombre_equipoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_impresoraCajaBusqueda")) {
				this.jButtonnombre_impresoraCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_pedidoCajaBusqueda")) {
				this.jButtonsecuencial_pedidoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_pedido_formatoCajaBusqueda")) {
				this.jButtonsecuencial_pedido_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("punto_emisionCajaBusqueda")) {
				this.jButtonpunto_emisionCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("establecimientoCajaBusqueda")) {
				this.jButtonestablecimientoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_inicioCajaBusqueda")) {
				this.jButtonfecha_inicioCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finalCajaBusqueda")) {
				this.jButtonfecha_finalCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("esta_activoCajaBusqueda")) {
				this.jButtonesta_activoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionCajaBusqueda")) {
				this.jButtondescripcionCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_facturaCajaBusqueda")) {
				this.jButtonsecuencial_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_factura_formatoCajaBusqueda")) {
				this.jButtonsecuencial_factura_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_ventaCajaBusqueda")) {
				this.jButtonsecuencial_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_venta_formatoCajaBusqueda")) {
				this.jButtonsecuencial_nota_venta_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencia_nota_creditoCajaBusqueda")) {
				this.jButtonsecuencia_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencia_nota_credito_formatoCajaBusqueda")) {
				this.jButtonsecuencia_nota_credito_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_facturaCajaBusqueda")) {
				this.jButtonautorizacion_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_nota_ventaCajaBusqueda")) {
				this.jButtonautorizacion_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_nota_creditoCajaBusqueda")) {
				this.jButtonautorizacion_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_facturaCajaBusqueda")) {
				this.jButtonfecha_caduca_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_nota_ventaCajaBusqueda")) {
				this.jButtonfecha_caduca_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_nota_creditoCajaBusqueda")) {
				this.jButtonfecha_caduca_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_facturaCajaBusqueda")) {
				this.jButtonserie_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_nota_ventaCajaBusqueda")) {
				this.jButtonserie_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_nota_creditoCajaBusqueda")) {
				this.jButtonserie_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_facturaCajaBusqueda")) {
				this.jButtonsec_inicial_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_nota_ventaCajaBusqueda")) {
				this.jButtonsec_inicial_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_nota_creditoCajaBusqueda")) {
				this.jButtonsec_inicial_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_facturaCajaBusqueda")) {
				this.jButtonsec_final_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_nota_ventaCajaBusqueda")) {
				this.jButtonsec_final_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_nota_creditoCajaBusqueda")) {
				this.jButtonsec_final_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisCajaUpdate")) {
				this.jButtonid_paisCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisCajaBusqueda")) {
				this.jButtonid_paisCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadCajaUpdate")) {
				this.jButtonid_ciudadCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadCajaBusqueda")) {
				this.jButtonid_ciudadCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_zonaCajaUpdate")) {
				this.jButtonid_zonaCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_zonaCajaBusqueda")) {
				this.jButtonid_zonaCajaBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdCiudadCaja")) {
				this.jButtonFK_IdCiudadCajaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisCaja")) {
				this.jButtonFK_IdPaisCajaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdZonaCaja")) {
				this.jButtonFK_IdZonaCajaActionPerformed(evt);
			}
			
			;
			
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessCaja();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			Caja cajaLocal=null;
			
			if(!this.getEsControlTabla()) {
				cajaLocal=this.caja;
			} else {
				cajaLocal=this.cajaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
							
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
								
						
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
								
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
			
			this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
							
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
			
			this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
								
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
			
			this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosCaja")) {
					jCheckBoxSeleccionarTodosCajaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosCaja")) {
					jCheckBoxSeleccionadosCajaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarCaja")) {
					
				}
				
				


				
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
												
				
				


				
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaCajaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.caja);
				
				this.actualizarInformacion("INFO_PADRE",false,this.caja);
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(Caja.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",Caja.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaCajaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.cajaAnterior =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.cajaAnterior =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarCaja")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosCajaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosCaja.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.caja =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.caja =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.caja);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarCaja")) {
				
				}
				
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarCaja")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosCaja.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarCaja")) {
			
			}
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessCaja();
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			if(sTipo.equals("NuevoCaja")) {
				jButtonNuevoCajaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarCaja")) {
				jButtonDuplicarCajaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarCaja")) {
				jButtonCopiarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormCaja")) {
				jButtonVerFormCajaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesCaja")) {
				jButtonNuevoCajaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarCaja")) {
				jButtonModificarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarCaja")) {
				jButtonActualizarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarCaja")) {
				jButtonEliminarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarCaja")) {
				jButtonCancelarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarCaja")) {
				jButtonCerrarCajaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosCaja")) {
				jButtonGuardarCambiosCajaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosCaja")) {
				jButtonNuevoGuardarCambiosCajaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByCaja")) {
				jButtonAbrirOrderByCajaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionCaja")) {
				jButtonRecargarInformacionCajaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresCaja")) {
				jButtonAnterioresCajaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesCaja")) {
				jButtonSiguientesCajaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idCajaBusqueda")) {
				this.jButtonidCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaCajaUpdate")) {
				this.jButtonid_empresaCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaCajaBusqueda")) {
				this.jButtonid_empresaCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalCajaUpdate")) {
				this.jButtonid_sucursalCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalCajaBusqueda")) {
				this.jButtonid_sucursalCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombreCajaBusqueda")) {
				this.jButtonnombreCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_equipoCajaBusqueda")) {
				this.jButtonnombre_equipoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_impresoraCajaBusqueda")) {
				this.jButtonnombre_impresoraCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_pedidoCajaBusqueda")) {
				this.jButtonsecuencial_pedidoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_pedido_formatoCajaBusqueda")) {
				this.jButtonsecuencial_pedido_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("punto_emisionCajaBusqueda")) {
				this.jButtonpunto_emisionCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("establecimientoCajaBusqueda")) {
				this.jButtonestablecimientoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_inicioCajaBusqueda")) {
				this.jButtonfecha_inicioCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_finalCajaBusqueda")) {
				this.jButtonfecha_finalCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("esta_activoCajaBusqueda")) {
				this.jButtonesta_activoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionCajaBusqueda")) {
				this.jButtondescripcionCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_facturaCajaBusqueda")) {
				this.jButtonsecuencial_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_factura_formatoCajaBusqueda")) {
				this.jButtonsecuencial_factura_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_ventaCajaBusqueda")) {
				this.jButtonsecuencial_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencial_nota_venta_formatoCajaBusqueda")) {
				this.jButtonsecuencial_nota_venta_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencia_nota_creditoCajaBusqueda")) {
				this.jButtonsecuencia_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("secuencia_nota_credito_formatoCajaBusqueda")) {
				this.jButtonsecuencia_nota_credito_formatoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_facturaCajaBusqueda")) {
				this.jButtonautorizacion_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_nota_ventaCajaBusqueda")) {
				this.jButtonautorizacion_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("autorizacion_nota_creditoCajaBusqueda")) {
				this.jButtonautorizacion_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_facturaCajaBusqueda")) {
				this.jButtonfecha_caduca_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_nota_ventaCajaBusqueda")) {
				this.jButtonfecha_caduca_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fecha_caduca_nota_creditoCajaBusqueda")) {
				this.jButtonfecha_caduca_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_facturaCajaBusqueda")) {
				this.jButtonserie_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_nota_ventaCajaBusqueda")) {
				this.jButtonserie_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serie_nota_creditoCajaBusqueda")) {
				this.jButtonserie_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_facturaCajaBusqueda")) {
				this.jButtonsec_inicial_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_nota_ventaCajaBusqueda")) {
				this.jButtonsec_inicial_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_inicial_nota_creditoCajaBusqueda")) {
				this.jButtonsec_inicial_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_facturaCajaBusqueda")) {
				this.jButtonsec_final_facturaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_nota_ventaCajaBusqueda")) {
				this.jButtonsec_final_nota_ventaCajaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sec_final_nota_creditoCajaBusqueda")) {
				this.jButtonsec_final_nota_creditoCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisCajaUpdate")) {
				this.jButtonid_paisCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisCajaBusqueda")) {
				this.jButtonid_paisCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadCajaUpdate")) {
				this.jButtonid_ciudadCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadCajaBusqueda")) {
				this.jButtonid_ciudadCajaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_zonaCajaUpdate")) {
				this.jButtonid_zonaCajaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_zonaCajaBusqueda")) {
				this.jButtonid_zonaCajaBusquedaActionPerformed(evt);
			}
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessCaja();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameCaja")) {
				closingInternalFrameCaja();
				
			} else if(sTipo.equals("jButtonCancelarCaja")) {
				JInternalFrameBase jInternalFrameDetalleFormCaja = (JInternalFrameBase)evt.getSource();
	            	
	            CajaBeanSwingJInternalFrame jInternalFrameParent=(CajaBeanSwingJInternalFrame)jInternalFrameDetalleFormCaja.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarCajaActionPerformed(null);
			}
			
			CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.caja,new Object(),this.cajaParameterGeneral,this.cajaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormCaja(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormCaja(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormCaja(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.caja)) {
			if(!esControlTabla) {
				if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualCaja(this.caja,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);			
				}
				
				if(this.cajaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualCaja(this.caja,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cajaReturnGeneral=cajaLogic.procesarEventosCajasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cajaLogic.getCajas(),this.caja,this.cajaParameterGeneral,this.isEsNuevoCaja,classes);//this.cajaLogic.getCaja()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanCaja(this.cajaReturnGeneral,this.cajaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.cajaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanCaja(classes,this.cajaReturnGeneral,this.cajaBean,false);
					}
						
					if(this.cajaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyCaja(this.cajaReturnGeneral.getCaja());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioCaja(this.cajaReturnGeneral.getCaja());	
					}
						
					if(this.cajaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioCaja(this.cajaReturnGeneral.getCaja(),classes);//this.cajaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioCaja(this.caja,classes);//this.cajaBean);									
				}
			
				if(CajaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualCaja(this.caja,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysCaja(this.caja);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.cajaAnterior!=null) {
						this.caja=this.cajaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.cajaReturnGeneral=cajaLogic.procesarEventosCajasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.cajaLogic.getCajas(),this.caja,this.cajaParameterGeneral,this.isEsNuevoCaja,classes);//this.cajaLogic.getCaja()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.cajaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.cajaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.cajaReturnGeneral.getCaja(),cajaLogic.getCajas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.cajaReturnGeneral.getCaja(),this.cajas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosCaja.repaint();
				
				//((AbstractTableModel) this.jTableDatosCaja.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosCaja();
			}
		}
	}
	
	public void actualizarVisualTableDatosCaja() throws Exception {
		
		CajaModel cajaModel=(CajaModel)this.jTableDatosCaja.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			cajaModel.cajas=this.cajaLogic.getCajas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			cajaModel.cajas=this.cajas;
		}
		
		
		((CajaModel) this.jTableDatosCaja.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaCaja() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getcajaAnterior(),this.cajaLogic.getCajas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getcajaAnterior(),this.cajas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosCaja();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioCaja(Caja caja,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(caja.getNotaCreditoPuntoVentas());
					this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaCierre.class)) {
					this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreLogic.setCajaCierres(caja.getCajaCierres());
					this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaCierre(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FacturaPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaLogic.setFacturaPuntoVentas(caja.getFacturaPuntoVentas());
					this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaEgreso.class)) {
					this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoLogic.setCajaEgresos(caja.getCajaEgresos());
					this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaEgreso(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(caja.getCajeroTurnos());
					this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajeroTurno(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasPunVen.class)) {
					this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenLogic.setPresupuestoVentasPunVens(caja.getPresupuestoVentasPunVens());
					this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentasPunVen(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PedidoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaLogic.setPedidoPuntoVentas(caja.getPedidoPuntoVentas());
					this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaIngreso.class)) {
					this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoLogic.setCajaIngresos(caja.getCajaIngresos());
					this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaIngreso(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.caja,new Object(),generalEntityParameterGeneral,this.cajaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.cajaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=CajaConstantesFunciones.getClassesRelationshipsOfCaja(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=CajaConstantesFunciones.getClassesRelationshipsFromStringsOfCaja(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormCaja(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				CajaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.caja,new Object(),generalEntityParameterGeneral,this.cajaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,CajaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioCaja(CajaBean cajaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaLogic.setNotaCreditoPuntoVentas(caja.getNotaCreditoPuntoVentas());
					this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaNotaCreditoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaCierre.class)) {
					this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreLogic.setCajaCierres(caja.getCajaCierres());
					this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaCierre(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FacturaPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaLogic.setFacturaPuntoVentas(caja.getFacturaPuntoVentas());
					this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaEgreso.class)) {
					this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoLogic.setCajaEgresos(caja.getCajaEgresos());
					this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaEgreso(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.setCajeroTurnos(caja.getCajeroTurnos());
					this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajeroTurno(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasPunVen.class)) {
					this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenLogic.setPresupuestoVentasPunVens(caja.getPresupuestoVentasPunVens());
					this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.inicializarActualizarBindingTablaPresupuestoVentasPunVen(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PedidoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaLogic.setPedidoPuntoVentas(caja.getPedidoPuntoVentas());
					this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaIngreso.class)) {
					this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoLogic.setCajaIngresos(caja.getCajaIngresos());
					this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.inicializarActualizarBindingTablaCajaIngreso(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanCaja(ArrayList<Classe> classes,CajaReturnGeneral cajaReturnGeneral,CajaBean cajaBean,Boolean conDefault) throws Exception {
		
			this.cajaBean.setNotaCreditoPuntoVentas(cajaReturnGeneral.getCaja().getNotaCreditoPuntoVentas());
			this.cajaBean.setCajaCierres(cajaReturnGeneral.getCaja().getCajaCierres());
			this.cajaBean.setFacturaPuntoVentas(cajaReturnGeneral.getCaja().getFacturaPuntoVentas());
			this.cajaBean.setCajaEgresos(cajaReturnGeneral.getCaja().getCajaEgresos());
			this.cajaBean.setCajeroTurnos(cajaReturnGeneral.getCaja().getCajeroTurnos());
			this.cajaBean.setPresupuestoVentasPunVens(cajaReturnGeneral.getCaja().getPresupuestoVentasPunVens());
			this.cajaBean.setPedidoPuntoVentas(cajaReturnGeneral.getCaja().getPedidoPuntoVentas());
			this.cajaBean.setCajaIngresos(cajaReturnGeneral.getCaja().getCajaIngresos());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualCaja(Caja caja,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(NotaCreditoPuntoVenta.class)) {
					caja.setNotaCreditoPuntoVentas(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaBeanSwingJInternalFrame.notacreditopuntoventaLogic.getNotaCreditoPuntoVentas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaCierre.class)) {
					caja.setCajaCierres(this.jInternalFrameDetalleFormCaja.cajacierreBeanSwingJInternalFrame.cajacierreLogic.getCajaCierres());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(FacturaPuntoVenta.class)) {
					caja.setFacturaPuntoVentas(this.jInternalFrameDetalleFormCaja.facturapuntoventaBeanSwingJInternalFrame.facturapuntoventaLogic.getFacturaPuntoVentas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaEgreso.class)) {
					caja.setCajaEgresos(this.jInternalFrameDetalleFormCaja.cajaegresoBeanSwingJInternalFrame.cajaegresoLogic.getCajaEgresos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajeroTurno.class)) {
					caja.setCajeroTurnos(this.jInternalFrameDetalleFormCaja.cajeroturnoBeanSwingJInternalFrame.cajeroturnoLogic.getCajeroTurnos());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PresupuestoVentasPunVen.class)) {
					caja.setPresupuestoVentasPunVens(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenBeanSwingJInternalFrame.presupuestoventaspunvenLogic.getPresupuestoVentasPunVens());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(PedidoPuntoVenta.class)) {
					caja.setPedidoPuntoVentas(this.jInternalFrameDetalleFormCaja.pedidopuntoventaBeanSwingJInternalFrame.pedidopuntoventaLogic.getPedidoPuntoVentas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(CajaIngreso.class)) {
					caja.setCajaIngresos(this.jInternalFrameDetalleFormCaja.cajaingresoBeanSwingJInternalFrame.cajaingresoLogic.getCajaIngresos());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.caja)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormCaja = new CajaDetalleFormJInternalFrame(jDesktopPane,this.cajaSessionBean.getConGuardarRelaciones(),this.cajaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormCaja);
		this.jInternalFrameDetalleFormCaja.setVisible(false);
		this.jInternalFrameDetalleFormCaja.setSelected(false);						
		
		this.jInternalFrameDetalleFormCaja.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormCaja.cajaLogic=this.cajaLogic;
		
		this.cargarCombosFrameForeignKeyCaja("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleCaja();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleCaja();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyCaja("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyCaja();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormCaja.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCaja"));
		
		this.jInternalFrameDetalleFormCaja.jButtonModificarCaja.addActionListener(new ButtonActionListener(this,"ModificarCaja"));

		
		this.jInternalFrameDetalleFormCaja.jButtonModificarToolBarCaja.addActionListener(new ButtonActionListener(this,"ModificarToolBarCaja"));
					
		this.jInternalFrameDetalleFormCaja.jMenuItemModificarCaja.addActionListener(new ButtonActionListener(this,"MenuItemModificarCaja"));		
		
		
		
		this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.addActionListener (new ButtonActionListener(this,"ActualizarCaja"));
		
		
		this.jInternalFrameDetalleFormCaja.jButtonActualizarToolBarCaja.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCaja"));
						
		this.jInternalFrameDetalleFormCaja.jMenuItemActualizarCaja.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCaja"));		
		
		
		
		this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.addActionListener (new ButtonActionListener(this,"EliminarCaja"));
		
		
		this.jInternalFrameDetalleFormCaja.jButtonEliminarToolBarCaja.addActionListener (new ButtonActionListener(this,"EliminarToolBarCaja"));
								
		this.jInternalFrameDetalleFormCaja.jMenuItemEliminarCaja.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCaja"));		
		
		
		
		this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.addActionListener (new ButtonActionListener(this,"CancelarCaja"));
		
		
		this.jInternalFrameDetalleFormCaja.jButtonCancelarToolBarCaja.addActionListener (new ButtonActionListener(this,"CancelarToolBarCaja"));
					
		this.jInternalFrameDetalleFormCaja.jMenuItemCancelarCaja.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCaja"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormCaja.jMenuItemDetalleCerrarCaja.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCaja"));		
		
		
		
		this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosToolBarCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCaja"));
		
		
		
		this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosToolBarCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCaja"));
		
		
		
		this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCaja"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonidCajaBusqueda.addActionListener(new ButtonActionListener(this,"idCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombreCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombreCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_equipoCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_equipoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_impresoraCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_impresoraCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedidoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedidoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedido_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedido_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonpunto_emisionCajaBusqueda.addActionListener(new ButtonActionListener(this,"punto_emisionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonestablecimientoCajaBusqueda.addActionListener(new ButtonActionListener(this,"establecimientoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_inicioCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_finalCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonesta_activoCajaBusqueda.addActionListener(new ButtonActionListener(this,"esta_activoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtondescripcionCajaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_factura_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_factura_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_venta_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_venta_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_credito_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_credito_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_creditoCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaUpdate.addActionListener(new ButtonActionListener(this,"id_paisCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_zonaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaCajaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCaja"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameCaja"));
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarCaja"));
		}
		
		this.jTableDatosCaja.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarCaja"));
		
		this.jTableDatosCaja.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarCaja"));
		
		this.jButtonNuevoCaja.addActionListener(new ButtonActionListener(this,"NuevoCaja"));
		
		this.jButtonDuplicarCaja.addActionListener(new ButtonActionListener(this,"DuplicarCaja"));
		
		this.jButtonCopiarCaja.addActionListener(new ButtonActionListener(this,"CopiarCaja"));
		
		this.jButtonVerFormCaja.addActionListener(new ButtonActionListener(this,"VerFormCaja"));
		
		
		this.jButtonNuevoToolBarCaja.addActionListener(new ButtonActionListener(this,"NuevoToolBarCaja"));
			
		this.jButtonDuplicarToolBarCaja.addActionListener(new ButtonActionListener(this,"DuplicarToolBarCaja"));
			
		this.jMenuItemNuevoCaja.addActionListener (new ButtonActionListener(this,"MenuItemNuevoCaja"));
			
		this.jMenuItemDuplicarCaja.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarCaja"));		
		
		
		this.jButtonNuevoRelacionesCaja.addActionListener (new ButtonActionListener(this,"NuevoRelacionesCaja"));
		
		
		this.jButtonNuevoRelacionesToolBarCaja.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarCaja"));
			
		this.jMenuItemNuevoRelacionesCaja.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesCaja"));		
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonModificarCaja.addActionListener(new ButtonActionListener(this,"ModificarCaja"));
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonModificarToolBarCaja.addActionListener(new ButtonActionListener(this,"ModificarToolBarCaja"));
			
			this.jInternalFrameDetalleFormCaja.jMenuItemModificarCaja.addActionListener(new ButtonActionListener(this,"MenuItemModificarCaja"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormCaja.jButtonActualizarCaja.addActionListener (new ButtonActionListener(this,"ActualizarCaja"));
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonActualizarToolBarCaja.addActionListener(new ButtonActionListener(this,"ActualizarToolBarCaja"));
				
			this.jInternalFrameDetalleFormCaja.jMenuItemActualizarCaja.addActionListener (new ButtonActionListener(this,"MenuItemActualizarCaja"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonEliminarCaja.addActionListener (new ButtonActionListener(this,"EliminarCaja"));
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonEliminarToolBarCaja.addActionListener (new ButtonActionListener(this,"EliminarToolBarCaja"));
						
			this.jInternalFrameDetalleFormCaja.jMenuItemEliminarCaja.addActionListener (new ButtonActionListener(this,"MenuItemEliminarCaja"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonCancelarCaja.addActionListener (new ButtonActionListener(this,"CancelarCaja"));
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonCancelarToolBarCaja.addActionListener (new ButtonActionListener(this,"CancelarToolBarCaja"));
			
			this.jInternalFrameDetalleFormCaja.jMenuItemCancelarCaja.addActionListener (new ButtonActionListener(this,"MenuItemCancelarCaja"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarCaja.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarCaja"));		
		
		
		this.jButtonCerrarCaja.addActionListener (new ButtonActionListener(this,"CerrarCaja"));
		
		
		this.jButtonCerrarToolBarCaja.addActionListener (new ButtonActionListener(this,"CerrarToolBarCaja"));
			
		this.jMenuItemCerrarCaja.addActionListener (new ButtonActionListener(this,"MenuItemCerrarCaja"));
			
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jMenuItemDetalleCerrarCaja.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarCaja"));		
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosCaja"));
		}
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosToolBarCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarCaja"));
		}
		
		this.jButtonCopiarToolBarCaja.addActionListener (new ButtonActionListener(this,"CopiarToolBarCaja"));
			
		this.jButtonVerFormToolBarCaja.addActionListener (new ButtonActionListener(this,"VerFormToolBarCaja"));
		
		this.jMenuItemGuardarCambiosCaja.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosCaja"));
			
		this.jMenuItemCopiarCaja.addActionListener (new ButtonActionListener(this,"MenuItemCopiarCaja"));		
		
		this.jMenuItemVerFormCaja.addActionListener (new ButtonActionListener(this,"MenuItemVerFormCaja"));		
		
		
		this.jButtonGuardarCambiosTablaCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCaja"));
		
		
		this.jButtonGuardarCambiosTablaToolBarCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarCaja"));
			
		this.jMenuItemGuardarCambiosTablaCaja.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaCaja"));		
		
		
		
		this.jButtonRecargarInformacionCaja.addActionListener (new ButtonActionListener(this,"RecargarInformacionCaja"));
					
		this.jButtonRecargarInformacionToolBarCaja.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarCaja"));
		
		this.jMenuItemRecargarInformacionCaja.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionCaja"));		
		
		
		
		this.jButtonAnterioresCaja.addActionListener (new ButtonActionListener(this,"AnterioresCaja"));
		
		
		this.jButtonAnterioresToolBarCaja.addActionListener (new ButtonActionListener(this,"AnterioresToolBarCaja"));
		
		this.jMenuItemAnterioresCaja.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresCaja"));		
		
		
		this.jButtonSiguientesCaja.addActionListener (new ButtonActionListener(this,"SiguientesCaja"));
		
		
		this.jButtonSiguientesToolBarCaja.addActionListener (new ButtonActionListener(this,"SiguientesToolBarCaja"));
			
		this.jMenuItemSiguientesCaja.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesCaja"));
			
		this.jMenuItemAbrirOrderByCaja.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByCaja"));
			
		this.jMenuItemMostrarOcultarCaja.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarCaja"));
			
		this.jMenuItemDetalleAbrirOrderByCaja.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByCaja"));
			
		this.jMenuItemDetalleMostarOcultarCaja.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarCaja"));		
		
		
		this.jButtonNuevoGuardarCambiosCaja.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosCaja"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarCaja.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarCaja"));
			
		this.jMenuItemNuevoGuardarCambiosCaja.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosCaja"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosCaja.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosCaja"));

		this.jCheckBoxSeleccionadosCaja.addItemListener(new CheckBoxItemListener(this,"SeleccionadosCaja"));
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioCaja"));
		}
		
		
		this.jComboBoxTiposRelacionesCaja.addActionListener (new ButtonActionListener(this,"TiposRelacionesCaja"));
			
		this.jComboBoxTiposAccionesCaja.addActionListener (new ButtonActionListener(this,"TiposAccionesCaja"));
					
		this.jComboBoxTiposSeleccionarCaja.addActionListener (new ButtonActionListener(this,"TiposSeleccionarCaja"));
			
		this.jTextFieldValorCampoGeneralCaja.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralCaja"));		
		
		
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonidCajaBusqueda.addActionListener(new ButtonActionListener(this,"idCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombreCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombreCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_equipoCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_equipoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_impresoraCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_impresoraCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedidoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedidoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedido_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedido_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonpunto_emisionCajaBusqueda.addActionListener(new ButtonActionListener(this,"punto_emisionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonestablecimientoCajaBusqueda.addActionListener(new ButtonActionListener(this,"establecimientoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_inicioCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_finalCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonesta_activoCajaBusqueda.addActionListener(new ButtonActionListener(this,"esta_activoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtondescripcionCajaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_factura_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_factura_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_venta_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_venta_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_credito_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_credito_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_creditoCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaUpdate.addActionListener(new ButtonActionListener(this,"id_paisCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_zonaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaCajaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCiudadCaja.addActionListener(new ButtonActionListener(this,"FK_IdCiudadCaja"));

			this.jButtonFK_IdPaisCaja.addActionListener(new ButtonActionListener(this,"FK_IdPaisCaja"));

			this.jButtonFK_IdZonaCaja.addActionListener(new ButtonActionListener(this,"FK_IdZonaCaja"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoCaja!=null) {
				this.jInternalFrameReporteDinamicoCaja.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCaja"));
				this.jInternalFrameReporteDinamicoCaja.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCaja"));
				this.jInternalFrameReporteDinamicoCaja.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCaja"));
			}
			
			//this.jButtonCerrarReporteDinamicoCaja.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoCaja"));				
			//this.jButtonGenerarReporteDinamicoCaja.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoCaja"));
			//this.jButtonGenerarExcelReporteDinamicoCaja.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoCaja"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionCaja!=null) {
				this.jInternalFrameImportacionCaja.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionCaja"));
				this.jInternalFrameImportacionCaja.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionCaja"));
				this.jInternalFrameImportacionCaja.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionCaja"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByCaja.addActionListener (new ButtonActionListener(this,"AbrirOrderByCaja"));
			
			this.jButtonAbrirOrderByToolBarCaja.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarCaja"));			
			
			if(this.jInternalFrameOrderByCaja!=null) {
				this.jInternalFrameOrderByCaja.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByCaja"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormCaja!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormCaja.jTabbedPaneRelacionesCaja.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesCaja"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameCaja();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormCaja.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormCaja = (JInternalFrameBase)event.getSource();
	            	
	            CajaBeanSwingJInternalFrame jInternalFrameParent=(CajaBeanSwingJInternalFrame)jInternalFrameDetalleFormCaja.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarCajaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosCaja.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosCajaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosCaja.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosCaja.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoCaja";
		inputMap = this.jButtonNuevoCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCajaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoCajaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesCaja";
		inputMap = this.jButtonNuevoRelacionesCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoCajaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarCaja";
		inputMap = this.jButtonModificarCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarCaja";
		inputMap = this.jButtonActualizarCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarCaja";
		inputMap = this.jButtonEliminarCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarCaja";
		inputMap = this.jButtonCancelarCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarCaja";
		inputMap = this.jButtonCerrarCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosCaja";
		inputMap = this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormCaja.jButtonGuardarCambiosCaja.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosCajaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosCaja.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosCajaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesCaja.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesCajaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarCaja.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarCajaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralCaja.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralCajaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonidCajaBusqueda.addActionListener(new ButtonActionListener(this,"idCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_empresaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_sucursalCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombreCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombreCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_equipoCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_equipoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonnombre_impresoraCajaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_impresoraCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedidoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedidoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_pedido_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_pedido_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonpunto_emisionCajaBusqueda.addActionListener(new ButtonActionListener(this,"punto_emisionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonestablecimientoCajaBusqueda.addActionListener(new ButtonActionListener(this,"establecimientoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_inicioCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_inicioCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_finalCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_finalCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonesta_activoCajaBusqueda.addActionListener(new ButtonActionListener(this,"esta_activoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtondescripcionCajaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_factura_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_factura_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencial_nota_venta_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencial_nota_venta_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsecuencia_nota_credito_formatoCajaBusqueda.addActionListener(new ButtonActionListener(this,"secuencia_nota_credito_formatoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonautorizacion_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"autorizacion_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonfecha_caduca_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"fecha_caduca_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonserie_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"serie_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_inicial_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_inicial_nota_creditoCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_facturaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_facturaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_ventaCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_ventaCajaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonsec_final_nota_creditoCajaBusqueda.addActionListener(new ButtonActionListener(this,"sec_final_nota_creditoCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaUpdate.addActionListener(new ButtonActionListener(this,"id_paisCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_paisCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_paisCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_ciudadCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadCajaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaUpdate.addActionListener(new ButtonActionListener(this,"id_zonaCajaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormCaja.jButtonid_zonaCajaBusqueda.addActionListener(new ButtonActionListener(this,"id_zonaCajaBusqueda"));
		
		
		this.jButtonFK_IdCiudadCaja.addActionListener(new ButtonActionListener(this,"FK_IdCiudadCaja"));

		this.jButtonFK_IdPaisCaja.addActionListener(new ButtonActionListener(this,"FK_IdPaisCaja"));

		this.jButtonFK_IdZonaCaja.addActionListener(new ButtonActionListener(this,"FK_IdZonaCaja"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionCaja.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionCajaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarCajaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarCaja.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosCaja(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(Caja cajaAux:this.cajaLogic.getCajas()) {
					cajaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Caja cajaAux:cajas) {
					cajaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosCajaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCaja(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Caja cajaAux:this.cajaLogic.getCajas()) {
						cajaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Caja cajaAux:cajas) {
						cajaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(Caja cajaAux:this.cajaLogic.getCajas()) {
					
						if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTAACTIVO)) {
							existe=true;
							cajaAux.setesta_activo(this.isSeleccionarTodos);
						}
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Caja cajaAux:cajas) {
						
						if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTAACTIVO)) {
							existe=true;
							cajaAux.setesta_activo(this.isSeleccionarTodos);
						}
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaCaja(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCaja.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCaja.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCaja,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosCajaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingCaja(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosCaja.getSelectedRows();
			
			Caja cajaLocal=new Caja();
			
			//this.seleccionarTodosCaja(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLocal =(Caja) this.cajaLogic.getCajas().toArray()[this.jTableDatosCaja.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					cajaLocal =(Caja) this.cajas.toArray()[this.jTableDatosCaja.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				cajaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(Caja cajaAux:this.cajaLogic.getCajas()) {
						cajaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(Caja cajaAux:cajas) {
						cajaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaCaja(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosCaja.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosCaja.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosCaja,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualCajaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarCajaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralCajaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingCaja(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralCaja.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(Caja cajaAux:this.cajaLogic.getCajas()) {
				
						if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							cajaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREEQUIPO)) {
							existe=true;
							cajaAux.setnombre_equipo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA)) {
							existe=true;
							cajaAux.setnombre_impresora(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO)) {
							existe=true;
							cajaAux.setsecuencial_pedido(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_pedido_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_PUNTOEMISION)) {
							existe=true;
							cajaAux.setpunto_emision(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO)) {
							existe=true;
							cajaAux.setestablecimiento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAINICIO)) {
							existe=true;
							cajaAux.setfecha_inicio(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAFINAL)) {
							existe=true;
							cajaAux.setfecha_final(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							cajaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
							existe=true;
							cajaAux.setsecuencial_factura(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_factura_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA)) {
							existe=true;
							cajaAux.setsecuencial_nota_venta(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_nota_venta_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO)) {
							existe=true;
							cajaAux.setsecuencia_nota_credito(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO)) {
							existe=true;
							cajaAux.setsecuencia_nota_credito_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA)) {
							existe=true;
							cajaAux.setautorizacion_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA)) {
							existe=true;
							cajaAux.setautorizacion_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO)) {
							existe=true;
							cajaAux.setautorizacion_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA)) {
							existe=true;
							cajaAux.setfecha_caduca_factura(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA)) {
							existe=true;
							cajaAux.setfecha_caduca_nota_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO)) {
							existe=true;
							cajaAux.setfecha_caduca_nota_credito(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIEFACTURA)) {
							existe=true;
							cajaAux.setserie_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTAVENTA)) {
							existe=true;
							cajaAux.setserie_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTACREDITO)) {
							existe=true;
							cajaAux.setserie_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALFACTURA)) {
							existe=true;
							cajaAux.setsec_inicial_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA)) {
							existe=true;
							cajaAux.setsec_inicial_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO)) {
							existe=true;
							cajaAux.setsec_inicial_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALFACTURA)) {
							existe=true;
							cajaAux.setsec_final_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA)) {
							existe=true;
							cajaAux.setsec_final_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO)) {
							existe=true;
							cajaAux.setsec_final_nota_credito(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Caja cajaAux:cajas) {
					
						if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBRE)) {
							existe=true;
							cajaAux.setnombre(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREEQUIPO)) {
							existe=true;
							cajaAux.setnombre_equipo(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA)) {
							existe=true;
							cajaAux.setnombre_impresora(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO)) {
							existe=true;
							cajaAux.setsecuencial_pedido(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_pedido_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_PUNTOEMISION)) {
							existe=true;
							cajaAux.setpunto_emision(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO)) {
							existe=true;
							cajaAux.setestablecimiento(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAINICIO)) {
							existe=true;
							cajaAux.setfecha_inicio(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAFINAL)) {
							existe=true;
							cajaAux.setfecha_final(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							cajaAux.setdescripcion(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
							existe=true;
							cajaAux.setsecuencial_factura(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_factura_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA)) {
							existe=true;
							cajaAux.setsecuencial_nota_venta(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO)) {
							existe=true;
							cajaAux.setsecuencial_nota_venta_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO)) {
							existe=true;
							cajaAux.setsecuencia_nota_credito(Long.parseLong(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO)) {
							existe=true;
							cajaAux.setsecuencia_nota_credito_formato(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA)) {
							existe=true;
							cajaAux.setautorizacion_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA)) {
							existe=true;
							cajaAux.setautorizacion_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO)) {
							existe=true;
							cajaAux.setautorizacion_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA)) {
							existe=true;
							cajaAux.setfecha_caduca_factura(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA)) {
							existe=true;
							cajaAux.setfecha_caduca_nota_venta(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO)) {
							existe=true;
							cajaAux.setfecha_caduca_nota_credito(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIEFACTURA)) {
							existe=true;
							cajaAux.setserie_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTAVENTA)) {
							existe=true;
							cajaAux.setserie_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTACREDITO)) {
							existe=true;
							cajaAux.setserie_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALFACTURA)) {
							existe=true;
							cajaAux.setsec_inicial_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA)) {
							existe=true;
							cajaAux.setsec_inicial_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO)) {
							existe=true;
							cajaAux.setsec_inicial_nota_credito(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALFACTURA)) {
							existe=true;
							cajaAux.setsec_final_factura(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA)) {
							existe=true;
							cajaAux.setsec_final_nota_venta(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO)) {
							existe=true;
							cajaAux.setsec_final_nota_credito(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaCaja(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesCajaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingCaja(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioCaja=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesCaja.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteCaja) {				
					conSplash=true;//false;										
					
					//this.startProcessCaja(conSplash);
				
					this.generarReporteCajasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoCajasSeleccionados();
				//this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCajasSeleccionados(false);
				//this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoCajasSeleccionados(true);
				//this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCaja();
				
				this.exportarCajasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionCajas();
				//this.importarCajas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessCaja();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelCajasSeleccionados();
				//this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Caja", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessCaja();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoCaja)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyCaja(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesCaja.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormCaja.jComboBoxTiposAccionesFormularioCaja.setSelectedIndex(0);					
				}	
			} 			
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralCaja();
					
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessCaja(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesCajaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessCaja();
			
			if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
			Caja caja=new Caja();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingCaja(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesCaja.getSelectedItem();
			
			
			
			
			cajasSeleccionados=this.getCajasSeleccionados(true);
			//this.sTipoAccion;
			
			if(cajasSeleccionados.size()==1) {
				for(Caja cajaAux:cajasSeleccionados) {
					caja=cajaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Nota Credito")) {
					jButtonNotaCreditoPuntoVentaActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Caja Cierre")) {
					jButtonCajaCierreActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Factura Punto Venta")) {
					jButtonFacturaPuntoVentaActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Caja Egreso")) {
					jButtonCajaEgresoActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Cajero Turno")) {
					jButtonCajeroTurnoActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Presupuesto Ventas")) {
					jButtonPresupuestoVentasPunVenActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Pedido Punto Venta")) {
					jButtonPedidoPuntoVentaActionPerformed(null,rowIndex,true,false,caja);
				}
				else if(this.sTipoRelacion.equals("Caja Ingreso")) {
					jButtonCajaIngresoActionPerformed(null,rowIndex,true,false,caja);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessCaja();
			
      		//this.finishProcessCaja(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarCajaReturnGeneral() throws Exception {
		if(this.cajaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.cajaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.cajaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.cajaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.cajaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.cajaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingCaja(false);
		}
		
		if(this.cajaReturnGeneral.getConRetornoLista() || this.cajaReturnGeneral.getConRetornoObjeto()) {
			if(this.cajaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cajaLogic.setCajas(this.cajaReturnGeneral.getCajas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.cajaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.cajaLogic.setCaja(this.cajaReturnGeneral.getCaja());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingCaja(false);
		}
	}
	
	public void actualizarParametrosGeneralCaja() throws Exception {
		
		
	}
	
	public ArrayList<Caja> getCajasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioCaja) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(Caja cajaAux:cajaLogic.getCajas()) {
					if(cajaAux.getIsSelected()) {
						cajasSeleccionados.add(cajaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(Caja cajaAux:this.cajas) {
					if(cajaAux.getIsSelected()) {
						cajasSeleccionados.add(cajaAux);				
					}
				}
			}
			
			if(cajasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						cajasSeleccionados.addAll(this.cajaLogic.getCajas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						cajasSeleccionados.addAll(this.cajas);				
					}
				}
			}
		} else {
			cajasSeleccionados.add(this.caja);
		}
		
		return cajasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteCajasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalCajasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoCajasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCajasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoCajasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesCajasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Caja",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteCajas("Todos",cajasSeleccionados);
		
	}	
	
	public void generarReporteNormalCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteCajas("Todos",cajasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionCajasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteCajas("Todos",cajasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		
		this.abrirInicializarFrameReporteDinamicoCaja();
		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoCaja();
		
		
		//this.generarReporteCajas("Todos",cajasSeleccionados ,cajaImplementable,cajaImplementableHome);
	}
	
	public void mostrarImportacionCajas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionCaja();
		
		this.abrirFrameImportacionCaja();		
		
			
		//this.generarReporteCajas("Todos",cajasSeleccionados ,cajaImplementable,cajaImplementableHome);
	}
	
	public void importarCajas() throws Exception {		
	
	}
	
	public void exportarCajasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelCajasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoCajasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlCajasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Caja",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarCaja(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(Caja cajaAux:cajasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarCaja(cajaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//cajaAux.setsDetalleGeneralEntityReporte(cajaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarCaja(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=CajaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_NOMBRE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_NOMBREEQUIPO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_NOMBREIMPRESORA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_PUNTOEMISION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_ESTABLECIMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_FECHAINICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_FECHAFINAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_ESTAACTIVO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_DESCRIPCION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SERIEFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SERIENOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SERIENOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECINICIALFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECFINALFACTURA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_IDCIUDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=CajaConstantesFunciones.LABEL_IDZONA;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarCaja(Caja caja,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=caja.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getnombre();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getnombre_equipo();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getnombre_impresora();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_pedido().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_pedido_formato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getpunto_emision();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getestablecimiento();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getfecha_inicio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getfecha_final().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getesta_activo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getdescripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_factura().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_factura_formato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_nota_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencial_nota_venta_formato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencia_nota_credito().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsecuencia_nota_credito_formato();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getautorizacion_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getautorizacion_nota_venta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getautorizacion_nota_credito();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getfecha_caduca_factura().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getfecha_caduca_nota_venta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getfecha_caduca_nota_credito().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getserie_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getserie_nota_venta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getserie_nota_credito();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_inicial_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_inicial_nota_venta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_inicial_nota_credito();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_final_factura();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_final_nota_venta();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getsec_final_nota_credito();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getciudad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=caja.getzona_descripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("Cajas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelCaja(row);				
				iRow++;
			}				
			
			for(Caja cajaAux:cajasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelCaja(cajaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlCajasSeleccionados() throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();		
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"caja.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("cajas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("caja");
			//elementRoot.appendChild(element);
		
			for(Caja cajaAux:cajasSeleccionados) {
				element = document.createElement("caja");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlCaja(cajaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.cajaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Caja",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelCaja(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBRE);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREEQUIPO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_PUNTOEMISION);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAINICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_FECHAFINAL);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_ESTAACTIVO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_DESCRIPCION);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SERIEFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SERIENOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALFACTURA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_IDCIUDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(CajaConstantesFunciones.LABEL_IDZONA);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelCaja(Caja caja,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getnombre());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getnombre_equipo());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getnombre_impresora());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_pedido());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_pedido_formato());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getpunto_emision());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getestablecimiento());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getfecha_inicio());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getfecha_final());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getesta_activo());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getdescripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_factura_formato());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencial_nota_venta_formato());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencia_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsecuencia_nota_credito_formato());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getautorizacion_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getautorizacion_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getautorizacion_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getfecha_caduca_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getfecha_caduca_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getfecha_caduca_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getserie_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getserie_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getserie_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_inicial_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_inicial_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_inicial_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_final_factura());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_final_nota_venta());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getsec_final_nota_credito());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getciudad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(caja.getzona_descripcion());				
	}
	
	public void setFilaDatosExportarXmlCaja(Caja caja,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(CajaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(caja.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(CajaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(caja.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(CajaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(caja.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(CajaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(caja.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementnombre = document.createElement(CajaConstantesFunciones.NOMBRE);
		elementnombre.appendChild(document.createTextNode(caja.getnombre().trim()));
		element.appendChild(elementnombre);

		Element elementnombre_equipo = document.createElement(CajaConstantesFunciones.NOMBREEQUIPO);
		elementnombre_equipo.appendChild(document.createTextNode(caja.getnombre_equipo().trim()));
		element.appendChild(elementnombre_equipo);

		Element elementnombre_impresora = document.createElement(CajaConstantesFunciones.NOMBREIMPRESORA);
		elementnombre_impresora.appendChild(document.createTextNode(caja.getnombre_impresora().trim()));
		element.appendChild(elementnombre_impresora);

		Element elementsecuencial_pedido = document.createElement(CajaConstantesFunciones.SECUENCIALPEDIDO);
		elementsecuencial_pedido.appendChild(document.createTextNode(caja.getsecuencial_pedido().toString().trim()));
		element.appendChild(elementsecuencial_pedido);

		Element elementsecuencial_pedido_formato = document.createElement(CajaConstantesFunciones.SECUENCIALPEDIDOFORMATO);
		elementsecuencial_pedido_formato.appendChild(document.createTextNode(caja.getsecuencial_pedido_formato().trim()));
		element.appendChild(elementsecuencial_pedido_formato);

		Element elementpunto_emision = document.createElement(CajaConstantesFunciones.PUNTOEMISION);
		elementpunto_emision.appendChild(document.createTextNode(caja.getpunto_emision().trim()));
		element.appendChild(elementpunto_emision);

		Element elementestablecimiento = document.createElement(CajaConstantesFunciones.ESTABLECIMIENTO);
		elementestablecimiento.appendChild(document.createTextNode(caja.getestablecimiento().trim()));
		element.appendChild(elementestablecimiento);

		Element elementfecha_inicio = document.createElement(CajaConstantesFunciones.FECHAINICIO);
		elementfecha_inicio.appendChild(document.createTextNode(caja.getfecha_inicio().toString().trim()));
		element.appendChild(elementfecha_inicio);

		Element elementfecha_final = document.createElement(CajaConstantesFunciones.FECHAFINAL);
		elementfecha_final.appendChild(document.createTextNode(caja.getfecha_final().toString().trim()));
		element.appendChild(elementfecha_final);

		Element elementesta_activo = document.createElement(CajaConstantesFunciones.ESTAACTIVO);
		elementesta_activo.appendChild(document.createTextNode(caja.getesta_activo().toString().trim()));
		element.appendChild(elementesta_activo);

		Element elementdescripcion = document.createElement(CajaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(caja.getdescripcion().trim()));
		element.appendChild(elementdescripcion);

		Element elementsecuencial_factura = document.createElement(CajaConstantesFunciones.SECUENCIALFACTURA);
		elementsecuencial_factura.appendChild(document.createTextNode(caja.getsecuencial_factura().toString().trim()));
		element.appendChild(elementsecuencial_factura);

		Element elementsecuencial_factura_formato = document.createElement(CajaConstantesFunciones.SECUENCIALFACTURAFORMATO);
		elementsecuencial_factura_formato.appendChild(document.createTextNode(caja.getsecuencial_factura_formato().trim()));
		element.appendChild(elementsecuencial_factura_formato);

		Element elementsecuencial_nota_venta = document.createElement(CajaConstantesFunciones.SECUENCIALNOTAVENTA);
		elementsecuencial_nota_venta.appendChild(document.createTextNode(caja.getsecuencial_nota_venta().toString().trim()));
		element.appendChild(elementsecuencial_nota_venta);

		Element elementsecuencial_nota_venta_formato = document.createElement(CajaConstantesFunciones.SECUENCIALNOTAVENTAFORMATO);
		elementsecuencial_nota_venta_formato.appendChild(document.createTextNode(caja.getsecuencial_nota_venta_formato().trim()));
		element.appendChild(elementsecuencial_nota_venta_formato);

		Element elementsecuencia_nota_credito = document.createElement(CajaConstantesFunciones.SECUENCIANOTACREDITO);
		elementsecuencia_nota_credito.appendChild(document.createTextNode(caja.getsecuencia_nota_credito().toString().trim()));
		element.appendChild(elementsecuencia_nota_credito);

		Element elementsecuencia_nota_credito_formato = document.createElement(CajaConstantesFunciones.SECUENCIANOTACREDITOFORMATO);
		elementsecuencia_nota_credito_formato.appendChild(document.createTextNode(caja.getsecuencia_nota_credito_formato().trim()));
		element.appendChild(elementsecuencia_nota_credito_formato);

		Element elementautorizacion_factura = document.createElement(CajaConstantesFunciones.AUTORIZACIONFACTURA);
		elementautorizacion_factura.appendChild(document.createTextNode(caja.getautorizacion_factura().trim()));
		element.appendChild(elementautorizacion_factura);

		Element elementautorizacion_nota_venta = document.createElement(CajaConstantesFunciones.AUTORIZACIONNOTAVENTA);
		elementautorizacion_nota_venta.appendChild(document.createTextNode(caja.getautorizacion_nota_venta().trim()));
		element.appendChild(elementautorizacion_nota_venta);

		Element elementautorizacion_nota_credito = document.createElement(CajaConstantesFunciones.AUTORIZACIONNOTACREDITO);
		elementautorizacion_nota_credito.appendChild(document.createTextNode(caja.getautorizacion_nota_credito().trim()));
		element.appendChild(elementautorizacion_nota_credito);

		Element elementfecha_caduca_factura = document.createElement(CajaConstantesFunciones.FECHACADUCAFACTURA);
		elementfecha_caduca_factura.appendChild(document.createTextNode(caja.getfecha_caduca_factura().toString().trim()));
		element.appendChild(elementfecha_caduca_factura);

		Element elementfecha_caduca_nota_venta = document.createElement(CajaConstantesFunciones.FECHACADUCANOTAVENTA);
		elementfecha_caduca_nota_venta.appendChild(document.createTextNode(caja.getfecha_caduca_nota_venta().toString().trim()));
		element.appendChild(elementfecha_caduca_nota_venta);

		Element elementfecha_caduca_nota_credito = document.createElement(CajaConstantesFunciones.FECHACADUCANOTACREDITO);
		elementfecha_caduca_nota_credito.appendChild(document.createTextNode(caja.getfecha_caduca_nota_credito().toString().trim()));
		element.appendChild(elementfecha_caduca_nota_credito);

		Element elementserie_factura = document.createElement(CajaConstantesFunciones.SERIEFACTURA);
		elementserie_factura.appendChild(document.createTextNode(caja.getserie_factura().trim()));
		element.appendChild(elementserie_factura);

		Element elementserie_nota_venta = document.createElement(CajaConstantesFunciones.SERIENOTAVENTA);
		elementserie_nota_venta.appendChild(document.createTextNode(caja.getserie_nota_venta().trim()));
		element.appendChild(elementserie_nota_venta);

		Element elementserie_nota_credito = document.createElement(CajaConstantesFunciones.SERIENOTACREDITO);
		elementserie_nota_credito.appendChild(document.createTextNode(caja.getserie_nota_credito().trim()));
		element.appendChild(elementserie_nota_credito);

		Element elementsec_inicial_factura = document.createElement(CajaConstantesFunciones.SECINICIALFACTURA);
		elementsec_inicial_factura.appendChild(document.createTextNode(caja.getsec_inicial_factura().trim()));
		element.appendChild(elementsec_inicial_factura);

		Element elementsec_inicial_nota_venta = document.createElement(CajaConstantesFunciones.SECINICIALNOTAVENTA);
		elementsec_inicial_nota_venta.appendChild(document.createTextNode(caja.getsec_inicial_nota_venta().trim()));
		element.appendChild(elementsec_inicial_nota_venta);

		Element elementsec_inicial_nota_credito = document.createElement(CajaConstantesFunciones.SECINICIALNOTACREDITO);
		elementsec_inicial_nota_credito.appendChild(document.createTextNode(caja.getsec_inicial_nota_credito().trim()));
		element.appendChild(elementsec_inicial_nota_credito);

		Element elementsec_final_factura = document.createElement(CajaConstantesFunciones.SECFINALFACTURA);
		elementsec_final_factura.appendChild(document.createTextNode(caja.getsec_final_factura().trim()));
		element.appendChild(elementsec_final_factura);

		Element elementsec_final_nota_venta = document.createElement(CajaConstantesFunciones.SECFINALNOTAVENTA);
		elementsec_final_nota_venta.appendChild(document.createTextNode(caja.getsec_final_nota_venta().trim()));
		element.appendChild(elementsec_final_nota_venta);

		Element elementsec_final_nota_credito = document.createElement(CajaConstantesFunciones.SECFINALNOTACREDITO);
		elementsec_final_nota_credito.appendChild(document.createTextNode(caja.getsec_final_nota_credito().trim()));
		element.appendChild(elementsec_final_nota_credito);

		Element elementpais_descripcion = document.createElement(CajaConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(caja.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementciudad_descripcion = document.createElement(CajaConstantesFunciones.IDCIUDAD);
		elementciudad_descripcion.appendChild(document.createTextNode(caja.getciudad_descripcion()));
		element.appendChild(elementciudad_descripcion);

		Element elementzona_descripcion = document.createElement(CajaConstantesFunciones.IDZONA);
		elementzona_descripcion.appendChild(document.createTextNode(caja.getzona_descripcion()));
		element.appendChild(elementzona_descripcion);
	}
	
	public void generarReporteGroupGenericoCajasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<Caja> cajasSeleccionados=new ArrayList<Caja>();
		
		cajasSeleccionados=this.getCajasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoCaja(cajasSeleccionados);
		
		this.generarReporteCajas("Todos",cajasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoCaja(ArrayList<Caja> cajasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(Caja cajaAux:cajasSeleccionados) {
				cajaAux.setsDetalleGeneralEntityReporte(cajaAux.toString());
			
				if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBRE)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getnombre());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREEQUIPO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getnombre_equipo());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_NOMBREIMPRESORA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getnombre_impresora());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_pedido().toString());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALPEDIDOFORMATO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_pedido_formato());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_PUNTOEMISION)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getpunto_emision());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTABLECIMIENTO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getestablecimiento());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAINICIO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(cajaAux.getfecha_inicio()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHAFINAL)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(cajaAux.getfecha_final()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_ESTAACTIVO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getDescripcionBoolean(cajaAux.getesta_activo()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getdescripcion());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_factura().toString());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALFACTURAFORMATO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_factura_formato());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_nota_venta().toString());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIALNOTAVENTAFORMATO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencial_nota_venta_formato());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencia_nota_credito().toString());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECUENCIANOTACREDITOFORMATO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsecuencia_nota_credito_formato());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getautorizacion_factura());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getautorizacion_nota_venta());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_AUTORIZACIONNOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getautorizacion_nota_credito());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCAFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(cajaAux.getfecha_caduca_factura()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(cajaAux.getfecha_caduca_nota_venta()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_FECHACADUCANOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(cajaAux.getfecha_caduca_nota_credito()));
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIEFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getserie_factura());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getserie_nota_venta());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SERIENOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getserie_nota_credito());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_inicial_factura());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_inicial_nota_venta());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECINICIALNOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_inicial_nota_credito());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALFACTURA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_final_factura());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTAVENTA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_final_nota_venta());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_SECFINALNOTACREDITO)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getsec_final_nota_credito());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_IDCIUDAD)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getciudad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(CajaConstantesFunciones.LABEL_IDZONA)) {
					existe=true;
					cajaAux.setsDescripcionGeneralEntityReporte1(cajaAux.getzona_descripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,CajaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesCaja(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoCaja=true;
				this.isVisibilidadCeldaNuevoRelacionesCaja=true;
				this.isVisibilidadCeldaGuardarCambiosCaja=true;
			}
			
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=true;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=true;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=true;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=true;
			this.isVisibilidadCeldaEliminarCaja=true;
			this.isVisibilidadCeldaCancelarCaja=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=true;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=true;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=false;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoCaja=true;
			this.isVisibilidadCeldaNuevoRelacionesCaja=true;
			this.isVisibilidadCeldaGuardarCambiosCaja=true;
			this.isVisibilidadCeldaModificarCaja=false;
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=true;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=false;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
			this.isVisibilidadCeldaModificarCaja=true;
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
			this.isVisibilidadCeldaCancelarCaja=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarCaja=false;
				} else {
					this.isVisibilidadCeldaGuardarCaja=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(CajaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoCaja=true;
			this.isVisibilidadCeldaNuevoRelacionesCaja=true;
			this.isVisibilidadCeldaGuardarCambiosCaja=true;
		} else {
			this.actualizarEstadoPanelsCaja(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarCaja=false;
			//this.isVisibilidadCeldaVerFormCaja=false;
			this.isVisibilidadCeldaDuplicarCaja=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!cajaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
		} else {
			this.isVisibilidadCeldaNuevoCaja=false;
			this.isVisibilidadCeldaGuardarCambiosCaja=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(cajaSessionBean.getEsGuardarRelacionado()) {
			if(!cajaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesCaja=false;												
			}
			
			this.jButtonCerrarCaja.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesCaja=false;
		}
		
		if(!this.permiteMantenimiento(this.caja)) {
			this.isVisibilidadCeldaActualizarCaja=false;
			this.isVisibilidadCeldaEliminarCaja=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesCaja() {
		this.isVisibilidadCeldaNuevoCaja=false;
		this.isVisibilidadCeldaGuardarCambiosCaja=false;
	}
	
	public void actualizarEstadoPanelsCaja(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(true);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(false);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(false);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(false);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(true);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(true);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionCaja!=null) {
				this.jScrollPanelDatosEdicionCaja.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosCaja!=null) {
				this.jScrollPanelDatosCaja.setVisible(true);
			}
			
			if(this.jPanelPaginacionCaja!=null) {
				this.jPanelPaginacionCaja.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.cajaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasCaja!=null) {
					this.jTabbedPaneBusquedasCaja.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.cajaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasCaja!=null) {
				this.jTabbedPaneBusquedasCaja.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesCaja!=null) {
				this.jPanelParametrosReportesCaja.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCiudad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdCiudadCaja);}

			this.isVisibilidadFK_IdPais=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdPaisCaja);}

			this.isVisibilidadFK_IdZona=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdZonaCaja);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCiudad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdCiudadCaja);}

			this.isVisibilidadFK_IdPais=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdPaisCaja);}

			this.isVisibilidadFK_IdZona=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdZonaCaja);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadFK_IdCiudad=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdCiudadCaja);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdPaisCaja);}

			this.isVisibilidadFK_IdZona=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdZonaCaja);}
		}
		
	}

	public void setVisibilidadBusquedasParaCiudad(Boolean isParaCiudad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCiudadNegation=!isParaCiudad;

			this.isVisibilidadFK_IdCiudad=isParaCiudad;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdCiudadCaja);}

			this.isVisibilidadFK_IdPais=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdPaisCaja);}

			this.isVisibilidadFK_IdZona=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdZonaCaja);}
		}
		
	}

	public void setVisibilidadBusquedasParaZona(Boolean isParaZona){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaZonaNegation=!isParaZona;

			this.isVisibilidadFK_IdCiudad=isParaZonaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdCiudadCaja);}

			this.isVisibilidadFK_IdPais=isParaZonaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdPaisCaja);}

			this.isVisibilidadFK_IdZona=isParaZona;
			if(!this.isVisibilidadFK_IdZona) {this.jTabbedPaneBusquedasCaja.remove(jPanelFK_IdZonaCaja);}
		}
		
	}
	
	

	public String registrarSesionCajaParaNotaCreditoPuntoVentas() throws Exception {
		Boolean isPaginaPopupNotaCreditoPuntoVenta=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean=new NotaCreditoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+NotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeNotaCreditoPuntoVenta(true);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeNotaCreditoPuntoVenta(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.notacreditopuntoventaSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaCajaCierres() throws Exception {
		Boolean isPaginaPopupCajaCierre=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.cajacierreSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.cajacierreSessionBean=new CajaCierreSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CajaCierreConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCajaCierre=this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCajaCierre(true);
			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCajaCierre(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.cajacierreSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaFacturaPuntoVentas() throws Exception {
		Boolean isPaginaPopupFacturaPuntoVenta=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupFacturaPuntoVenta=this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFacturaPuntoVenta(true);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFacturaPuntoVenta(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.facturapuntoventaSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaCajaEgresos() throws Exception {
		Boolean isPaginaPopupCajaEgreso=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean=new CajaEgresoSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CajaEgresoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCajaEgreso=this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCajaEgreso(true);
			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCajaEgreso(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.cajaegresoSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaCajeroTurnos() throws Exception {
		Boolean isPaginaPopupCajeroTurno=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean=new CajeroTurnoSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CajeroTurnoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCajeroTurno=this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCajeroTurno(true);
			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCajeroTurno(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.cajeroturnoSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaPresupuestoVentasPunVenes() throws Exception {
		Boolean isPaginaPopupPresupuestoVentasPunVen=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean=new PresupuestoVentasPunVenSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PresupuestoVentasPunVenConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPresupuestoVentasPunVen=this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePresupuestoVentasPunVen(true);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePresupuestoVentasPunVen(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.presupuestoventaspunvenSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaPedidoPuntoVentas() throws Exception {
		Boolean isPaginaPopupPedidoPuntoVenta=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupPedidoPuntoVenta=this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdePedidoPuntoVenta(true);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdePedidoPuntoVenta(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.pedidopuntoventaSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionCajaParaCajaIngresos() throws Exception {
		Boolean isPaginaPopupCajaIngreso=false;

		try {

			if(this.cajaSessionBean==null) {
				this.cajaSessionBean=new CajaSessionBean();
			}

			if(this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean==null) {
				this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean=new CajaIngresoSessionBean();
			}

			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setsPathNavegacionActual(cajaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+CajaIngresoConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupCajaIngreso=this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCajaIngreso(true);
			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCajaIngreso(CajaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setisBusquedaDesdeForeignKeySesionCaja(true);
			this.jInternalFrameDetalleFormCaja.cajaingresoSessionBean.setlidCajaActual(this.idCajaActual);

			cajaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyCaja(true);
			cajaSessionBean.setlIdCajaActualForeignKey(this.idCajaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//CajaSessionBean cajaSessionBean=new CajaSessionBean();
		
		if(this.cajaSessionBean==null) {
			this.cajaSessionBean=new CajaSessionBean();
		}
		
		this.cajaSessionBean.setsUltimaBusquedaCaja(this.getsAccionBusqueda());
		this.cajaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.cajaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
			cajaSessionBean.setid_ciudad(this.getid_ciudadFK_IdCiudad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			cajaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			cajaSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			cajaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdZona")) {
			cajaSessionBean.setid_zona(this.getid_zonaFK_IdZona());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//CajaSessionBean cajaSessionBean=new CajaSessionBean();
		
		if(this.cajaSessionBean==null) {
			this.cajaSessionBean=new CajaSessionBean();
		}
		
		if(this.cajaSessionBean.getsUltimaBusquedaCaja()!=null&&!this.cajaSessionBean.getsUltimaBusquedaCaja().equals("")) {
			this.setsAccionBusqueda(cajaSessionBean.getsUltimaBusquedaCaja());
			this.setiNumeroPaginacion(cajaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(cajaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
				this.setid_ciudadFK_IdCiudad(cajaSessionBean.getid_ciudad());
				cajaSessionBean.setid_ciudad(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(cajaSessionBean.getid_empresa());
				cajaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(cajaSessionBean.getid_pais());
				cajaSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(cajaSessionBean.getid_sucursal());
				cajaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdZona")) {
				this.setid_zonaFK_IdZona(cajaSessionBean.getid_zona());
				cajaSessionBean.setid_zona(-1L);
			}
		}
		
		this.cajaSessionBean.setsUltimaBusquedaCaja("");
		this.cajaSessionBean.setiNumeroPaginacion(CajaConstantesFunciones.INUMEROPAGINACION);
		this.cajaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaCaja(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioCaja() {
		this.updateBorderResaltarBusquedasFormularioCaja();
		this.updateVisibilidadBusquedasFormularioCaja();
		this.updateHabilitarBusquedasFormularioCaja();
	}
	
	public void updateBorderResaltarBusquedasFormularioCaja() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasCaja.getComponents().length>0) {
	

		if(this.cajaConstantesFunciones.resaltarFK_IdCiudadCaja!=null) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdCiudadCaja);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdCiudadCaja);
			}
		}

		if(this.cajaConstantesFunciones.resaltarFK_IdPaisCaja!=null) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdPaisCaja);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdPaisCaja);
			}
		}

		if(this.cajaConstantesFunciones.resaltarFK_IdZonaCaja!=null) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdZonaCaja);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdZonaCaja);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioCaja() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasCaja.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdCiudadCaja);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cajaConstantesFunciones.mostrarFK_IdCiudadCaja);
			if(!this.cajaConstantesFunciones.mostrarFK_IdCiudadCaja && index>-1) {
				this.jTabbedPaneBusquedasCaja.remove(index);
			}

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdPaisCaja);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cajaConstantesFunciones.mostrarFK_IdPaisCaja);
			if(!this.cajaConstantesFunciones.mostrarFK_IdPaisCaja && index>-1) {
				this.jTabbedPaneBusquedasCaja.remove(index);
			}

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdZonaCaja);
			jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.cajaConstantesFunciones.mostrarFK_IdZonaCaja);
			if(!this.cajaConstantesFunciones.mostrarFK_IdZonaCaja && index>-1) {
				this.jTabbedPaneBusquedasCaja.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioCaja() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasCaja.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdCiudadCaja);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cajaConstantesFunciones.activarFK_IdCiudadCaja);
				this.jTabbedPaneBusquedasCaja.setEnabledAt(index,this.cajaConstantesFunciones.activarFK_IdCiudadCaja);
			}

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdPaisCaja);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cajaConstantesFunciones.activarFK_IdPaisCaja);
				this.jTabbedPaneBusquedasCaja.setEnabledAt(index,this.cajaConstantesFunciones.activarFK_IdPaisCaja);
			}

			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdZonaCaja);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.cajaConstantesFunciones.activarFK_IdZonaCaja);
				this.jTabbedPaneBusquedasCaja.setEnabledAt(index,this.cajaConstantesFunciones.activarFK_IdZonaCaja);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaCaja(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCiudad")) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdCiudadCaja);

			this.jTabbedPaneBusquedasCaja.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);

			this.cajaConstantesFunciones.setResaltarFK_IdCiudadCaja(resaltar);

			jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdCiudadCaja);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdPaisCaja);

			this.jTabbedPaneBusquedasCaja.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);

			this.cajaConstantesFunciones.setResaltarFK_IdPaisCaja(resaltar);

			jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdPaisCaja);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdZona")) {
			index= this.jTabbedPaneBusquedasCaja.indexOfComponent(this.jPanelFK_IdZonaCaja);

			this.jTabbedPaneBusquedasCaja.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasCaja.getComponent(index);

			this.cajaConstantesFunciones.setResaltarFK_IdZonaCaja(resaltar);

			jPanel.setBorder(this.cajaConstantesFunciones.resaltarFK_IdZonaCaja);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarCaja.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioCaja() throws Exception {

		if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioCaja();
		this.updateVisibilidadResaltarControlesFormularioCaja();
		this.updateHabilitarResaltarControlesFormularioCaja();
		
	}
	
	public void updateBorderResaltarControlesFormularioCaja() throws Exception {
		if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.cajaConstantesFunciones.resaltaridCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jLabelidCaja.setBorder(this.cajaConstantesFunciones.resaltaridCaja);}
		if(this.cajaConstantesFunciones.resaltarid_empresaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setBorder(this.cajaConstantesFunciones.resaltarid_empresaCaja);}
		if(this.cajaConstantesFunciones.resaltarid_sucursalCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setBorder(this.cajaConstantesFunciones.resaltarid_sucursalCaja);}
		if(this.cajaConstantesFunciones.resaltarnombreCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setBorder(this.cajaConstantesFunciones.resaltarnombreCaja);}
		if(this.cajaConstantesFunciones.resaltarnombre_equipoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setBorder(this.cajaConstantesFunciones.resaltarnombre_equipoCaja);}
		if(this.cajaConstantesFunciones.resaltarnombre_impresoraCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setBorder(this.cajaConstantesFunciones.resaltarnombre_impresoraCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_pedidoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_pedidoCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_pedido_formatoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_pedido_formatoCaja);}
		if(this.cajaConstantesFunciones.resaltarpunto_emisionCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setBorder(this.cajaConstantesFunciones.resaltarpunto_emisionCaja);}
		if(this.cajaConstantesFunciones.resaltarestablecimientoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setBorder(this.cajaConstantesFunciones.resaltarestablecimientoCaja);}
		if(this.cajaConstantesFunciones.resaltarfecha_inicioCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setBorder(this.cajaConstantesFunciones.resaltarfecha_inicioCaja);}
		if(this.cajaConstantesFunciones.resaltarfecha_finalCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setBorder(this.cajaConstantesFunciones.resaltarfecha_finalCaja);}
		if(this.cajaConstantesFunciones.resaltaresta_activoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setBorderPainted(true);this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setBorder(this.cajaConstantesFunciones.resaltaresta_activoCaja);}
		if(this.cajaConstantesFunciones.resaltardescripcionCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setBorder(this.cajaConstantesFunciones.resaltardescripcionCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_factura_formatoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_factura_formatoCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencial_nota_venta_formatoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencial_nota_venta_formatoCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencia_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencia_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarsecuencia_nota_credito_formatoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setBorder(this.cajaConstantesFunciones.resaltarsecuencia_nota_credito_formatoCaja);}
		if(this.cajaConstantesFunciones.resaltarautorizacion_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarautorizacion_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarautorizacion_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarautorizacion_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarautorizacion_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarautorizacion_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarfecha_caduca_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarfecha_caduca_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarfecha_caduca_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarserie_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarserie_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarserie_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarserie_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarserie_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarserie_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_inicial_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_inicial_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_inicial_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_inicial_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_inicial_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_inicial_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_final_facturaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_final_facturaCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_final_nota_ventaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_final_nota_ventaCaja);}
		if(this.cajaConstantesFunciones.resaltarsec_final_nota_creditoCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setBorder(this.cajaConstantesFunciones.resaltarsec_final_nota_creditoCaja);}
		if(this.cajaConstantesFunciones.resaltarid_paisCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setBorder(this.cajaConstantesFunciones.resaltarid_paisCaja);}
		if(this.cajaConstantesFunciones.resaltarid_ciudadCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setBorder(this.cajaConstantesFunciones.resaltarid_ciudadCaja);}
		if(this.cajaConstantesFunciones.resaltarid_zonaCaja!=null && this.jInternalFrameDetalleFormCaja!=null) {this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setBorder(this.cajaConstantesFunciones.resaltarid_zonaCaja);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioCaja() throws Exception {		
		if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
	
		//this.jInternalFrameDetalleFormCaja.jLabelidCaja.setVisible(this.cajaConstantesFunciones.mostraridCaja);
		this.jInternalFrameDetalleFormCaja.jPanelidCaja.setVisible(this.cajaConstantesFunciones.mostraridCaja);
		//this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setVisible(this.cajaConstantesFunciones.mostrarid_empresaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelid_empresaCaja.setVisible(this.cajaConstantesFunciones.mostrarid_empresaCaja);
		//this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setVisible(this.cajaConstantesFunciones.mostrarid_sucursalCaja);
		this.jInternalFrameDetalleFormCaja.jPanelid_sucursalCaja.setVisible(this.cajaConstantesFunciones.mostrarid_sucursalCaja);
		//this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setVisible(this.cajaConstantesFunciones.mostrarnombreCaja);
		this.jInternalFrameDetalleFormCaja.jPanelnombreCaja.setVisible(this.cajaConstantesFunciones.mostrarnombreCaja);
		//this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setVisible(this.cajaConstantesFunciones.mostrarnombre_equipoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelnombre_equipoCaja.setVisible(this.cajaConstantesFunciones.mostrarnombre_equipoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setVisible(this.cajaConstantesFunciones.mostrarnombre_impresoraCaja);
		this.jInternalFrameDetalleFormCaja.jPanelnombre_impresoraCaja.setVisible(this.cajaConstantesFunciones.mostrarnombre_impresoraCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_pedidoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_pedidoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_pedidoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_pedido_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_pedido_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_pedido_formatoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setVisible(this.cajaConstantesFunciones.mostrarpunto_emisionCaja);
		this.jInternalFrameDetalleFormCaja.jPanelpunto_emisionCaja.setVisible(this.cajaConstantesFunciones.mostrarpunto_emisionCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setVisible(this.cajaConstantesFunciones.mostrarestablecimientoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelestablecimientoCaja.setVisible(this.cajaConstantesFunciones.mostrarestablecimientoCaja);
		//this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_inicioCaja);
		this.jInternalFrameDetalleFormCaja.jPanelfecha_inicioCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_inicioCaja);
		//this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_finalCaja);
		this.jInternalFrameDetalleFormCaja.jPanelfecha_finalCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_finalCaja);
		//this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setVisible(this.cajaConstantesFunciones.mostraresta_activoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelesta_activoCaja.setVisible(this.cajaConstantesFunciones.mostraresta_activoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setVisible(this.cajaConstantesFunciones.mostrardescripcionCaja);
		this.jInternalFrameDetalleFormCaja.jPaneldescripcionCaja.setVisible(this.cajaConstantesFunciones.mostrardescripcionCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_factura_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_factura_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_factura_formatoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_nota_venta_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencial_nota_venta_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencial_nota_venta_formatoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencia_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencia_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencia_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencia_nota_credito_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsecuencia_nota_credito_formatoCaja.setVisible(this.cajaConstantesFunciones.mostrarsecuencia_nota_credito_formatoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelautorizacion_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelautorizacion_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelautorizacion_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarautorizacion_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelfecha_caduca_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelfecha_caduca_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelfecha_caduca_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarfecha_caduca_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelserie_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelserie_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelserie_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarserie_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_inicial_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_inicial_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_inicial_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_inicial_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_final_facturaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_facturaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_final_nota_ventaCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_nota_ventaCaja);
		//this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jPanelsec_final_nota_creditoCaja.setVisible(this.cajaConstantesFunciones.mostrarsec_final_nota_creditoCaja);
		//this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setVisible(this.cajaConstantesFunciones.mostrarid_paisCaja);
		this.jInternalFrameDetalleFormCaja.jPanelid_paisCaja.setVisible(this.cajaConstantesFunciones.mostrarid_paisCaja);
		//this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setVisible(this.cajaConstantesFunciones.mostrarid_ciudadCaja);
		this.jInternalFrameDetalleFormCaja.jPanelid_ciudadCaja.setVisible(this.cajaConstantesFunciones.mostrarid_ciudadCaja);
		//this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setVisible(this.cajaConstantesFunciones.mostrarid_zonaCaja);
		this.jInternalFrameDetalleFormCaja.jPanelid_zonaCaja.setVisible(this.cajaConstantesFunciones.mostrarid_zonaCaja);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioCaja() throws Exception {
		if(this.jInternalFrameDetalleFormCaja==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormCaja!=null) {
	
		this.jInternalFrameDetalleFormCaja.jLabelidCaja.setEnabled(this.cajaConstantesFunciones.activaridCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_empresaCaja.setEnabled(this.cajaConstantesFunciones.activarid_empresaCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_sucursalCaja.setEnabled(this.cajaConstantesFunciones.activarid_sucursalCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreanombreCaja.setEnabled(this.cajaConstantesFunciones.activarnombreCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreanombre_equipoCaja.setEnabled(this.cajaConstantesFunciones.activarnombre_equipoCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreanombre_impresoraCaja.setEnabled(this.cajaConstantesFunciones.activarnombre_impresoraCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedidoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_pedidoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_pedido_formatoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_pedido_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldpunto_emisionCaja.setEnabled(this.cajaConstantesFunciones.activarpunto_emisionCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldestablecimientoCaja.setEnabled(this.cajaConstantesFunciones.activarestablecimientoCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_inicioCaja.setEnabled(this.cajaConstantesFunciones.activarfecha_inicioCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_finalCaja.setEnabled(this.cajaConstantesFunciones.activarfecha_finalCaja);
		this.jInternalFrameDetalleFormCaja.jCheckBoxesta_activoCaja.setEnabled(this.cajaConstantesFunciones.activaresta_activoCaja);
		this.jInternalFrameDetalleFormCaja.jTextAreadescripcionCaja.setEnabled(this.cajaConstantesFunciones.activardescripcionCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_factura_formatoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_factura_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencial_nota_venta_formatoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencial_nota_venta_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencia_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsecuencia_nota_credito_formatoCaja.setEnabled(this.cajaConstantesFunciones.activarsecuencia_nota_credito_formatoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarautorizacion_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarautorizacion_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldautorizacion_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarautorizacion_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarfecha_caduca_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarfecha_caduca_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jDateChooserfecha_caduca_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarfecha_caduca_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarserie_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarserie_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldserie_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarserie_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarsec_inicial_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarsec_inicial_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_inicial_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarsec_inicial_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_facturaCaja.setEnabled(this.cajaConstantesFunciones.activarsec_final_facturaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_ventaCaja.setEnabled(this.cajaConstantesFunciones.activarsec_final_nota_ventaCaja);
		this.jInternalFrameDetalleFormCaja.jTextFieldsec_final_nota_creditoCaja.setEnabled(this.cajaConstantesFunciones.activarsec_final_nota_creditoCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_paisCaja.setEnabled(this.cajaConstantesFunciones.activarid_paisCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_ciudadCaja.setEnabled(this.cajaConstantesFunciones.activarid_ciudadCaja);
		this.jInternalFrameDetalleFormCaja.jComboBoxid_zonaCaja.setEnabled(this.cajaConstantesFunciones.activarid_zonaCaja);
		}
	}
	
		
}