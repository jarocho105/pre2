/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;


import java.sql.Time;


import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.PedidoPuntoVentaConstantesFunciones;
import com.bydan.erp.puntoventa.util.PedidoPuntoVentaParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.PedidoPuntoVentaParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.PedidoPuntoVentaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class PedidoPuntoVentaBeanSwingJInternalFrame extends PedidoPuntoVentaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(PedidoPuntoVentaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<PedidoPuntoVenta> pedidopuntoventaValidator = new ClassValidator<PedidoPuntoVenta>(PedidoPuntoVenta.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public PedidoPuntoVenta pedidopuntoventa;	
	public PedidoPuntoVenta pedidopuntoventaAux;
	public PedidoPuntoVenta pedidopuntoventaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public PedidoPuntoVenta pedidopuntoventaTotales;
	public Long idPedidoPuntoVentaActual;
	public Long iIdNuevoPedidoPuntoVenta=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboCaja="";

	public List<Caja> cajasForeignKey;

	public List<Caja> getcajasForeignKey() {
		return cajasForeignKey;
	}

	public void setcajasForeignKey(List<Caja> cajasForeignKey) {
		this.cajasForeignKey = cajasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Caja cajaForeignKey;

	public Caja getcajaForeignKey() {
		return cajaForeignKey;
	}

	public void setcajaForeignKey(Caja cajaForeignKey) {
		this.cajaForeignKey = cajaForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboMesa="";

	public List<Mesa> mesasForeignKey;

	public List<Mesa> getmesasForeignKey() {
		return mesasForeignKey;
	}

	public void setmesasForeignKey(List<Mesa> mesasForeignKey) {
		this.mesasForeignKey = mesasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mesa mesaForeignKey;

	public Mesa getmesaForeignKey() {
		return mesaForeignKey;
	}

	public void setmesaForeignKey(Mesa mesaForeignKey) {
		this.mesaForeignKey = mesaForeignKey;
	}

	public String sFinalQueryComboEstadoPedidoPuntoVenta="";

	public List<EstadoPedidoPuntoVenta> estadopedidopuntoventasForeignKey;

	public List<EstadoPedidoPuntoVenta> getestadopedidopuntoventasForeignKey() {
		return estadopedidopuntoventasForeignKey;
	}

	public void setestadopedidopuntoventasForeignKey(List<EstadoPedidoPuntoVenta> estadopedidopuntoventasForeignKey) {
		this.estadopedidopuntoventasForeignKey = estadopedidopuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoPedidoPuntoVenta estadopedidopuntoventaForeignKey;

	public EstadoPedidoPuntoVenta getestadopedidopuntoventaForeignKey() {
		return estadopedidopuntoventaForeignKey;
	}

	public void setestadopedidopuntoventaForeignKey(EstadoPedidoPuntoVenta estadopedidopuntoventaForeignKey) {
		this.estadopedidopuntoventaForeignKey = estadopedidopuntoventaForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	
	

	public Boolean isTienePermisosDetallePedidoPuntoVenta=false;

	public Boolean getIsTienePermisosDetallePedidoPuntoVenta() {
		return isTienePermisosDetallePedidoPuntoVenta;
	}

	public void setIsTienePermisosDetallePedidoPuntoVenta(Boolean isTienePermisosDetallePedidoPuntoVenta) {
		this.isTienePermisosDetallePedidoPuntoVenta= isTienePermisosDetallePedidoPuntoVenta;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoPedidoPuntoVenta;
	public Boolean isPermisoNuevoPedidoPuntoVenta;
	public Boolean isPermisoActualizarPedidoPuntoVenta;
	public Boolean isPermisoActualizarOriginalPedidoPuntoVenta;
	public Boolean isPermisoEliminarPedidoPuntoVenta;
	public Boolean isPermisoGuardarCambiosPedidoPuntoVenta;
	public Boolean isPermisoConsultaPedidoPuntoVenta;
	public Boolean isPermisoBusquedaPedidoPuntoVenta;
	public Boolean isPermisoReportePedidoPuntoVenta;
	public Boolean isPermisoPaginacionMedioPedidoPuntoVenta;
	public Boolean isPermisoPaginacionAltoPedidoPuntoVenta;
	public Boolean isPermisoPaginacionTodoPedidoPuntoVenta;
	public Boolean isPermisoCopiarPedidoPuntoVenta;
	public Boolean isPermisoVerFormPedidoPuntoVenta;
	public Boolean isPermisoDuplicarPedidoPuntoVenta;
	public Boolean isPermisoOrdenPedidoPuntoVenta;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaReturnGeneral;
	public PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaParameterGeneral;
	
	

	public DetallePedidoPuntoVentaLogic detallepedidopuntoventaLogic=null;

	public DetallePedidoPuntoVentaLogic getDetallePedidoPuntoVentaLogic() {
		return detallepedidopuntoventaLogic;
	}

	public void setDetallePedidoPuntoVentaLogic(DetallePedidoPuntoVentaLogic detallepedidopuntoventaLogic) {
		this.detallepedidopuntoventaLogic = detallepedidopuntoventaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoPedidoPuntoVenta=false;
	public Boolean esParaAccionDesdeFormularioPedidoPuntoVenta=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected PedidoPuntoVentaSessionBeanAdditional pedidopuntoventaSessionBeanAdditional=null;
	
	public PedidoPuntoVentaSessionBeanAdditional getPedidoPuntoVentaSessionBeanAdditional() {
		return this.pedidopuntoventaSessionBeanAdditional;
	}
	
	public void setPedidoPuntoVentaSessionBeanAdditional(PedidoPuntoVentaSessionBeanAdditional pedidopuntoventaSessionBeanAdditional) {
		try {
			this.pedidopuntoventaSessionBeanAdditional=pedidopuntoventaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected PedidoPuntoVentaBeanSwingJInternalFrameAdditional pedidopuntoventaBeanSwingJInternalFrameAdditional=null;
	//public class PedidoPuntoVentaBeanSwingJInternalFrame
	
	public PedidoPuntoVentaBeanSwingJInternalFrameAdditional getPedidoPuntoVentaBeanSwingJInternalFrameAdditional() {
		return this.pedidopuntoventaBeanSwingJInternalFrameAdditional;
	}
	
	public void setPedidoPuntoVentaBeanSwingJInternalFrameAdditional(PedidoPuntoVentaBeanSwingJInternalFrameAdditional pedidopuntoventaBeanSwingJInternalFrameAdditional) {
		try {
			this.pedidopuntoventaBeanSwingJInternalFrameAdditional=pedidopuntoventaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public PedidoPuntoVentaLogic pedidopuntoventaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public PedidoPuntoVenta pedidopuntoventaBean;
	public PedidoPuntoVentaConstantesFunciones pedidopuntoventaConstantesFunciones;
	//public PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public UsuarioLogic usuarioLogic;
	public VendedorLogic vendedorLogic;
	public CajaLogic cajaLogic;
	public ClienteLogic clienteLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public MesaLogic mesaLogic;
	public EstadoPedidoPuntoVentaLogic estadopedidopuntoventaLogic;
	
	//PARAMETROS
	
	
	//public List<PedidoPuntoVenta> pedidopuntoventas;	
	//public List<PedidoPuntoVenta> pedidopuntoventasEliminados;
	//public List<PedidoPuntoVenta> pedidopuntoventasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaDuplicarPedidoPuntoVenta=true;
	public Boolean isVisibilidadCeldaCopiarPedidoPuntoVenta=true;
	public Boolean isVisibilidadCeldaVerFormPedidoPuntoVenta=true;
	public Boolean isVisibilidadCeldaOrdenPedidoPuntoVenta=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaModificarPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaCancelarPedidoPuntoVenta=false;
	public Boolean isVisibilidadCeldaGuardarPedidoPuntoVenta=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;	
	
	
	public Boolean isVisibilidadFK_IdCaja=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoPedidoPuntoVenta=false;
	public Boolean isVisibilidadFK_IdMesa=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoPedidoPuntoVenta() {
		return this.iIdNuevoPedidoPuntoVenta;
	}

	public void setiIdNuevoPedidoPuntoVenta(Long iIdNuevoPedidoPuntoVenta) {
		this.iIdNuevoPedidoPuntoVenta = iIdNuevoPedidoPuntoVenta;
	}
	
	public Long getidPedidoPuntoVentaActual() {
		return this.idPedidoPuntoVentaActual;
	}

	public void setidPedidoPuntoVentaActual(Long idPedidoPuntoVentaActual) {
		this.idPedidoPuntoVentaActual = idPedidoPuntoVentaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public PedidoPuntoVenta getpedidopuntoventa() {
		return this.pedidopuntoventa;
	}

	public void setpedidopuntoventa(PedidoPuntoVenta pedidopuntoventa) {
		this.pedidopuntoventa = pedidopuntoventa;
	}
	
	public PedidoPuntoVenta getpedidopuntoventaAux() {
		return this.pedidopuntoventaAux;
	}

	public void setpedidopuntoventaAux(PedidoPuntoVenta pedidopuntoventaAux) {
		this.pedidopuntoventaAux = pedidopuntoventaAux;
	}				
	
	public PedidoPuntoVenta getpedidopuntoventaAnterior() {
		return this.pedidopuntoventaAnterior;
	}

	public void setpedidopuntoventaAnterior(PedidoPuntoVenta pedidopuntoventaAnterior) {
		this.pedidopuntoventaAnterior = pedidopuntoventaAnterior;
	}	
	
	public PedidoPuntoVenta getpedidopuntoventaTotales() {
		return this.pedidopuntoventaTotales;
	}

	public void setpedidopuntoventaTotales(PedidoPuntoVenta pedidopuntoventaTotales) {
		this.pedidopuntoventaTotales = pedidopuntoventaTotales;
	}	
	
	public PedidoPuntoVenta getpedidopuntoventaBean() {
		return this.pedidopuntoventaBean;
	}

	public void setpedidopuntoventaBean(PedidoPuntoVenta pedidopuntoventaBean) {
		this.pedidopuntoventaBean = pedidopuntoventaBean;
	}	
	
	public PedidoPuntoVentaParameterReturnGeneral getpedidopuntoventaReturnGeneral() {
		return this.pedidopuntoventaReturnGeneral;
	}

	public void setpedidopuntoventaReturnGeneral(PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaReturnGeneral) {
		this.pedidopuntoventaReturnGeneral = pedidopuntoventaReturnGeneral;
	}	
	
	
	public Long id_cajaFK_IdCaja=-1L;

	public Long getid_cajaFK_IdCaja() {
		return this.id_cajaFK_IdCaja;
	}

	public void setid_cajaFK_IdCaja(Long id_cajaFK_IdCaja) {
		this.id_cajaFK_IdCaja = id_cajaFK_IdCaja;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta=-1L;

	public Long getid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta() {
		return this.id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta;
	}

	public void setid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta(Long id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta) {
		this.id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta = id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta;
	}

	public Long id_mesaFK_IdMesa=-1L;

	public Long getid_mesaFK_IdMesa() {
		return this.id_mesaFK_IdMesa;
	}

	public void setid_mesaFK_IdMesa(Long id_mesaFK_IdMesa) {
		this.id_mesaFK_IdMesa = id_mesaFK_IdMesa;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=-1L;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public PedidoPuntoVentaLogic getPedidoPuntoVentaLogic()	{		
		return pedidopuntoventaLogic;
	}

	public void setPedidoPuntoVentaLogic(PedidoPuntoVentaLogic pedidopuntoventaLogic) {
		this.pedidopuntoventaLogic = pedidopuntoventaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoPedidoPuntoVenta() {
		return isEsNuevoPedidoPuntoVenta;
	}

	public void setIsEsNuevoPedidoPuntoVenta(Boolean isEsNuevoPedidoPuntoVenta) {
		this.isEsNuevoPedidoPuntoVenta = isEsNuevoPedidoPuntoVenta;
	}

	public Boolean getEsParaAccionDesdeFormularioPedidoPuntoVenta() {
		return esParaAccionDesdeFormularioPedidoPuntoVenta;
	}
	
	public void setEsParaAccionDesdeFormularioPedidoPuntoVenta(Boolean esParaAccionDesdeFormularioPedidoPuntoVenta) {
		this.esParaAccionDesdeFormularioPedidoPuntoVenta = esParaAccionDesdeFormularioPedidoPuntoVenta;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCajasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cajasForeignKey=new ArrayList<Caja>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CajaLogic cajaLogic=new CajaLogic();

			//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

					cajaLogic.getTodosCajasWithConnection(sFinalQuery,new Pagination());

					this.cajasForeignKey=cajaLogic.getCajas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCaja(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidCajaActual());
					this.cajasForeignKey.add(cajaLogic.getCaja());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMesasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.mesasForeignKey=new ArrayList<Mesa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesaLogic mesaLogic=new MesaLogic();

			//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

					mesaLogic.getTodosMesasWithConnection(sFinalQuery,new Pagination());

					this.mesasForeignKey=mesaLogic.getMesas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMesa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesaLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidMesaActual());
					this.mesasForeignKey.add(mesaLogic.getMesa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoPedidoPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadopedidopuntoventasForeignKey=new ArrayList<EstadoPedidoPuntoVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoPedidoPuntoVentaLogic estadopedidopuntoventaLogic=new EstadoPedidoPuntoVentaLogic();

			//estadopedidopuntoventaLogic.getEstadoPedidoPuntoVentaDataAccess().setIsForForeingKeyData(true);

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPedidoPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadopedidopuntoventaLogic.getEstadoPedidoPuntoVentaDataAccess().setIsForForeingKeyData(true);

					estadopedidopuntoventaLogic.getTodosEstadoPedidoPuntoVentasWithConnection(sFinalQuery,new Pagination());

					this.estadopedidopuntoventasForeignKey=estadopedidopuntoventaLogic.getEstadoPedidoPuntoVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoPedidoPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadopedidopuntoventaLogic.getEntityWithConnection(pedidopuntoventaSessionBean.getlidEstadoPedidoPuntoVentaActual());
					this.estadopedidopuntoventasForeignKey.add(estadopedidopuntoventaLogic.getEstadoPedidoPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaPedidoPuntoVenta.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaPedidoPuntoVentaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaPedidoPuntoVentaGenerico!=null && jComboBoxid_empresaPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_empresaPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalPedidoPuntoVenta.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalPedidoPuntoVentaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalPedidoPuntoVentaGenerico!=null && jComboBoxid_sucursalPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioPedidoPuntoVenta.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioPedidoPuntoVentaGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioPedidoPuntoVentaGenerico!=null && jComboBoxid_usuarioPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_usuarioPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorPedidoPuntoVenta.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta!=null) {
						jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta!=null) {
							//jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorPedidoPuntoVentaGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorPedidoPuntoVentaGenerico!=null && jComboBoxid_vendedorPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_vendedorPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCajaForeignKey(Long idCajaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cajaTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setCaja(cajaTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setSelectedItem(cajaTemp);
					}
				} else {
					//jComboBoxid_cajaPedidoPuntoVenta.setSelectedItem(cajaTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){
					if(cajaTemp!=null && jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta!=null) {
						jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.setSelectedItem(cajaTemp);
					} else {
						if(jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta!=null) {
							//jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.setSelectedItem(cajaTemp);
							if(jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCajaForeignKeyDescripcion(Long idCajaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}


			sDescripcion=CajaConstantesFunciones.getCajaDescripcion(cajaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCajaForeignKeyGenerico(Long idCajaSeleccionado,JComboBox jComboBoxid_cajaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(cajaTemp!=null) {
				jComboBoxid_cajaPedidoPuntoVentaGenerico.setSelectedItem(cajaTemp);
			} else {
				if(jComboBoxid_cajaPedidoPuntoVentaGenerico!=null && jComboBoxid_cajaPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_cajaPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clientePedidoPuntoVenta.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClientePedidoPuntoVenta!=null) {
						jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta!=null) {
							//jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clientePedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clientePedidoPuntoVentaGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clientePedidoPuntoVentaGenerico!=null && jComboBoxid_clientePedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_clientePedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoprecioTemp!=null && jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta!=null) {
						jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.setSelectedItem(tipoprecioTemp);
					} else {
						if(jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta!=null) {
							//jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.setSelectedItem(tipoprecioTemp);
							if(jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioPedidoPuntoVentaGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioPedidoPuntoVentaGenerico!=null && jComboBoxid_tipo_precioPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesaForeignKey(Long idMesaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesaTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setMesa(mesaTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setSelectedItem(mesaTemp);
					}
				} else {
					//jComboBoxid_mesaPedidoPuntoVenta.setSelectedItem(mesaTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){
					if(mesaTemp!=null && jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta!=null) {
						jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.setSelectedItem(mesaTemp);
					} else {
						if(jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta!=null) {
							//jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.setSelectedItem(mesaTemp);
							if(jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesaForeignKeyDescripcion(Long idMesaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}


			sDescripcion=MesaConstantesFunciones.getMesaDescripcion(mesaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesaForeignKeyGenerico(Long idMesaSeleccionado,JComboBox jComboBoxid_mesaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(mesaTemp!=null) {
				jComboBoxid_mesaPedidoPuntoVentaGenerico.setSelectedItem(mesaTemp);
			} else {
				if(jComboBoxid_mesaPedidoPuntoVentaGenerico!=null && jComboBoxid_mesaPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_mesaPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoPedidoPuntoVentaForeignKey(Long idEstadoPedidoPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoPedidoPuntoVenta  estadopedidopuntoventaTemp=null;

			for(EstadoPedidoPuntoVenta estadopedidopuntoventaAux:estadopedidopuntoventasForeignKey) {
				if(estadopedidopuntoventaAux.getId()!=null && estadopedidopuntoventaAux.getId().equals(idEstadoPedidoPuntoVentaSeleccionado)) {
					estadopedidopuntoventaTemp=estadopedidopuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadopedidopuntoventaTemp!=null) {

					if(this.pedidopuntoventa!=null) {
						this.pedidopuntoventa.setEstadoPedidoPuntoVenta(estadopedidopuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventaTemp);
					}
				} else {
					//jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventaTemp);
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoPedidoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadopedidopuntoventaTemp!=null && jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta!=null) {
						jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventaTemp);
					} else {
						if(jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta!=null) {
							//jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventaTemp);
							if(jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.getItemCount()>0) {
								jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoPedidoPuntoVentaForeignKeyDescripcion(Long idEstadoPedidoPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoPedidoPuntoVenta  estadopedidopuntoventaTemp=null;

			for(EstadoPedidoPuntoVenta estadopedidopuntoventaAux:estadopedidopuntoventasForeignKey) {
				if(estadopedidopuntoventaAux.getId()!=null && estadopedidopuntoventaAux.getId().equals(idEstadoPedidoPuntoVentaSeleccionado)) {
					estadopedidopuntoventaTemp=estadopedidopuntoventaAux;
					break;
				}
			}


			sDescripcion=EstadoPedidoPuntoVentaConstantesFunciones.getEstadoPedidoPuntoVentaDescripcion(estadopedidopuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoPedidoPuntoVentaForeignKeyGenerico(Long idEstadoPedidoPuntoVentaSeleccionado,JComboBox jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoPedidoPuntoVenta  estadopedidopuntoventaTemp=null;

			for(EstadoPedidoPuntoVenta estadopedidopuntoventaAux:estadopedidopuntoventasForeignKey) {
				if(estadopedidopuntoventaAux.getId()!=null && estadopedidopuntoventaAux.getId().equals(idEstadoPedidoPuntoVentaSeleccionado)) {
					estadopedidopuntoventaTemp=estadopedidopuntoventaAux;
					break;
				}
			}

			if(estadopedidopuntoventaTemp!=null) {
				jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico.setSelectedItem(estadopedidopuntoventaTemp);
			} else {
				if(jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico!=null && jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_empresaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaPedidoPuntoVentaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				pedidopuntoventa.setid_empresa(empresaAux.getId());
				pedidopuntoventa.setempresa_descripcion(PedidoPuntoVentaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				pedidopuntoventa.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_sucursalPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalPedidoPuntoVentaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				pedidopuntoventa.setid_sucursal(sucursalAux.getId());
				pedidopuntoventa.setsucursal_descripcion(PedidoPuntoVentaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				pedidopuntoventa.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_usuarioPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioPedidoPuntoVentaGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				pedidopuntoventa.setid_usuario(usuarioAux.getId());
				pedidopuntoventa.setusuario_descripcion(PedidoPuntoVentaConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				pedidopuntoventa.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_vendedorPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorPedidoPuntoVentaGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(vendedorAux!=null && vendedorAux.getId()!=null) {
				pedidopuntoventa.setid_vendedor(vendedorAux.getId());
				pedidopuntoventa.setvendedor_descripcion(PedidoPuntoVentaConstantesFunciones.getVendedorDescripcion(vendedorAux));
				pedidopuntoventa.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCajaForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_cajaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaAux=new Caja();

			if(jComboBoxid_cajaPedidoPuntoVentaGenerico==null) {
				cajaAux=(Caja)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.getSelectedItem();
			} else {
				cajaAux=(Caja)jComboBoxid_cajaPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(cajaAux!=null && cajaAux.getId()!=null) {
				pedidopuntoventa.setid_caja(cajaAux.getId());
				pedidopuntoventa.setcaja_descripcion(PedidoPuntoVentaConstantesFunciones.getCajaDescripcion(cajaAux));
				pedidopuntoventa.setCaja(cajaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_clientePedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clientePedidoPuntoVentaGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clientePedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				pedidopuntoventa.setid_cliente(clienteAux.getId());
				pedidopuntoventa.setcliente_descripcion(PedidoPuntoVentaConstantesFunciones.getClienteDescripcion(clienteAux));
				pedidopuntoventa.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_tipo_precioPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioPedidoPuntoVentaGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				pedidopuntoventa.setid_tipo_precio(tipoprecioAux.getId());
				pedidopuntoventa.settipoprecio_descripcion(PedidoPuntoVentaConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				pedidopuntoventa.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesaForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_mesaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaAux=new Mesa();

			if(jComboBoxid_mesaPedidoPuntoVentaGenerico==null) {
				mesaAux=(Mesa)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.getSelectedItem();
			} else {
				mesaAux=(Mesa)jComboBoxid_mesaPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(mesaAux!=null && mesaAux.getId()!=null) {
				pedidopuntoventa.setid_mesa(mesaAux.getId());
				pedidopuntoventa.setmesa_descripcion(PedidoPuntoVentaConstantesFunciones.getMesaDescripcion(mesaAux));
				pedidopuntoventa.setMesa(mesaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoPedidoPuntoVentaForeignKey(PedidoPuntoVenta pedidopuntoventa,JComboBox jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoPedidoPuntoVenta  estadopedidopuntoventaAux=new EstadoPedidoPuntoVenta();

			if(jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico==null) {
				estadopedidopuntoventaAux=(EstadoPedidoPuntoVenta)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.getSelectedItem();
			} else {
				estadopedidopuntoventaAux=(EstadoPedidoPuntoVenta)jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVentaGenerico.getSelectedItem();
			}

			if(estadopedidopuntoventaAux!=null && estadopedidopuntoventaAux.getId()!=null) {
				pedidopuntoventa.setid_estado_pedido_punto_venta(estadopedidopuntoventaAux.getId());
				pedidopuntoventa.setestadopedidopuntoventa_descripcion(PedidoPuntoVentaConstantesFunciones.getEstadoPedidoPuntoVentaDescripcion(estadopedidopuntoventaAux));
				pedidopuntoventa.setEstadoPedidoPuntoVenta(estadopedidopuntoventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.addItem(vendedor);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCajasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCaja=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.addItem(caja);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.addItem(caja);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.addItem(cliente);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.addItem(tipoprecio);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMesasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMesa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.addItem(mesa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.addItem(mesa);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoPedidoPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoPedidoPuntoVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.removeAllItems();

							for(EstadoPedidoPuntoVenta estadopedidopuntoventa:this.estadopedidopuntoventasForeignKey) {
								this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.addItem(estadopedidopuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { 
					}

					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoPedidoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.removeAllItems();

							for(EstadoPedidoPuntoVenta estadopedidopuntoventa:this.estadopedidopuntoventasForeignKey) {
								this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.addItem(estadopedidopuntoventa);
							}
						}

						if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCajaForeignKey(Caja caja,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setSelectedItem(caja);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.setSelectedItem(caja);
						} else {
							this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.setSelectedItem(tipoprecio);
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesaForeignKey(Mesa mesa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setSelectedItem(mesa);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.setSelectedItem(mesa);
						} else {
							this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoPedidoPuntoVentaForeignKey(EstadoPedidoPuntoVenta estadopedidopuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.setSelectedItem(estadopedidopuntoventa);
						} else {
							this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesPedidoPuntoVenta() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			PedidoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesPedidoPuntoVenta(this.pedidopuntoventaLogic.getPedidoPuntoVentas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			PedidoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesPedidoPuntoVenta(this.pedidopuntoventas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Caja.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Mesa.class));
		classes.add(new Classe(EstadoPedidoPuntoVenta.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//pedidopuntoventaLogic.setPedidoPuntoVentas(this.pedidopuntoventas);
			pedidopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public PedidoPuntoVentaParameterReturnGeneral getPedidoPuntoVentaParameterGeneral() {
		return this.pedidopuntoventaParameterGeneral;
	}
	
	public void setPedidoPuntoVentaParameterGeneral(PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaParameterGeneral) {
		this.pedidopuntoventaParameterGeneral = pedidopuntoventaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoPedidoPuntoVenta() {
		return isPermisoTodoPedidoPuntoVenta;
	}

	public void setIsPermisoTodoPedidoPuntoVenta(Boolean isPermisoTodoPedidoPuntoVenta) {
		this.isPermisoTodoPedidoPuntoVenta = isPermisoTodoPedidoPuntoVenta;
	}

	public Boolean getIsPermisoNuevoPedidoPuntoVenta() {
		return isPermisoNuevoPedidoPuntoVenta;
	}

	public void setIsPermisoNuevoPedidoPuntoVenta(Boolean isPermisoNuevoPedidoPuntoVenta) {
		this.isPermisoNuevoPedidoPuntoVenta = isPermisoNuevoPedidoPuntoVenta;
	}

	public Boolean getIsPermisoActualizarPedidoPuntoVenta() {
		return isPermisoActualizarPedidoPuntoVenta;
	}

	public void setIsPermisoActualizarPedidoPuntoVenta(Boolean isPermisoActualizarPedidoPuntoVenta) {
		this.isPermisoActualizarPedidoPuntoVenta = isPermisoActualizarPedidoPuntoVenta;
	}

	public Boolean getIsPermisoEliminarPedidoPuntoVenta() {
		return isPermisoEliminarPedidoPuntoVenta;
	}

	public void setIsPermisoEliminarPedidoPuntoVenta(Boolean isPermisoEliminarPedidoPuntoVenta) {
		this.isPermisoEliminarPedidoPuntoVenta = isPermisoEliminarPedidoPuntoVenta;
	}

	public Boolean getIsPermisoGuardarCambiosPedidoPuntoVenta() {
		return isPermisoGuardarCambiosPedidoPuntoVenta;
	}

	public void setIsPermisoGuardarCambiosPedidoPuntoVenta(Boolean isPermisoGuardarCambiosPedidoPuntoVenta) {
		this.isPermisoGuardarCambiosPedidoPuntoVenta = isPermisoGuardarCambiosPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoConsultaPedidoPuntoVenta() {
		return isPermisoConsultaPedidoPuntoVenta;
	}

	public void setIsPermisoConsultaPedidoPuntoVenta(Boolean isPermisoConsultaPedidoPuntoVenta) {
		this.isPermisoConsultaPedidoPuntoVenta = isPermisoConsultaPedidoPuntoVenta;
	}

	public Boolean getIsPermisoBusquedaPedidoPuntoVenta() {
		return isPermisoBusquedaPedidoPuntoVenta;
	}

	public void setIsPermisoBusquedaPedidoPuntoVenta(Boolean isPermisoBusquedaPedidoPuntoVenta) {
		this.isPermisoBusquedaPedidoPuntoVenta = isPermisoBusquedaPedidoPuntoVenta;
	}

	public Boolean getIsPermisoReportePedidoPuntoVenta() {
		return isPermisoReportePedidoPuntoVenta;
	}

	public void setIsPermisoReportePedidoPuntoVenta(Boolean isPermisoReportePedidoPuntoVenta) {
		this.isPermisoReportePedidoPuntoVenta = isPermisoReportePedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionMedioPedidoPuntoVenta() {
		return isPermisoPaginacionMedioPedidoPuntoVenta;
	}

	public void setIsPermisoPaginacionMedioPedidoPuntoVenta(Boolean isPermisoPaginacionMedioPedidoPuntoVenta) {
		this.isPermisoPaginacionMedioPedidoPuntoVenta = isPermisoPaginacionMedioPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionTodoPedidoPuntoVenta() {
		return isPermisoPaginacionTodoPedidoPuntoVenta;
	}

	public void setIsPermisoPaginacionTodoPedidoPuntoVenta(Boolean isPermisoPaginacionTodoPedidoPuntoVenta) {
		this.isPermisoPaginacionTodoPedidoPuntoVenta = isPermisoPaginacionTodoPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionAltoPedidoPuntoVenta() {
		return isPermisoPaginacionAltoPedidoPuntoVenta;
	}

	public void setIsPermisoPaginacionAltoPedidoPuntoVenta(Boolean isPermisoPaginacionAltoPedidoPuntoVenta) {
		this.isPermisoPaginacionAltoPedidoPuntoVenta = isPermisoPaginacionAltoPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoCopiarPedidoPuntoVenta() {
		return isPermisoCopiarPedidoPuntoVenta;
	}

	public void setIsPermisoCopiarPedidoPuntoVenta(Boolean isPermisoCopiarPedidoPuntoVenta) {
		this.isPermisoCopiarPedidoPuntoVenta = isPermisoCopiarPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoVerFormPedidoPuntoVenta() {
		return isPermisoVerFormPedidoPuntoVenta;
	}

	public void setIsPermisoVerFormPedidoPuntoVenta(Boolean isPermisoVerFormPedidoPuntoVenta) {
		this.isPermisoVerFormPedidoPuntoVenta = isPermisoVerFormPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoDuplicarPedidoPuntoVenta() {
		return isPermisoDuplicarPedidoPuntoVenta;
	}

	public void setIsPermisoDuplicarPedidoPuntoVenta(Boolean isPermisoDuplicarPedidoPuntoVenta) {
		this.isPermisoDuplicarPedidoPuntoVenta = isPermisoDuplicarPedidoPuntoVenta;
	}
	
	public Boolean getIsPermisoOrdenPedidoPuntoVenta() {
		return isPermisoOrdenPedidoPuntoVenta;
	}

	public void setIsPermisoOrdenPedidoPuntoVenta(Boolean isPermisoOrdenPedidoPuntoVenta) {
		this.isPermisoOrdenPedidoPuntoVenta = isPermisoOrdenPedidoPuntoVenta;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoPedidoPuntoVenta() {
		return isVisibilidadCeldaNuevoPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoPedidoPuntoVenta(Boolean isVisibilidadCeldaNuevoPedidoPuntoVenta) {
		this.isVisibilidadCeldaNuevoPedidoPuntoVenta = isVisibilidadCeldaNuevoPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarPedidoPuntoVenta() {
		return isVisibilidadCeldaDuplicarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaDuplicarPedidoPuntoVenta(Boolean isVisibilidadCeldaDuplicarPedidoPuntoVenta) {
		this.isVisibilidadCeldaDuplicarPedidoPuntoVenta = isVisibilidadCeldaDuplicarPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarPedidoPuntoVenta() {
		return isVisibilidadCeldaCopiarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCopiarPedidoPuntoVenta(Boolean isVisibilidadCeldaCopiarPedidoPuntoVenta) {
		this.isVisibilidadCeldaCopiarPedidoPuntoVenta = isVisibilidadCeldaCopiarPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormPedidoPuntoVenta() {
		return isVisibilidadCeldaVerFormPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaVerFormPedidoPuntoVenta(Boolean isVisibilidadCeldaVerFormPedidoPuntoVenta) {
		this.isVisibilidadCeldaVerFormPedidoPuntoVenta = isVisibilidadCeldaVerFormPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenPedidoPuntoVenta() {
		return isVisibilidadCeldaOrdenPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaOrdenPedidoPuntoVenta(Boolean isVisibilidadCeldaOrdenPedidoPuntoVenta) {
		this.isVisibilidadCeldaOrdenPedidoPuntoVenta = isVisibilidadCeldaOrdenPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta() {
		return isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta(Boolean isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta) {
		this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta = isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaModificarPedidoPuntoVenta() {
		return isVisibilidadCeldaModificarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaModificarPedidoPuntoVenta(Boolean isVisibilidadCeldaModificarPedidoPuntoVenta) {
		this.isVisibilidadCeldaModificarPedidoPuntoVenta = isVisibilidadCeldaModificarPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarPedidoPuntoVenta() {
		return isVisibilidadCeldaActualizarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaActualizarPedidoPuntoVenta(Boolean isVisibilidadCeldaActualizarPedidoPuntoVenta) {
		this.isVisibilidadCeldaActualizarPedidoPuntoVenta = isVisibilidadCeldaActualizarPedidoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaEliminarPedidoPuntoVenta() {
		return isVisibilidadCeldaEliminarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaEliminarPedidoPuntoVenta(Boolean isVisibilidadCeldaEliminarPedidoPuntoVenta) {
		this.isVisibilidadCeldaEliminarPedidoPuntoVenta = isVisibilidadCeldaEliminarPedidoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaCancelarPedidoPuntoVenta() {
		return isVisibilidadCeldaCancelarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCancelarPedidoPuntoVenta(Boolean isVisibilidadCeldaCancelarPedidoPuntoVenta) {
		this.isVisibilidadCeldaCancelarPedidoPuntoVenta = isVisibilidadCeldaCancelarPedidoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaGuardarPedidoPuntoVenta() {
		return isVisibilidadCeldaGuardarPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarPedidoPuntoVenta(Boolean isVisibilidadCeldaGuardarPedidoPuntoVenta) {
		this.isVisibilidadCeldaGuardarPedidoPuntoVenta = isVisibilidadCeldaGuardarPedidoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosPedidoPuntoVenta() {
		return isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarCambiosPedidoPuntoVenta(Boolean isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta) {
		this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta = isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta;
	}
		
	public PedidoPuntoVentaSessionBean getpedidopuntoventaSessionBean() {
		return this.pedidopuntoventaSessionBean;
	}
	
	public void setpedidopuntoventaSessionBean(PedidoPuntoVentaSessionBean pedidopuntoventaSessionBean) {
		this.pedidopuntoventaSessionBean=pedidopuntoventaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdCaja() {
		return this.isVisibilidadFK_IdCaja;
	}

	public void setisVisibilidadFK_IdCaja(Boolean isVisibilidadFK_IdCaja) {
		this.isVisibilidadFK_IdCaja=isVisibilidadFK_IdCaja;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoPedidoPuntoVenta() {
		return this.isVisibilidadFK_IdEstadoPedidoPuntoVenta;
	}

	public void setisVisibilidadFK_IdEstadoPedidoPuntoVenta(Boolean isVisibilidadFK_IdEstadoPedidoPuntoVenta) {
		this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isVisibilidadFK_IdEstadoPedidoPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdMesa() {
		return this.isVisibilidadFK_IdMesa;
	}

	public void setisVisibilidadFK_IdMesa(Boolean isVisibilidadFK_IdMesa) {
		this.isVisibilidadFK_IdMesa=isVisibilidadFK_IdMesa;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarSucursalForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarUsuarioForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarVendedorForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarCajaForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarClienteForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarTipoPrecioForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarMesaForeignKey(pedidopuntoventa,null);
				this.setActualParaGuardarEstadoPedidoPuntoVentaForeignKey(pedidopuntoventa,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(PedidoPuntoVenta pedidopuntoventa,PedidoPuntoVenta pedidopuntoventaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalPedidoPuntoVenta(pedidopuntoventa);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		pedidopuntoventaAux.setId(pedidopuntoventa.getId());
		pedidopuntoventaAux.setVersionRow(pedidopuntoventa.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessPedidoPuntoVenta();
		
			int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = pedidopuntoventaValidator.getInvalidValues(this.pedidopuntoventa);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			pedidopuntoventaLogic.setDatosCliente(datosCliente);
			pedidopuntoventaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				pedidopuntoventaAux=new  PedidoPuntoVenta();
				
				pedidopuntoventaAux.setIsNew(true);
				pedidopuntoventaAux.setIsChanged(true);
				
				pedidopuntoventaAux.setPedidoPuntoVentaOriginal(this.pedidopuntoventa);
				
				pedidopuntoventaAux.setId(this.pedidopuntoventa.getId());	
				pedidopuntoventaAux.setVersionRow(this.pedidopuntoventa.getVersionRow());	
				pedidopuntoventaAux.setid_empresa(this.pedidopuntoventa.getid_empresa());	
				pedidopuntoventaAux.setid_sucursal(this.pedidopuntoventa.getid_sucursal());	
				pedidopuntoventaAux.setid_usuario(this.pedidopuntoventa.getid_usuario());	
				pedidopuntoventaAux.setid_vendedor(this.pedidopuntoventa.getid_vendedor());	
				pedidopuntoventaAux.setid_caja(this.pedidopuntoventa.getid_caja());	
				pedidopuntoventaAux.setid_cliente(this.pedidopuntoventa.getid_cliente());	
				pedidopuntoventaAux.setid_tipo_precio(this.pedidopuntoventa.getid_tipo_precio());	
				pedidopuntoventaAux.setid_mesa(this.pedidopuntoventa.getid_mesa());	
				pedidopuntoventaAux.setid_estado_pedido_punto_venta(this.pedidopuntoventa.getid_estado_pedido_punto_venta());	
				pedidopuntoventaAux.setnumero_secuencial(this.pedidopuntoventa.getnumero_secuencial());	
				pedidopuntoventaAux.setcodigo_cliente(this.pedidopuntoventa.getcodigo_cliente());	
				pedidopuntoventaAux.setnombre_cliente(this.pedidopuntoventa.getnombre_cliente());	
				pedidopuntoventaAux.setdireccion_cliente(this.pedidopuntoventa.getdireccion_cliente());	
				pedidopuntoventaAux.settelefono_cliente(this.pedidopuntoventa.gettelefono_cliente());	
				pedidopuntoventaAux.settarjeta_cliente(this.pedidopuntoventa.gettarjeta_cliente());	
				pedidopuntoventaAux.setfecha(this.pedidopuntoventa.getfecha());	
				pedidopuntoventaAux.sethora(this.pedidopuntoventa.gethora());	
				pedidopuntoventaAux.setsub_total(this.pedidopuntoventa.getsub_total());	
				pedidopuntoventaAux.setiva(this.pedidopuntoventa.getiva());	
				pedidopuntoventaAux.setice(this.pedidopuntoventa.getice());	
				pedidopuntoventaAux.setdescuento(this.pedidopuntoventa.getdescuento());	
				pedidopuntoventaAux.settotal(this.pedidopuntoventa.gettotal());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.savePedidoPuntoVentas();//WithConnection
						//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesPedidoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas().addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas.addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								pedidopuntoventaLogic.savePedidoPuntoVentaRelaciones(pedidopuntoventaAux,this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());//WithConnection
								//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.setDetallePedidoPuntoVentas(new ArrayList<DetallePedidoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas= new ArrayList<DetallePedidoPuntoVenta>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							pedidopuntoventaAux.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				pedidopuntoventaAux=new  PedidoPuntoVenta();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado() 
					|| (this.pedidopuntoventaSessionBean.getEsGuardarRelacionado() && this.pedidopuntoventa.getId()>=0)) {
						
					pedidopuntoventaAux.setIsNew(false);
				}
				
				pedidopuntoventaAux.setIsDeleted(false);
			
				pedidopuntoventaAux.setId(this.pedidopuntoventa.getId());	
				pedidopuntoventaAux.setVersionRow(this.pedidopuntoventa.getVersionRow());	
				pedidopuntoventaAux.setid_empresa(this.pedidopuntoventa.getid_empresa());	
				pedidopuntoventaAux.setid_sucursal(this.pedidopuntoventa.getid_sucursal());	
				pedidopuntoventaAux.setid_usuario(this.pedidopuntoventa.getid_usuario());	
				pedidopuntoventaAux.setid_vendedor(this.pedidopuntoventa.getid_vendedor());	
				pedidopuntoventaAux.setid_caja(this.pedidopuntoventa.getid_caja());	
				pedidopuntoventaAux.setid_cliente(this.pedidopuntoventa.getid_cliente());	
				pedidopuntoventaAux.setid_tipo_precio(this.pedidopuntoventa.getid_tipo_precio());	
				pedidopuntoventaAux.setid_mesa(this.pedidopuntoventa.getid_mesa());	
				pedidopuntoventaAux.setid_estado_pedido_punto_venta(this.pedidopuntoventa.getid_estado_pedido_punto_venta());	
				pedidopuntoventaAux.setnumero_secuencial(this.pedidopuntoventa.getnumero_secuencial());	
				pedidopuntoventaAux.setcodigo_cliente(this.pedidopuntoventa.getcodigo_cliente());	
				pedidopuntoventaAux.setnombre_cliente(this.pedidopuntoventa.getnombre_cliente());	
				pedidopuntoventaAux.setdireccion_cliente(this.pedidopuntoventa.getdireccion_cliente());	
				pedidopuntoventaAux.settelefono_cliente(this.pedidopuntoventa.gettelefono_cliente());	
				pedidopuntoventaAux.settarjeta_cliente(this.pedidopuntoventa.gettarjeta_cliente());	
				pedidopuntoventaAux.setfecha(this.pedidopuntoventa.getfecha());	
				pedidopuntoventaAux.sethora(this.pedidopuntoventa.gethora());	
				pedidopuntoventaAux.setsub_total(this.pedidopuntoventa.getsub_total());	
				pedidopuntoventaAux.setiva(this.pedidopuntoventa.getiva());	
				pedidopuntoventaAux.setice(this.pedidopuntoventa.getice());	
				pedidopuntoventaAux.setdescuento(this.pedidopuntoventa.getdescuento());	
				pedidopuntoventaAux.settotal(this.pedidopuntoventa.gettotal());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.savePedidoPuntoVentas();//WithConnection
						//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesPedidoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas().addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas.addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								pedidopuntoventaLogic.savePedidoPuntoVentaRelaciones(pedidopuntoventaAux,this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());//WithConnection
								//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.setDetallePedidoPuntoVentas(new ArrayList<DetallePedidoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas= new ArrayList<DetallePedidoPuntoVenta>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							pedidopuntoventaAux.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.pedidopuntoventa,pedidopuntoventaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				pedidopuntoventaAux=new  PedidoPuntoVenta();
				
				pedidopuntoventaAux.setIsNew(false);
				pedidopuntoventaAux.setIsChanged(false);
				
				pedidopuntoventaAux.setIsDeleted(true);
				
				pedidopuntoventaAux.setId(this.pedidopuntoventa.getId());	
				pedidopuntoventaAux.setVersionRow(this.pedidopuntoventa.getVersionRow());	
				pedidopuntoventaAux.setid_empresa(this.pedidopuntoventa.getid_empresa());	
				pedidopuntoventaAux.setid_sucursal(this.pedidopuntoventa.getid_sucursal());	
				pedidopuntoventaAux.setid_usuario(this.pedidopuntoventa.getid_usuario());	
				pedidopuntoventaAux.setid_vendedor(this.pedidopuntoventa.getid_vendedor());	
				pedidopuntoventaAux.setid_caja(this.pedidopuntoventa.getid_caja());	
				pedidopuntoventaAux.setid_cliente(this.pedidopuntoventa.getid_cliente());	
				pedidopuntoventaAux.setid_tipo_precio(this.pedidopuntoventa.getid_tipo_precio());	
				pedidopuntoventaAux.setid_mesa(this.pedidopuntoventa.getid_mesa());	
				pedidopuntoventaAux.setid_estado_pedido_punto_venta(this.pedidopuntoventa.getid_estado_pedido_punto_venta());	
				pedidopuntoventaAux.setnumero_secuencial(this.pedidopuntoventa.getnumero_secuencial());	
				pedidopuntoventaAux.setcodigo_cliente(this.pedidopuntoventa.getcodigo_cliente());	
				pedidopuntoventaAux.setnombre_cliente(this.pedidopuntoventa.getnombre_cliente());	
				pedidopuntoventaAux.setdireccion_cliente(this.pedidopuntoventa.getdireccion_cliente());	
				pedidopuntoventaAux.settelefono_cliente(this.pedidopuntoventa.gettelefono_cliente());	
				pedidopuntoventaAux.settarjeta_cliente(this.pedidopuntoventa.gettarjeta_cliente());	
				pedidopuntoventaAux.setfecha(this.pedidopuntoventa.getfecha());	
				pedidopuntoventaAux.sethora(this.pedidopuntoventa.gethora());	
				pedidopuntoventaAux.setsub_total(this.pedidopuntoventa.getsub_total());	
				pedidopuntoventaAux.setiva(this.pedidopuntoventa.getiva());	
				pedidopuntoventaAux.setice(this.pedidopuntoventa.getice());	
				pedidopuntoventaAux.setdescuento(this.pedidopuntoventa.getdescuento());	
				pedidopuntoventaAux.settotal(this.pedidopuntoventa.gettotal());	
				
				if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.pedidopuntoventaAux.getId()>=0) {	
						this.pedidopuntoventasEliminados.add(pedidopuntoventaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.savePedidoPuntoVentas();//WithConnection
						//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas().addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas.addAll(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								pedidopuntoventaLogic.savePedidoPuntoVentaRelaciones(pedidopuntoventaAux,this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());//WithConnection
								//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.setDetallePedidoPuntoVentas(new ArrayList<DetallePedidoPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas= new ArrayList<DetallePedidoPuntoVenta>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							pedidopuntoventaAux.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(pedidopuntoventaAux,pedidopuntoventaLogic.getPedidoPuntoVentas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(pedidopuntoventaAux,pedidopuntoventas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(this.pedidopuntoventasEliminados);
					
					pedidopuntoventaLogic.savePedidoPuntoVentas();//WithConnection
					//pedidopuntoventaLogic.getSetVersionRowPedidoPuntoVentas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesPedidoPuntoVenta();
				
				this.pedidopuntoventasEliminados= new ArrayList<PedidoPuntoVenta>();		
			}
			
			if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Pedido Punto Venta GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.pedidopuntoventa=pedidopuntoventaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessPedidoPuntoVenta();
      	}
		
	}	
	
	public void actualizarRelaciones(PedidoPuntoVenta pedidopuntoventaLocal) throws Exception {
		
		if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				pedidopuntoventaLocal.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());
			
			} else {
			
				pedidopuntoventaLocal.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventas);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(PedidoPuntoVenta pedidopuntoventaLocal) throws Exception {	
		if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				pedidopuntoventaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				pedidopuntoventaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				pedidopuntoventaLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				pedidopuntoventaLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CajaDetalleFormJInternalFrame.class)) {
				CajaBeanSwingJInternalFrame cajaBeanSwingJInternalFrameLocal=(CajaBeanSwingJInternalFrame) ((CajaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cajaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCaja(cajaBeanSwingJInternalFrameLocal.getcaja(),true);
				cajaBeanSwingJInternalFrameLocal.actualizarLista(cajaBeanSwingJInternalFrameLocal.caja,this.cajasForeignKey);

				cajaBeanSwingJInternalFrameLocal.actualizarRelaciones(cajaBeanSwingJInternalFrameLocal.caja);

				pedidopuntoventaLocal.setCaja(cajaBeanSwingJInternalFrameLocal.caja);

				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey("Formulario");
				this.setActualCajaForeignKey(cajaBeanSwingJInternalFrameLocal.caja.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				pedidopuntoventaLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				pedidopuntoventaLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesaDetalleFormJInternalFrame.class)) {
				MesaBeanSwingJInternalFrame mesaBeanSwingJInternalFrameLocal=(MesaBeanSwingJInternalFrame) ((MesaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMesa(mesaBeanSwingJInternalFrameLocal.getmesa(),true);
				mesaBeanSwingJInternalFrameLocal.actualizarLista(mesaBeanSwingJInternalFrameLocal.mesa,this.mesasForeignKey);

				mesaBeanSwingJInternalFrameLocal.actualizarRelaciones(mesaBeanSwingJInternalFrameLocal.mesa);

				pedidopuntoventaLocal.setMesa(mesaBeanSwingJInternalFrameLocal.mesa);

				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey("Formulario");
				this.setActualMesaForeignKey(mesaBeanSwingJInternalFrameLocal.mesa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoPedidoPuntoVentaDetalleFormJInternalFrame.class)) {
				EstadoPedidoPuntoVentaBeanSwingJInternalFrame estadopedidopuntoventaBeanSwingJInternalFrameLocal=(EstadoPedidoPuntoVentaBeanSwingJInternalFrame) ((EstadoPedidoPuntoVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadopedidopuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoPedidoPuntoVenta(estadopedidopuntoventaBeanSwingJInternalFrameLocal.getestadopedidopuntoventa(),true);
				estadopedidopuntoventaBeanSwingJInternalFrameLocal.actualizarLista(estadopedidopuntoventaBeanSwingJInternalFrameLocal.estadopedidopuntoventa,this.estadopedidopuntoventasForeignKey);

				estadopedidopuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(estadopedidopuntoventaBeanSwingJInternalFrameLocal.estadopedidopuntoventa);

				pedidopuntoventaLocal.setEstadoPedidoPuntoVenta(estadopedidopuntoventaBeanSwingJInternalFrameLocal.estadopedidopuntoventa);

				this.addItemDefectoCombosForeignKeyEstadoPedidoPuntoVenta();
				this.cargarCombosFrameEstadoPedidoPuntoVentasForeignKey("Formulario");
				this.setActualEstadoPedidoPuntoVentaForeignKey(estadopedidopuntoventaBeanSwingJInternalFrameLocal.estadopedidopuntoventa.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarPedidoPuntoVentaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = pedidopuntoventaValidator.getInvalidValues(this.pedidopuntoventa);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(PedidoPuntoVenta pedidopuntoventa,List<PedidoPuntoVenta> pedidopuntoventas) throws Exception {
		try	{		
			PedidoPuntoVentaConstantesFunciones.actualizarLista(pedidopuntoventa,pedidopuntoventas,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(PedidoPuntoVenta pedidopuntoventa,List<PedidoPuntoVenta> pedidopuntoventas) throws Exception {
		try	{			
			PedidoPuntoVentaConstantesFunciones.actualizarSelectedLista(pedidopuntoventa,pedidopuntoventas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<PedidoPuntoVenta> pedidopuntoventasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				pedidopuntoventasLocal=this.pedidopuntoventaLogic.getPedidoPuntoVentas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				pedidopuntoventasLocal=this.pedidopuntoventas;
			}
			//ARCHITECTURE
		
			for(PedidoPuntoVenta pedidopuntoventaLocal:pedidopuntoventasLocal) {
				if(this.permiteMantenimiento(pedidopuntoventaLocal) && pedidopuntoventaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+PedidoPuntoVentaConstantesFunciones.getPedidoPuntoVentaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_empresaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_sucursalPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_usuarioPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_vendedorPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDCAJA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_cajaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_tipo_precioPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDMESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_mesaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IDESTADOPEDIDOPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_estado_pedido_punto_ventaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.NUMERO_SECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnumero_secuencialPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.CODIGOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelcodigo_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.NOMBRECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnombre_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.DIRECCIONCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldireccion_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.TELEFONOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltelefono_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.TARJETACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltarjeta_clientePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelfechaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.HORA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelhoraPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelsub_totalPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelivaPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelicePedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldescuentoPedidoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(PedidoPuntoVentaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltotalPedidoPuntoVenta,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_empresaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_sucursalPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_usuarioPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_vendedorPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_cajaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_tipo_precioPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_mesaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelid_estado_pedido_punto_ventaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnumero_secuencialPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelcodigo_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnombre_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldireccion_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltelefono_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltarjeta_clientePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelfechaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelhoraPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelsub_totalPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelivaPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelicePedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldescuentoPedidoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltotalPedidoPuntoVenta,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("DetallePedidoPuntoVenta")) {
			if(this.pedidopuntoventa==null) {
				this.pedidopuntoventa= new PedidoPuntoVenta();
			}

			if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoPedidoPuntoVenta
				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.getdetallepedidopuntoventa().setPedidoPuntoVenta(this.pedidopuntoventa);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoPedidoPuntoVenta--;	
		
		
		this.pedidopuntoventaAux=new PedidoPuntoVenta();
		
		this.pedidopuntoventaAux.setId(this.iIdNuevoPedidoPuntoVenta);
		this.pedidopuntoventaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.pedidopuntoventaLogic.getPedidoPuntoVentas().add(this.pedidopuntoventaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.pedidopuntoventas.add(this.pedidopuntoventaAux);
		}
		//ARCHITECTURE
		
		this.pedidopuntoventa=this.pedidopuntoventaAux;
		
		if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventa);
			this.setVariablesObjetoActualToFormularioForeignKeyPedidoPuntoVenta(this.pedidopuntoventa);
		}
				
		//this.setDefaultControlesPedidoPuntoVenta();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyPedidoPuntoVenta();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyPedidoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyPedidoPuntoVenta();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPedidoPuntoVenta(this.pedidopuntoventaBean,this.pedidopuntoventa,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
			classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.procesarEventosPedidoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this.pedidopuntoventa,this.pedidopuntoventaParameterGeneral,this.isEsNuevoPedidoPuntoVenta,classes);//this.pedidopuntoventaLogic.getPedidoPuntoVenta()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral,this.pedidopuntoventaBean,false);
		
		if(this.pedidopuntoventaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta());
		}
		
		if(this.pedidopuntoventaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta(),classes);//this.pedidopuntoventaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyPedidoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyPedidoPuntoVenta();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarFormPedidoPuntoVenta(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
						
			if(pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.getEsGuardarRelacionado() && DetallePedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetallePedidoPuntoVentaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPedidoPuntoVenta();
			}
			
			this.actualizarVisualTableDatosPedidoPuntoVenta();
			
			this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoPedidoPuntoVenta(), this.getIndiceNuevoPedidoPuntoVenta());
			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
						
			this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesPedidoPuntoVenta(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarnumero_secuencialPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarcodigo_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarnombre_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activardireccion_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activartelefono_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activartarjeta_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarfechaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarhoraPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarsub_totalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarivaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activaricePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activardescuentoPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activartotalPedidoPuntoVenta);	
		//
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_empresaPedidoPuntoVenta);//
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_sucursalPedidoPuntoVenta);//
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_usuarioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_vendedorPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_cajaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_tipo_precioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_mesaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setEnabled(isHabilitar && this.pedidopuntoventaConstantesFunciones.activarid_estado_pedido_punto_ventaPedidoPuntoVenta);
	};
	
	public void setDefaultControlesPedidoPuntoVenta() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoPedidoPuntoVenta(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.pedidopuntoventaSessionBean.setConGuardarRelaciones(true);			
			this.pedidopuntoventaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.pedidopuntoventaSessionBean.setConGuardarRelaciones(false);			
			this.pedidopuntoventaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoPedidoPuntoVenta() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				if(pedidopuntoventaAux.getId().equals(this.iIdNuevoPedidoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventas) {
				if(pedidopuntoventaAux.getId().equals(this.iIdNuevoPedidoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				if(pedidopuntoventaAux.getId().equals(pedidopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventas) {
				if(pedidopuntoventaAux.getId().equals(pedidopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				if(pedidopuntoventaAux.getPedidoPuntoVentaOriginal().getId().equals(pedidopuntoventaOriginal.getId())) {
					existe=true;
					pedidopuntoventaOriginal.setId(pedidopuntoventaAux.getId());
					pedidopuntoventaOriginal.setVersionRow(pedidopuntoventaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventas) {
				if(pedidopuntoventaAux.getPedidoPuntoVentaOriginal().getId().equals(pedidopuntoventaOriginal.getId())) {
					existe=true;
					pedidopuntoventaOriginal.setId(pedidopuntoventaAux.getId());
					pedidopuntoventaOriginal.setVersionRow(pedidopuntoventaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosPedidoPuntoVenta(Boolean esParaCancelar) throws Exception {
		pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
		pedidopuntoventaAux=new PedidoPuntoVenta();
		
		if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
					if(pedidopuntoventaAux.getId()<0) {
						pedidopuntoventasAux.add(pedidopuntoventaAux);
					}		
				}
				this.iIdNuevoPedidoPuntoVenta=0L;
				this.pedidopuntoventaLogic.getPedidoPuntoVentas().removeAll(pedidopuntoventasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventas) {
					if(pedidopuntoventaAux.getId()<0) {
						pedidopuntoventasAux.add(pedidopuntoventaAux);
					}		
				}
				this.iIdNuevoPedidoPuntoVenta=0L;
				this.pedidopuntoventas.removeAll(pedidopuntoventasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoPedidoPuntoVenta 
					&& this.pedidopuntoventaLogic.getPedidoPuntoVentas().size()>0
					) {
					pedidopuntoventaAux=this.pedidopuntoventaLogic.getPedidoPuntoVentas().get(this.pedidopuntoventaLogic.getPedidoPuntoVentas().size() - 1);
				
					if(pedidopuntoventaAux.getId()<0) {
						this.pedidopuntoventaLogic.getPedidoPuntoVentas().remove(pedidopuntoventaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoPedidoPuntoVenta && this.pedidopuntoventas.size()>0) {
					pedidopuntoventaAux=this.pedidopuntoventas.get(this.pedidopuntoventas.size() - 1);
				
					if(pedidopuntoventaAux.getId()<0) {
						this.pedidopuntoventas.remove(pedidopuntoventaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoPedidoPuntoVenta(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(pedidopuntoventa.getId()<0) {
				this.pedidopuntoventaLogic.getPedidoPuntoVentas().remove(this.pedidopuntoventa);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(pedidopuntoventa.getId()<0) {
				this.pedidopuntoventas.remove(this.pedidopuntoventa);
			}
		}			
	}
	
	public void setEstadosInicialesPedidoPuntoVenta(List<PedidoPuntoVenta> pedidopuntoventasAux) throws Exception {
		PedidoPuntoVentaConstantesFunciones.setEstadosInicialesPedidoPuntoVenta(pedidopuntoventasAux);
	}
	
	public void setEstadosInicialesPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventaAux) throws Exception {
		PedidoPuntoVentaConstantesFunciones.setEstadosInicialesPedidoPuntoVenta(pedidopuntoventaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarPedidoPuntoVentaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarPedidoPuntoVentaActual()) {
				if(!this.isEsNuevoPedidoPuntoVenta) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoPedidoPuntoVenta=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarPedidoPuntoVentaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Pedido Punto Venta ?", "MANTENIMIENTO DE Pedido Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(PedidoPuntoVenta pedidopuntoventa) throws Exception {
		PedidoPuntoVentaConstantesFunciones.seleccionarAsignar(this.pedidopuntoventa,pedidopuntoventa);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarPedidoPuntoVenta=this.isPermisoActualizarOriginalPedidoPuntoVenta;
			
			
			this.seleccionarAsignar(pedidopuntoventa);
			
			

			idClienteActual=pedidopuntoventa.getid_cliente();
			this.seleccionarClienteActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			PedidoPuntoVentaConstantesFunciones.quitarEspaciosPedidoPuntoVenta(this.pedidopuntoventa,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.pedidopuntoventaSessionBean.setsFuncionBusquedaRapida(this.pedidopuntoventaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoPedidoPuntoVenta) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosPedidoPuntoVenta(esParaCancelar);				
				this.cancelarNuevoPedidoPuntoVenta(esParaCancelar);								
			}
			
			this.pedidopuntoventa=new PedidoPuntoVenta();
			
			this.inicializarPedidoPuntoVenta();
			
			this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarPedidoPuntoVenta() throws Exception {
		try {
			PedidoPuntoVentaConstantesFunciones.inicializarPedidoPuntoVenta(this.pedidopuntoventa);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.pedidopuntoventaLogic.getPedidoPuntoVentas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReportePedidoPuntoVentas(String sAccionBusqueda,List<PedidoPuntoVenta> pedidopuntoventasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="PedidoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="PedidoPuntoVentaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("PedidoPuntoVentaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="PedidoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Pedido Punto Ventas");		
		parameters.put("busquedapor", PedidoPuntoVentaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(DetallePedidoPuntoVenta.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					PedidoPuntoVentaLogic pedidopuntoventaLogicAuxiliar=new PedidoPuntoVentaLogic();
					pedidopuntoventaLogicAuxiliar.setDatosCliente(pedidopuntoventaLogic.getDatosCliente());				
					pedidopuntoventaLogicAuxiliar.setPedidoPuntoVentas(pedidopuntoventasParaReportes);
					
					pedidopuntoventaLogicAuxiliar.cargarRelacionesLoteForeignKeyPedidoPuntoVentaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					pedidopuntoventasParaReportes=pedidopuntoventaLogicAuxiliar.getPedidoPuntoVentas();
					
					//pedidopuntoventaLogic.getNewConnexionToDeep();
					
					//for (PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasParaReportes) {
					//	pedidopuntoventaLogic.deepLoad(pedidopuntoventa, false, DeepLoadType.INCLUDE, classes);
					//}						
					//pedidopuntoventaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//pedidopuntoventaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileDetallePedidoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("DetallePedidoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallepedidopuntoventa", reportFileDetallePedidoPuntoVenta);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourcePedidoPuntoVenta=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			PedidoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			PedidoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourcePedidoPuntoVenta=new JRBeanArrayDataSource(PedidoPuntoVentaJInternalFrame.TraerPedidoPuntoVentaBeans(pedidopuntoventasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourcePedidoPuntoVenta);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+PedidoPuntoVentaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+PedidoPuntoVentaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(PedidoPuntoVentaBean.TraerPedidoPuntoVentaBeans(pedidopuntoventasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReportePedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalPedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoPedidoPuntoVentaActionPerformed(null);
					//this.generarExcelReportePedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalPedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesPedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesPedidoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,pedidopuntoventasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReportePedidoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<PedidoPuntoVenta> pedidopuntoventasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PedidoPuntoVentas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPedidoPuntoVenta("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(PedidoPuntoVenta pedidopuntoventa : pedidopuntoventasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			PedidoPuntoVentaConstantesFunciones.generarExcelReporteDataPedidoPuntoVenta("NORMAL",row,workbook,pedidopuntoventa,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderPedidoPuntoVenta(String sTipo,Row row,Workbook workbook) {
		
		PedidoPuntoVentaConstantesFunciones.generarExcelReporteHeaderPedidoPuntoVenta(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalPedidoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<PedidoPuntoVenta> pedidopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PedidoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(PedidoPuntoVenta pedidopuntoventa : pedidopuntoventasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(PedidoPuntoVentaConstantesFunciones.getPedidoPuntoVentaDescripcion(pedidopuntoventa));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getcaja_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getmesa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getestadopedidopuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getnumero_secuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getcodigo_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getnombre_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getdireccion_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.gettelefono_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.gettarjeta_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_HORA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_HORA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.gethora());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(pedidopuntoventa.gettotal());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesPedidoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<PedidoPuntoVenta> pedidopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<PedidoPuntoVenta> pedidopuntoventasRespaldo=null;
		
		classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.pedidopuntoventaLogic.setDatosCliente(this.datosCliente);
		this.pedidopuntoventaLogic.setDatosDeep(this.datosDeep);
		this.pedidopuntoventaLogic.setIsConDeep(true);
		
		pedidopuntoventasRespaldo=this.pedidopuntoventaLogic.getPedidoPuntoVentas();
		
		this.pedidopuntoventaLogic.setPedidoPuntoVentas(pedidopuntoventasParaReportes);	
		this.pedidopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		pedidopuntoventasParaReportes=this.pedidopuntoventaLogic.getPedidoPuntoVentas();
		this.pedidopuntoventaLogic.setPedidoPuntoVentas(pedidopuntoventasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("PedidoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderPedidoPuntoVenta("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(PedidoPuntoVenta pedidopuntoventa : pedidopuntoventasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderPedidoPuntoVenta("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			PedidoPuntoVentaConstantesFunciones.generarExcelReporteDataPedidoPuntoVenta("NORMAL",row,workbook,pedidopuntoventa,cellStyleDataAux);
		
			
			


				//DetallePedidoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetallePedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(pedidopuntoventa.getDetallePedidoPuntoVentas()!=null && pedidopuntoventa.getDetallePedidoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetallePedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetallePedidoPuntoVentaConstantesFunciones.generarExcelReporteHeaderDetallePedidoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(pedidopuntoventa.getDetallePedidoPuntoVentas()!=null) {
					i2=0;
					for(DetallePedidoPuntoVenta detallepedidopuntoventa : pedidopuntoventa.getDetallePedidoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetallePedidoPuntoVentaConstantesFunciones.generarExcelReporteDataDetallePedidoPuntoVenta("RELACIONADO",row,workbook,detallepedidopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(PedidoPuntoVentaConstantesFunciones.getPedidoPuntoVentaDescripcion(pedidopuntoventa));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessPedidoPuntoVenta() throws Exception {		
		this.startProcessPedidoPuntoVenta(true);
	}
	
	public void startProcessPedidoPuntoVenta(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasPedidoPuntoVenta ,this.jPanelParametrosReportesPedidoPuntoVenta, this.jScrollPanelDatosPedidoPuntoVenta,this.jPanelPaginacionPedidoPuntoVenta, this.jScrollPanelDatosEdicionPedidoPuntoVenta, this.jPanelAccionesPedidoPuntoVenta,this.jPanelAccionesFormularioPedidoPuntoVenta,this.jmenuBarPedidoPuntoVenta,this.jmenuBarDetallePedidoPuntoVenta,this.jTtoolBarPedidoPuntoVenta,this.jTtoolBarDetallePedidoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasPedidoPuntoVenta=this.jTabbedPaneBusquedasPedidoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesPedidoPuntoVenta=this.jPanelParametrosReportesPedidoPuntoVenta;
		//final JScrollPane jScrollPanelDatosPedidoPuntoVenta=this.jScrollPanelDatosPedidoPuntoVenta;
		final JTable jTableDatosPedidoPuntoVenta=this.jTableDatosPedidoPuntoVenta;		
		final JPanel jPanelPaginacionPedidoPuntoVenta=this.jPanelPaginacionPedidoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionPedidoPuntoVenta=this.jScrollPanelDatosEdicionPedidoPuntoVenta;
		final JPanel jPanelAccionesPedidoPuntoVenta=this.jPanelAccionesPedidoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarPedidoPuntoVenta=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarPedidoPuntoVenta=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			jPanelCamposAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelCamposPedidoPuntoVenta;
			jPanelAccionesFormularioAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelAccionesFormularioPedidoPuntoVenta;
		}
		
		final JPanel jPanelCamposPedidoPuntoVenta=jPanelCamposAuxiliarPedidoPuntoVenta;
		final JPanel jPanelAccionesFormularioPedidoPuntoVenta=jPanelAccionesFormularioAuxiliarPedidoPuntoVenta;
		
		
		final JMenuBar jmenuBarPedidoPuntoVenta=this.jmenuBarPedidoPuntoVenta;
		final JToolBar jTtoolBarPedidoPuntoVenta=this.jTtoolBarPedidoPuntoVenta;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarPedidoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPedidoPuntoVenta=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jmenuBarDetallePedidoPuntoVenta;
			jTtoolBarDetalleAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jTtoolBarDetallePedidoPuntoVenta;
		}
		
		final JMenuBar jmenuBarDetallePedidoPuntoVenta=jmenuBarDetalleAuxiliarPedidoPuntoVenta;
		final JToolBar jTtoolBarDetallePedidoPuntoVenta=jTtoolBarDetalleAuxiliarPedidoPuntoVenta;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPedidoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPedidoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosPedidoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposPedidoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionPedidoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesPedidoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPedidoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarPedidoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePedidoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarPedidoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePedidoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPedidoPuntoVenta ,jPanelParametrosReportesPedidoPuntoVenta,jTableDatosPedidoPuntoVenta, /*jScrollPanelDatosPedidoPuntoVenta,*/jPanelCamposPedidoPuntoVenta,jPanelPaginacionPedidoPuntoVenta, /*jScrollPanelDatosEdicionPedidoPuntoVenta,*/ jPanelAccionesPedidoPuntoVenta,jPanelAccionesFormularioPedidoPuntoVenta,jmenuBarPedidoPuntoVenta,jmenuBarDetallePedidoPuntoVenta,jTtoolBarPedidoPuntoVenta,jTtoolBarDetallePedidoPuntoVenta);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasPedidoPuntoVenta ,jPanelParametrosReportesPedidoPuntoVenta, jScrollPanelDatosPedidoPuntoVenta,jPanelPaginacionPedidoPuntoVenta, jScrollPanelDatosEdicionPedidoPuntoVenta, jPanelAccionesPedidoPuntoVenta,jPanelAccionesFormularioPedidoPuntoVenta,jmenuBarPedidoPuntoVenta,jmenuBarDetallePedidoPuntoVenta,jTtoolBarPedidoPuntoVenta,jTtoolBarDetallePedidoPuntoVenta);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessPedidoPuntoVenta() {// throws Exception 
		this.finishProcessPedidoPuntoVenta(true);
	}
	
	public void finishProcessPedidoPuntoVenta(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasPedidoPuntoVenta ,this.jPanelParametrosReportesPedidoPuntoVenta, this.jScrollPanelDatosPedidoPuntoVenta,this.jPanelPaginacionPedidoPuntoVenta, this.jScrollPanelDatosEdicionPedidoPuntoVenta, this.jPanelAccionesPedidoPuntoVenta,this.jPanelAccionesFormularioPedidoPuntoVenta,this.jmenuBarPedidoPuntoVenta,this.jmenuBarDetallePedidoPuntoVenta,this.jTtoolBarPedidoPuntoVenta,this.jTtoolBarDetallePedidoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasPedidoPuntoVenta=this.jTabbedPaneBusquedasPedidoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesPedidoPuntoVenta=this.jPanelParametrosReportesPedidoPuntoVenta;
		//final JScrollPane jScrollPanelDatosPedidoPuntoVenta=this.jScrollPanelDatosPedidoPuntoVenta;
		final JTable jTableDatosPedidoPuntoVenta=this.jTableDatosPedidoPuntoVenta;		
		final JPanel jPanelPaginacionPedidoPuntoVenta=this.jPanelPaginacionPedidoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionPedidoPuntoVenta=this.jScrollPanelDatosEdicionPedidoPuntoVenta;
		final JPanel jPanelAccionesPedidoPuntoVenta=this.jPanelAccionesPedidoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarPedidoPuntoVenta=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarPedidoPuntoVenta=new JPanel();
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			jPanelCamposAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelCamposPedidoPuntoVenta;
			jPanelAccionesFormularioAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelAccionesFormularioPedidoPuntoVenta;
		}
		
		final JPanel jPanelCamposPedidoPuntoVenta=jPanelCamposAuxiliarPedidoPuntoVenta;
		final JPanel jPanelAccionesFormularioPedidoPuntoVenta=jPanelAccionesFormularioAuxiliarPedidoPuntoVenta;
		
		
		final JMenuBar jmenuBarPedidoPuntoVenta=this.jmenuBarPedidoPuntoVenta;		
		final JToolBar jTtoolBarPedidoPuntoVenta=this.jTtoolBarPedidoPuntoVenta;
				
		JMenuBar jmenuBarDetalleAuxiliarPedidoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarPedidoPuntoVenta=new JToolBar();
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jmenuBarDetallePedidoPuntoVenta;
			jTtoolBarDetalleAuxiliarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jTtoolBarDetallePedidoPuntoVenta;		
		}
		
		final JMenuBar jmenuBarDetallePedidoPuntoVenta=jmenuBarDetalleAuxiliarPedidoPuntoVenta;
		final JToolBar jTtoolBarDetallePedidoPuntoVenta=jTtoolBarDetalleAuxiliarPedidoPuntoVenta;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasPedidoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesPedidoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosPedidoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposPedidoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionPedidoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesPedidoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioPedidoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarPedidoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetallePedidoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarPedidoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetallePedidoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasPedidoPuntoVenta ,jPanelParametrosReportesPedidoPuntoVenta, jTableDatosPedidoPuntoVenta,/*jScrollPanelDatosPedidoPuntoVenta,*/jPanelCamposPedidoPuntoVenta,jPanelPaginacionPedidoPuntoVenta, /*jScrollPanelDatosEdicionPedidoPuntoVenta,*/ jPanelAccionesPedidoPuntoVenta,jPanelAccionesFormularioPedidoPuntoVenta,jmenuBarPedidoPuntoVenta,jmenuBarDetallePedidoPuntoVenta,jTtoolBarPedidoPuntoVenta,jTtoolBarDetallePedidoPuntoVenta));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesPedidoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarPedidoPuntoVenta(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuPedidoPuntoVenta(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarPedidoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarPedidoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetallePedidoPuntoVenta,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuPedidoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarPedidoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetallePedidoPuntoVenta,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.pedidopuntoventaConstantesFunciones.getsFinalQueryPedidoPuntoVenta();
		String  finalQueryPaginacionTodos=this.pedidopuntoventaConstantesFunciones.getsFinalQueryPedidoPuntoVenta();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=PedidoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNoPedidoPuntoVenta(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=PedidoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesPedidoPuntoVenta(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,PedidoPuntoVentaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.pedidopuntoventasEliminados= new ArrayList<PedidoPuntoVenta>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessPedidoPuntoVenta();
		
				///*PedidoPuntoVentaSessionBean*/this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			
			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=PedidoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=PedidoPuntoVentaConstantesFunciones.getClassesForeignKeysOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/pedidopuntoventa."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			pedidopuntoventasAux= new ArrayList<PedidoPuntoVenta>();
			
				
			pedidopuntoventaLogic.setDatosCliente(this.datosCliente);
			pedidopuntoventaLogic.setDatosDeep(this.datosDeep);
			pedidopuntoventaLogic.setIsConDeep(true);
			
			
			pedidopuntoventaLogic.getPedidoPuntoVentaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					pedidopuntoventaLogic.getTodosPedidoPuntoVentas(finalQueryGlobal,pagination);
					
					//pedidopuntoventaLogic.getTodosPedidoPuntoVentasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(pedidopuntoventaLogic.getPedidoPuntoVentas()==null|| pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							pedidopuntoventasAux= new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux= new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							pedidopuntoventaLogic.getTodosPedidoPuntoVentas(finalQueryGlobal+"",this.pagination);												
							
							//pedidopuntoventaLogic.getTodosPedidoPuntoVentasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventaLogic.getPedidoPuntoVentas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());					
							pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idPedidoPuntoVenta=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idPedidoPuntoVenta=this.idActual;
				
				} else if(this.idPedidoPuntoVentaActual!=null && this.idPedidoPuntoVentaActual!=0L) {
					idPedidoPuntoVenta=idPedidoPuntoVentaActual;
				}
				
					
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndicePorId(idPedidoPuntoVenta);
				
				this.pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					pedidopuntoventaLogic.getEntity(idPedidoPuntoVenta);
					
					//pedidopuntoventaLogic.getEntityWithConnection(idPedidoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
					pedidopuntoventaLogic.getPedidoPuntoVentas().add(pedidopuntoventaLogic.getPedidoPuntoVenta());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
					this.pedidopuntoventas.add(pedidopuntoventa);
				}
				
				if(pedidopuntoventaLogic.getPedidoPuntoVenta()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdCaja")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdCaja",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdCaja",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdCliente",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdCliente",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdEmpresa",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdEmpresa",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoPedidoPuntoVenta")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoPedidoPuntoVenta(id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta(finalQueryGlobal,pagination,id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoPedidoPuntoVenta(id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoPedidoPuntoVenta(id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta(finalQueryGlobal,pagination,id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoPedidoPuntoVenta(id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoPedidoPuntoVenta(id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdEstadoPedidoPuntoVenta",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdEstadoPedidoPuntoVenta",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMesa")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdMesa",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdMesa",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdSucursal",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdSucursal",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoPrecio")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdTipoPrecio",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdTipoPrecio",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdUsuario",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdUsuario",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas()==null||pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=pedidopuntoventas==null|| pedidopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
						pedidopuntoventasAux.addAll(pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventasAux=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventasAux.addAll(pedidopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=PedidoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReportePedidoPuntoVentas("FK_IdVendedor",pedidopuntoventaLogic.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReportePedidoPuntoVentas("FK_IdVendedor",pedidopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaLogic.setPedidoPuntoVentas(new ArrayList<PedidoPuntoVenta>());
						pedidopuntoventaLogic.getPedidoPuntoVentas().addAll(pedidopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
							pedidopuntoventas.addAll(pedidopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesPedidoPuntoVenta();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessPedidoPuntoVenta();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=pedidopuntoventaLogic.getPedidoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=pedidopuntoventas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=pedidopuntoventaLogic.getPedidoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=pedidopuntoventas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(PedidoPuntoVenta pedidopuntoventa) {
		Boolean permite=true;
		
		if(this.pedidopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=PedidoPuntoVentaConstantesFunciones.getOrderByListaPedidoPuntoVenta();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=PedidoPuntoVentaConstantesFunciones.getOrderByListaPedidoPuntoVenta();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				if(pedidopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					pedidopuntoventaTotales=pedidopuntoventa;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PedidoPuntoVenta pedidopuntoventa:this.pedidopuntoventas) {
				if(pedidopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					pedidopuntoventaTotales=pedidopuntoventa;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.pedidopuntoventaAux=new PedidoPuntoVenta();
			this.pedidopuntoventaAux.setsType(Constantes2.S_TOTALES);
			this.pedidopuntoventaAux.setIsNew(false);
			this.pedidopuntoventaAux.setIsChanged(false);
			this.pedidopuntoventaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				PedidoPuntoVentaConstantesFunciones.TotalizarValoresFilaPedidoPuntoVenta(this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this.pedidopuntoventaAux);
				
				this.pedidopuntoventaLogic.getPedidoPuntoVentas().add(this.pedidopuntoventaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				PedidoPuntoVentaConstantesFunciones.TotalizarValoresFilaPedidoPuntoVenta(this.pedidopuntoventas,this.pedidopuntoventaAux);
				
				this.pedidopuntoventas.add(this.pedidopuntoventaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		pedidopuntoventaTotales=new PedidoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.pedidopuntoventaLogic.getPedidoPuntoVentas().remove(pedidopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.pedidopuntoventas.remove(pedidopuntoventaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		pedidopuntoventaTotales=new PedidoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				if(pedidopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					pedidopuntoventaTotales=pedidopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PedidoPuntoVentaConstantesFunciones.TotalizarValoresFilaPedidoPuntoVenta(this.pedidopuntoventaLogic.getPedidoPuntoVentas(),pedidopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(PedidoPuntoVenta pedidopuntoventa:this.pedidopuntoventas) {
				if(pedidopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					pedidopuntoventaTotales=pedidopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				PedidoPuntoVentaConstantesFunciones.TotalizarValoresFilaPedidoPuntoVenta(this.pedidopuntoventas,pedidopuntoventaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getPedidoPuntoVentasFK_IdCaja()throws Exception {
		try {
			sAccionBusqueda="FK_IdCaja";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoPedidoPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdMesa()throws Exception {
		try {
			sAccionBusqueda="FK_IdMesa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getPedidoPuntoVentasFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getPedidoPuntoVentasFK_IdCaja(String sFinalQuery,Long id_caja)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCaja(sFinalQuery,this.pagination,id_caja);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta(String sFinalQuery,Long id_estado_pedido_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta(sFinalQuery,this.pagination,id_estado_pedido_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdMesa(String sFinalQuery,Long id_mesa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdMesa(sFinalQuery,this.pagination,id_mesa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getPedidoPuntoVentasFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLogic.getPedidoPuntoVentasFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosPedidoPuntoVenta() {
		this.isPermisoTodoPedidoPuntoVenta=false;
		this.isPermisoNuevoPedidoPuntoVenta=false;
		this.isPermisoActualizarPedidoPuntoVenta=false;
		this.isPermisoActualizarOriginalPedidoPuntoVenta=false;
		this.isPermisoEliminarPedidoPuntoVenta=false;
		this.isPermisoGuardarCambiosPedidoPuntoVenta=false;
		this.isPermisoConsultaPedidoPuntoVenta=false;
		this.isPermisoBusquedaPedidoPuntoVenta=false;
		this.isPermisoReportePedidoPuntoVenta=false;		
		this.isPermisoOrdenPedidoPuntoVenta=false;		
		this.isPermisoPaginacionMedioPedidoPuntoVenta=false;		
		this.isPermisoPaginacionAltoPedidoPuntoVenta=false;
		this.isPermisoPaginacionTodoPedidoPuntoVenta=false;
		this.isPermisoCopiarPedidoPuntoVenta=false;		
		this.isPermisoVerFormPedidoPuntoVenta=false;		
		this.isPermisoDuplicarPedidoPuntoVenta=false;		
		this.isPermisoOrdenPedidoPuntoVenta=false;		
	}
	
	public void setPermisosUsuarioPedidoPuntoVenta(Boolean isPermiso) {
		this.isPermisoTodoPedidoPuntoVenta=isPermiso;
		this.isPermisoNuevoPedidoPuntoVenta=isPermiso;
		this.isPermisoActualizarPedidoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalPedidoPuntoVenta=isPermiso;
		this.isPermisoEliminarPedidoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosPedidoPuntoVenta=isPermiso;
		this.isPermisoConsultaPedidoPuntoVenta=isPermiso;
		this.isPermisoBusquedaPedidoPuntoVenta=isPermiso;
		this.isPermisoReportePedidoPuntoVenta=isPermiso;
		this.isPermisoOrdenPedidoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionMedioPedidoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionAltoPedidoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionTodoPedidoPuntoVenta=isPermiso;		
		this.isPermisoCopiarPedidoPuntoVenta=isPermiso;		
		this.isPermisoVerFormPedidoPuntoVenta=isPermiso;		
		this.isPermisoDuplicarPedidoPuntoVenta=isPermiso;
		this.isPermisoOrdenPedidoPuntoVenta=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioPedidoPuntoVenta(Boolean isPermiso) {
		//this.isPermisoTodoPedidoPuntoVenta=isPermiso;
		this.isPermisoNuevoPedidoPuntoVenta=isPermiso;
		this.isPermisoActualizarPedidoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalPedidoPuntoVenta=isPermiso;
		this.isPermisoEliminarPedidoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosPedidoPuntoVenta=isPermiso;
		//this.isPermisoConsultaPedidoPuntoVenta=isPermiso;
		//this.isPermisoBusquedaPedidoPuntoVenta=isPermiso;
		//this.isPermisoReportePedidoPuntoVenta=isPermiso;
		//this.isPermisoOrdenPedidoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionMedioPedidoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionAltoPedidoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionTodoPedidoPuntoVenta=isPermiso;		
		//this.isPermisoCopiarPedidoPuntoVenta=isPermiso;		
		//this.isPermisoDuplicarPedidoPuntoVenta=isPermiso;
		//this.isPermisoOrdenPedidoPuntoVenta=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioPedidoPuntoVentaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(DetallePedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
		if(PedidoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosDetallePedidoPuntoVenta=false;
		this.isTienePermisosDetallePedidoPuntoVenta=this.verificarGetPermisosUsuarioOpcionPedidoPuntoVentaClaseRelacionada(this.opcionsRelacionadas,DetallePedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioPedidoPuntoVentaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosDetallePedidoPuntoVenta=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioPedidoPuntoVentaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionPedidoPuntoVentaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioPedidoPuntoVentaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosDetallePedidoPuntoVenta && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.remove(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioPedidoPuntoVenta() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(PedidoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoPedidoPuntoVenta=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarPedidoPuntoVenta=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalPedidoPuntoVenta=this.isPermisoActualizarPedidoPuntoVenta;
			this.isPermisoEliminarPedidoPuntoVenta=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosPedidoPuntoVenta=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaPedidoPuntoVenta=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaPedidoPuntoVenta=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoPedidoPuntoVenta=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReportePedidoPuntoVenta=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPedidoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioPedidoPuntoVenta=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoPedidoPuntoVenta=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoPedidoPuntoVenta=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarPedidoPuntoVenta=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormPedidoPuntoVenta=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarPedidoPuntoVenta=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenPedidoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosPedidoPuntoVenta.setToolTipText(this.jTableDatosPedidoPuntoVenta.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioPedidoPuntoVenta(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioPedidoPuntoVenta(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(PedidoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(PedidoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioPedidoPuntoVenta() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosDetallePedidoPuntoVenta && this.pedidopuntoventaConstantesFunciones.mostrarDetallePedidoPuntoVentaPedidoPuntoVenta && !PedidoPuntoVentaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Pedido");
			reporte.setsDescripcion("Detalle Pedido");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyPedidoPuntoVentaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.cajasForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.mesasForeignKey=new ArrayList();
				this.estadopedidopuntoventasForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyPedidoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(PedidoPuntoVentaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyPedidoPuntoVentaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoPedidoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCajaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CajaConstantesFunciones.SFINALQUERY;

				this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoPedidoPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadopedidopuntoventasForeignKey==null||this.estadopedidopuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoPedidoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesEstadoPedidoPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoPedidoPuntoVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoPedidoPuntoVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoPedidoPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyPedidoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaReturnGeneral=new PedidoPuntoVentaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_empresaPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_empresaPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_sucursalPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_sucursalPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_usuarioPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_usuarioPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_vendedorPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_vendedorPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalCaja="";

				if(((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_cajaPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_cajaPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCaja=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

						finalQueryGlobalCaja=Funciones.GetFinalQueryAppend(finalQueryGlobalCaja, "");
						finalQueryGlobalCaja+=CajaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCaja=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidCajaActual();
					}
				} else {
					finalQueryGlobalCaja="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_clientePedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_clientePedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_tipo_precioPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_tipo_precioPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalMesa="";

				if(((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_mesaPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_mesaPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMesa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

						finalQueryGlobalMesa=Funciones.GetFinalQueryAppend(finalQueryGlobalMesa, "");
						finalQueryGlobalMesa+=MesaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMesa=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidMesaActual();
					}
				} else {
					finalQueryGlobalMesa="NONE";
				}


				String finalQueryGlobalEstadoPedidoPuntoVenta="";

				if(((this.estadopedidopuntoventasForeignKey==null||this.estadopedidopuntoventasForeignKey.size()<=0) && this.pedidopuntoventaConstantesFunciones.cargarid_estado_pedido_punto_ventaPedidoPuntoVenta)
					 || (this.esRecargarFks && this.pedidopuntoventaConstantesFunciones.cargarid_estado_pedido_punto_ventaPedidoPuntoVenta)) {

					if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPedidoPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoPedidoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesEstadoPedidoPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoPedidoPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoPedidoPuntoVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoPedidoPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoPedidoPuntoVenta, "");
						finalQueryGlobalEstadoPedidoPuntoVenta+=EstadoPedidoPuntoVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoPedidoPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoPedidoPuntoVenta=" WHERE " + ConstantesSql.ID + "="+pedidopuntoventaSessionBean.getlidEstadoPedidoPuntoVentaActual();
					}
				} else {
					finalQueryGlobalEstadoPedidoPuntoVenta="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.cargarCombosLoteForeignKeyPedidoPuntoVenta(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalUsuario,finalQueryGlobalVendedor,finalQueryGlobalCaja,finalQueryGlobalCliente,finalQueryGlobalTipoPrecio,finalQueryGlobalMesa,finalQueryGlobalEstadoPedidoPuntoVenta);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=pedidopuntoventaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=pedidopuntoventaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=pedidopuntoventaReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=pedidopuntoventaReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalCaja.equals("NONE")) {
				this.cajasForeignKey=pedidopuntoventaReturnGeneral.getcajasForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=pedidopuntoventaReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=pedidopuntoventaReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalMesa.equals("NONE")) {
				this.mesasForeignKey=pedidopuntoventaReturnGeneral.getmesasForeignKey();
			}

			if(!finalQueryGlobalEstadoPedidoPuntoVenta.equals("NONE")) {
				this.estadopedidopuntoventasForeignKey=pedidopuntoventaReturnGeneral.getestadopedidopuntoventasForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyPedidoPuntoVenta()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyCaja();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyMesa();
			this.addItemDefectoCombosForeignKeyEstadoPedidoPuntoVenta();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCaja()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				Caja caja=new Caja();
				CajaConstantesFunciones.setCajaDescripcion(caja,Constantes.SMENSAJE_ESCOJA_OPCION);
				caja.setId(null);

				if(!CajaConstantesFunciones.ExisteEnLista(this.cajasForeignKey,caja,true)) {

					this.cajasForeignKey.add(0,caja);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMesa()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				Mesa mesa=new Mesa();
				MesaConstantesFunciones.setMesaDescripcion(mesa,Constantes.SMENSAJE_ESCOJA_OPCION);
				mesa.setId(null);

				if(!MesaConstantesFunciones.ExisteEnLista(this.mesasForeignKey,mesa,true)) {

					this.mesasForeignKey.add(0,mesa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoPedidoPuntoVenta()throws Exception {
		try {

			if(!this.pedidopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoPedidoPuntoVenta()) {
				EstadoPedidoPuntoVenta estadopedidopuntoventa=new EstadoPedidoPuntoVenta();
				EstadoPedidoPuntoVentaConstantesFunciones.setEstadoPedidoPuntoVentaDescripcion(estadopedidopuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadopedidopuntoventa.setId(null);

				if(!EstadoPedidoPuntoVentaConstantesFunciones.ExisteEnLista(this.estadopedidopuntoventasForeignKey,estadopedidopuntoventa,true)) {

					this.estadopedidopuntoventasForeignKey.add(0,estadopedidopuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyPedidoPuntoVenta()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyPedidoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyCliente(JComboBox jComboBoxClienteGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Cliente clienteLocal=(Cliente)jComboBoxClienteGenerico.getSelectedItem();

			if(clienteLocal!=null  && clienteLocal.getId()!=null  && clienteLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_cliente="+clienteLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"id_clientePedidoPuntoVenta"));
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clientePedidoPuntoVenta"));
					}
				} else {
					if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"id_clientePedidoPuntoVenta"));
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clientePedidoPuntoVenta"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_clienteFK_IdClientePedidoPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClientePedidoPuntoVenta"));

					} else {
						this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_clienteFK_IdClientePedidoPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClientePedidoPuntoVenta"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyPedidoPuntoVenta()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
			
			
				this.pedidopuntoventa.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyPedidoPuntoVenta();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa)throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(pedidopuntoventa.getid_vendedor(),false,"Formulario");
			this.setActualCajaForeignKey(pedidopuntoventa.getid_caja(),false,"Formulario");
			this.setActualClienteForeignKey(pedidopuntoventa.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(pedidopuntoventa.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(pedidopuntoventa.getid_mesa(),false,"Formulario");
			this.setActualEstadoPedidoPuntoVentaForeignKey(pedidopuntoventa.getid_estado_pedido_punto_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,String sTipoEvento)throws Exception {	
		try {
			
			

				if(pedidopuntoventa.getCliente()!=null && !sTipoEvento.equals("id_clientePedidoPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(pedidopuntoventa.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyPedidoPuntoVenta()throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(this.pedidopuntoventaConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualCajaForeignKey(this.pedidopuntoventaConstantesFunciones.getid_caja(),false,"Formulario");
			this.setActualClienteForeignKey(this.pedidopuntoventaConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.pedidopuntoventaConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(this.pedidopuntoventaConstantesFunciones.getid_mesa(),false,"Formulario");
			this.setActualEstadoPedidoPuntoVentaForeignKey(this.pedidopuntoventaConstantesFunciones.getid_estado_pedido_punto_venta(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyPedidoPuntoVenta()throws Exception {	
		try {
			

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyPedidoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyPedidoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroPedidoPuntoVenta()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyPedidoPuntoVenta()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameCajasForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameMesasForeignKey("Todos");
			this.cargarCombosFrameEstadoPedidoPuntoVentasForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyPedidoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoPedidoPuntoVentasForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyPedidoPuntoVenta()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	











	public void recargarFormPedidoPuntoVentaCliente(JComboBox<?> jComboBoxGenericoCliente,String sFormularioTipoBusqueda) throws Exception {

	}






	
	

	public PedidoPuntoVentaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public PedidoPuntoVentaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public PedidoPuntoVentaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean(); 
		this.pedidopuntoventaConstantesFunciones=new PedidoPuntoVentaConstantesFunciones(); 
		this.pedidopuntoventaBean=new PedidoPuntoVenta();//(this.pedidopuntoventaConstantesFunciones); 		
		this.pedidopuntoventaReturnGeneral=new PedidoPuntoVentaParameterReturnGeneral(); 
		
		this.pedidopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.pedidopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public PedidoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public PedidoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public PedidoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessPedidoPuntoVenta(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.pedidopuntoventaConstantesFunciones=new PedidoPuntoVentaConstantesFunciones(); 
			this.pedidopuntoventaBean=new PedidoPuntoVenta();//this.pedidopuntoventaConstantesFunciones); 			
			this.pedidopuntoventaReturnGeneral=new PedidoPuntoVentaParameterReturnGeneral(); 
		
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Pedido Punto Venta Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.pedidopuntoventa=new PedidoPuntoVenta();
			this.pedidopuntoventas = new ArrayList<PedidoPuntoVenta>();
			this.pedidopuntoventasAux = new ArrayList<PedidoPuntoVenta>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic=new PedidoPuntoVentaLogic();
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.pedidopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.pedidopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormPedidoPuntoVenta);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPedidoPuntoVenta);	
					}
					
					if(this.jInternalFrameImportacionPedidoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPedidoPuntoVenta);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByPedidoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByPedidoPuntoVenta);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormPedidoPuntoVenta);
				this.jInternalFrameDetalleFormPedidoPuntoVenta.setVisible(false);
				this.jInternalFrameDetalleFormPedidoPuntoVenta.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPedidoPuntoVenta);
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setVisible(false);
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionPedidoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionPedidoPuntoVenta);
					this.jInternalFrameImportacionPedidoPuntoVenta.setVisible(false);
					this.jInternalFrameImportacionPedidoPuntoVenta.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByPedidoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByPedidoPuntoVenta);
					this.jInternalFrameOrderByPedidoPuntoVenta.setVisible(false);
					this.jInternalFrameOrderByPedidoPuntoVenta.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idPedidoPuntoVentaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=PedidoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.pedidopuntoventaReturnGeneral=new PedidoPuntoVentaParameterReturnGeneral();
			
			this.pedidopuntoventaParameterGeneral=new PedidoPuntoVentaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.pedidopuntoventaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(PedidoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(DetallePedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),this.pedidopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),this.pedidopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaCopiarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaVerFormPedidoPuntoVenta=true;
			this.isVisibilidadCeldaOrdenPedidoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			
			
			this.isVisibilidadFK_IdCaja=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=true;
			this.isVisibilidadFK_IdMesa=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosPedidoPuntoVenta();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioPedidoPuntoVenta(false);
			
			this.setPermisosUsuarioPedidoPuntoVenta();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado() 
				|| (this.pedidopuntoventaSessionBean.getEsGuardarRelacionado() && this.pedidopuntoventaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioPedidoPuntoVentaClasesRelacionadas();
			}
			
			if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioPedidoPuntoVentaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosPedidoPuntoVenta();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualPedidoPuntoVenta();
			}
			
			if(!this.isPermisoBusquedaPedidoPuntoVenta) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioPedidoPuntoVenta,this.isPermisoPaginacionMedioPedidoPuntoVenta,this.isPermisoPaginacionTodoPedidoPuntoVenta);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(PedidoPuntoVentaConstantesFunciones.getTiposSeleccionarPedidoPuntoVenta());
				
				this.tiposColumnasSelect=PedidoPuntoVentaConstantesFunciones.getTiposSeleccionarPedidoPuntoVenta(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectPedidoPuntoVenta();				
				//this.tiposRelacionesSelect=PedidoPuntoVentaConstantesFunciones.getTiposRelacionesPedidoPuntoVenta(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioPedidoPuntoVenta();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioPedidoPuntoVenta(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioPedidoPuntoVenta(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesPedidoPuntoVenta() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.detallepedidopuntoventaLogic=new DetallePedidoPuntoVentaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.vendedorLogic=new VendedorLogic();
			this.cajaLogic=new CajaLogic();
			this.clienteLogic=new ClienteLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.mesaLogic=new MesaLogic();
			this.estadopedidopuntoventaLogic=new EstadoPedidoPuntoVentaLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				pedidopuntoventaImplementable= (PedidoPuntoVentaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PedidoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				pedidopuntoventaImplementableHome= (PedidoPuntoVentaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+PedidoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.pedidopuntoventas= new ArrayList<PedidoPuntoVenta>();
			this.pedidopuntoventasEliminados= new ArrayList<PedidoPuntoVenta>();
						
			this.isEsNuevoPedidoPuntoVenta=false;
			this.esParaAccionDesdeFormularioPedidoPuntoVenta=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idClienteActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.cajasForeignKey=new ArrayList<Caja>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.mesasForeignKey=new ArrayList<Mesa>() ;
			this.estadopedidopuntoventasForeignKey=new ArrayList<EstadoPedidoPuntoVenta>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyPedidoPuntoVenta(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroPedidoPuntoVenta();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=PedidoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingPedidoPuntoVenta(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioPedidoPuntoVenta();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioPedidoPuntoVenta();
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasPedidoPuntoVenta.getTabCount(); i++) {
					this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessPedidoPuntoVenta(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga PedidoPuntoVenta: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectPedidoPuntoVenta() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(DetallePedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetallePedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesPedidoPuntoVenta")) {
				iIndex=this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Pedidos")) {
					if(!DetallePedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessPedidoPuntoVenta();

						this.cargarParteTabPanelRelacionadaDetallePedidoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessPedidoPuntoVenta();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetallePedidoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormPedidoPuntoVenta.cargarSessionConBeanSwingJInternalFrameDetallePedidoPuntoVenta(false,true,iIndex);
		this.jButtonDetallePedidoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetallePedidoPuntoVenta();

		//this.jTabbedPaneRelacionesPedidoPuntoVenta.updateUI();
		//this.jTabbedPaneRelacionesPedidoPuntoVenta.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesPedidoPuntoVenta.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("DetallePedidoPuntoVenta")) {
				int row=this.jTableDatosPedidoPuntoVenta.getSelectedRow();
				jButtonDetallePedidoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Detalle Pedido")) {

					if(this.isTienePermisosDetallePedidoPuntoVenta && this.pedidopuntoventaConstantesFunciones.mostrarDetallePedidoPuntoVentaPedidoPuntoVenta && !PedidoPuntoVentaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Pedidos"+"("+DetallePedidoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Pedidos");

						if(pedidopuntoventaConstantesFunciones.resaltarDetallePedidoPuntoVentaPedidoPuntoVenta!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(pedidopuntoventaConstantesFunciones.resaltarDetallePedidoPuntoVentaPedidoPuntoVenta);
						}

						jmenuItem.setEnabled(this.pedidopuntoventaConstantesFunciones.activarDetallePedidoPuntoVentaPedidoPuntoVenta);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetallePedidoPuntoVenta"));

						

						this.jInternalFrameDetalleFormPedidoPuntoVenta.jmenuDetallePedidoPuntoVenta.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyPedidoPuntoVenta(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyPedidoPuntoVenta(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyPedidoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyPedidoPuntoVentaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyPedidoPuntoVenta();
		
		this.cargarCombosFrameForeignKeyPedidoPuntoVenta();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyPedidoPuntoVenta();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyPedidoPuntoVenta();
		}
	}
	
	

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCaja(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCaja(this.cajasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesa(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaMesa(this.mesasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoPedidoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoPedidoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoPedidoPuntoVenta();
				this.cargarCombosFrameEstadoPedidoPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaEstadoPedidoPuntoVenta(this.estadopedidopuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoPedidoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			
			if(jTableDatosPedidoPuntoVenta.getRowCount()>=1) {
				jTableDatosPedidoPuntoVenta.removeRowSelectionInterval(0, jTableDatosPedidoPuntoVenta.getRowCount()-1);						
			}
			
			this.isEsNuevoPedidoPuntoVenta=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoPedidoPuntoVenta(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesPedidoPuntoVenta(true);			
			//this.pedidopuntoventa=new PedidoPuntoVenta();
			//this.pedidopuntoventa.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta() ;
			
			if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePedidoPuntoVenta(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.pedidopuntoventa);	
			this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);				
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar PedidoPuntoVenta: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarPedidoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosPedidoPuntoVenta.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosPedidoPuntoVenta.getSelectedRows().length;			
			}
			
			pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoPedidoPuntoVenta--;			
				//PedidoPuntoVenta pedidopuntoventaAux= new PedidoPuntoVenta();			
				//pedidopuntoventaAux.setId(this.iIdNuevoPedidoPuntoVenta);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//PedidoPuntoVenta pedidopuntoventaOrigen=new PedidoPuntoVenta();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(PedidoPuntoVenta pedidopuntoventaOrigen : pedidopuntoventasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							pedidopuntoventaOrigen =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							pedidopuntoventaOrigen =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaPedidoPuntoVenta();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.pedidopuntoventa.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosPedidoPuntoVenta(pedidopuntoventaOrigen,this.pedidopuntoventa,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.pedidopuntoventaLogic.getPedidoPuntoVentas().add(this.pedidopuntoventaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventas.add(this.pedidopuntoventaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
				
				this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoPedidoPuntoVenta(), this.getIndiceNuevoPedidoPuntoVenta());
				
				int iLastRow =  this.jTableDatosPedidoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPedidoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPedidoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();									
		
			PedidoPuntoVenta pedidopuntoventaOrigen=new PedidoPuntoVenta();
			PedidoPuntoVenta pedidopuntoventaDestino=new PedidoPuntoVenta();
				
			pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosPedidoPuntoVenta.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || pedidopuntoventasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosPedidoPuntoVenta.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaOrigen =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						pedidopuntoventaOrigen =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						pedidopuntoventaDestino =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						pedidopuntoventaDestino =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				pedidopuntoventaOrigen =pedidopuntoventasSeleccionados.get(0);
				pedidopuntoventaDestino =pedidopuntoventasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosPedidoPuntoVenta(pedidopuntoventaOrigen,pedidopuntoventaDestino,true,false);
				
				pedidopuntoventaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(pedidopuntoventaDestino,pedidopuntoventaLogic.getPedidoPuntoVentas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(pedidopuntoventaDestino,pedidopuntoventas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
				
				//this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoPedidoPuntoVenta(), this.getIndiceNuevoPedidoPuntoVenta());
				
				int iLastRow =  this.jTableDatosPedidoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosPedidoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosPedidoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesPedidoPuntoVenta.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(!isVisible);
			this.jPanelPaginacionPedidoPuntoVenta.setVisible(!isVisible);
			this.jPanelAccionesPedidoPuntoVenta.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFramePedidoPuntoVenta();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoPedidoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionPedidoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByPedidoPuntoVenta();
			
			this.abrirFrameOrderByPedidoPuntoVenta();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByPedidoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetallePedidoPuntoVenta(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormPedidoPuntoVenta);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormPedidoPuntoVenta.isMaximum()) {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormPedidoPuntoVenta.setSize(this.jInternalFrameDetalleFormPedidoPuntoVenta.iWidthFormulario,this.jInternalFrameDetalleFormPedidoPuntoVenta.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormPedidoPuntoVenta.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormPedidoPuntoVenta.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormPedidoPuntoVenta.isMaximum()) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jContentPaneDetallePedidoPuntoVenta.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormPedidoPuntoVenta.jContentPaneDetallePedidoPuntoVenta.getWidth(),PedidoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormPedidoPuntoVenta.jContentPaneDetallePedidoPuntoVenta.getWidth(),PedidoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormPedidoPuntoVenta.jContentPaneDetallePedidoPuntoVenta.getWidth(),PedidoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetallePedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetallePedidoPuntoVenta();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormPedidoPuntoVenta.setVisible(true);
	        this.jInternalFrameDetalleFormPedidoPuntoVenta.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByPedidoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByPedidoPuntoVenta==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByPedidoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPedidoPuntoVenta,false,this);
				} else {
					this.jInternalFrameOrderByPedidoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByPedidoPuntoVenta,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByPedidoPuntoVenta);
				this.jInternalFrameOrderByPedidoPuntoVenta.setVisible(false);
				this.jInternalFrameOrderByPedidoPuntoVenta.setSelected(false);
				
				this.jInternalFrameOrderByPedidoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPedidoPuntoVenta"));
				
				this.inicializarActualizarBindingTablaOrderByPedidoPuntoVenta();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionPedidoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionPedidoPuntoVenta==null) {
				
				this.jInternalFrameImportacionPedidoPuntoVenta=new ImportacionJInternalFrame(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionPedidoPuntoVenta);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionPedidoPuntoVenta);
				this.jInternalFrameImportacionPedidoPuntoVenta.setVisible(false);
				this.jInternalFrameImportacionPedidoPuntoVenta.setSelected(false);


				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPedidoPuntoVenta"));
				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPedidoPuntoVenta"));
				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPedidoPuntoVenta"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoPedidoPuntoVenta() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta==null) {
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta=new ReporteDinamicoJInternalFrame(PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoPedidoPuntoVenta);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoPedidoPuntoVenta);
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setVisible(false);
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPedidoPuntoVenta"));
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPedidoPuntoVenta"));
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPedidoPuntoVenta"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPedidoPuntoVenta();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetallePedidoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetallePedidoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormPedidoPuntoVenta.jContentPaneDetallePedidoPuntoVenta.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetallePedidoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetallePedidoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetallePedidoPuntoVenta.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetallePedidoPuntoVenta() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormPedidoPuntoVenta);
			
	       	this.jInternalFrameDetalleFormPedidoPuntoVenta.setVisible(false);
	        this.jInternalFrameDetalleFormPedidoPuntoVenta.setSelected(false);
			
			//this.jInternalFrameDetalleFormPedidoPuntoVenta.dispose();
			//this.jInternalFrameDetalleFormPedidoPuntoVenta=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoPedidoPuntoVenta() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setVisible(true);
	        this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionPedidoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionPedidoPuntoVenta.setVisible(true);
	        this.jInternalFrameImportacionPedidoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByPedidoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByPedidoPuntoVenta.setVisible(true);
	        this.jInternalFrameOrderByPedidoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByPedidoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByPedidoPuntoVenta.setVisible(false);
	        this.jInternalFrameOrderByPedidoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoPedidoPuntoVenta() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setVisible(false);
	        this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionPedidoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionPedidoPuntoVenta.setVisible(false);
	        this.jInternalFrameImportacionPedidoPuntoVenta.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarPedidoPuntoVenta(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarPedidoPuntoVenta(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesPedidoPuntoVenta(true);
			//this.isEsNuevoPedidoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false) ;
			
			if(pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.getEsGuardarRelacionado() && DetallePedidoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetallePedidoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePedidoPuntoVenta(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaPedidoPuntoVentaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarPedidoPuntoVenta(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesPedidoPuntoVenta(true);
			//this.isEsNuevoPedidoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.pedidopuntoventa.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false) ;
			
			if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetallePedidoPuntoVenta(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Cliente")) {
				if(!this.pedidopuntoventaConstantesFunciones.cargarid_clientePedidoPuntoVenta) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
				
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCaja(List<Caja> cajasForeignKey)throws Exception{
		TableColumn tableColumnCaja=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA));
		TableCellEditor tableCellEditorCaja =tableColumnCaja.getCellEditor();

		CajaTableCell cajaTableCellFk=(CajaTableCell)tableCellEditorCaja;

		if(cajaTableCellFk!=null) {
			cajaTableCellFk.setcajasForeignKey(cajasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cajaTableCellFk.setRowActual(intSelectedRow);
			//cajaTableCellFk.setcajasForeignKeyActual(cajasForeignKey);
		//}


		if(cajaTableCellFk!=null) {
			cajaTableCellFk.RecargarCajasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMesa(List<Mesa> mesasForeignKey)throws Exception{
		TableColumn tableColumnMesa=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA));
		TableCellEditor tableCellEditorMesa =tableColumnMesa.getCellEditor();

		MesaTableCell mesaTableCellFk=(MesaTableCell)tableCellEditorMesa;

		if(mesaTableCellFk!=null) {
			mesaTableCellFk.setmesasForeignKey(mesasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesaTableCellFk.setRowActual(intSelectedRow);
			//mesaTableCellFk.setmesasForeignKeyActual(mesasForeignKey);
		//}


		if(mesaTableCellFk!=null) {
			mesaTableCellFk.RecargarMesasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoPedidoPuntoVenta(List<EstadoPedidoPuntoVenta> estadopedidopuntoventasForeignKey)throws Exception{
		TableColumn tableColumnEstadoPedidoPuntoVenta=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA));
		TableCellEditor tableCellEditorEstadoPedidoPuntoVenta =tableColumnEstadoPedidoPuntoVenta.getCellEditor();

		EstadoPedidoPuntoVentaTableCell estadopedidopuntoventaTableCellFk=(EstadoPedidoPuntoVentaTableCell)tableCellEditorEstadoPedidoPuntoVenta;

		if(estadopedidopuntoventaTableCellFk!=null) {
			estadopedidopuntoventaTableCellFk.setestadopedidopuntoventasForeignKey(estadopedidopuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadopedidopuntoventaTableCellFk.setRowActual(intSelectedRow);
			//estadopedidopuntoventaTableCellFk.setestadopedidopuntoventasForeignKeyActual(estadopedidopuntoventasForeignKey);
		//}


		if(estadopedidopuntoventaTableCellFk!=null) {
			estadopedidopuntoventaTableCellFk.RecargarEstadoPedidoPuntoVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesPedidoPuntoVenta(false);
			
			//if(!this.isEsNuevoPedidoPuntoVenta) {								
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				
			}
			
			if(this.permiteMantenimiento(this.pedidopuntoventa)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoPedidoPuntoVenta=true;
					this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
					this.isEsNuevoPedidoPuntoVenta=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoPedidoPuntoVenta=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoPedidoPuntoVenta=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesPedidoPuntoVenta(false);
			
												
				
				if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetallePedidoPuntoVenta();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoPedidoPuntoVentaActionPerformed(evt,pedidopuntoventaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualPedidoPuntoVenta(this.pedidopuntoventa,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,pedidopuntoventaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.pedidopuntoventa.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.pedidopuntoventa.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.pedidopuntoventa.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.pedidopuntoventa)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((PedidoPuntoVentaModel) this.jTableDatosPedidoPuntoVenta.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoPedidoPuntoVenta=true;
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
				this.isEsNuevoPedidoPuntoVenta=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesPedidoPuntoVenta(false);
				
				
				
				if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetallePedidoPuntoVenta();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosPedidoPuntoVenta.getRowCount()>=1) {
				jTableDatosPedidoPuntoVenta.removeRowSelectionInterval(0, jTableDatosPedidoPuntoVenta.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesPedidoPuntoVenta(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(false) ;
			
			this.isEsNuevoPedidoPuntoVenta=false;
			
			if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetallePedidoPuntoVenta();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingPedidoPuntoVenta(false);
				
				//SI ES MANUAL
				if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualPedidoPuntoVenta();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoPedidoPuntoVenta--;			
			//PedidoPuntoVenta pedidopuntoventaAux= new PedidoPuntoVenta();			
			//pedidopuntoventaAux.setId(this.iIdNuevoPedidoPuntoVenta);
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaPedidoPuntoVenta();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
			
			this.pedidopuntoventa.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.pedidopuntoventaLogic.getPedidoPuntoVentas().add(this.pedidopuntoventaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.pedidopuntoventas.add(this.pedidopuntoventaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			
			this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoPedidoPuntoVenta(), this.getIndiceNuevoPedidoPuntoVenta());
			
			int iLastRow =  this.jTableDatosPedidoPuntoVenta.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosPedidoPuntoVenta.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosPedidoPuntoVenta.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
			
			//SI ES MANUAL
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPedidoPuntoVenta();
			}
			
			//this.abrirFrameTreePedidoPuntoVenta();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Pedido Punto VentaS ?", "MANTENIMIENTO DE Pedido Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionPedidoPuntoVenta.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralPedidoPuntoVenta();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.procesarImportacionPedidoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.pedidopuntoventaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarPedidoPuntoVentaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionPedidoPuntoVenta.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionPedidoPuntoVenta.setFileImportacion(this.jInternalFrameImportacionPedidoPuntoVenta.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionPedidoPuntoVenta.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionPedidoPuntoVenta.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionPedidoPuntoVenta.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionPedidoPuntoVenta.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		

		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("PedidoPuntoVentaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"PedidoPuntoVentaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Caja_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Caja_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Caja_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Caja_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mesa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mesa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mesa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mesa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoPedidoPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoPedidoPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoPedidoPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoPedidoPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mero_Secuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mero_Secuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mero_Secuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mero_Secuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefonoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefonoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefonoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefonoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rjetaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rjetaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rjetaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rjetaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_HORA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoria="id_caja";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoria="id_mesa";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA:
					sNombreCampoCategoria="id_estado_pedido_punto_venta";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL:
					sNombreCampoCategoria="numero_secuencial";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoria="codigo_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoria="nombre_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoria="direccion_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoria="telefono_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoria="tarjeta_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoria="hora";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoriaValor="id_caja";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoriaValor="id_mesa";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA:
					sNombreCampoCategoriaValor="id_estado_pedido_punto_venta";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL:
					sNombreCampoCategoriaValor="numero_secuencial";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoriaValor="codigo_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoriaValor="nombre_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoriaValor="direccion_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoriaValor="telefono_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoriaValor="tarjeta_cliente";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoriaValor="hora";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Caja",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_caja");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mesa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mesa");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_pedido_punto_venta");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No. Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tarjeta Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"tarjeta_cliente");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_HORA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Hora",sNombreCampoCategoria,sNombreCampoCategoriaValor,"hora");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("PedidoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getcaja_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getmesa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getestadopedidopuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getnumero_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getcodigo_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getnombre_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getdireccion_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.gettelefono_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.gettarjeta_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_HORA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_HORA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.gethora());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(PedidoPuntoVenta pedidopuntoventa:pedidopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(pedidopuntoventa.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelPedidoPuntoVenta(row);				
			//	iRow++;
			//}				
			
			//for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelPedidoPuntoVenta(pedidopuntoventaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
			
			//SI ES MANUAL
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualPedidoPuntoVenta();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
			
			//SI ES MANUAL
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPedidoPuntoVenta();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
			
			//SI ES MANUAL
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualPedidoPuntoVenta();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaPedidoPuntoVenta() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosPedidoPuntoVenta.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosPedidoPuntoVenta.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosPedidoPuntoVenta.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosPedidoPuntoVenta.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosPedidoPuntoVenta.setMinimumSize(dimensionMinimum);
		this.jTableDatosPedidoPuntoVenta.setMaximumSize(dimensionMaximum);
		this.jTableDatosPedidoPuntoVenta.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingPedidoPuntoVenta(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingPedidoPuntoVenta(esInicializar,true);
	}
	
	public void inicializarActualizarBindingPedidoPuntoVenta(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaPedidoPuntoVenta(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesPedidoPuntoVenta(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasPedidoPuntoVenta(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPedidoPuntoVenta(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesPedidoPuntoVenta(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualPedidoPuntoVenta() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaPedidoPuntoVenta();
		
		this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualPedidoPuntoVenta();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesPedidoPuntoVenta() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualPedidoPuntoVenta(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualPedidoPuntoVenta(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosPedidoPuntoVenta.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosPedidoPuntoVenta.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReportePedidoPuntoVenta.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionNuevoPedidoPuntoVenta.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionSinCerrarPedidoPuntoVenta.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionSinMensajePedidoPuntoVenta.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosPedidoPuntoVenta.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosPedidoPuntoVenta.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReportePedidoPuntoVenta.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionNuevoPedidoPuntoVenta.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionSinCerrarPedidoPuntoVenta.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jCheckBoxPostAccionSinMensajePedidoPuntoVenta.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionPedidoPuntoVenta.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionPedidoPuntoVenta.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesPedidoPuntoVenta.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesPedidoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesPedidoPuntoVenta.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarPedidoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesPedidoPuntoVenta.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesPedidoPuntoVenta.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralPedidoPuntoVenta.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPedidoPuntoVenta(Boolean esInicializar) throws Exception {
		try	{	
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualPedidoPuntoVenta(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesPedidoPuntoVenta() throws Exception {
		try	{
			if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualPedidoPuntoVenta();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePedidoPuntoVenta() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualPedidoPuntoVenta() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesPedidoPuntoVenta.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesPedidoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesPedidoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionPedidoPuntoVenta.addItem(reporte);
			}
			
			
			if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionPedidoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionPedidoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesPedidoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesPedidoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarPedidoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarPedidoPuntoVenta.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarPedidoPuntoVenta.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPedidoPuntoVenta();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualPedidoPuntoVenta() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
				
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=PedidoPuntoVentaConstantesFunciones.getTiposSeleccionarPedidoPuntoVenta(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=PedidoPuntoVentaConstantesFunciones.getTiposSeleccionarPedidoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=PedidoPuntoVentaConstantesFunciones.getTiposSeleccionarPedidoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualPedidoPuntoVenta()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.getSelectedItem()!=null){this.id_cajaFK_IdCaja=((Caja)this.jComboBoxid_cajaFK_IdCajaPedidoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClientePedidoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.getSelectedItem()!=null){this.id_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta=((EstadoPedidoPuntoVenta)this.jComboBoxid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.getSelectedItem()!=null){this.id_mesaFK_IdMesa=((Mesa)this.jComboBoxid_mesaFK_IdMesaPedidoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.getSelectedItem()!=null){this.id_tipo_precioFK_IdTipoPrecio=((TipoPrecio)this.jComboBoxid_tipo_precioFK_IdTipoPrecioPedidoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorPedidoPuntoVenta.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasPedidoPuntoVenta(Boolean esInicializar) throws Exception {				
		if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualPedidoPuntoVenta();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaPedidoPuntoVenta() throws Exception {
		this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByPedidoPuntoVenta() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosPedidoPuntoVentaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVentaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaPedidoPuntoVenta(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=pedidopuntoventaLogic.getPedidoPuntoVentas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=pedidopuntoventas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosPedidoPuntoVenta.setModel(new PedidoPuntoVentaModel(this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosPedidoPuntoVenta.setModel(new PedidoPuntoVentaModel(this.pedidopuntoventas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByPedidoPuntoVenta!=null && this.jInternalFrameOrderByPedidoPuntoVenta.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByPedidoPuntoVenta();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,pedidopuntoventaConstantesFunciones.resaltarSeleccionarPedidoPuntoVenta,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+PedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,pedidopuntoventaConstantesFunciones.resaltarSeleccionarPedidoPuntoVenta,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_ID));

		if(this.pedidopuntoventaConstantesFunciones.mostraridPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltaridPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activaridPedidoPuntoVenta,iSizeTabla,this,true,"idPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltaridPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activaridPedidoPuntoVenta,this,true,"idPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_empresaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_empresaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_empresaPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_empresaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_empresaPedidoPuntoVenta,false,"id_empresaPedidoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_sucursalPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_sucursalPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_sucursalPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_sucursalPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_sucursalPedidoPuntoVenta,false,"id_sucursalPedidoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_usuarioPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_usuarioPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_usuarioPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_usuarioPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_usuarioPedidoPuntoVenta,false,"id_usuarioPedidoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_vendedorPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_vendedorPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_vendedorPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_vendedorPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_vendedorPedidoPuntoVenta,true,"id_vendedorPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_cajaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CajaTableCell(this.cajasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_cajaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_cajaPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new CajaTableCell(this.cajasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_cajaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_cajaPedidoPuntoVenta,true,"id_cajaPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_clientePedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_clientePedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_clientePedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_clientePedidoPuntoVenta,true,"id_clientePedidoPuntoVenta","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_tipo_precioPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_tipo_precioPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_tipo_precioPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_tipo_precioPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_tipo_precioPedidoPuntoVenta,true,"id_tipo_precioPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_mesaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesaTableCell(this.mesasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_mesaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_mesaPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new MesaTableCell(this.mesasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_mesaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_mesaPedidoPuntoVenta,true,"id_mesaPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarid_estado_pedido_punto_ventaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoPedidoPuntoVentaTableCell(this.estadopedidopuntoventasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_estado_pedido_punto_ventaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_estado_pedido_punto_ventaPedidoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EstadoPedidoPuntoVentaTableCell(this.estadopedidopuntoventasForeignKey,this.pedidopuntoventaConstantesFunciones.resaltarid_estado_pedido_punto_ventaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarid_estado_pedido_punto_ventaPedidoPuntoVenta,true,"id_estado_pedido_punto_ventaPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL));

		if(this.pedidopuntoventaConstantesFunciones.mostrarnumero_secuencialPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltarnumero_secuencialPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarnumero_secuencialPedidoPuntoVenta,iSizeTabla,this,true,"numero_secuencialPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarnumero_secuencialPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarnumero_secuencialPedidoPuntoVenta,this,true,"numero_secuencialPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrarcodigo_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltarcodigo_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarcodigo_clientePedidoPuntoVenta,iSizeTabla,this,true,"codigo_clientePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarcodigo_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarcodigo_clientePedidoPuntoVenta,this,true,"codigo_clientePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrarnombre_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltarnombre_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarnombre_clientePedidoPuntoVenta,iSizeTabla,this,true,"nombre_clientePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarnombre_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarnombre_clientePedidoPuntoVenta,this,true,"nombre_clientePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrardireccion_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltardireccion_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activardireccion_clientePedidoPuntoVenta,iSizeTabla,this,true,"direccion_clientePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltardireccion_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activardireccion_clientePedidoPuntoVenta,this,true,"direccion_clientePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrartelefono_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltartelefono_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartelefono_clientePedidoPuntoVenta,iSizeTabla,this,true,"telefono_clientePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltartelefono_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartelefono_clientePedidoPuntoVenta,this,true,"telefono_clientePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE));

		if(this.pedidopuntoventaConstantesFunciones.mostrartarjeta_clientePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.pedidopuntoventaConstantesFunciones.resaltartarjeta_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartarjeta_clientePedidoPuntoVenta,iSizeTabla,this,true,"tarjeta_clientePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltartarjeta_clientePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartarjeta_clientePedidoPuntoVenta,this,true,"tarjeta_clientePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_FECHA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarfechaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.pedidopuntoventaConstantesFunciones.resaltarfechaPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarfechaPedidoPuntoVenta,iSizeTabla,this,true,"fechaPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarfechaPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarfechaPedidoPuntoVenta,this,true,"fechaPedidoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_HORA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarhoraPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_HORA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TimeRenderer(this.pedidopuntoventaConstantesFunciones.resaltarhoraPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarhoraPedidoPuntoVenta,iSizeTabla,this,true,"horaPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TimeEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarhoraPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarhoraPedidoPuntoVenta,iSizeTabla,this,true,"horaPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.pedidopuntoventaConstantesFunciones.mostrarsub_totalPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltarsub_totalPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarsub_totalPedidoPuntoVenta,iSizeTabla,this,true,"sub_totalPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarsub_totalPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarsub_totalPedidoPuntoVenta,this,true,"sub_totalPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_IVA));

		if(this.pedidopuntoventaConstantesFunciones.mostrarivaPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltarivaPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarivaPedidoPuntoVenta,iSizeTabla,this,true,"ivaPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltarivaPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activarivaPedidoPuntoVenta,this,true,"ivaPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_ICE));

		if(this.pedidopuntoventaConstantesFunciones.mostraricePedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltaricePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activaricePedidoPuntoVenta,iSizeTabla,this,true,"icePedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltaricePedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activaricePedidoPuntoVenta,this,true,"icePedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO));

		if(this.pedidopuntoventaConstantesFunciones.mostrardescuentoPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltardescuentoPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activardescuentoPedidoPuntoVenta,iSizeTabla,this,true,"descuentoPedidoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltardescuentoPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activardescuentoPedidoPuntoVenta,this,true,"descuentoPedidoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL));

		if(this.pedidopuntoventaConstantesFunciones.mostrartotalPedidoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.pedidopuntoventaConstantesFunciones.resaltartotalPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartotalPedidoPuntoVenta,iSizeTabla,this,true,"totalPedidoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.pedidopuntoventaConstantesFunciones.resaltartotalPedidoPuntoVenta,this.pedidopuntoventaConstantesFunciones.activartotalPedidoPuntoVenta,this,true,"totalPedidoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new PedidoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosDetallePedidoPuntoVenta && this.pedidopuntoventaConstantesFunciones.mostrarDetallePedidoPuntoVentaPedidoPuntoVenta && !PedidoPuntoVentaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Pedidos");
				tableColumn.setHeaderValue("Detalle Pedidos");
				tableColumn.setCellRenderer(new DetallePedidoPuntoVentaTableCell(pedidopuntoventaConstantesFunciones.resaltarDetallePedidoPuntoVentaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarDetallePedidoPuntoVentaPedidoPuntoVenta));
				tableColumn.setCellEditor(new DetallePedidoPuntoVentaTableCell(pedidopuntoventaConstantesFunciones.resaltarDetallePedidoPuntoVentaPedidoPuntoVenta,this,this.pedidopuntoventaConstantesFunciones.activarDetallePedidoPuntoVentaPedidoPuntoVenta));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosPedidoPuntoVenta.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosPedidoPuntoVenta.moveColumn(this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosPedidoPuntoVenta.moveColumn(this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosPedidoPuntoVenta.moveColumn(this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosPedidoPuntoVenta.moveColumn(this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosPedidoPuntoVenta.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosPedidoPuntoVenta.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosPedidoPuntoVenta,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosPedidoPuntoVenta.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosPedidoPuntoVenta.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosPedidoPuntoVenta.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=pedidopuntoventaLogic.getPedidoPuntoVentas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=pedidopuntoventas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosPedidoPuntoVenta.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosPedidoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosPedidoPuntoVenta();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoPedidoPuntoVenta=false;
					
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPedidoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.pedidopuntoventa.getsType().equals("DUPLICADO")
				   || this.pedidopuntoventa.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoPedidoPuntoVenta=true;
				
				} else {
					this.isEsNuevoPedidoPuntoVenta=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					if(this.pedidopuntoventa.getId()>=0 && !this.pedidopuntoventa.getIsNew()) {						
						this.isEsNuevoPedidoPuntoVenta=false;
						
					} else {
						this.isEsNuevoPedidoPuntoVenta=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoPedidoPuntoVenta(esRelaciones);						
				
				this.seleccionarPedidoPuntoVenta(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.pedidopuntoventa.getId()<0) {
					this.isEsNuevoPedidoPuntoVenta=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarPedidoPuntoVenta(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarPedidoPuntoVenta(evt,rowIndex);
				}	
				
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion PedidoPuntoVenta: " + this.dDif); 
					}
				}								
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarPedidoPuntoVenta(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.pedidopuntoventa)) {
					if(this.pedidopuntoventa.getId()>0) {
						this.pedidopuntoventa.setIsDeleted(true);
						
						this.pedidopuntoventasEliminados.add(this.pedidopuntoventa);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.pedidopuntoventaLogic.getPedidoPuntoVentas().remove(this.pedidopuntoventa);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventas.remove(this.pedidopuntoventa);				
					}
					
					
					((PedidoPuntoVentaModel) this.jTableDatosPedidoPuntoVenta.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarPedidoPuntoVenta(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoPedidoPuntoVenta) {
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosPedidoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosPedidoPuntoVenta.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventa);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_empresaPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_empresaPedidoPuntoVenta) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.pedidopuntoventa.getid_empresa());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(pedidopuntoventa.getEmpresa()!=null) {
							this.empresasForeignKey.add(pedidopuntoventa.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.pedidopuntoventa.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_sucursalPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_sucursalPedidoPuntoVenta) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.pedidopuntoventa.getid_sucursal());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(pedidopuntoventa.getSucursal()!=null) {
							this.sucursalsForeignKey.add(pedidopuntoventa.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.pedidopuntoventa.getid_sucursal(),false,"Formulario");

					//Usuario
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_usuarioPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_usuarioPedidoPuntoVenta) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.pedidopuntoventa.getid_usuario());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(pedidopuntoventa.getUsuario()!=null) {
							this.usuariosForeignKey.add(pedidopuntoventa.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.pedidopuntoventa.getid_usuario(),false,"Formulario");

					//Vendedor
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_vendedorPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_vendedorPedidoPuntoVenta) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.pedidopuntoventa.getid_vendedor());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(pedidopuntoventa.getVendedor()!=null) {
							this.vendedorsForeignKey.add(pedidopuntoventa.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.pedidopuntoventa.getid_vendedor(),false,"Formulario");

					//Caja
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_cajaPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_cajaPedidoPuntoVenta) {
						//this.cargarCombosCajasForeignKeyLista(" where id="+this.pedidopuntoventa.getid_caja());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.cajasForeignKey=new ArrayList<Caja>();

						if(pedidopuntoventa.getCaja()!=null) {
							this.cajasForeignKey.add(pedidopuntoventa.getCaja());
						}

						this.addItemDefectoCombosForeignKeyCaja();
						this.cargarCombosFrameCajasForeignKey("Todos");
					}
					this.setActualCajaForeignKey(this.pedidopuntoventa.getid_caja(),false,"Formulario");

					//Cliente
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_clientePedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_clientePedidoPuntoVenta) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.pedidopuntoventa.getid_cliente());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(pedidopuntoventa.getCliente()!=null) {
							this.clientesForeignKey.add(pedidopuntoventa.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.pedidopuntoventa.getid_cliente(),false,"Formulario");

					//TipoPrecio
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_tipo_precioPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_tipo_precioPedidoPuntoVenta) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.pedidopuntoventa.getid_tipo_precio());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(pedidopuntoventa.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(pedidopuntoventa.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.pedidopuntoventa.getid_tipo_precio(),false,"Formulario");

					//Mesa
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_mesaPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_mesaPedidoPuntoVenta) {
						//this.cargarCombosMesasForeignKeyLista(" where id="+this.pedidopuntoventa.getid_mesa());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.mesasForeignKey=new ArrayList<Mesa>();

						if(pedidopuntoventa.getMesa()!=null) {
							this.mesasForeignKey.add(pedidopuntoventa.getMesa());
						}

						this.addItemDefectoCombosForeignKeyMesa();
						this.cargarCombosFrameMesasForeignKey("Todos");
					}
					this.setActualMesaForeignKey(this.pedidopuntoventa.getid_mesa(),false,"Formulario");

					//EstadoPedidoPuntoVenta
					if(!this.pedidopuntoventaConstantesFunciones.cargarid_estado_pedido_punto_ventaPedidoPuntoVenta || this.pedidopuntoventaConstantesFunciones.event_dependid_estado_pedido_punto_ventaPedidoPuntoVenta) {
						//this.cargarCombosEstadoPedidoPuntoVentasForeignKeyLista(" where id="+this.pedidopuntoventa.getid_estado_pedido_punto_venta());
									//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
						this.estadopedidopuntoventasForeignKey=new ArrayList<EstadoPedidoPuntoVenta>();

						if(pedidopuntoventa.getEstadoPedidoPuntoVenta()!=null) {
							this.estadopedidopuntoventasForeignKey.add(pedidopuntoventa.getEstadoPedidoPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyEstadoPedidoPuntoVenta();
						this.cargarCombosFrameEstadoPedidoPuntoVentasForeignKey("Todos");
					}
					this.setActualEstadoPedidoPuntoVentaForeignKey(this.pedidopuntoventa.getid_estado_pedido_punto_venta(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesPedidoPuntoVenta("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesPedidoPuntoVenta(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoPedidoPuntoVenta(pedidopuntoventa,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioPedidoPuntoVenta(pedidopuntoventa);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyPedidoPuntoVenta(pedidopuntoventa,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyPedidoPuntoVenta(pedidopuntoventa);
	}
	
	public void setVariablesObjetoActualToFormularioPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setText(pedidopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setText(pedidopuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setText(pedidopuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setText(pedidopuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setText(pedidopuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setText(pedidopuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setText(pedidopuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setDate(pedidopuntoventa.getfecha());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setValue(pedidopuntoventa.gethora());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setText(pedidopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setText(pedidopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setText(pedidopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setText(pedidopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setText(pedidopuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,PedidoPuntoVenta pedidopuntoventaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,pedidopuntoventaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,PedidoPuntoVenta pedidopuntoventaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				pedidopuntoventaLocal=this.pedidopuntoventa;
			} else {
				pedidopuntoventaLocal=this.pedidopuntoventaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(pedidopuntoventaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoPedidoPuntoVenta(pedidopuntoventaLocal,true);
					
					if(pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(pedidopuntoventaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(pedidopuntoventaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(pedidopuntoventa,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(pedidopuntoventa);
	}
	
	public void setVariablesFormularioToObjetoActualPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(pedidopuntoventa,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.getText()==null || this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.getText()=="" || this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.getText()=="Id") {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setText("0");
			}

			if(conColumnasBase) {pedidopuntoventa.setId(Long.parseLong(this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelIdPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setnumero_secuencial(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnumero_secuencialPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setcodigo_cliente(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelcodigo_clientePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setnombre_cliente(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelnombre_clientePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setdireccion_cliente(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldireccion_clientePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.settelefono_cliente(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltelefono_clientePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.settarjeta_cliente(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltarjeta_clientePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setfecha(this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelfechaPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.sethora(new Time(((Date)this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.getValue()).getTime()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_HORA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelhoraPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelsub_totalPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setiva(Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelivaPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setice(Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelicePedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeldescuentoPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			pedidopuntoventa.settotal(Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabeltotalPedidoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventaBean,PedidoPuntoVenta pedidopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_vendedor()!=null && !pedidopuntoventaBean.getid_vendedor().equals(-1L))) {pedidopuntoventa.setid_vendedor(pedidopuntoventaBean.getid_vendedor());}
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_caja()!=null && !pedidopuntoventaBean.getid_caja().equals(-1L))) {pedidopuntoventa.setid_caja(pedidopuntoventaBean.getid_caja());}
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_cliente()!=null && !pedidopuntoventaBean.getid_cliente().equals(-1L))) {pedidopuntoventa.setid_cliente(pedidopuntoventaBean.getid_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_tipo_precio()!=null && !pedidopuntoventaBean.getid_tipo_precio().equals(-1L))) {pedidopuntoventa.setid_tipo_precio(pedidopuntoventaBean.getid_tipo_precio());}
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_mesa()!=null && !pedidopuntoventaBean.getid_mesa().equals(-1L))) {pedidopuntoventa.setid_mesa(pedidopuntoventaBean.getid_mesa());}
			if(conDefault || (!conDefault && pedidopuntoventaBean.getid_estado_pedido_punto_venta()!=null && !pedidopuntoventaBean.getid_estado_pedido_punto_venta().equals(-1L))) {pedidopuntoventa.setid_estado_pedido_punto_venta(pedidopuntoventaBean.getid_estado_pedido_punto_venta());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventaOrigen,PedidoPuntoVenta pedidopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && pedidopuntoventaOrigen.getId()!=null && !pedidopuntoventaOrigen.getId().equals(0L))) {pedidopuntoventa.setId(pedidopuntoventaOrigen.getId());}}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_vendedor()!=null && !pedidopuntoventaOrigen.getid_vendedor().equals(-1L))) {pedidopuntoventa.setid_vendedor(pedidopuntoventaOrigen.getid_vendedor());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_caja()!=null && !pedidopuntoventaOrigen.getid_caja().equals(-1L))) {pedidopuntoventa.setid_caja(pedidopuntoventaOrigen.getid_caja());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_cliente()!=null && !pedidopuntoventaOrigen.getid_cliente().equals(-1L))) {pedidopuntoventa.setid_cliente(pedidopuntoventaOrigen.getid_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_tipo_precio()!=null && !pedidopuntoventaOrigen.getid_tipo_precio().equals(-1L))) {pedidopuntoventa.setid_tipo_precio(pedidopuntoventaOrigen.getid_tipo_precio());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_mesa()!=null && !pedidopuntoventaOrigen.getid_mesa().equals(-1L))) {pedidopuntoventa.setid_mesa(pedidopuntoventaOrigen.getid_mesa());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getid_estado_pedido_punto_venta()!=null && !pedidopuntoventaOrigen.getid_estado_pedido_punto_venta().equals(-1L))) {pedidopuntoventa.setid_estado_pedido_punto_venta(pedidopuntoventaOrigen.getid_estado_pedido_punto_venta());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getnumero_secuencial()!=null && !pedidopuntoventaOrigen.getnumero_secuencial().equals(""))) {pedidopuntoventa.setnumero_secuencial(pedidopuntoventaOrigen.getnumero_secuencial());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getcodigo_cliente()!=null && !pedidopuntoventaOrigen.getcodigo_cliente().equals(""))) {pedidopuntoventa.setcodigo_cliente(pedidopuntoventaOrigen.getcodigo_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getnombre_cliente()!=null && !pedidopuntoventaOrigen.getnombre_cliente().equals(""))) {pedidopuntoventa.setnombre_cliente(pedidopuntoventaOrigen.getnombre_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getdireccion_cliente()!=null && !pedidopuntoventaOrigen.getdireccion_cliente().equals(""))) {pedidopuntoventa.setdireccion_cliente(pedidopuntoventaOrigen.getdireccion_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.gettelefono_cliente()!=null && !pedidopuntoventaOrigen.gettelefono_cliente().equals(""))) {pedidopuntoventa.settelefono_cliente(pedidopuntoventaOrigen.gettelefono_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.gettarjeta_cliente()!=null && !pedidopuntoventaOrigen.gettarjeta_cliente().equals(""))) {pedidopuntoventa.settarjeta_cliente(pedidopuntoventaOrigen.gettarjeta_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getfecha()!=null && !pedidopuntoventaOrigen.getfecha().equals(new Date()))) {pedidopuntoventa.setfecha(pedidopuntoventaOrigen.getfecha());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.gethora()!=null && !pedidopuntoventaOrigen.gethora().equals(new Time((new Date()).getTime())))) {pedidopuntoventa.sethora(pedidopuntoventaOrigen.gethora());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getsub_total()!=null && !pedidopuntoventaOrigen.getsub_total().equals(0.0))) {pedidopuntoventa.setsub_total(pedidopuntoventaOrigen.getsub_total());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getiva()!=null && !pedidopuntoventaOrigen.getiva().equals(0.0))) {pedidopuntoventa.setiva(pedidopuntoventaOrigen.getiva());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getice()!=null && !pedidopuntoventaOrigen.getice().equals(0.0))) {pedidopuntoventa.setice(pedidopuntoventaOrigen.getice());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.getdescuento()!=null && !pedidopuntoventaOrigen.getdescuento().equals(0.0))) {pedidopuntoventa.setdescuento(pedidopuntoventaOrigen.getdescuento());}
			if(conDefault || (!conDefault && pedidopuntoventaOrigen.gettotal()!=null && !pedidopuntoventaOrigen.gettotal().equals(0.0))) {pedidopuntoventa.settotal(pedidopuntoventaOrigen.gettotal());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setText(pedidopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setText(pedidopuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setText(pedidopuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setText(pedidopuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setText(pedidopuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setText(pedidopuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setText(pedidopuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setDate(pedidopuntoventa.getfecha());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setValue(pedidopuntoventa.gethora());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setText(pedidopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setText(pedidopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setText(pedidopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setText(pedidopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setText(pedidopuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioPedidoPuntoVenta(PedidoPuntoVentaBean pedidopuntoventaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setText(pedidopuntoventaBean.getId().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setText(pedidopuntoventaBean.getnumero_secuencial());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setText(pedidopuntoventaBean.getcodigo_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setText(pedidopuntoventaBean.getnombre_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setText(pedidopuntoventaBean.getdireccion_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setText(pedidopuntoventaBean.gettelefono_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setText(pedidopuntoventaBean.gettarjeta_cliente());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setDate(pedidopuntoventaBean.getfecha());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setValue(pedidopuntoventaBean.gethora());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setText(pedidopuntoventaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setText(pedidopuntoventaBean.getiva().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setText(pedidopuntoventaBean.getice().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setText(pedidopuntoventaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setText(pedidopuntoventaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanPedidoPuntoVenta(PedidoPuntoVentaParameterReturnGeneral pedidopuntoventaReturnGeneral,PedidoPuntoVentaBean pedidopuntoventaBean,Boolean conDefault) throws Exception { 
		try {
			PedidoPuntoVenta pedidopuntoventaLocal=new PedidoPuntoVenta();
			
			pedidopuntoventaLocal=pedidopuntoventaReturnGeneral.getPedidoPuntoVenta();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && pedidopuntoventaLocal.getId()!=null && !pedidopuntoventaLocal.getId().equals(0L))) {pedidopuntoventaBean.setId(pedidopuntoventaLocal.getId());}}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_vendedor()!=null && !pedidopuntoventaLocal.getid_vendedor().equals(-1L))) {pedidopuntoventaBean.setid_vendedor(pedidopuntoventaLocal.getid_vendedor());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_caja()!=null && !pedidopuntoventaLocal.getid_caja().equals(-1L))) {pedidopuntoventaBean.setid_caja(pedidopuntoventaLocal.getid_caja());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_cliente()!=null && !pedidopuntoventaLocal.getid_cliente().equals(-1L))) {pedidopuntoventaBean.setid_cliente(pedidopuntoventaLocal.getid_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_tipo_precio()!=null && !pedidopuntoventaLocal.getid_tipo_precio().equals(-1L))) {pedidopuntoventaBean.setid_tipo_precio(pedidopuntoventaLocal.getid_tipo_precio());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_mesa()!=null && !pedidopuntoventaLocal.getid_mesa().equals(-1L))) {pedidopuntoventaBean.setid_mesa(pedidopuntoventaLocal.getid_mesa());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getid_estado_pedido_punto_venta()!=null && !pedidopuntoventaLocal.getid_estado_pedido_punto_venta().equals(-1L))) {pedidopuntoventaBean.setid_estado_pedido_punto_venta(pedidopuntoventaLocal.getid_estado_pedido_punto_venta());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getnumero_secuencial()!=null && !pedidopuntoventaLocal.getnumero_secuencial().equals(""))) {pedidopuntoventaBean.setnumero_secuencial(pedidopuntoventaLocal.getnumero_secuencial());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getcodigo_cliente()!=null && !pedidopuntoventaLocal.getcodigo_cliente().equals(""))) {pedidopuntoventaBean.setcodigo_cliente(pedidopuntoventaLocal.getcodigo_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getnombre_cliente()!=null && !pedidopuntoventaLocal.getnombre_cliente().equals(""))) {pedidopuntoventaBean.setnombre_cliente(pedidopuntoventaLocal.getnombre_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getdireccion_cliente()!=null && !pedidopuntoventaLocal.getdireccion_cliente().equals(""))) {pedidopuntoventaBean.setdireccion_cliente(pedidopuntoventaLocal.getdireccion_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.gettelefono_cliente()!=null && !pedidopuntoventaLocal.gettelefono_cliente().equals(""))) {pedidopuntoventaBean.settelefono_cliente(pedidopuntoventaLocal.gettelefono_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.gettarjeta_cliente()!=null && !pedidopuntoventaLocal.gettarjeta_cliente().equals(""))) {pedidopuntoventaBean.settarjeta_cliente(pedidopuntoventaLocal.gettarjeta_cliente());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getfecha()!=null && !pedidopuntoventaLocal.getfecha().equals(new Date()))) {pedidopuntoventaBean.setfecha(pedidopuntoventaLocal.getfecha());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.gethora()!=null && !pedidopuntoventaLocal.gethora().equals(new Time((new Date()).getTime())))) {pedidopuntoventaBean.sethora(pedidopuntoventaLocal.gethora());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getsub_total()!=null && !pedidopuntoventaLocal.getsub_total().equals(0.0))) {pedidopuntoventaBean.setsub_total(pedidopuntoventaLocal.getsub_total());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getiva()!=null && !pedidopuntoventaLocal.getiva().equals(0.0))) {pedidopuntoventaBean.setiva(pedidopuntoventaLocal.getiva());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getice()!=null && !pedidopuntoventaLocal.getice().equals(0.0))) {pedidopuntoventaBean.setice(pedidopuntoventaLocal.getice());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.getdescuento()!=null && !pedidopuntoventaLocal.getdescuento().equals(0.0))) {pedidopuntoventaBean.setdescuento(pedidopuntoventaLocal.getdescuento());}
			if(conDefault || (!conDefault && pedidopuntoventaLocal.gettotal()!=null && !pedidopuntoventaLocal.gettotal().equals(0.0))) {pedidopuntoventaBean.settotal(pedidopuntoventaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxPedidoPuntoVentaGenerico(Long idPedidoPuntoVentaSeleccionado,JComboBox jComboBoxPedidoPuntoVenta,List<PedidoPuntoVenta> pedidopuntoventasLocal)throws Exception {
		try {
			PedidoPuntoVenta  pedidopuntoventaTemp=null;

			for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasLocal) {
				if(pedidopuntoventaAux.getId()!=null && pedidopuntoventaAux.getId().equals(idPedidoPuntoVentaSeleccionado)) {
					pedidopuntoventaTemp=pedidopuntoventaAux;
					break;
				}
			}

			jComboBoxPedidoPuntoVenta.setSelectedItem(pedidopuntoventaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxPedidoPuntoVentaGenerico(JComboBox jComboBoxPedidoPuntoVenta,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxPedidoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPedidoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxPedidoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxPedidoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPedidoPuntoVenta.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxPedidoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxPedidoPuntoVenta.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxPedidoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxPedidoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxPedidoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("DetallePedidoPuntoVenta")) {
			jButtonDetallePedidoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			pedidopuntoventa=(PedidoPuntoVenta) pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			pedidopuntoventa =(PedidoPuntoVenta) pedidopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Caja")) {
			//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getcaja_descripcion();
			} else {
				//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getcaja_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getcliente_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Mesa")) {
			//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getmesa_descripcion();
			} else {
				//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getmesa_descripcion();
			}
		}

		if(sTipo.equals("EstadoPedidoPuntoVenta")) {
			//sDescripcion=this.getActualEstadoPedidoPuntoVentaForeignKeyDescripcion((Long)value);
			if(!pedidopuntoventa.getIsNew() && !pedidopuntoventa.getIsChanged() && !pedidopuntoventa.getIsDeleted()) {
				sDescripcion=pedidopuntoventa.getestadopedidopuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoPedidoPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=pedidopuntoventa.getestadopedidopuntoventa_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		PedidoPuntoVenta pedidopuntoventaRow=new PedidoPuntoVenta();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			pedidopuntoventaRow=(PedidoPuntoVenta) pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			pedidopuntoventaRow=(PedidoPuntoVenta) pedidopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonDetallePedidoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,PedidoPuntoVenta pedidopuntoventa) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa = (PedidoPuntoVenta)this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.pedidopuntoventa = (PedidoPuntoVenta)this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(pedidopuntoventa!=null) {
						this.pedidopuntoventa = pedidopuntoventa;
					} else {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}
				}

				if(this.isTienePermisosDetallePedidoPuntoVenta && this.permiteMantenimiento(this.pedidopuntoventa)) {
					DetallePedidoPuntoVentaBeanSwingJInternalFrame detallepedidopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup=new DetallePedidoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallepedidopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup;
					} else {
						detallepedidopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame;
					}

					List<PedidoPuntoVenta> pedidopuntoventas=new ArrayList<PedidoPuntoVenta>();
					pedidopuntoventas.add(this.pedidopuntoventa);
					if(!esRelacionado) {
						//detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.setConGuardarRelaciones(false);
						//detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallepedidopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormPedidoPuntoVenta.cargarDetallePedidoPuntoVentaBeanSwingJInternalFrame(pedidopuntoventas,this.pedidopuntoventa,detallepedidopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.getConGuardarRelaciones(),detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaSessionBean.getEsGuardarRelacionado());
					detallepedidopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallepedidopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsDetallePedidoPuntoVenta("no_relacionado");

						detallepedidopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetallePedidoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (DetallePedidoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						detallepedidopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
						TitledBorder titledBorderDetallePedidoPuntoVenta=(TitledBorder)detallepedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetallePedidoPuntoVenta.getBorder();

						titledBorderDetallePedidoPuntoVenta.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Detalle Pedido");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallepedidopuntoventaBeanSwingJInternalFrame);
						}

						detallepedidopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallepedidopuntoventaBeanSwingJInternalFrame);

						detallepedidopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Pedido",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualPedidoPuntoVenta(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));			
			this.jButtonDuplicarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarPedidoPuntoVenta && this.isPermisoDuplicarPedidoPuntoVenta));			
			this.jButtonCopiarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarPedidoPuntoVenta && this.isPermisoCopiarPedidoPuntoVenta));
			this.jButtonVerFormPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormPedidoPuntoVenta && this.isPermisoVerFormPedidoPuntoVenta));
			
			this.jButtonAbrirOrderByPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));			
			
			this.jButtonNuevoRelacionesPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarPedidoPuntoVenta && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarPedidoPuntoVenta && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarPedidoPuntoVenta && this.isPermisoEliminarPedidoPuntoVenta));
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarPedidoPuntoVenta);							
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));			
			
			}
						
			this.jButtonGuardarCambiosTablaPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));						
			this.jButtonDuplicarToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarPedidoPuntoVenta && this.isPermisoDuplicarPedidoPuntoVenta));						
			this.jButtonCopiarToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarPedidoPuntoVenta && this.isPermisoCopiarPedidoPuntoVenta));			
			this.jButtonVerFormToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormPedidoPuntoVenta && this.isPermisoVerFormPedidoPuntoVenta));			
			this.jButtonAbrirOrderByToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));
			this.jButtonNuevoRelacionesToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));			
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarPedidoPuntoVenta && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarPedidoPuntoVenta  && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarPedidoPuntoVenta && this.isPermisoEliminarPedidoPuntoVenta));
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarToolBarPedidoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarPedidoPuntoVenta);				
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));			
			this.jMenuItemDuplicarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarPedidoPuntoVenta && this.isPermisoDuplicarPedidoPuntoVenta));			
			this.jMenuItemCopiarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarPedidoPuntoVenta && this.isPermisoCopiarPedidoPuntoVenta));			
			this.jMenuItemVerFormPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormPedidoPuntoVenta && this.isPermisoVerFormPedidoPuntoVenta));			
			this.jMenuItemAbrirOrderByPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));			
			//this.jMenuItemMostrarOcultarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));
			this.jMenuItemDetalleAbrirOrderByPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));			
			//this.jMenuItemDetalleMostrarOcultarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenPedidoPuntoVenta && this.isPermisoOrdenPedidoPuntoVenta));			
			this.jMenuItemNuevoRelacionesPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta));			
			this.jMenuItemNuevoGuardarCambiosPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoPedidoPuntoVenta && this.isPermisoNuevoPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));									
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemModificarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarPedidoPuntoVenta && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemActualizarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarPedidoPuntoVenta && this.isPermisoActualizarPedidoPuntoVenta));	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemEliminarPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarPedidoPuntoVenta && this.isPermisoEliminarPedidoPuntoVenta));
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemCancelarPedidoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarPedidoPuntoVenta);				
			}
			
			this.jMenuItemGuardarCambiosPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));						
			this.jMenuItemGuardarCambiosTablaPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=this.jButtonNuevoPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaDuplicarPedidoPuntoVenta=this.jButtonDuplicarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCopiarPedidoPuntoVenta=this.jButtonCopiarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaVerFormPedidoPuntoVenta=this.jButtonVerFormPedidoPuntoVenta.isVisible();
			
			this.isVisibilidadCeldaOrdenPedidoPuntoVenta=this.jButtonAbrirOrderByPedidoPuntoVenta.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=this.jButtonNuevoRelacionesPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=this.jButtonModificarPedidoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=this.jButtonGuardarCambiosTablaPedidoPuntoVenta.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=this.jButtonNuevoToolBarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=this.jButtonNuevoRelacionesToolBarPedidoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarToolBarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarToolBarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarToolBarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarToolBarPedidoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPedidoPuntoVenta=this.jButtonGuardarCambiosToolBarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=this.jButtonGuardarCambiosTablaToolBarPedidoPuntoVenta.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=this.jMenuItemNuevoPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=this.jMenuItemNuevoRelacionesPedidoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemModificarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemActualizarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemEliminarPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemCancelarPedidoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarPedidoPuntoVenta=this.jMenuItemGuardarCambiosPedidoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=this.jMenuItemGuardarCambiosTablaPedidoPuntoVenta.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesPedidoPuntoVenta(Boolean esInicializar) {
		if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
				//if(this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesPedidoPuntoVenta();
			}
			
			this.inicializarActualizarBindingBotonesManualPedidoPuntoVenta(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualPedidoPuntoVenta() {
		this.jButtonNuevoPedidoPuntoVenta.setVisible(this.isPermisoNuevoPedidoPuntoVenta);			
		this.jButtonDuplicarPedidoPuntoVenta.setVisible(this.isPermisoDuplicarPedidoPuntoVenta);			
		this.jButtonCopiarPedidoPuntoVenta.setVisible(this.isPermisoCopiarPedidoPuntoVenta);			
		this.jButtonVerFormPedidoPuntoVenta.setVisible(this.isPermisoVerFormPedidoPuntoVenta);			
		
		this.jButtonAbrirOrderByPedidoPuntoVenta.setVisible(this.isPermisoOrdenPedidoPuntoVenta);					
		
		this.jButtonNuevoRelacionesPedidoPuntoVenta.setVisible(this.isPermisoNuevoPedidoPuntoVenta);			
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarPedidoPuntoVenta.setVisible(this.isPermisoActualizarPedidoPuntoVenta);	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.setVisible(this.isPermisoActualizarPedidoPuntoVenta);	
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.setVisible(this.isPermisoEliminarPedidoPuntoVenta);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarPedidoPuntoVenta);						
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.setVisible(this.isPermisoGuardarCambiosPedidoPuntoVenta);							
		}
		
		this.jButtonGuardarCambiosTablaPedidoPuntoVenta.setVisible(this.isPermisoActualizarPedidoPuntoVenta);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetallePedidoPuntoVenta() {
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarPedidoPuntoVenta.setVisible(this.isPermisoActualizarPedidoPuntoVenta);	
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.setVisible(this.isPermisoActualizarPedidoPuntoVenta);	
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.setVisible(this.isPermisoEliminarPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarPedidoPuntoVenta);							
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarPedidoPuntoVenta && this.isPermisoGuardarCambiosPedidoPuntoVenta));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosPedidoPuntoVenta() {
		if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualPedidoPuntoVenta();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesPedidoPuntoVenta() {
	}
	
	public void jTableDatosPedidoPuntoVentaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarPedidoPuntoVenta(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.pedidopuntoventa.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.pedidopuntoventa.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.pedidopuntoventa.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.pedidopuntoventa.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.pedidopuntoventa.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cajaPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocaja=true;

			idTienePermisocaja=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(CajaConstantesFunciones.CLASSNAME);

			if(idTienePermisocaja) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.cajaBeanSwingJInternalFrame=new CajaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cajaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cajaBeanSwingJInternalFrame.getCajaLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_caja()!=null) {
					this.cajaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cajaBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_caja());
					this.cajaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCaja();
				}

				JInternalFrameBase jinternalFrame =this.cajaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordercaja=(TitledBorder)this.cajaBeanSwingJInternalFrame.jScrollPanelDatosCaja.getBorder();

				titledBordercaja.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Caja");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cajaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_caja()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_caja = "+this.pedidopuntoventa.getid_caja().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clientePedidoPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderPedidoPuntoVenta=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosPedidoPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clientePedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.pedidopuntoventa.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.pedidopuntoventa.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesaPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomesa=true;

			idTienePermisomesa=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(MesaConstantesFunciones.CLASSNAME);

			if(idTienePermisomesa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.mesaBeanSwingJInternalFrame=new MesaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesaBeanSwingJInternalFrame.getMesaLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_mesa()!=null) {
					this.mesaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesaBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_mesa());
					this.mesaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMesa();
				}

				JInternalFrameBase jinternalFrame =this.mesaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBordermesa=(TitledBorder)this.mesaBeanSwingJInternalFrame.jScrollPanelDatosMesa.getBorder();

				titledBordermesa.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Mesa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_mesa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mesa = "+this.pedidopuntoventa.getid_mesa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadopedidopuntoventa=true;

			idTienePermisoestadopedidopuntoventa=this.tienePermisosUsuarioEnPaginaWebPedidoPuntoVenta(EstadoPedidoPuntoVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadopedidopuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosPedidoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosPedidoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);

				this.estadopedidopuntoventaBeanSwingJInternalFrame=new EstadoPedidoPuntoVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadopedidopuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadopedidopuntoventaBeanSwingJInternalFrame.getEstadoPedidoPuntoVentaLogic().setConnexion(this.pedidopuntoventaLogic.getConnexion());

				if(this.pedidopuntoventa.getid_estado_pedido_punto_venta()!=null) {
					this.estadopedidopuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadopedidopuntoventaBeanSwingJInternalFrame.setIdActual(this.pedidopuntoventa.getid_estado_pedido_punto_venta());
					this.estadopedidopuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadopedidopuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadopedidopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoPedidoPuntoVenta();
				}

				JInternalFrameBase jinternalFrame =this.estadopedidopuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderPedidoPuntoVenta=(TitledBorder)this.jScrollPanelDatosPedidoPuntoVenta.getBorder();
				TitledBorder titledBorderestadopedidopuntoventa=(TitledBorder)this.estadopedidopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosEstadoPedidoPuntoVenta.getBorder();

				titledBorderestadopedidopuntoventa.setTitle(titledBorderPedidoPuntoVenta.getTitle() + " -> Estado Pedido");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getid_estado_pedido_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_pedido_punto_venta = "+this.pedidopuntoventa.getid_estado_pedido_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencialPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getnumero_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial like '%"+this.pedidopuntoventa.getnumero_secuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getcodigo_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_cliente like '%"+this.pedidopuntoventa.getcodigo_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getnombre_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_cliente like '%"+this.pedidopuntoventa.getnombre_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getdireccion_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_cliente like '%"+this.pedidopuntoventa.getdireccion_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefono_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.gettelefono_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono_cliente like '%"+this.pedidopuntoventa.gettelefono_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontarjeta_clientePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.gettarjeta_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where tarjeta_cliente like '%"+this.pedidopuntoventa.gettarjeta_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.pedidopuntoventa.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonhoraPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.gethora()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where hora = "+this.pedidopuntoventa.gethora().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.pedidopuntoventa.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.pedidopuntoventa.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonicePedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.pedidopuntoventa.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.pedidopuntoventa.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalPedidoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.getpedidopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.pedidopuntoventa==null) {
						this.pedidopuntoventa = new PedidoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);
				}

				if(this.pedidopuntoventa.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.pedidopuntoventa.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingPedidoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdCajaPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdCaja();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClientePedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdCliente();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdEmpresa();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoPedidoPuntoVentaPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdEstadoPedidoPuntoVenta();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesaPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdMesa();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdSucursal();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdTipoPrecio();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdUsuario();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorPedidoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);

			this.getPedidoPuntoVentasFK_IdVendedor();

			this.inicializarActualizarBindingPedidoPuntoVenta(false);

			//if(PedidoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.pedidopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFramePedidoPuntoVenta() {
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
		

		if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.dispose();
			this.jInternalFrameDetalleFormPedidoPuntoVenta=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
			this.jInternalFrameReporteDinamicoPedidoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoPedidoPuntoVenta.dispose();
			this.jInternalFrameReporteDinamicoPedidoPuntoVenta=null;
		}
		
		if(this.jInternalFrameImportacionPedidoPuntoVenta!=null) {
			this.jInternalFrameImportacionPedidoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameImportacionPedidoPuntoVenta.dispose();
			this.jInternalFrameImportacionPedidoPuntoVenta=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessPedidoPuntoVenta();
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			
			if(sTipo.equals("NuevoPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarPedidoPuntoVenta")) {
				jButtonDuplicarPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarPedidoPuntoVenta")) {
				jButtonCopiarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormPedidoPuntoVenta")) {
				jButtonVerFormPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarPedidoPuntoVenta")) {
				jButtonDuplicarPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarPedidoPuntoVenta")) {
				jButtonDuplicarPedidoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarPedidoPuntoVenta")) {
				jButtonModificarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarPedidoPuntoVenta")) {
				jButtonModificarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarPedidoPuntoVenta")) {
				jButtonModificarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarPedidoPuntoVenta")) {
				jButtonActualizarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarPedidoPuntoVenta")) {
				jButtonActualizarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarPedidoPuntoVenta")) {
				jButtonActualizarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarPedidoPuntoVenta")) {
				jButtonEliminarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarPedidoPuntoVenta")) {
				jButtonEliminarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarPedidoPuntoVenta")) {
				jButtonEliminarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarPedidoPuntoVenta")) {
				jButtonCancelarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarPedidoPuntoVenta")) {
				jButtonCancelarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarPedidoPuntoVenta")) {
				jButtonCancelarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarPedidoPuntoVenta")) {
				jButtonCerrarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarPedidoPuntoVenta")) {
				jButtonCerrarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarPedidoPuntoVenta")) {
				jButtonCerrarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarPedidoPuntoVenta")) {
				jButtonMostrarOcultarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarPedidoPuntoVenta")) {
				jButtonCancelarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarPedidoPuntoVenta")) {
				jButtonCopiarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarPedidoPuntoVenta")) {
				jButtonVerFormPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarPedidoPuntoVenta")) {
				jButtonCopiarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormPedidoPuntoVenta")) {
				jButtonVerFormPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionPedidoPuntoVenta")) {
				jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarPedidoPuntoVenta")) {
				jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionPedidoPuntoVenta")) {
				jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresPedidoPuntoVenta")) {
				jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarPedidoPuntoVenta")) {
				jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnteriorePedidoPuntoVenta")) {
				jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesPedidoPuntoVenta")) {
				jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarPedidoPuntoVenta")) {
				jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesPedidoPuntoVenta")) {
				jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByPedidoPuntoVenta") || sTipo.equals("MenuItemDetalleAbrirOrderByPedidoPuntoVenta")) {
				jButtonAbrirOrderByPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarPedidoPuntoVenta") || sTipo.equals("MenuItemDetalleMostrarOcultarPedidoPuntoVenta")) {
				jButtonMostrarOcultarPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosPedidoPuntoVenta")) {
				jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarPedidoPuntoVenta")) {
				jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosPedidoPuntoVenta")) {
				jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoPedidoPuntoVenta")) {
				jButtonCerrarReporteDinamicoPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoPedidoPuntoVenta")) {
				jButtonGenerarReporteDinamicoPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoPedidoPuntoVenta")) {
				
				jButtonGenerarExcelReporteDinamicoPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionPedidoPuntoVenta")) {
				jButtonCerrarImportacionPedidoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionPedidoPuntoVenta")) {
				
				jButtonGenerarImportacionPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionPedidoPuntoVenta")) {
				
				jButtonAbrirImportacionPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesPedidoPuntoVenta")) {
				jComboBoxTiposAccionesPedidoPuntoVentaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesPedidoPuntoVenta")) {
				jComboBoxTiposRelacionesPedidoPuntoVentaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioPedidoPuntoVenta")) {
				jComboBoxTiposAccionesPedidoPuntoVentaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarPedidoPuntoVenta")) {
				
				jComboBoxTiposSeleccionarPedidoPuntoVentaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralPedidoPuntoVenta")) {
				jTextFieldValorCampoGeneralPedidoPuntoVentaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByPedidoPuntoVenta")) {
				jButtonAbrirOrderByPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarPedidoPuntoVenta")) {
				jButtonAbrirOrderByPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByPedidoPuntoVenta")) {
				jButtonCerrarOrderByPedidoPuntoVentaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idPedidoPuntoVentaBusqueda")) {
				this.jButtonidPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPedidoPuntoVentaUpdate")) {
				this.jButtonid_empresaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_empresaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalPedidoPuntoVentaUpdate")) {
				this.jButtonid_sucursalPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalPedidoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioPedidoPuntoVentaUpdate")) {
				this.jButtonid_usuarioPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioPedidoPuntoVentaBusqueda")) {
				this.jButtonid_usuarioPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorPedidoPuntoVentaUpdate")) {
				this.jButtonid_vendedorPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorPedidoPuntoVentaBusqueda")) {
				this.jButtonid_vendedorPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaPedidoPuntoVentaUpdate")) {
				this.jButtonid_cajaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_cajaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				this.jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVentaUpdate")) {
				this.jButtonid_clientePedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVentaBusqueda")) {
				this.jButtonid_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioPedidoPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioPedidoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaPedidoPuntoVentaUpdate")) {
				this.jButtonid_mesaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_mesaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_pedido_punto_ventaPedidoPuntoVentaUpdate")) {
				this.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialPedidoPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clientePedidoPuntoVentaBusqueda")) {
				this.jButtoncodigo_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clientePedidoPuntoVentaBusqueda")) {
				this.jButtonnombre_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clientePedidoPuntoVentaBusqueda")) {
				this.jButtondireccion_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clientePedidoPuntoVentaBusqueda")) {
				this.jButtontelefono_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clientePedidoPuntoVentaBusqueda")) {
				this.jButtontarjeta_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaPedidoPuntoVentaBusqueda")) {
				this.jButtonfechaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaPedidoPuntoVentaBusqueda")) {
				this.jButtonhoraPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalPedidoPuntoVentaBusqueda")) {
				this.jButtonsub_totalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaPedidoPuntoVentaBusqueda")) {
				this.jButtonivaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("icePedidoPuntoVentaBusqueda")) {
				this.jButtonicePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoPedidoPuntoVentaBusqueda")) {
				this.jButtondescuentoPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalPedidoPuntoVentaBusqueda")) {
				this.jButtontotalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				this.jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdCajaPedidoPuntoVenta")) {
				this.jButtonFK_IdCajaPedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClientePedidoPuntoVenta")) {
				this.jButtonFK_IdClientePedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta")) {
				this.jButtonFK_IdEstadoPedidoPuntoVentaPedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMesaPedidoPuntoVenta")) {
				this.jButtonFK_IdMesaPedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoPrecioPedidoPuntoVenta")) {
				this.jButtonFK_IdTipoPrecioPedidoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorPedidoPuntoVenta")) {
				this.jButtonFK_IdVendedorPedidoPuntoVentaActionPerformed(evt);
			}
			
			;
			
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessPedidoPuntoVenta();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				


			if(sTipo.equals("descuentoPedidoPuntoVenta")) {
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			PedidoPuntoVenta pedidopuntoventaLocal=null;
			
			if(!this.getEsControlTabla()) {
				pedidopuntoventaLocal=this.pedidopuntoventa;
			} else {
				pedidopuntoventaLocal=this.pedidopuntoventaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("descuentoPedidoPuntoVenta")) {
					if(pedidopuntoventaLocal.getdescuento()==Double.parseDouble(this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
							
				
				


			if(sTipo.equals("descuentoPedidoPuntoVenta")) {
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("descuentoPedidoPuntoVenta")) {
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
								
						
				


				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
								
				
				


				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
							
				
				


				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
								
				
				


			if(sTipo.equals("descuentoPedidoPuntoVenta")) {
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosPedidoPuntoVenta")) {
					jCheckBoxSeleccionarTodosPedidoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosPedidoPuntoVenta")) {
					jCheckBoxSeleccionadosPedidoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarPedidoPuntoVenta")) {
					
				}
				
				


				
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
												
				
				


				
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta;
				}

				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClientePedidoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
				//recargarFormPedidoPuntoVentaCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta;
				}

				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClientePedidoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
				//recargarFormPedidoPuntoVentaCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
			}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.pedidopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.pedidopuntoventa);
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta;
				}

				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormPedidoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClientePedidoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
				//recargarFormPedidoPuntoVentaCliente(jComboBoxid_clienteFK_IdClientePedidoPuntoVenta,"FK_IdCliente");
			}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(PedidoPuntoVenta.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",PedidoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaPedidoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.pedidopuntoventaAnterior =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarPedidoPuntoVenta")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosPedidoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosPedidoPuntoVenta.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.pedidopuntoventa =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.pedidopuntoventa);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarPedidoPuntoVenta")) {
				
				}
				
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarPedidoPuntoVenta")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosPedidoPuntoVenta.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarPedidoPuntoVenta")) {
			
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessPedidoPuntoVenta();
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			if(sTipo.equals("NuevoPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarPedidoPuntoVenta")) {
				jButtonDuplicarPedidoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarPedidoPuntoVenta")) {
				jButtonCopiarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormPedidoPuntoVenta")) {
				jButtonVerFormPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesPedidoPuntoVenta")) {
				jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarPedidoPuntoVenta")) {
				jButtonModificarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarPedidoPuntoVenta")) {
				jButtonActualizarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarPedidoPuntoVenta")) {
				jButtonEliminarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarPedidoPuntoVenta")) {
				jButtonCancelarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarPedidoPuntoVenta")) {
				jButtonCerrarPedidoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosPedidoPuntoVenta")) {
				jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosPedidoPuntoVenta")) {
				jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByPedidoPuntoVenta")) {
				jButtonAbrirOrderByPedidoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionPedidoPuntoVenta")) {
				jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresPedidoPuntoVenta")) {
				jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesPedidoPuntoVenta")) {
				jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idPedidoPuntoVentaBusqueda")) {
				this.jButtonidPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaPedidoPuntoVentaUpdate")) {
				this.jButtonid_empresaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_empresaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalPedidoPuntoVentaUpdate")) {
				this.jButtonid_sucursalPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalPedidoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioPedidoPuntoVentaUpdate")) {
				this.jButtonid_usuarioPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioPedidoPuntoVentaBusqueda")) {
				this.jButtonid_usuarioPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorPedidoPuntoVentaUpdate")) {
				this.jButtonid_vendedorPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorPedidoPuntoVentaBusqueda")) {
				this.jButtonid_vendedorPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaPedidoPuntoVentaUpdate")) {
				this.jButtonid_cajaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_cajaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVenta")) {
				this.jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVentaUpdate")) {
				this.jButtonid_clientePedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clientePedidoPuntoVentaBusqueda")) {
				this.jButtonid_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioPedidoPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioPedidoPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaPedidoPuntoVentaUpdate")) {
				this.jButtonid_mesaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_mesaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_pedido_punto_ventaPedidoPuntoVentaUpdate")) {
				this.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda")) {
				this.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialPedidoPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clientePedidoPuntoVentaBusqueda")) {
				this.jButtoncodigo_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clientePedidoPuntoVentaBusqueda")) {
				this.jButtonnombre_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clientePedidoPuntoVentaBusqueda")) {
				this.jButtondireccion_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clientePedidoPuntoVentaBusqueda")) {
				this.jButtontelefono_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clientePedidoPuntoVentaBusqueda")) {
				this.jButtontarjeta_clientePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaPedidoPuntoVentaBusqueda")) {
				this.jButtonfechaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaPedidoPuntoVentaBusqueda")) {
				this.jButtonhoraPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalPedidoPuntoVentaBusqueda")) {
				this.jButtonsub_totalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaPedidoPuntoVentaBusqueda")) {
				this.jButtonivaPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("icePedidoPuntoVentaBusqueda")) {
				this.jButtonicePedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoPedidoPuntoVentaBusqueda")) {
				this.jButtondescuentoPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalPedidoPuntoVentaBusqueda")) {
				this.jButtontotalPedidoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessPedidoPuntoVenta();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFramePedidoPuntoVenta")) {
				closingInternalFramePedidoPuntoVenta();
				
			} else if(sTipo.equals("jButtonCancelarPedidoPuntoVenta")) {
				JInternalFrameBase jInternalFrameDetalleFormPedidoPuntoVenta = (JInternalFrameBase)evt.getSource();
	            	
	            PedidoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(PedidoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormPedidoPuntoVenta.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarPedidoPuntoVentaActionPerformed(null);
			}
			
			PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.pedidopuntoventa,new Object(),this.pedidopuntoventaParameterGeneral,this.pedidopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormPedidoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormPedidoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormPedidoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.pedidopuntoventa)) {
			if(!esControlTabla) {
				if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);			
				}
				
				if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.procesarEventosPedidoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this.pedidopuntoventa,this.pedidopuntoventaParameterGeneral,this.isEsNuevoPedidoPuntoVenta,classes);//this.pedidopuntoventaLogic.getPedidoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral,this.pedidopuntoventaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanPedidoPuntoVenta(classes,this.pedidopuntoventaReturnGeneral,this.pedidopuntoventaBean,false);
					}
						
					if(this.pedidopuntoventaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta());	
					}
						
					if(this.pedidopuntoventaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta(),classes);//this.pedidopuntoventaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioPedidoPuntoVenta(this.pedidopuntoventa,classes);//this.pedidopuntoventaBean);									
				}
			
				if(PedidoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualPedidoPuntoVenta(this.pedidopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysPedidoPuntoVenta(this.pedidopuntoventa);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.pedidopuntoventaAnterior!=null) {
						this.pedidopuntoventa=this.pedidopuntoventaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.procesarEventosPedidoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this.pedidopuntoventa,this.pedidopuntoventaParameterGeneral,this.isEsNuevoPedidoPuntoVenta,classes);//this.pedidopuntoventaLogic.getPedidoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.pedidopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.pedidopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta(),pedidopuntoventaLogic.getPedidoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta(),this.pedidopuntoventas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosPedidoPuntoVenta.repaint();
				
				//((AbstractTableModel) this.jTableDatosPedidoPuntoVenta.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosPedidoPuntoVenta();
			}
		}
	}
	
	public void actualizarVisualTableDatosPedidoPuntoVenta() throws Exception {
		
		PedidoPuntoVentaModel pedidopuntoventaModel=(PedidoPuntoVentaModel)this.jTableDatosPedidoPuntoVenta.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			pedidopuntoventaModel.pedidopuntoventas=this.pedidopuntoventaLogic.getPedidoPuntoVentas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			pedidopuntoventaModel.pedidopuntoventas=this.pedidopuntoventas;
		}
		
		
		((PedidoPuntoVentaModel) this.jTableDatosPedidoPuntoVenta.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaPedidoPuntoVenta() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getpedidopuntoventaAnterior(),this.pedidopuntoventaLogic.getPedidoPuntoVentas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getpedidopuntoventaAnterior(),this.pedidopuntoventas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosPedidoPuntoVenta();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetallePedidoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.setDetallePedidoPuntoVentas(pedidopuntoventa.getDetallePedidoPuntoVentas());
					this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetallePedidoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.pedidopuntoventa,new Object(),generalEntityParameterGeneral,this.pedidopuntoventaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsOfPedidoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=PedidoPuntoVentaConstantesFunciones.getClassesRelationshipsFromStringsOfPedidoPuntoVenta(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormPedidoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				PedidoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.pedidopuntoventa,new Object(),generalEntityParameterGeneral,this.pedidopuntoventaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioPedidoPuntoVenta(PedidoPuntoVentaBean pedidopuntoventaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(DetallePedidoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.setDetallePedidoPuntoVentas(pedidopuntoventa.getDetallePedidoPuntoVentas());
					this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetallePedidoPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanPedidoPuntoVenta(ArrayList<Classe> classes,PedidoPuntoVentaReturnGeneral pedidopuntoventaReturnGeneral,PedidoPuntoVentaBean pedidopuntoventaBean,Boolean conDefault) throws Exception {
		
			this.pedidopuntoventaBean.setDetallePedidoPuntoVentas(pedidopuntoventaReturnGeneral.getPedidoPuntoVenta().getDetallePedidoPuntoVentas());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(DetallePedidoPuntoVenta.class)) {
					pedidopuntoventa.setDetallePedidoPuntoVentas(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaBeanSwingJInternalFrame.detallepedidopuntoventaLogic.getDetallePedidoPuntoVentas());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.pedidopuntoventa)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta = new PedidoPuntoVentaDetalleFormJInternalFrame(jDesktopPane,this.pedidopuntoventaSessionBean.getConGuardarRelaciones(),this.pedidopuntoventaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.setVisible(false);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.setSelected(false);						
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.pedidopuntoventaLogic=this.pedidopuntoventaLogic;
		
		this.cargarCombosFrameForeignKeyPedidoPuntoVenta("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetallePedidoPuntoVenta();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetallePedidoPuntoVenta();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyPedidoPuntoVenta("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyPedidoPuntoVenta();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPedidoPuntoVenta"));
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarPedidoPuntoVenta"));

		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarPedidoPuntoVenta"));
					
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemModificarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarPedidoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarPedidoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPedidoPuntoVenta"));
						
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemActualizarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPedidoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarPedidoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarPedidoPuntoVenta"));
								
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemEliminarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPedidoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarPedidoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarPedidoPuntoVenta"));
					
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemCancelarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPedidoPuntoVenta"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemDetalleCerrarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPedidoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPedidoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPedidoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPedidoPuntoVenta"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"descuentoPedidoPuntoVenta"));
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.addActionListener(new TextFieldActionListener(this,"descuentoPedidoPuntoVenta"));
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddescuentoPedidoPuntoVenta,"descuentoPedidoPuntoVenta"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonidPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaBusqueda"));
		//jButtonid_clientePedidoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnumero_secuencialPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtoncodigo_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnombre_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondireccion_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontelefono_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontarjeta_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonfechaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonhoraPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonsub_totalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonivaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonicePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"icePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondescuentoPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontotalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalPedidoPuntoVentaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPedidoPuntoVenta"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFramePedidoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarPedidoPuntoVenta"));
		}
		
		this.jTableDatosPedidoPuntoVenta.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarPedidoPuntoVenta"));
		
		this.jTableDatosPedidoPuntoVenta.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarPedidoPuntoVenta"));
		
		this.jButtonNuevoPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoPedidoPuntoVenta"));
		
		this.jButtonDuplicarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarPedidoPuntoVenta"));
		
		this.jButtonCopiarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"CopiarPedidoPuntoVenta"));
		
		this.jButtonVerFormPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"VerFormPedidoPuntoVenta"));
		
		
		this.jButtonNuevoToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoToolBarPedidoPuntoVenta"));
			
		this.jButtonDuplicarToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarToolBarPedidoPuntoVenta"));
			
		this.jMenuItemNuevoPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoPedidoPuntoVenta"));
			
		this.jMenuItemDuplicarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarPedidoPuntoVenta"));		
		
		
		this.jButtonNuevoRelacionesPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoRelacionesPedidoPuntoVenta"));
		
		
		this.jButtonNuevoRelacionesToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarPedidoPuntoVenta"));
			
		this.jMenuItemNuevoRelacionesPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesPedidoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarPedidoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonModificarToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarPedidoPuntoVenta"));
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemModificarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarPedidoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarPedidoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonActualizarToolBarPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarPedidoPuntoVenta"));
				
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemActualizarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarPedidoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarPedidoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonEliminarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarPedidoPuntoVenta"));
						
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemEliminarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarPedidoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarPedidoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonCancelarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarPedidoPuntoVenta"));
			
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemCancelarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarPedidoPuntoVenta"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarPedidoPuntoVenta"));		
		
		
		this.jButtonCerrarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarPedidoPuntoVenta"));
		
		
		this.jButtonCerrarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarToolBarPedidoPuntoVenta"));
			
		this.jMenuItemCerrarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCerrarPedidoPuntoVenta"));
			
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jMenuItemDetalleCerrarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarPedidoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosPedidoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarPedidoPuntoVenta"));
		}
		
		this.jButtonCopiarToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CopiarToolBarPedidoPuntoVenta"));
			
		this.jButtonVerFormToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"VerFormToolBarPedidoPuntoVenta"));
		
		this.jMenuItemGuardarCambiosPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosPedidoPuntoVenta"));
			
		this.jMenuItemCopiarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCopiarPedidoPuntoVenta"));		
		
		this.jMenuItemVerFormPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemVerFormPedidoPuntoVenta"));		
		
		
		this.jButtonGuardarCambiosTablaPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPedidoPuntoVenta"));
		
		
		this.jButtonGuardarCambiosTablaToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarPedidoPuntoVenta"));
			
		this.jMenuItemGuardarCambiosTablaPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaPedidoPuntoVenta"));		
		
		
		
		this.jButtonRecargarInformacionPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionPedidoPuntoVenta"));
					
		this.jButtonRecargarInformacionToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarPedidoPuntoVenta"));
		
		this.jMenuItemRecargarInformacionPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionPedidoPuntoVenta"));		
		
		
		
		this.jButtonAnterioresPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresPedidoPuntoVenta"));
		
		
		this.jButtonAnterioresToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresToolBarPedidoPuntoVenta"));
		
		this.jMenuItemAnterioresPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresPedidoPuntoVenta"));		
		
		
		this.jButtonSiguientesPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesPedidoPuntoVenta"));
		
		
		this.jButtonSiguientesToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesToolBarPedidoPuntoVenta"));
			
		this.jMenuItemSiguientesPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesPedidoPuntoVenta"));
			
		this.jMenuItemAbrirOrderByPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByPedidoPuntoVenta"));
			
		this.jMenuItemMostrarOcultarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarPedidoPuntoVenta"));
			
		this.jMenuItemDetalleAbrirOrderByPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByPedidoPuntoVenta"));
			
		this.jMenuItemDetalleMostarOcultarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarPedidoPuntoVenta"));		
		
		
		this.jButtonNuevoGuardarCambiosPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosPedidoPuntoVenta"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarPedidoPuntoVenta"));
			
		this.jMenuItemNuevoGuardarCambiosPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosPedidoPuntoVenta"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosPedidoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosPedidoPuntoVenta"));

		this.jCheckBoxSeleccionadosPedidoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionadosPedidoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioPedidoPuntoVenta"));
		}
		
		
		this.jComboBoxTiposRelacionesPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposRelacionesPedidoPuntoVenta"));
			
		this.jComboBoxTiposAccionesPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesPedidoPuntoVenta"));
					
		this.jComboBoxTiposSeleccionarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposSeleccionarPedidoPuntoVenta"));
			
		this.jTextFieldValorCampoGeneralPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralPedidoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"descuentoPedidoPuntoVenta"));
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.addActionListener(new TextFieldActionListener(this,"descuentoPedidoPuntoVenta"));
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddescuentoPedidoPuntoVenta,"descuentoPedidoPuntoVenta"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonidPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaBusqueda"));
		//jButtonid_clientePedidoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnumero_secuencialPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtoncodigo_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnombre_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondireccion_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontelefono_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontarjeta_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonfechaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonhoraPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonsub_totalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonivaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonicePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"icePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondescuentoPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontotalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalPedidoPuntoVentaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdCajaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaPedidoPuntoVenta"));

			this.jButtonFK_IdClientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClientePedidoPuntoVenta"));

			this.jButtonBuscarFK_IdClienteid_clientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVenta"));

			this.jButtonFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta"));

			this.jButtonFK_IdMesaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaPedidoPuntoVenta"));

			this.jButtonFK_IdTipoPrecioPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioPedidoPuntoVenta"));

			this.jButtonFK_IdVendedorPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorPedidoPuntoVenta"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoPedidoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPedidoPuntoVenta"));
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPedidoPuntoVenta"));
				this.jInternalFrameReporteDinamicoPedidoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPedidoPuntoVenta"));
			}
			
			//this.jButtonCerrarReporteDinamicoPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoPedidoPuntoVenta"));				
			//this.jButtonGenerarReporteDinamicoPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoPedidoPuntoVenta"));
			//this.jButtonGenerarExcelReporteDinamicoPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoPedidoPuntoVenta"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionPedidoPuntoVenta!=null) {
				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionPedidoPuntoVenta"));
				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionPedidoPuntoVenta"));
				this.jInternalFrameImportacionPedidoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionPedidoPuntoVenta"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByPedidoPuntoVenta"));
			
			this.jButtonAbrirOrderByToolBarPedidoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarPedidoPuntoVenta"));			
			
			if(this.jInternalFrameOrderByPedidoPuntoVenta!=null) {
				this.jInternalFrameOrderByPedidoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByPedidoPuntoVenta"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jTabbedPaneRelacionesPedidoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesPedidoPuntoVenta"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFramePedidoPuntoVenta();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormPedidoPuntoVenta = (JInternalFrameBase)event.getSource();
	            	
	            PedidoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(PedidoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormPedidoPuntoVenta.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarPedidoPuntoVentaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosPedidoPuntoVenta.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosPedidoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosPedidoPuntoVenta.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosPedidoPuntoVenta.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoPedidoPuntoVenta";
		inputMap = this.jButtonNuevoPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesPedidoPuntoVenta";
		inputMap = this.jButtonNuevoRelacionesPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoPedidoPuntoVentaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarPedidoPuntoVenta";
		inputMap = this.jButtonModificarPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarPedidoPuntoVenta";
		inputMap = this.jButtonActualizarPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarPedidoPuntoVenta";
		inputMap = this.jButtonEliminarPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarPedidoPuntoVenta";
		inputMap = this.jButtonCancelarPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarPedidoPuntoVenta";
		inputMap = this.jButtonCerrarPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosPedidoPuntoVenta";
		inputMap = this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonGuardarCambiosPedidoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosPedidoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosPedidoPuntoVenta.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosPedidoPuntoVentaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesPedidoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesPedidoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarPedidoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarPedidoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralPedidoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralPedidoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonidPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_empresaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_sucursalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_usuarioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_vendedorPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_cajaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaPedidoPuntoVentaBusqueda"));
		//jButtonid_clientePedidoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clientePedidoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_tipo_precioPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_mesaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaPedidoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_pedido_punto_ventaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnumero_secuencialPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtoncodigo_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonnombre_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondireccion_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontelefono_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontarjeta_clientePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clientePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonfechaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonhoraPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonsub_totalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonivaPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonicePedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"icePedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtondescuentoPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoPedidoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtontotalPedidoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalPedidoPuntoVentaBusqueda"));
		
		
		this.jButtonFK_IdCajaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaPedidoPuntoVenta"));

		this.jButtonFK_IdClientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClientePedidoPuntoVenta"));

		this.jButtonBuscarFK_IdClienteid_clientePedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clientePedidoPuntoVenta"));

		this.jButtonFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta"));

		this.jButtonFK_IdMesaPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaPedidoPuntoVenta"));

		this.jButtonFK_IdTipoPrecioPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioPedidoPuntoVenta"));

		this.jButtonFK_IdVendedorPedidoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorPedidoPuntoVenta"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionPedidoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionPedidoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarPedidoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarPedidoPuntoVenta.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosPedidoPuntoVenta(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
					pedidopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventas) {
					pedidopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosPedidoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
						pedidopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventas) {
						pedidopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPedidoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPedidoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosPedidoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosPedidoPuntoVenta.getSelectedRows();
			
			PedidoPuntoVenta pedidopuntoventaLocal=new PedidoPuntoVenta();
			
			//this.seleccionarTodosPedidoPuntoVenta(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					pedidopuntoventaLocal =(PedidoPuntoVenta) this.pedidopuntoventaLogic.getPedidoPuntoVentas().toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					pedidopuntoventaLocal =(PedidoPuntoVenta) this.pedidopuntoventas.toArray()[this.jTableDatosPedidoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				pedidopuntoventaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
						pedidopuntoventaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventas) {
						pedidopuntoventaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosPedidoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosPedidoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosPedidoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualPedidoPuntoVentaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarPedidoPuntoVentaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralPedidoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralPedidoPuntoVenta.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventaLogic.getPedidoPuntoVentas()) {
				
						if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL)) {
							existe=true;
							pedidopuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							pedidopuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							pedidopuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							pedidopuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							pedidopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							pedidopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							pedidopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							pedidopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							pedidopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventas) {
					
						if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL)) {
							existe=true;
							pedidopuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							pedidopuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							pedidopuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							pedidopuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							pedidopuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							pedidopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							pedidopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							pedidopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							pedidopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							pedidopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesPedidoPuntoVentaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioPedidoPuntoVenta=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesPedidoPuntoVenta.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReportePedidoPuntoVenta) {				
					conSplash=true;//false;										
					
					//this.startProcessPedidoPuntoVenta(conSplash);
				
					this.generarReportePedidoPuntoVentasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoPedidoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPedidoPuntoVentasSeleccionados(false);
				//this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoPedidoPuntoVentasSeleccionados(true);
				//this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPedidoPuntoVenta();
				
				this.exportarPedidoPuntoVentasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionPedidoPuntoVentas();
				//this.importarPedidoPuntoVentas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessPedidoPuntoVenta();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelPedidoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Pedido Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessPedidoPuntoVenta();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoPedidoPuntoVenta)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyPedidoPuntoVenta(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
				}	
			} 			
			else if(PedidoPuntoVentaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReportePedidoPuntoVenta) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessPedidoPuntoVenta(conSplash);
					
						//this.actualizarParametrosGeneralPedidoPuntoVenta();
						
						this.generarReporteProcesoAccionPedidoPuntoVentasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(PedidoPuntoVentaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Pedido Punto VentaS SELECCIONADOS?", "MANTENIMIENTO DE Pedido Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessPedidoPuntoVenta();
				
						this.actualizarParametrosGeneralPedidoPuntoVenta();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.pedidopuntoventaReturnGeneral=pedidopuntoventaLogic.procesarAccionPedidoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.pedidopuntoventaLogic.getPedidoPuntoVentas(),this.pedidopuntoventaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarPedidoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralPedidoPuntoVenta();
					
					PedidoPuntoVentaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarPedidoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesPedidoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxTiposAccionesFormularioPedidoPuntoVenta.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessPedidoPuntoVenta(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesPedidoPuntoVentaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessPedidoPuntoVenta();
			
			if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
			PedidoPuntoVenta pedidopuntoventa=new PedidoPuntoVenta();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingPedidoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesPedidoPuntoVenta.getSelectedItem();
			
			
			
			
			pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
			//this.sTipoAccion;
			
			if(pedidopuntoventasSeleccionados.size()==1) {
				for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
					pedidopuntoventa=pedidopuntoventaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Detalle Pedido")) {
					jButtonDetallePedidoPuntoVentaActionPerformed(null,rowIndex,true,false,pedidopuntoventa);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessPedidoPuntoVenta();
			
      		//this.finishProcessPedidoPuntoVenta(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarPedidoPuntoVentaReturnGeneral() throws Exception {
		if(this.pedidopuntoventaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.pedidopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.pedidopuntoventaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.pedidopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.pedidopuntoventaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.pedidopuntoventaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
		}
		
		if(this.pedidopuntoventaReturnGeneral.getConRetornoLista() || this.pedidopuntoventaReturnGeneral.getConRetornoObjeto()) {
			if(this.pedidopuntoventaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.pedidopuntoventaLogic.setPedidoPuntoVentas(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.pedidopuntoventaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.pedidopuntoventaLogic.setPedidoPuntoVenta(this.pedidopuntoventaReturnGeneral.getPedidoPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingPedidoPuntoVenta(false);
		}
	}
	
	public void actualizarParametrosGeneralPedidoPuntoVenta() throws Exception {
		
		
	}
	
	public ArrayList<PedidoPuntoVenta> getPedidoPuntoVentasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioPedidoPuntoVenta) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventaLogic.getPedidoPuntoVentas()) {
					if(pedidopuntoventaAux.getIsSelected()) {
						pedidopuntoventasSeleccionados.add(pedidopuntoventaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(PedidoPuntoVenta pedidopuntoventaAux:this.pedidopuntoventas) {
					if(pedidopuntoventaAux.getIsSelected()) {
						pedidopuntoventasSeleccionados.add(pedidopuntoventaAux);				
					}
				}
			}
			
			if(pedidopuntoventasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						pedidopuntoventasSeleccionados.addAll(this.pedidopuntoventaLogic.getPedidoPuntoVentas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						pedidopuntoventasSeleccionados.addAll(this.pedidopuntoventas);				
					}
				}
			}
		} else {
			pedidopuntoventasSeleccionados.add(this.pedidopuntoventa);
		}
		
		return pedidopuntoventasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReportePedidoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalPedidoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoPedidoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPedidoPuntoVentasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoPedidoPuntoVentasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesPedidoPuntoVentasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Pedido Punto Venta",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados);
		
	}	
	
	public void generarReporteNormalPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionPedidoPuntoVentasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		
		this.abrirInicializarFrameReporteDinamicoPedidoPuntoVenta();
		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoPedidoPuntoVenta();
		
		
		//this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados ,pedidopuntoventaImplementable,pedidopuntoventaImplementableHome);
	}
	
	public void mostrarImportacionPedidoPuntoVentas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionPedidoPuntoVenta();
		
		this.abrirFrameImportacionPedidoPuntoVenta();		
		
			
		//this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados ,pedidopuntoventaImplementable,pedidopuntoventaImplementableHome);
	}
	
	public void importarPedidoPuntoVentas() throws Exception {		
	
	}
	
	public void exportarPedidoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelPedidoPuntoVentasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoPedidoPuntoVentasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlPedidoPuntoVentasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Pedido Punto Venta",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarPedidoPuntoVenta(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarPedidoPuntoVenta(pedidopuntoventaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//pedidopuntoventaAux.setsDetalleGeneralEntityReporte(pedidopuntoventaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarPedidoPuntoVenta(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_HORA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=pedidopuntoventa.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getcaja_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getmesa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getestadopedidopuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getnumero_secuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getcodigo_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getnombre_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getdireccion_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.gettelefono_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.gettarjeta_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.gethora().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=pedidopuntoventa.gettotal().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("PedidoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelPedidoPuntoVenta(row);				
				iRow++;
			}				
			
			for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelPedidoPuntoVenta(pedidopuntoventaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlPedidoPuntoVentasSeleccionados() throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();		
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"pedidopuntoventa.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("pedidopuntoventas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("pedidopuntoventa");
			//elementRoot.appendChild(element);
		
			for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
				element = document.createElement("pedidopuntoventa");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlPedidoPuntoVenta(pedidopuntoventaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Pedido Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelPedidoPuntoVenta(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_HORA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(PedidoPuntoVentaConstantesFunciones.LABEL_TOTAL);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getcaja_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getmesa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getestadopedidopuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getnumero_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getcodigo_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getnombre_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getdireccion_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.gettelefono_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.gettarjeta_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.gethora());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(pedidopuntoventa.gettotal());				
	}
	
	public void setFilaDatosExportarXmlPedidoPuntoVenta(PedidoPuntoVenta pedidopuntoventa,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(PedidoPuntoVentaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(pedidopuntoventa.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(PedidoPuntoVentaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(pedidopuntoventa.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementusuario_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementvendedor_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementcaja_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDCAJA);
		elementcaja_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getcaja_descripcion()));
		element.appendChild(elementcaja_descripcion);

		Element elementcliente_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(pedidopuntoventa.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementmesa_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDMESA);
		elementmesa_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getmesa_descripcion()));
		element.appendChild(elementmesa_descripcion);

		Element elementestadopedidopuntoventa_descripcion = document.createElement(PedidoPuntoVentaConstantesFunciones.IDESTADOPEDIDOPUNTOVENTA);
		elementestadopedidopuntoventa_descripcion.appendChild(document.createTextNode(pedidopuntoventa.getestadopedidopuntoventa_descripcion()));
		element.appendChild(elementestadopedidopuntoventa_descripcion);

		Element elementnumero_secuencial = document.createElement(PedidoPuntoVentaConstantesFunciones.NUMERO_SECUENCIAL);
		elementnumero_secuencial.appendChild(document.createTextNode(pedidopuntoventa.getnumero_secuencial().trim()));
		element.appendChild(elementnumero_secuencial);

		Element elementcodigo_cliente = document.createElement(PedidoPuntoVentaConstantesFunciones.CODIGOCLIENTE);
		elementcodigo_cliente.appendChild(document.createTextNode(pedidopuntoventa.getcodigo_cliente().trim()));
		element.appendChild(elementcodigo_cliente);

		Element elementnombre_cliente = document.createElement(PedidoPuntoVentaConstantesFunciones.NOMBRECLIENTE);
		elementnombre_cliente.appendChild(document.createTextNode(pedidopuntoventa.getnombre_cliente().trim()));
		element.appendChild(elementnombre_cliente);

		Element elementdireccion_cliente = document.createElement(PedidoPuntoVentaConstantesFunciones.DIRECCIONCLIENTE);
		elementdireccion_cliente.appendChild(document.createTextNode(pedidopuntoventa.getdireccion_cliente().trim()));
		element.appendChild(elementdireccion_cliente);

		Element elementtelefono_cliente = document.createElement(PedidoPuntoVentaConstantesFunciones.TELEFONOCLIENTE);
		elementtelefono_cliente.appendChild(document.createTextNode(pedidopuntoventa.gettelefono_cliente().trim()));
		element.appendChild(elementtelefono_cliente);

		Element elementtarjeta_cliente = document.createElement(PedidoPuntoVentaConstantesFunciones.TARJETACLIENTE);
		elementtarjeta_cliente.appendChild(document.createTextNode(pedidopuntoventa.gettarjeta_cliente().trim()));
		element.appendChild(elementtarjeta_cliente);

		Element elementfecha = document.createElement(PedidoPuntoVentaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(pedidopuntoventa.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementhora = document.createElement(PedidoPuntoVentaConstantesFunciones.HORA);
		elementhora.appendChild(document.createTextNode(pedidopuntoventa.gethora().toString().trim()));
		element.appendChild(elementhora);

		Element elementsub_total = document.createElement(PedidoPuntoVentaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(pedidopuntoventa.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementiva = document.createElement(PedidoPuntoVentaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(pedidopuntoventa.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementice = document.createElement(PedidoPuntoVentaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(pedidopuntoventa.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementdescuento = document.createElement(PedidoPuntoVentaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(pedidopuntoventa.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementtotal = document.createElement(PedidoPuntoVentaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(pedidopuntoventa.gettotal().toString().trim()));
		element.appendChild(elementtotal);
	}
	
	public void generarReporteGroupGenericoPedidoPuntoVentasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados=new ArrayList<PedidoPuntoVenta>();
		
		pedidopuntoventasSeleccionados=this.getPedidoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoPedidoPuntoVenta(pedidopuntoventasSeleccionados);
		
		this.generarReportePedidoPuntoVentas("Todos",pedidopuntoventasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoPedidoPuntoVenta(ArrayList<PedidoPuntoVenta> pedidopuntoventasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(PedidoPuntoVenta pedidopuntoventaAux:pedidopuntoventasSeleccionados) {
				pedidopuntoventaAux.setsDetalleGeneralEntityReporte(pedidopuntoventaAux.toString());
			
				if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDCAJA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getcaja_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDMESA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getmesa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_IDESTADOPEDIDOPUNTOVENTA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getestadopedidopuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NUMERO_SECUENCIAL)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getnumero_secuencial());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getcodigo_cliente());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getnombre_cliente());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.getdireccion_cliente());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.gettelefono_cliente());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.gettarjeta_cliente());
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(pedidopuntoventaAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(PedidoPuntoVentaConstantesFunciones.LABEL_HORA)) {
					existe=true;
					pedidopuntoventaAux.setsDescripcionGeneralEntityReporte1(pedidopuntoventaAux.gethora().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,PedidoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesPedidoPuntoVenta(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoPedidoPuntoVenta=true;
				this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=true;
				this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=true;
			}
			
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=true;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
			this.isVisibilidadCeldaModificarPedidoPuntoVenta=true;
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarPedidoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarPedidoPuntoVenta=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(PedidoPuntoVentaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=true;
		} else {
			this.actualizarEstadoPanelsPedidoPuntoVenta(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarPedidoPuntoVenta=false;
			//this.isVisibilidadCeldaVerFormPedidoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarPedidoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!pedidopuntoventaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
		} else {
			this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!pedidopuntoventaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;												
			}
			
			this.jButtonCerrarPedidoPuntoVenta.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesPedidoPuntoVenta=false;
		}
		
		if(!this.permiteMantenimiento(this.pedidopuntoventa)) {
			this.isVisibilidadCeldaActualizarPedidoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarPedidoPuntoVenta=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesPedidoPuntoVenta() {
		this.isVisibilidadCeldaNuevoPedidoPuntoVenta=false;
		this.isVisibilidadCeldaGuardarCambiosPedidoPuntoVenta=false;
	}
	
	public void actualizarEstadoPanelsPedidoPuntoVenta(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionPedidoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosPedidoPuntoVenta!=null) {
				this.jScrollPanelDatosPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionPedidoPuntoVenta!=null) {
				this.jPanelPaginacionPedidoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
					this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.pedidopuntoventaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasPedidoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesPedidoPuntoVenta!=null) {
				this.jPanelParametrosReportesPedidoPuntoVenta.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdCaja=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdCaja=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdCaja=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadFK_IdCaja=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCaja(Boolean isParaCaja){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCajaNegation=!isParaCaja;

			this.isVisibilidadFK_IdCaja=isParaCaja;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdCaja=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadFK_IdCaja=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoPrecio;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaMesa(Boolean isParaMesa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesaNegation=!isParaMesa;

			this.isVisibilidadFK_IdCaja=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaMesa;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoPedidoPuntoVenta(Boolean isParaEstadoPedidoPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoPedidoPuntoVentaNegation=!isParaEstadoPedidoPuntoVenta;

			this.isVisibilidadFK_IdCaja=isParaEstadoPedidoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdCajaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEstadoPedidoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdClientePedidoPuntoVenta);}

			this.isVisibilidadFK_IdEstadoPedidoPuntoVenta=isParaEstadoPedidoPuntoVenta;
			if(!this.isVisibilidadFK_IdEstadoPedidoPuntoVenta) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEstadoPedidoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdMesaPedidoPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEstadoPedidoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdTipoPrecioPedidoPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoPedidoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(jPanelFK_IdVendedorPedidoPuntoVenta);}
		}
		
	}
	
	

	public String registrarSesionPedidoPuntoVentaParaDetallePedidoPuntoVentas() throws Exception {
		Boolean isPaginaPopupDetallePedidoPuntoVenta=false;

		try {

			if(this.pedidopuntoventaSessionBean==null) {
				this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean=new DetallePedidoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setsPathNavegacionActual(pedidopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetallePedidoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetallePedidoPuntoVenta=this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetallePedidoPuntoVenta(true);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetallePedidoPuntoVenta(PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionPedidoPuntoVenta(true);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setlidPedidoPuntoVentaActual(this.idPedidoPuntoVentaActual);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.detallepedidopuntoventaSessionBean.setNoMantenimiento(true);

			pedidopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPedidoPuntoVenta(true);
			pedidopuntoventaSessionBean.setlIdPedidoPuntoVentaActualForeignKey(this.idPedidoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionPedidoPuntoVentaParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(pedidopuntoventaSessionBean==null) {
				pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(pedidopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.pedidopuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(PedidoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionPedidoPuntoVenta(true);
			//clienteSessionBean.setlidPedidoPuntoVentaActual(this.idPedidoPuntoVentaActual);

			pedidopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyPedidoPuntoVenta(true);
			pedidopuntoventaSessionBean.setlIdPedidoPuntoVentaActualForeignKey(this.idPedidoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//PedidoPuntoVentaSessionBean pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
		
		if(this.pedidopuntoventaSessionBean==null) {
			this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
		}
		
		this.pedidopuntoventaSessionBean.setsUltimaBusquedaPedidoPuntoVenta(this.getsAccionBusqueda());
		this.pedidopuntoventaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.pedidopuntoventaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
			pedidopuntoventaSessionBean.setid_caja(this.getid_cajaFK_IdCaja());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			pedidopuntoventaSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			pedidopuntoventaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoPedidoPuntoVenta")) {
			pedidopuntoventaSessionBean.setid_estado_pedido_punto_venta(this.getid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
			pedidopuntoventaSessionBean.setid_mesa(this.getid_mesaFK_IdMesa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			pedidopuntoventaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
			pedidopuntoventaSessionBean.setid_tipo_precio(this.getid_tipo_precioFK_IdTipoPrecio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			pedidopuntoventaSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			pedidopuntoventaSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//PedidoPuntoVentaSessionBean pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
		
		if(this.pedidopuntoventaSessionBean==null) {
			this.pedidopuntoventaSessionBean=new PedidoPuntoVentaSessionBean();
		}
		
		if(this.pedidopuntoventaSessionBean.getsUltimaBusquedaPedidoPuntoVenta()!=null&&!this.pedidopuntoventaSessionBean.getsUltimaBusquedaPedidoPuntoVenta().equals("")) {
			this.setsAccionBusqueda(pedidopuntoventaSessionBean.getsUltimaBusquedaPedidoPuntoVenta());
			this.setiNumeroPaginacion(pedidopuntoventaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(pedidopuntoventaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
				this.setid_cajaFK_IdCaja(pedidopuntoventaSessionBean.getid_caja());
				pedidopuntoventaSessionBean.setid_caja(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(pedidopuntoventaSessionBean.getid_cliente());
				pedidopuntoventaSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(pedidopuntoventaSessionBean.getid_empresa());
				pedidopuntoventaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoPedidoPuntoVenta")) {
				this.setid_estado_pedido_punto_ventaFK_IdEstadoPedidoPuntoVenta(pedidopuntoventaSessionBean.getid_estado_pedido_punto_venta());
				pedidopuntoventaSessionBean.setid_estado_pedido_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
				this.setid_mesaFK_IdMesa(pedidopuntoventaSessionBean.getid_mesa());
				pedidopuntoventaSessionBean.setid_mesa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(pedidopuntoventaSessionBean.getid_sucursal());
				pedidopuntoventaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
				this.setid_tipo_precioFK_IdTipoPrecio(pedidopuntoventaSessionBean.getid_tipo_precio());
				pedidopuntoventaSessionBean.setid_tipo_precio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(pedidopuntoventaSessionBean.getid_usuario());
				pedidopuntoventaSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(pedidopuntoventaSessionBean.getid_vendedor());
				pedidopuntoventaSessionBean.setid_vendedor(-1L);
			}
		}
		
		this.pedidopuntoventaSessionBean.setsUltimaBusquedaPedidoPuntoVenta("");
		this.pedidopuntoventaSessionBean.setiNumeroPaginacion(PedidoPuntoVentaConstantesFunciones.INUMEROPAGINACION);
		this.pedidopuntoventaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaPedidoPuntoVenta(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioPedidoPuntoVenta() {
		this.updateBorderResaltarBusquedasFormularioPedidoPuntoVenta();
		this.updateVisibilidadBusquedasFormularioPedidoPuntoVenta();
		this.updateHabilitarBusquedasFormularioPedidoPuntoVenta();
	}
	
	public void updateBorderResaltarBusquedasFormularioPedidoPuntoVenta() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponents().length>0) {
	

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdCajaPedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaPedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdCajaPedidoPuntoVenta);
			}
		}

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdClientePedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdClientePedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdClientePedidoPuntoVenta);
			}
		}

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			}
		}

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdMesaPedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaPedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdMesaPedidoPuntoVenta);
			}
		}

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioPedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioPedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioPedidoPuntoVenta);
			}
		}

		if(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdVendedorPedidoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorPedidoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdVendedorPedidoPuntoVenta);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioPedidoPuntoVenta() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaPedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdCajaPedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdCajaPedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdClientePedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdClientePedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdClientePedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaPedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdMesaPedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdMesaPedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioPedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioPedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioPedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorPedidoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarFK_IdVendedorPedidoPuntoVenta);
			if(!this.pedidopuntoventaConstantesFunciones.mostrarFK_IdVendedorPedidoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasPedidoPuntoVenta.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioPedidoPuntoVenta() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaPedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdCajaPedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdCajaPedidoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdClientePedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdClientePedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdClientePedidoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaPedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdMesaPedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdMesaPedidoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioPedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdTipoPrecioPedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdTipoPrecioPedidoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorPedidoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.pedidopuntoventaConstantesFunciones.activarFK_IdVendedorPedidoPuntoVenta);
				this.jTabbedPaneBusquedasPedidoPuntoVenta.setEnabledAt(index,this.pedidopuntoventaConstantesFunciones.activarFK_IdVendedorPedidoPuntoVenta);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaPedidoPuntoVenta(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdCaja")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaPedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdCajaPedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdCajaPedidoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdClientePedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdClientePedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdClientePedidoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoPedidoPuntoVenta")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdEstadoPedidoPuntoVentaPedidoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMesa")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaPedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdMesaPedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdMesaPedidoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoPrecio")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioPedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdTipoPrecioPedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioPedidoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasPedidoPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorPedidoPuntoVenta);

			this.jTabbedPaneBusquedasPedidoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasPedidoPuntoVenta.getComponent(index);

			this.pedidopuntoventaConstantesFunciones.setResaltarFK_IdVendedorPedidoPuntoVenta(resaltar);

			jPanel.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarFK_IdVendedorPedidoPuntoVenta);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarPedidoPuntoVenta.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioPedidoPuntoVenta() throws Exception {

		if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioPedidoPuntoVenta();
		this.updateVisibilidadResaltarControlesFormularioPedidoPuntoVenta();
		this.updateHabilitarResaltarControlesFormularioPedidoPuntoVenta();
		
	}
	
	public void updateBorderResaltarControlesFormularioPedidoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.pedidopuntoventaConstantesFunciones.resaltaridPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltaridPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_empresaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_empresaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_sucursalPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_sucursalPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_usuarioPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_usuarioPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_vendedorPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_vendedorPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_cajaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_cajaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_tipo_precioPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_tipo_precioPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_mesaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_mesaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarid_estado_pedido_punto_ventaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarid_estado_pedido_punto_ventaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarnumero_secuencialPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarnumero_secuencialPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarcodigo_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarcodigo_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarnombre_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarnombre_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltardireccion_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltardireccion_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltartelefono_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltartelefono_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltartarjeta_clientePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltartarjeta_clientePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarfechaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarfechaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarhoraPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarhoraPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarsub_totalPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarsub_totalPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltarivaPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltarivaPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltaricePedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltaricePedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltardescuentoPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltardescuentoPedidoPuntoVenta);}
		if(this.pedidopuntoventaConstantesFunciones.resaltartotalPedidoPuntoVenta!=null && this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setBorder(this.pedidopuntoventaConstantesFunciones.resaltartotalPedidoPuntoVenta);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioPedidoPuntoVenta() throws Exception {		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
	
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostraridPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelidPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostraridPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_empresaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_empresaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_empresaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_sucursalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_sucursalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_sucursalPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_usuarioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_usuarioPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_usuarioPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_vendedorPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_vendedorPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_vendedorPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_cajaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_cajaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_cajaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_clientePedidoPuntoVenta);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_tipo_precioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_tipo_precioPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_tipo_precioPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_mesaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_mesaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_mesaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_estado_pedido_punto_ventaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelid_estado_pedido_punto_ventaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarid_estado_pedido_punto_ventaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarnumero_secuencialPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelnumero_secuencialPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarnumero_secuencialPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarcodigo_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelcodigo_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarcodigo_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarnombre_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelnombre_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarnombre_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrardireccion_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPaneldireccion_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrardireccion_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartelefono_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPaneltelefono_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartelefono_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartarjeta_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPaneltarjeta_clientePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartarjeta_clientePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarfechaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelfechaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarfechaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarhoraPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelhoraPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarhoraPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarsub_totalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelsub_totalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarsub_totalPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarivaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelivaPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrarivaPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostraricePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPanelicePedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostraricePedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrardescuentoPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPaneldescuentoPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrardescuentoPedidoPuntoVenta);
		//this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartotalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jPaneltotalPedidoPuntoVenta.setVisible(this.pedidopuntoventaConstantesFunciones.mostrartotalPedidoPuntoVenta);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioPedidoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormPedidoPuntoVenta!=null) {
	
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jLabelidPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activaridPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_empresaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_empresaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_sucursalPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_sucursalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_usuarioPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_usuarioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_vendedorPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_vendedorPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_cajaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_cajaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_clientePedidoPuntoVenta);
			this.jInternalFrameDetalleFormPedidoPuntoVenta.jButtonid_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_tipo_precioPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_tipo_precioPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_mesaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_mesaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jComboBoxid_estado_pedido_punto_ventaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarid_estado_pedido_punto_ventaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldnumero_secuencialPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarnumero_secuencialPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldcodigo_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarcodigo_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreanombre_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarnombre_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreadireccion_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activardireccion_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextAreatelefono_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activartelefono_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtarjeta_clientePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activartarjeta_clientePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jDateChooserfechaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarfechaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jSpinnerhoraPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarhoraPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldsub_totalPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarsub_totalPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldivaPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activarivaPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldicePedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activaricePedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFielddescuentoPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activardescuentoPedidoPuntoVenta);
		this.jInternalFrameDetalleFormPedidoPuntoVenta.jTextFieldtotalPedidoPuntoVenta.setEnabled(this.pedidopuntoventaConstantesFunciones.activartotalPedidoPuntoVenta);
		}
	}
	
		
}