/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.DetalleNotaCreditoPuntoVentaConstantesFunciones;
import com.bydan.erp.puntoventa.util.DetalleNotaCreditoPuntoVentaParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.DetalleNotaCreditoPuntoVentaParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.DetalleNotaCreditoPuntoVentaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame extends DetalleNotaCreditoPuntoVentaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventaValidator = new ClassValidator<DetalleNotaCreditoPuntoVenta>(DetalleNotaCreditoPuntoVenta.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa;	
	public DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux;
	public DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaTotales;
	public Long idDetalleNotaCreditoPuntoVentaActual;
	public Long iIdNuevoDetalleNotaCreditoPuntoVenta=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboNotaCreditoPuntoVenta="";

	public List<NotaCreditoPuntoVenta> notacreditopuntoventasForeignKey;

	public List<NotaCreditoPuntoVenta> getnotacreditopuntoventasForeignKey() {
		return notacreditopuntoventasForeignKey;
	}

	public void setnotacreditopuntoventasForeignKey(List<NotaCreditoPuntoVenta> notacreditopuntoventasForeignKey) {
		this.notacreditopuntoventasForeignKey = notacreditopuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public NotaCreditoPuntoVenta notacreditopuntoventaForeignKey;

	public NotaCreditoPuntoVenta getnotacreditopuntoventaForeignKey() {
		return notacreditopuntoventaForeignKey;
	}

	public void setnotacreditopuntoventaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventaForeignKey) {
		this.notacreditopuntoventaForeignKey = notacreditopuntoventaForeignKey;
	}

	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboBodega="";

	public List<Bodega> bodegasForeignKey;

	public List<Bodega> getbodegasForeignKey() {
		return bodegasForeignKey;
	}

	public void setbodegasForeignKey(List<Bodega> bodegasForeignKey) {
		this.bodegasForeignKey = bodegasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Bodega bodegaForeignKey;

	public Bodega getbodegaForeignKey() {
		return bodegaForeignKey;
	}

	public void setbodegaForeignKey(Bodega bodegaForeignKey) {
		this.bodegaForeignKey = bodegaForeignKey;
	}

	public String sFinalQueryComboProducto="";

	public List<Producto> productosForeignKey;

	public List<Producto> getproductosForeignKey() {
		return productosForeignKey;
	}

	public void setproductosForeignKey(List<Producto> productosForeignKey) {
		this.productosForeignKey = productosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Producto productoForeignKey;

	public Producto getproductoForeignKey() {
		return productoForeignKey;
	}

	public void setproductoForeignKey(Producto productoForeignKey) {
		this.productoForeignKey = productoForeignKey;
	}

	public String sFinalQueryComboUnidad="";

	public List<Unidad> unidadsForeignKey;

	public List<Unidad> getunidadsForeignKey() {
		return unidadsForeignKey;
	}

	public void setunidadsForeignKey(List<Unidad> unidadsForeignKey) {
		this.unidadsForeignKey = unidadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Unidad unidadForeignKey;

	public Unidad getunidadForeignKey() {
		return unidadForeignKey;
	}

	public void setunidadForeignKey(Unidad unidadForeignKey) {
		this.unidadForeignKey = unidadForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idProductoActual=0L;

	public Long getidProductoActual() {
		return idProductoActual;
	}

	public void setidProductoActual(Long idProductoActual) {
		this.idProductoActual= idProductoActual;
	}
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoNuevoDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoActualizarDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoEliminarDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoConsultaDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoBusquedaDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoReporteDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoCopiarDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoVerFormDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoDuplicarDetalleNotaCreditoPuntoVenta;
	public Boolean isPermisoOrdenDetalleNotaCreditoPuntoVenta;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaReturnGeneral;
	public DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoDetalleNotaCreditoPuntoVenta=false;
	public Boolean esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected DetalleNotaCreditoPuntoVentaSessionBeanAdditional detallenotacreditopuntoventaSessionBeanAdditional=null;
	
	public DetalleNotaCreditoPuntoVentaSessionBeanAdditional getDetalleNotaCreditoPuntoVentaSessionBeanAdditional() {
		return this.detallenotacreditopuntoventaSessionBeanAdditional;
	}
	
	public void setDetalleNotaCreditoPuntoVentaSessionBeanAdditional(DetalleNotaCreditoPuntoVentaSessionBeanAdditional detallenotacreditopuntoventaSessionBeanAdditional) {
		try {
			this.detallenotacreditopuntoventaSessionBeanAdditional=detallenotacreditopuntoventaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional detallenotacreditopuntoventaBeanSwingJInternalFrameAdditional=null;
	//public class DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame
	
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional getDetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional() {
		return this.detallenotacreditopuntoventaBeanSwingJInternalFrameAdditional;
	}
	
	public void setDetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional detallenotacreditopuntoventaBeanSwingJInternalFrameAdditional) {
		try {
			this.detallenotacreditopuntoventaBeanSwingJInternalFrameAdditional=detallenotacreditopuntoventaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public DetalleNotaCreditoPuntoVentaLogic detallenotacreditopuntoventaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaBean;
	public DetalleNotaCreditoPuntoVentaConstantesFunciones detallenotacreditopuntoventaConstantesFunciones;
	//public DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaReturnGeneral;
	
	//FK
	
	public NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic;
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public BodegaLogic bodegaLogic;
	public ProductoLogic productoLogic;
	public UnidadLogic unidadLogic;
	
	//PARAMETROS
	
	
	//public List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventas;	
	//public List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasEliminados;
	//public List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;	
	
	
	public Boolean isVisibilidadFK_IdBodega=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdNotaCreditoPuntoVenta=false;
	public Boolean isVisibilidadFK_IdProducto=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUnidad=false;
	
	public Long getiIdNuevoDetalleNotaCreditoPuntoVenta() {
		return this.iIdNuevoDetalleNotaCreditoPuntoVenta;
	}

	public void setiIdNuevoDetalleNotaCreditoPuntoVenta(Long iIdNuevoDetalleNotaCreditoPuntoVenta) {
		this.iIdNuevoDetalleNotaCreditoPuntoVenta = iIdNuevoDetalleNotaCreditoPuntoVenta;
	}
	
	public Long getidDetalleNotaCreditoPuntoVentaActual() {
		return this.idDetalleNotaCreditoPuntoVentaActual;
	}

	public void setidDetalleNotaCreditoPuntoVentaActual(Long idDetalleNotaCreditoPuntoVentaActual) {
		this.idDetalleNotaCreditoPuntoVentaActual = idDetalleNotaCreditoPuntoVentaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public DetalleNotaCreditoPuntoVenta getdetallenotacreditopuntoventa() {
		return this.detallenotacreditopuntoventa;
	}

	public void setdetallenotacreditopuntoventa(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) {
		this.detallenotacreditopuntoventa = detallenotacreditopuntoventa;
	}
	
	public DetalleNotaCreditoPuntoVenta getdetallenotacreditopuntoventaAux() {
		return this.detallenotacreditopuntoventaAux;
	}

	public void setdetallenotacreditopuntoventaAux(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux) {
		this.detallenotacreditopuntoventaAux = detallenotacreditopuntoventaAux;
	}				
	
	public DetalleNotaCreditoPuntoVenta getdetallenotacreditopuntoventaAnterior() {
		return this.detallenotacreditopuntoventaAnterior;
	}

	public void setdetallenotacreditopuntoventaAnterior(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAnterior) {
		this.detallenotacreditopuntoventaAnterior = detallenotacreditopuntoventaAnterior;
	}	
	
	public DetalleNotaCreditoPuntoVenta getdetallenotacreditopuntoventaTotales() {
		return this.detallenotacreditopuntoventaTotales;
	}

	public void setdetallenotacreditopuntoventaTotales(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaTotales) {
		this.detallenotacreditopuntoventaTotales = detallenotacreditopuntoventaTotales;
	}	
	
	public DetalleNotaCreditoPuntoVenta getdetallenotacreditopuntoventaBean() {
		return this.detallenotacreditopuntoventaBean;
	}

	public void setdetallenotacreditopuntoventaBean(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaBean) {
		this.detallenotacreditopuntoventaBean = detallenotacreditopuntoventaBean;
	}	
	
	public DetalleNotaCreditoPuntoVentaParameterReturnGeneral getdetallenotacreditopuntoventaReturnGeneral() {
		return this.detallenotacreditopuntoventaReturnGeneral;
	}

	public void setdetallenotacreditopuntoventaReturnGeneral(DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaReturnGeneral) {
		this.detallenotacreditopuntoventaReturnGeneral = detallenotacreditopuntoventaReturnGeneral;
	}	
	
	
	public Long id_bodegaFK_IdBodega=-1L;

	public Long getid_bodegaFK_IdBodega() {
		return this.id_bodegaFK_IdBodega;
	}

	public void setid_bodegaFK_IdBodega(Long id_bodegaFK_IdBodega) {
		this.id_bodegaFK_IdBodega = id_bodegaFK_IdBodega;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta=-1L;

	public Long getid_factura_punto_ventaFK_IdNotaCreditoPuntoVenta() {
		return this.id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta;
	}

	public void setid_factura_punto_ventaFK_IdNotaCreditoPuntoVenta(Long id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta) {
		this.id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta = id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta;
	}

	public Long id_productoFK_IdProducto=-1L;

	public Long getid_productoFK_IdProducto() {
		return this.id_productoFK_IdProducto;
	}

	public void setid_productoFK_IdProducto(Long id_productoFK_IdProducto) {
		this.id_productoFK_IdProducto = id_productoFK_IdProducto;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_unidadFK_IdUnidad=-1L;

	public Long getid_unidadFK_IdUnidad() {
		return this.id_unidadFK_IdUnidad;
	}

	public void setid_unidadFK_IdUnidad(Long id_unidadFK_IdUnidad) {
		this.id_unidadFK_IdUnidad = id_unidadFK_IdUnidad;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public DetalleNotaCreditoPuntoVentaLogic getDetalleNotaCreditoPuntoVentaLogic()	{		
		return detallenotacreditopuntoventaLogic;
	}

	public void setDetalleNotaCreditoPuntoVentaLogic(DetalleNotaCreditoPuntoVentaLogic detallenotacreditopuntoventaLogic) {
		this.detallenotacreditopuntoventaLogic = detallenotacreditopuntoventaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoDetalleNotaCreditoPuntoVenta() {
		return isEsNuevoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsEsNuevoDetalleNotaCreditoPuntoVenta(Boolean isEsNuevoDetalleNotaCreditoPuntoVenta) {
		this.isEsNuevoDetalleNotaCreditoPuntoVenta = isEsNuevoDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getEsParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta() {
		return esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta;
	}
	
	public void setEsParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta(Boolean esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta) {
		this.esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta = esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosNotaCreditoPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.notacreditopuntoventasForeignKey=new ArrayList<NotaCreditoPuntoVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			NotaCreditoPuntoVentaLogic notacreditopuntoventaLogic=new NotaCreditoPuntoVentaLogic();

			notacreditopuntoventaLogic.getNotaCreditoPuntoVentaDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getNotaCreditoPuntoVentaDataAccess().setIsForForeingKeyData(true);

					notacreditopuntoventaLogic.getTodosNotaCreditoPuntoVentasWithConnection(sFinalQuery,new Pagination());

					this.notacreditopuntoventasForeignKey=notacreditopuntoventaLogic.getNotaCreditoPuntoVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaNotaCreditoPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					notacreditopuntoventaLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidNotaCreditoPuntoVentaActual());
					this.notacreditopuntoventasForeignKey.add(notacreditopuntoventaLogic.getNotaCreditoPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosBodegasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.bodegasForeignKey=new ArrayList<Bodega>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			BodegaLogic bodegaLogic=new BodegaLogic();

			//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//bodegaLogic.getBodegaDataAccess().setIsForForeingKeyData(true);

					bodegaLogic.getTodosBodegasWithConnection(sFinalQuery,new Pagination());

					this.bodegasForeignKey=bodegaLogic.getBodegas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaBodega(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					bodegaLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidBodegaActual());
					this.bodegasForeignKey.add(bodegaLogic.getBodega());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosProductosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.productosForeignKey=new ArrayList<Producto>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ProductoLogic productoLogic=new ProductoLogic();

			//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//productoLogic.getProductoDataAccess().setIsForForeingKeyData(true);

					productoLogic.getTodosProductosWithConnection(sFinalQuery,new Pagination());

					this.productosForeignKey=productoLogic.getProductos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaProducto(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidProductoActual());
					this.productosForeignKey.add(productoLogic.getProducto());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUnidadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.unidadsForeignKey=new ArrayList<Unidad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UnidadLogic unidadLogic=new UnidadLogic();

			//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//unidadLogic.getUnidadDataAccess().setIsForForeingKeyData(true);

					unidadLogic.getTodosUnidadsWithConnection(sFinalQuery,new Pagination());

					this.unidadsForeignKey=unidadLogic.getUnidads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUnidad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					unidadLogic.getEntityWithConnection(detallenotacreditopuntoventaSessionBean.getlidUnidadActual());
					this.unidadsForeignKey.add(unidadLogic.getUnidad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualNotaCreditoPuntoVentaForeignKey(Long idNotaCreditoPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			NotaCreditoPuntoVenta  notacreditopuntoventaTemp=null;

			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasForeignKey) {
				if(notacreditopuntoventaAux.getId()!=null && notacreditopuntoventaAux.getId().equals(idNotaCreditoPuntoVentaSeleccionado)) {
					notacreditopuntoventaTemp=notacreditopuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(notacreditopuntoventaTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setNotaCreditoPuntoVenta(notacreditopuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventaTemp);
					}
				} else {
					//jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventaTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdNotaCreditoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(notacreditopuntoventaTemp!=null && jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta!=null) {
						jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventaTemp);
					} else {
						if(jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventaTemp);
							if(jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualNotaCreditoPuntoVentaForeignKeyDescripcion(Long idNotaCreditoPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			NotaCreditoPuntoVenta  notacreditopuntoventaTemp=null;

			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasForeignKey) {
				if(notacreditopuntoventaAux.getId()!=null && notacreditopuntoventaAux.getId().equals(idNotaCreditoPuntoVentaSeleccionado)) {
					notacreditopuntoventaTemp=notacreditopuntoventaAux;
					break;
				}
			}


			sDescripcion=NotaCreditoPuntoVentaConstantesFunciones.getNotaCreditoPuntoVentaDescripcion(notacreditopuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualNotaCreditoPuntoVentaForeignKeyGenerico(Long idNotaCreditoPuntoVentaSeleccionado,JComboBox jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			NotaCreditoPuntoVenta  notacreditopuntoventaTemp=null;

			for(NotaCreditoPuntoVenta notacreditopuntoventaAux:notacreditopuntoventasForeignKey) {
				if(notacreditopuntoventaAux.getId()!=null && notacreditopuntoventaAux.getId().equals(idNotaCreditoPuntoVentaSeleccionado)) {
					notacreditopuntoventaTemp=notacreditopuntoventaAux;
					break;
				}
			}

			if(notacreditopuntoventaTemp!=null) {
				jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(notacreditopuntoventaTemp);
			} else {
				if(jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualBodegaForeignKey(Long idBodegaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(bodegaTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setBodega(bodegaTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodegaTemp);
					}
				} else {
					//jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodegaTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){
					if(bodegaTemp!=null && jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta!=null) {
						jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodegaTemp);
					} else {
						if(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodegaTemp);
							if(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualBodegaForeignKeyDescripcion(Long idBodegaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}


			sDescripcion=BodegaConstantesFunciones.getBodegaDescripcion(bodegaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualBodegaForeignKeyGenerico(Long idBodegaSeleccionado,JComboBox jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaTemp=null;

			for(Bodega bodegaAux:bodegasForeignKey) {
				if(bodegaAux.getId()!=null && bodegaAux.getId().equals(idBodegaSeleccionado)) {
					bodegaTemp=bodegaAux;
					break;
				}
			}

			if(bodegaTemp!=null) {
				jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(bodegaTemp);
			} else {
				if(jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualProductoForeignKey(Long idProductoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(productoTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setProducto(productoTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedItem(productoTemp);
					}
				} else {
					//jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedItem(productoTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){
					if(productoTemp!=null && jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta!=null) {
						jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.setSelectedItem(productoTemp);
					} else {
						if(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.setSelectedItem(productoTemp);
							if(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualProductoForeignKeyDescripcion(Long idProductoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}


			sDescripcion=ProductoConstantesFunciones.getProductoDescripcion(productoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualProductoForeignKeyGenerico(Long idProductoSeleccionado,JComboBox jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Producto  productoTemp=null;

			for(Producto productoAux:productosForeignKey) {
				if(productoAux.getId()!=null && productoAux.getId().equals(idProductoSeleccionado)) {
					productoTemp=productoAux;
					break;
				}
			}

			if(productoTemp!=null) {
				jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(productoTemp);
			} else {
				if(jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUnidadForeignKey(Long idUnidadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(unidadTemp!=null) {

					if(this.detallenotacreditopuntoventa!=null) {
						this.detallenotacreditopuntoventa.setUnidad(unidadTemp);
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidadTemp);
					}
				} else {
					//jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidadTemp);
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){
					if(unidadTemp!=null && jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta!=null) {
						jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidadTemp);
					} else {
						if(jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta!=null) {
							//jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidadTemp);
							if(jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
								jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUnidadForeignKeyDescripcion(Long idUnidadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}


			sDescripcion=UnidadConstantesFunciones.getUnidadDescripcion(unidadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUnidadForeignKeyGenerico(Long idUnidadSeleccionado,JComboBox jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadTemp=null;

			for(Unidad unidadAux:unidadsForeignKey) {
				if(unidadAux.getId()!=null && unidadAux.getId().equals(idUnidadSeleccionado)) {
					unidadTemp=unidadAux;
					break;
				}
			}

			if(unidadTemp!=null) {
				jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico.setSelectedItem(unidadTemp);
			} else {
				if(jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico!=null && jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarNotaCreditoPuntoVentaForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			NotaCreditoPuntoVenta  notacreditopuntoventaAux=new NotaCreditoPuntoVenta();

			if(jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico==null) {
				notacreditopuntoventaAux=(NotaCreditoPuntoVenta)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				notacreditopuntoventaAux=(NotaCreditoPuntoVenta)jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(notacreditopuntoventaAux!=null && notacreditopuntoventaAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_factura_punto_venta(notacreditopuntoventaAux.getId());
				detallenotacreditopuntoventa.setnotacreditopuntoventa_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getNotaCreditoPuntoVentaDescripcion(notacreditopuntoventaAux));
				detallenotacreditopuntoventa.setNotaCreditoPuntoVenta(notacreditopuntoventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_empresa(empresaAux.getId());
				detallenotacreditopuntoventa.setempresa_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				detallenotacreditopuntoventa.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_sucursal(sucursalAux.getId());
				detallenotacreditopuntoventa.setsucursal_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				detallenotacreditopuntoventa.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarBodegaForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Bodega  bodegaAux=new Bodega();

			if(jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico==null) {
				bodegaAux=(Bodega)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				bodegaAux=(Bodega)jComboBoxid_bodegaDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(bodegaAux!=null && bodegaAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_bodega(bodegaAux.getId());
				detallenotacreditopuntoventa.setbodega_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getBodegaDescripcion(bodegaAux));
				detallenotacreditopuntoventa.setBodega(bodegaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarProductoForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Producto  productoAux=new Producto();

			if(jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico==null) {
				productoAux=(Producto)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				productoAux=(Producto)jComboBoxid_productoDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(productoAux!=null && productoAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_producto(productoAux.getId());
				detallenotacreditopuntoventa.setproducto_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getProductoDescripcion(productoAux));
				detallenotacreditopuntoventa.setProducto(productoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUnidadForeignKey(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,JComboBox jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico)throws Exception
	{
		try
		{
			Unidad  unidadAux=new Unidad();

			if(jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico==null) {
				unidadAux=(Unidad)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.getSelectedItem();
			} else {
				unidadAux=(Unidad)jComboBoxid_unidadDetalleNotaCreditoPuntoVentaGenerico.getSelectedItem();
			}

			if(unidadAux!=null && unidadAux.getId()!=null) {
				detallenotacreditopuntoventa.setid_unidad(unidadAux.getId());
				detallenotacreditopuntoventa.setunidad_descripcion(DetalleNotaCreditoPuntoVentaConstantesFunciones.getUnidadDescripcion(unidadAux));
				detallenotacreditopuntoventa.setUnidad(unidadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameNotaCreditoPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingNotaCreditoPuntoVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(NotaCreditoPuntoVenta notacreditopuntoventa:this.notacreditopuntoventasForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.addItem(notacreditopuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdNotaCreditoPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(NotaCreditoPuntoVenta notacreditopuntoventa:this.notacreditopuntoventasForeignKey) {
								this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.addItem(notacreditopuntoventa);
							}
						}

						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameBodegasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingBodega=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.addItem(bodega);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdBodega") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Bodega bodega:this.bodegasForeignKey) {
								this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.addItem(bodega);
							}
						}

						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameProductosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingProducto=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.addItem(producto);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdProducto") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Producto producto:this.productosForeignKey) {
								this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.addItem(producto);
							}
						}

						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUnidadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUnidad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.addItem(unidad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { 
					}

					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdUnidad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.removeAllItems();

							for(Unidad unidad:this.unidadsForeignKey) {
								this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.addItem(unidad);
							}
						}

						if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameNotaCreditoPuntoVentaForeignKey(NotaCreditoPuntoVenta notacreditopuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.setSelectedItem(notacreditopuntoventa);
						} else {
							this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameBodegaForeignKey(Bodega bodega,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodega);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.setSelectedItem(bodega);
						} else {
							this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameProductoForeignKey(Producto producto,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedItem(producto);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.setSelectedItem(producto);
						} else {
							this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUnidadForeignKey(Unidad unidad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidad);
						}
					} else {
						if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.setSelectedItem(unidad);
						} else {
							this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			DetalleNotaCreditoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			DetalleNotaCreditoPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(NotaCreditoPuntoVenta.class));
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Bodega.class));
		classes.add(new Classe(Producto.class));
		classes.add(new Classe(Unidad.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(this.detallenotacreditopuntoventas);
			detallenotacreditopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public DetalleNotaCreditoPuntoVentaParameterReturnGeneral getDetalleNotaCreditoPuntoVentaParameterGeneral() {
		return this.detallenotacreditopuntoventaParameterGeneral;
	}
	
	public void setDetalleNotaCreditoPuntoVentaParameterGeneral(DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaParameterGeneral) {
		this.detallenotacreditopuntoventaParameterGeneral = detallenotacreditopuntoventaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoDetalleNotaCreditoPuntoVenta() {
		return isPermisoTodoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoTodoDetalleNotaCreditoPuntoVenta(Boolean isPermisoTodoDetalleNotaCreditoPuntoVenta) {
		this.isPermisoTodoDetalleNotaCreditoPuntoVenta = isPermisoTodoDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoNuevoDetalleNotaCreditoPuntoVenta() {
		return isPermisoNuevoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoNuevoDetalleNotaCreditoPuntoVenta(Boolean isPermisoNuevoDetalleNotaCreditoPuntoVenta) {
		this.isPermisoNuevoDetalleNotaCreditoPuntoVenta = isPermisoNuevoDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoActualizarDetalleNotaCreditoPuntoVenta() {
		return isPermisoActualizarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoActualizarDetalleNotaCreditoPuntoVenta(Boolean isPermisoActualizarDetalleNotaCreditoPuntoVenta) {
		this.isPermisoActualizarDetalleNotaCreditoPuntoVenta = isPermisoActualizarDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoEliminarDetalleNotaCreditoPuntoVenta() {
		return isPermisoEliminarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoEliminarDetalleNotaCreditoPuntoVenta(Boolean isPermisoEliminarDetalleNotaCreditoPuntoVenta) {
		this.isPermisoEliminarDetalleNotaCreditoPuntoVenta = isPermisoEliminarDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta() {
		return isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta(Boolean isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta) {
		this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta = isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoConsultaDetalleNotaCreditoPuntoVenta() {
		return isPermisoConsultaDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoConsultaDetalleNotaCreditoPuntoVenta(Boolean isPermisoConsultaDetalleNotaCreditoPuntoVenta) {
		this.isPermisoConsultaDetalleNotaCreditoPuntoVenta = isPermisoConsultaDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoBusquedaDetalleNotaCreditoPuntoVenta() {
		return isPermisoBusquedaDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoBusquedaDetalleNotaCreditoPuntoVenta(Boolean isPermisoBusquedaDetalleNotaCreditoPuntoVenta) {
		this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta = isPermisoBusquedaDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsPermisoReporteDetalleNotaCreditoPuntoVenta() {
		return isPermisoReporteDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoReporteDetalleNotaCreditoPuntoVenta(Boolean isPermisoReporteDetalleNotaCreditoPuntoVenta) {
		this.isPermisoReporteDetalleNotaCreditoPuntoVenta = isPermisoReporteDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta() {
		return isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta(Boolean isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta = isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta() {
		return isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta(Boolean isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta = isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta() {
		return isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta(Boolean isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta) {
		this.isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta = isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoCopiarDetalleNotaCreditoPuntoVenta() {
		return isPermisoCopiarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoCopiarDetalleNotaCreditoPuntoVenta(Boolean isPermisoCopiarDetalleNotaCreditoPuntoVenta) {
		this.isPermisoCopiarDetalleNotaCreditoPuntoVenta = isPermisoCopiarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoVerFormDetalleNotaCreditoPuntoVenta() {
		return isPermisoVerFormDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoVerFormDetalleNotaCreditoPuntoVenta(Boolean isPermisoVerFormDetalleNotaCreditoPuntoVenta) {
		this.isPermisoVerFormDetalleNotaCreditoPuntoVenta = isPermisoVerFormDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoDuplicarDetalleNotaCreditoPuntoVenta() {
		return isPermisoDuplicarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoDuplicarDetalleNotaCreditoPuntoVenta(Boolean isPermisoDuplicarDetalleNotaCreditoPuntoVenta) {
		this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta = isPermisoDuplicarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsPermisoOrdenDetalleNotaCreditoPuntoVenta() {
		return isPermisoOrdenDetalleNotaCreditoPuntoVenta;
	}

	public void setIsPermisoOrdenDetalleNotaCreditoPuntoVenta(Boolean isPermisoOrdenDetalleNotaCreditoPuntoVenta) {
		this.isPermisoOrdenDetalleNotaCreditoPuntoVenta = isPermisoOrdenDetalleNotaCreditoPuntoVenta;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta() {
		return isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta(Boolean isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta) {
		this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta = isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta;
	}
		
	public DetalleNotaCreditoPuntoVentaSessionBean getdetallenotacreditopuntoventaSessionBean() {
		return this.detallenotacreditopuntoventaSessionBean;
	}
	
	public void setdetallenotacreditopuntoventaSessionBean(DetalleNotaCreditoPuntoVentaSessionBean detallenotacreditopuntoventaSessionBean) {
		this.detallenotacreditopuntoventaSessionBean=detallenotacreditopuntoventaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdBodega() {
		return this.isVisibilidadFK_IdBodega;
	}

	public void setisVisibilidadFK_IdBodega(Boolean isVisibilidadFK_IdBodega) {
		this.isVisibilidadFK_IdBodega=isVisibilidadFK_IdBodega;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdNotaCreditoPuntoVenta() {
		return this.isVisibilidadFK_IdNotaCreditoPuntoVenta;
	}

	public void setisVisibilidadFK_IdNotaCreditoPuntoVenta(Boolean isVisibilidadFK_IdNotaCreditoPuntoVenta) {
		this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isVisibilidadFK_IdNotaCreditoPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdProducto() {
		return this.isVisibilidadFK_IdProducto;
	}

	public void setisVisibilidadFK_IdProducto(Boolean isVisibilidadFK_IdProducto) {
		this.isVisibilidadFK_IdProducto=isVisibilidadFK_IdProducto;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUnidad() {
		return this.isVisibilidadFK_IdUnidad;
	}

	public void setisVisibilidadFK_IdUnidad(Boolean isVisibilidadFK_IdUnidad) {
		this.isVisibilidadFK_IdUnidad=isVisibilidadFK_IdUnidad;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa)throws Exception {
		try {
			
				this.setActualParaGuardarNotaCreditoPuntoVentaForeignKey(detallenotacreditopuntoventa,null);
				this.setActualParaGuardarEmpresaForeignKey(detallenotacreditopuntoventa,null);
				this.setActualParaGuardarSucursalForeignKey(detallenotacreditopuntoventa,null);
				this.setActualParaGuardarBodegaForeignKey(detallenotacreditopuntoventa,null);
				this.setActualParaGuardarProductoForeignKey(detallenotacreditopuntoventa,null);
				this.setActualParaGuardarUnidadForeignKey(detallenotacreditopuntoventa,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		detallenotacreditopuntoventaAux.setId(detallenotacreditopuntoventa.getId());
		detallenotacreditopuntoventaAux.setVersionRow(detallenotacreditopuntoventa.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessDetalleNotaCreditoPuntoVenta();
		
			int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = detallenotacreditopuntoventaValidator.getInvalidValues(this.detallenotacreditopuntoventa);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			detallenotacreditopuntoventaLogic.setDatosCliente(datosCliente);
			detallenotacreditopuntoventaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				detallenotacreditopuntoventaAux=new  DetalleNotaCreditoPuntoVenta();
				
				detallenotacreditopuntoventaAux.setIsNew(true);
				detallenotacreditopuntoventaAux.setIsChanged(true);
				
				detallenotacreditopuntoventaAux.setDetalleNotaCreditoPuntoVentaOriginal(this.detallenotacreditopuntoventa);
				
				detallenotacreditopuntoventaAux.setId(this.detallenotacreditopuntoventa.getId());	
				detallenotacreditopuntoventaAux.setVersionRow(this.detallenotacreditopuntoventa.getVersionRow());	
				detallenotacreditopuntoventaAux.setid_factura_punto_venta(this.detallenotacreditopuntoventa.getid_factura_punto_venta());	
				detallenotacreditopuntoventaAux.setid_empresa(this.detallenotacreditopuntoventa.getid_empresa());	
				detallenotacreditopuntoventaAux.setid_sucursal(this.detallenotacreditopuntoventa.getid_sucursal());	
				detallenotacreditopuntoventaAux.setid_bodega(this.detallenotacreditopuntoventa.getid_bodega());	
				detallenotacreditopuntoventaAux.setid_producto(this.detallenotacreditopuntoventa.getid_producto());	
				detallenotacreditopuntoventaAux.setid_unidad(this.detallenotacreditopuntoventa.getid_unidad());	
				detallenotacreditopuntoventaAux.setserie(this.detallenotacreditopuntoventa.getserie());	
				detallenotacreditopuntoventaAux.setcantidad(this.detallenotacreditopuntoventa.getcantidad());	
				detallenotacreditopuntoventaAux.setprecio(this.detallenotacreditopuntoventa.getprecio());	
				detallenotacreditopuntoventaAux.setdescuento(this.detallenotacreditopuntoventa.getdescuento());	
				detallenotacreditopuntoventaAux.setdescuento_valor(this.detallenotacreditopuntoventa.getdescuento_valor());	
				detallenotacreditopuntoventaAux.setiva(this.detallenotacreditopuntoventa.getiva());	
				detallenotacreditopuntoventaAux.setiva_valor(this.detallenotacreditopuntoventa.getiva_valor());	
				detallenotacreditopuntoventaAux.setice(this.detallenotacreditopuntoventa.getice());	
				detallenotacreditopuntoventaAux.setice_valor(this.detallenotacreditopuntoventa.getice_valor());	
				detallenotacreditopuntoventaAux.setsub_total(this.detallenotacreditopuntoventa.getsub_total());	
				detallenotacreditopuntoventaAux.settotal(this.detallenotacreditopuntoventa.gettotal());	
				detallenotacreditopuntoventaAux.setdescripcion(this.detallenotacreditopuntoventa.getdescripcion());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentas();//WithConnection
						//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentaRelaciones(detallenotacreditopuntoventaAux);//WithConnection
								//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				detallenotacreditopuntoventaAux=new  DetalleNotaCreditoPuntoVenta();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() 
					|| (this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() && this.detallenotacreditopuntoventa.getId()>=0)) {
						
					detallenotacreditopuntoventaAux.setIsNew(false);
				}
				
				detallenotacreditopuntoventaAux.setIsDeleted(false);
			
				detallenotacreditopuntoventaAux.setId(this.detallenotacreditopuntoventa.getId());	
				detallenotacreditopuntoventaAux.setVersionRow(this.detallenotacreditopuntoventa.getVersionRow());	
				detallenotacreditopuntoventaAux.setid_factura_punto_venta(this.detallenotacreditopuntoventa.getid_factura_punto_venta());	
				detallenotacreditopuntoventaAux.setid_empresa(this.detallenotacreditopuntoventa.getid_empresa());	
				detallenotacreditopuntoventaAux.setid_sucursal(this.detallenotacreditopuntoventa.getid_sucursal());	
				detallenotacreditopuntoventaAux.setid_bodega(this.detallenotacreditopuntoventa.getid_bodega());	
				detallenotacreditopuntoventaAux.setid_producto(this.detallenotacreditopuntoventa.getid_producto());	
				detallenotacreditopuntoventaAux.setid_unidad(this.detallenotacreditopuntoventa.getid_unidad());	
				detallenotacreditopuntoventaAux.setserie(this.detallenotacreditopuntoventa.getserie());	
				detallenotacreditopuntoventaAux.setcantidad(this.detallenotacreditopuntoventa.getcantidad());	
				detallenotacreditopuntoventaAux.setprecio(this.detallenotacreditopuntoventa.getprecio());	
				detallenotacreditopuntoventaAux.setdescuento(this.detallenotacreditopuntoventa.getdescuento());	
				detallenotacreditopuntoventaAux.setdescuento_valor(this.detallenotacreditopuntoventa.getdescuento_valor());	
				detallenotacreditopuntoventaAux.setiva(this.detallenotacreditopuntoventa.getiva());	
				detallenotacreditopuntoventaAux.setiva_valor(this.detallenotacreditopuntoventa.getiva_valor());	
				detallenotacreditopuntoventaAux.setice(this.detallenotacreditopuntoventa.getice());	
				detallenotacreditopuntoventaAux.setice_valor(this.detallenotacreditopuntoventa.getice_valor());	
				detallenotacreditopuntoventaAux.setsub_total(this.detallenotacreditopuntoventa.getsub_total());	
				detallenotacreditopuntoventaAux.settotal(this.detallenotacreditopuntoventa.gettotal());	
				detallenotacreditopuntoventaAux.setdescripcion(this.detallenotacreditopuntoventa.getdescripcion());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentas();//WithConnection
						//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentaRelaciones(detallenotacreditopuntoventaAux);//WithConnection
								//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.detallenotacreditopuntoventa,detallenotacreditopuntoventaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				detallenotacreditopuntoventaAux=new  DetalleNotaCreditoPuntoVenta();
				
				detallenotacreditopuntoventaAux.setIsNew(false);
				detallenotacreditopuntoventaAux.setIsChanged(false);
				
				detallenotacreditopuntoventaAux.setIsDeleted(true);
				
				detallenotacreditopuntoventaAux.setId(this.detallenotacreditopuntoventa.getId());	
				detallenotacreditopuntoventaAux.setVersionRow(this.detallenotacreditopuntoventa.getVersionRow());	
				detallenotacreditopuntoventaAux.setid_factura_punto_venta(this.detallenotacreditopuntoventa.getid_factura_punto_venta());	
				detallenotacreditopuntoventaAux.setid_empresa(this.detallenotacreditopuntoventa.getid_empresa());	
				detallenotacreditopuntoventaAux.setid_sucursal(this.detallenotacreditopuntoventa.getid_sucursal());	
				detallenotacreditopuntoventaAux.setid_bodega(this.detallenotacreditopuntoventa.getid_bodega());	
				detallenotacreditopuntoventaAux.setid_producto(this.detallenotacreditopuntoventa.getid_producto());	
				detallenotacreditopuntoventaAux.setid_unidad(this.detallenotacreditopuntoventa.getid_unidad());	
				detallenotacreditopuntoventaAux.setserie(this.detallenotacreditopuntoventa.getserie());	
				detallenotacreditopuntoventaAux.setcantidad(this.detallenotacreditopuntoventa.getcantidad());	
				detallenotacreditopuntoventaAux.setprecio(this.detallenotacreditopuntoventa.getprecio());	
				detallenotacreditopuntoventaAux.setdescuento(this.detallenotacreditopuntoventa.getdescuento());	
				detallenotacreditopuntoventaAux.setdescuento_valor(this.detallenotacreditopuntoventa.getdescuento_valor());	
				detallenotacreditopuntoventaAux.setiva(this.detallenotacreditopuntoventa.getiva());	
				detallenotacreditopuntoventaAux.setiva_valor(this.detallenotacreditopuntoventa.getiva_valor());	
				detallenotacreditopuntoventaAux.setice(this.detallenotacreditopuntoventa.getice());	
				detallenotacreditopuntoventaAux.setice_valor(this.detallenotacreditopuntoventa.getice_valor());	
				detallenotacreditopuntoventaAux.setsub_total(this.detallenotacreditopuntoventa.getsub_total());	
				detallenotacreditopuntoventaAux.settotal(this.detallenotacreditopuntoventa.gettotal());	
				detallenotacreditopuntoventaAux.setdescripcion(this.detallenotacreditopuntoventa.getdescripcion());	
				
				if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.detallenotacreditopuntoventaAux.getId()>=0) {	
						this.detallenotacreditopuntoventasEliminados.add(detallenotacreditopuntoventaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentas();//WithConnection
						//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentaRelaciones(detallenotacreditopuntoventaAux);//WithConnection
								//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(detallenotacreditopuntoventaAux,detallenotacreditopuntoventas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(this.detallenotacreditopuntoventasEliminados);
					
					detallenotacreditopuntoventaLogic.saveDetalleNotaCreditoPuntoVentas();//WithConnection
					//detallenotacreditopuntoventaLogic.getSetVersionRowDetalleNotaCreditoPuntoVentas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta();
				
				this.detallenotacreditopuntoventasEliminados= new ArrayList<DetalleNotaCreditoPuntoVenta>();		
			}
			
			if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Detalle Nota Credito GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.detallenotacreditopuntoventa=detallenotacreditopuntoventaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessDetalleNotaCreditoPuntoVenta();
      	}
		
	}	
	
	public void actualizarRelaciones(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal) throws Exception {
		
		if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal) throws Exception {	
		if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(NotaCreditoPuntoVentaDetalleFormJInternalFrame.class)) {
				NotaCreditoPuntoVentaBeanSwingJInternalFrame notacreditopuntoventaBeanSwingJInternalFrameLocal=(NotaCreditoPuntoVentaBeanSwingJInternalFrame) ((NotaCreditoPuntoVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				notacreditopuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoNotaCreditoPuntoVenta(notacreditopuntoventaBeanSwingJInternalFrameLocal.getnotacreditopuntoventa(),true);
				notacreditopuntoventaBeanSwingJInternalFrameLocal.actualizarLista(notacreditopuntoventaBeanSwingJInternalFrameLocal.notacreditopuntoventa,this.notacreditopuntoventasForeignKey);

				notacreditopuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(notacreditopuntoventaBeanSwingJInternalFrameLocal.notacreditopuntoventa);

				detallenotacreditopuntoventaLocal.setNotaCreditoPuntoVenta(notacreditopuntoventaBeanSwingJInternalFrameLocal.notacreditopuntoventa);

				this.addItemDefectoCombosForeignKeyNotaCreditoPuntoVenta();
				this.cargarCombosFrameNotaCreditoPuntoVentasForeignKey("Formulario");
				this.setActualNotaCreditoPuntoVentaForeignKey(notacreditopuntoventaBeanSwingJInternalFrameLocal.notacreditopuntoventa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				detallenotacreditopuntoventaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				detallenotacreditopuntoventaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(BodegaDetalleFormJInternalFrame.class)) {
				BodegaBeanSwingJInternalFrame bodegaBeanSwingJInternalFrameLocal=(BodegaBeanSwingJInternalFrame) ((BodegaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				bodegaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoBodega(bodegaBeanSwingJInternalFrameLocal.getbodega(),true);
				bodegaBeanSwingJInternalFrameLocal.actualizarLista(bodegaBeanSwingJInternalFrameLocal.bodega,this.bodegasForeignKey);

				bodegaBeanSwingJInternalFrameLocal.actualizarRelaciones(bodegaBeanSwingJInternalFrameLocal.bodega);

				detallenotacreditopuntoventaLocal.setBodega(bodegaBeanSwingJInternalFrameLocal.bodega);

				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey("Formulario");
				this.setActualBodegaForeignKey(bodegaBeanSwingJInternalFrameLocal.bodega.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ProductoDetalleFormJInternalFrame.class)) {
				ProductoBeanSwingJInternalFrame productoBeanSwingJInternalFrameLocal=(ProductoBeanSwingJInternalFrame) ((ProductoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				productoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoProducto(productoBeanSwingJInternalFrameLocal.getproducto(),true);
				productoBeanSwingJInternalFrameLocal.actualizarLista(productoBeanSwingJInternalFrameLocal.producto,this.productosForeignKey);

				productoBeanSwingJInternalFrameLocal.actualizarRelaciones(productoBeanSwingJInternalFrameLocal.producto);

				detallenotacreditopuntoventaLocal.setProducto(productoBeanSwingJInternalFrameLocal.producto);

				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey("Formulario");
				this.setActualProductoForeignKey(productoBeanSwingJInternalFrameLocal.producto.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UnidadDetalleFormJInternalFrame.class)) {
				UnidadBeanSwingJInternalFrame unidadBeanSwingJInternalFrameLocal=(UnidadBeanSwingJInternalFrame) ((UnidadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				unidadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUnidad(unidadBeanSwingJInternalFrameLocal.getunidad(),true);
				unidadBeanSwingJInternalFrameLocal.actualizarLista(unidadBeanSwingJInternalFrameLocal.unidad,this.unidadsForeignKey);

				unidadBeanSwingJInternalFrameLocal.actualizarRelaciones(unidadBeanSwingJInternalFrameLocal.unidad);

				detallenotacreditopuntoventaLocal.setUnidad(unidadBeanSwingJInternalFrameLocal.unidad);

				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey("Formulario");
				this.setActualUnidadForeignKey(unidadBeanSwingJInternalFrameLocal.unidad.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarDetalleNotaCreditoPuntoVentaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = detallenotacreditopuntoventaValidator.getInvalidValues(this.detallenotacreditopuntoventa);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventas) throws Exception {
		try	{		
			DetalleNotaCreditoPuntoVentaConstantesFunciones.actualizarLista(detallenotacreditopuntoventa,detallenotacreditopuntoventas,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventas) throws Exception {
		try	{			
			DetalleNotaCreditoPuntoVentaConstantesFunciones.actualizarSelectedLista(detallenotacreditopuntoventa,detallenotacreditopuntoventas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				detallenotacreditopuntoventasLocal=this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				detallenotacreditopuntoventasLocal=this.detallenotacreditopuntoventas;
			}
			//ARCHITECTURE
		
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal:detallenotacreditopuntoventasLocal) {
				if(this.permiteMantenimiento(detallenotacreditopuntoventaLocal) && detallenotacreditopuntoventaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleNotaCreditoPuntoVentaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDNOTACREDITOPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_empresaDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_sucursalDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDBODEGA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_bodegaDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDPRODUCTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_productoDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDUNIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_unidadDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.SERIE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelserieDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.CANTIDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelcantidadDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.PRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelprecioDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuentoDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCUENTOVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuento_valorDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelivaDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.IVAVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliva_valorDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliceDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.ICEVALOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelice_valorDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelsub_totalDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeltotalDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCRIPCION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescripcionDetalleNotaCreditoPuntoVenta,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_empresaDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_sucursalDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_bodegaDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_productoDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelid_unidadDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelserieDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelcantidadDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelprecioDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuentoDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuento_valorDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelivaDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliva_valorDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliceDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelice_valorDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelsub_totalDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeltotalDetalleNotaCreditoPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescripcionDetalleNotaCreditoPuntoVenta,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoDetalleNotaCreditoPuntoVenta--;	
		
		
		this.detallenotacreditopuntoventaAux=new DetalleNotaCreditoPuntoVenta();
		
		this.detallenotacreditopuntoventaAux.setId(this.iIdNuevoDetalleNotaCreditoPuntoVenta);
		this.detallenotacreditopuntoventaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().add(this.detallenotacreditopuntoventaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.detallenotacreditopuntoventas.add(this.detallenotacreditopuntoventaAux);
		}
		//ARCHITECTURE
		
		this.detallenotacreditopuntoventa=this.detallenotacreditopuntoventaAux;
		
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
		}
				
		//this.setDefaultControlesDetalleNotaCreditoPuntoVenta();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaBean,this.detallenotacreditopuntoventa,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.procesarEventosDetalleNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this.detallenotacreditopuntoventa,this.detallenotacreditopuntoventaParameterGeneral,this.isEsNuevoDetalleNotaCreditoPuntoVenta,classes);//this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVenta()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral,this.detallenotacreditopuntoventaBean,false);
		
		if(this.detallenotacreditopuntoventaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta());
		}
		
		if(this.detallenotacreditopuntoventaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta(),classes);//this.detallenotacreditopuntoventaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyDetalleNotaCreditoPuntoVenta();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarFormDetalleNotaCreditoPuntoVenta(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
						
			if(detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();
			}
			
			this.actualizarVisualTableDatosDetalleNotaCreditoPuntoVenta();
			
			this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoDetalleNotaCreditoPuntoVenta(), this.getIndiceNuevoDetalleNotaCreditoPuntoVenta());
			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
						
			this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarserieDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarcantidadDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarprecioDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activardescuentoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activardescuento_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarivaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activariva_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activariceDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarice_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarsub_totalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activartotalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activardescripcionDetalleNotaCreditoPuntoVenta);	
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta);//
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_empresaDetalleNotaCreditoPuntoVenta);//
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_sucursalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_bodegaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_productoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setEnabled(isHabilitar && this.detallenotacreditopuntoventaConstantesFunciones.activarid_unidadDetalleNotaCreditoPuntoVenta);
	};
	
	public void setDefaultControlesDetalleNotaCreditoPuntoVenta() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoDetalleNotaCreditoPuntoVenta(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.detallenotacreditopuntoventaSessionBean.setConGuardarRelaciones(true);			
			this.detallenotacreditopuntoventaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.setVisible(true);
			
					
		} else {
			//this.detallenotacreditopuntoventaSessionBean.setConGuardarRelaciones(false);			
			this.detallenotacreditopuntoventaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoDetalleNotaCreditoPuntoVenta() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				if(detallenotacreditopuntoventaAux.getId().equals(this.iIdNuevoDetalleNotaCreditoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventas) {
				if(detallenotacreditopuntoventaAux.getId().equals(this.iIdNuevoDetalleNotaCreditoPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				if(detallenotacreditopuntoventaAux.getId().equals(detallenotacreditopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventas) {
				if(detallenotacreditopuntoventaAux.getId().equals(detallenotacreditopuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				if(detallenotacreditopuntoventaAux.getDetalleNotaCreditoPuntoVentaOriginal().getId().equals(detallenotacreditopuntoventaOriginal.getId())) {
					existe=true;
					detallenotacreditopuntoventaOriginal.setId(detallenotacreditopuntoventaAux.getId());
					detallenotacreditopuntoventaOriginal.setVersionRow(detallenotacreditopuntoventaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventas) {
				if(detallenotacreditopuntoventaAux.getDetalleNotaCreditoPuntoVentaOriginal().getId().equals(detallenotacreditopuntoventaOriginal.getId())) {
					existe=true;
					detallenotacreditopuntoventaOriginal.setId(detallenotacreditopuntoventaAux.getId());
					detallenotacreditopuntoventaOriginal.setVersionRow(detallenotacreditopuntoventaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosDetalleNotaCreditoPuntoVenta(Boolean esParaCancelar) throws Exception {
		detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
		detallenotacreditopuntoventaAux=new DetalleNotaCreditoPuntoVenta();
		
		if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
					if(detallenotacreditopuntoventaAux.getId()<0) {
						detallenotacreditopuntoventasAux.add(detallenotacreditopuntoventaAux);
					}		
				}
				this.iIdNuevoDetalleNotaCreditoPuntoVenta=0L;
				this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().removeAll(detallenotacreditopuntoventasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventas) {
					if(detallenotacreditopuntoventaAux.getId()<0) {
						detallenotacreditopuntoventasAux.add(detallenotacreditopuntoventaAux);
					}		
				}
				this.iIdNuevoDetalleNotaCreditoPuntoVenta=0L;
				this.detallenotacreditopuntoventas.removeAll(detallenotacreditopuntoventasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoDetalleNotaCreditoPuntoVenta 
					&& this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()>0
					) {
					detallenotacreditopuntoventaAux=this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().get(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size() - 1);
				
					if(detallenotacreditopuntoventaAux.getId()<0) {
						this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().remove(detallenotacreditopuntoventaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoDetalleNotaCreditoPuntoVenta && this.detallenotacreditopuntoventas.size()>0) {
					detallenotacreditopuntoventaAux=this.detallenotacreditopuntoventas.get(this.detallenotacreditopuntoventas.size() - 1);
				
					if(detallenotacreditopuntoventaAux.getId()<0) {
						this.detallenotacreditopuntoventas.remove(detallenotacreditopuntoventaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoDetalleNotaCreditoPuntoVenta(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(detallenotacreditopuntoventa.getId()<0) {
				this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().remove(this.detallenotacreditopuntoventa);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(detallenotacreditopuntoventa.getId()<0) {
				this.detallenotacreditopuntoventas.remove(this.detallenotacreditopuntoventa);
			}
		}			
	}
	
	public void setEstadosInicialesDetalleNotaCreditoPuntoVenta(List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasAux) throws Exception {
		DetalleNotaCreditoPuntoVentaConstantesFunciones.setEstadosInicialesDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventasAux);
	}
	
	public void setEstadosInicialesDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux) throws Exception {
		DetalleNotaCreditoPuntoVentaConstantesFunciones.setEstadosInicialesDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarDetalleNotaCreditoPuntoVentaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarDetalleNotaCreditoPuntoVentaActual()) {
				if(!this.isEsNuevoDetalleNotaCreditoPuntoVenta) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarDetalleNotaCreditoPuntoVentaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Detalle Nota Credito ?", "MANTENIMIENTO DE Detalle Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) throws Exception {
		DetalleNotaCreditoPuntoVentaConstantesFunciones.seleccionarAsignar(this.detallenotacreditopuntoventa,detallenotacreditopuntoventa);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarDetalleNotaCreditoPuntoVenta=this.isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta;
			
			
			this.seleccionarAsignar(detallenotacreditopuntoventa);
			
			

			idProductoActual=detallenotacreditopuntoventa.getid_producto();
			this.seleccionarProductoActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			DetalleNotaCreditoPuntoVentaConstantesFunciones.quitarEspaciosDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.detallenotacreditopuntoventaSessionBean.setsFuncionBusquedaRapida(this.detallenotacreditopuntoventaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarProductoActual() throws Exception {
		try	{
			Producto productoAux=new Producto();

			if(this.idProductoActual != null && this.idProductoActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					productoLogic.getEntityWithConnection(this.idProductoActual);
					productoAux= productoLogic.getProducto();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				productosForeignKey=new ArrayList<Producto>();
				productosForeignKey.add(productoAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoDetalleNotaCreditoPuntoVenta) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosDetalleNotaCreditoPuntoVenta(esParaCancelar);				
				this.cancelarNuevoDetalleNotaCreditoPuntoVenta(esParaCancelar);								
			}
			
			this.detallenotacreditopuntoventa=new DetalleNotaCreditoPuntoVenta();
			
			this.inicializarDetalleNotaCreditoPuntoVenta();
			
			this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarDetalleNotaCreditoPuntoVenta() throws Exception {
		try {
			DetalleNotaCreditoPuntoVentaConstantesFunciones.inicializarDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteDetalleNotaCreditoPuntoVentas(String sAccionBusqueda,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="DetalleNotaCreditoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="DetalleNotaCreditoPuntoVentaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("DetalleNotaCreditoPuntoVentaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="DetalleNotaCreditoPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Detalle Nota Creditos");		
		parameters.put("busquedapor", DetalleNotaCreditoPuntoVentaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceDetalleNotaCreditoPuntoVenta=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			DetalleNotaCreditoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			DetalleNotaCreditoPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceDetalleNotaCreditoPuntoVenta=new JRBeanArrayDataSource(DetalleNotaCreditoPuntoVentaJInternalFrame.TraerDetalleNotaCreditoPuntoVentaBeans(detallenotacreditopuntoventasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceDetalleNotaCreditoPuntoVenta);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+DetalleNotaCreditoPuntoVentaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(DetalleNotaCreditoPuntoVentaBean.TraerDetalleNotaCreditoPuntoVentaBeans(detallenotacreditopuntoventasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(null);
					//this.generarExcelReporteDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesDetalleNotaCreditoPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,detallenotacreditopuntoventasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteDetalleNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleNotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa : detallenotacreditopuntoventasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			DetalleNotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataDetalleNotaCreditoPuntoVenta("NORMAL",row,workbook,detallenotacreditopuntoventa,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta(String sTipo,Row row,Workbook workbook) {
		
		DetalleNotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalDetalleNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleNotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa : detallenotacreditopuntoventasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleNotaCreditoPuntoVentaDescripcion(detallenotacreditopuntoventa));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getbodega_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getproducto_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getunidad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getserie());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getcantidad());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getprecio());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getdescuento_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getiva_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getice_valor());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.gettotal());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(detallenotacreditopuntoventa.getdescripcion());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesDetalleNotaCreditoPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasRespaldo=null;
		
		classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.detallenotacreditopuntoventaLogic.setDatosCliente(this.datosCliente);
		this.detallenotacreditopuntoventaLogic.setDatosDeep(this.datosDeep);
		this.detallenotacreditopuntoventaLogic.setIsConDeep(true);
		
		detallenotacreditopuntoventasRespaldo=this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas();
		
		this.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(detallenotacreditopuntoventasParaReportes);	
		this.detallenotacreditopuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		detallenotacreditopuntoventasParaReportes=this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas();
		this.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(detallenotacreditopuntoventasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("DetalleNotaCreditoPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa : detallenotacreditopuntoventasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderDetalleNotaCreditoPuntoVenta("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			DetalleNotaCreditoPuntoVentaConstantesFunciones.generarExcelReporteDataDetalleNotaCreditoPuntoVenta("NORMAL",row,workbook,detallenotacreditopuntoventa,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleNotaCreditoPuntoVentaDescripcion(detallenotacreditopuntoventa));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessDetalleNotaCreditoPuntoVenta() throws Exception {		
		this.startProcessDetalleNotaCreditoPuntoVenta(true);
	}
	
	public void startProcessDetalleNotaCreditoPuntoVenta(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta ,this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta, this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta,this.jPanelPaginacionDetalleNotaCreditoPuntoVenta, this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta, this.jPanelAccionesDetalleNotaCreditoPuntoVenta,this.jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta,this.jmenuBarDetalleNotaCreditoPuntoVenta,this.jmenuBarDetalleDetalleNotaCreditoPuntoVenta,this.jTtoolBarDetalleNotaCreditoPuntoVenta,this.jTtoolBarDetalleDetalleNotaCreditoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta=this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesDetalleNotaCreditoPuntoVenta=this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosDetalleNotaCreditoPuntoVenta=this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta;
		final JTable jTableDatosDetalleNotaCreditoPuntoVenta=this.jTableDatosDetalleNotaCreditoPuntoVenta;		
		final JPanel jPanelPaginacionDetalleNotaCreditoPuntoVenta=this.jPanelPaginacionDetalleNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta=this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesDetalleNotaCreditoPuntoVenta=this.jPanelAccionesDetalleNotaCreditoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelCamposDetalleNotaCreditoPuntoVenta;
			jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta;
		}
		
		final JPanel jPanelCamposDetalleNotaCreditoPuntoVenta=jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta=jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta;
		
		
		final JMenuBar jmenuBarDetalleNotaCreditoPuntoVenta=this.jmenuBarDetalleNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarDetalleNotaCreditoPuntoVenta=this.jTtoolBarDetalleNotaCreditoPuntoVenta;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jmenuBarDetalleDetalleNotaCreditoPuntoVenta;
			jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTtoolBarDetalleDetalleNotaCreditoPuntoVenta;
		}
		
		final JMenuBar jmenuBarDetalleDetalleNotaCreditoPuntoVenta=jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarDetalleDetalleNotaCreditoPuntoVenta=jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleNotaCreditoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleNotaCreditoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta ,jPanelParametrosReportesDetalleNotaCreditoPuntoVenta,jTableDatosDetalleNotaCreditoPuntoVenta, /*jScrollPanelDatosDetalleNotaCreditoPuntoVenta,*/jPanelCamposDetalleNotaCreditoPuntoVenta,jPanelPaginacionDetalleNotaCreditoPuntoVenta, /*jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta,*/ jPanelAccionesDetalleNotaCreditoPuntoVenta,jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jmenuBarDetalleDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleDetalleNotaCreditoPuntoVenta);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta ,jPanelParametrosReportesDetalleNotaCreditoPuntoVenta, jScrollPanelDatosDetalleNotaCreditoPuntoVenta,jPanelPaginacionDetalleNotaCreditoPuntoVenta, jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta, jPanelAccionesDetalleNotaCreditoPuntoVenta,jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jmenuBarDetalleDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleDetalleNotaCreditoPuntoVenta);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessDetalleNotaCreditoPuntoVenta() {// throws Exception 
		this.finishProcessDetalleNotaCreditoPuntoVenta(true);
	}
	
	public void finishProcessDetalleNotaCreditoPuntoVenta(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta ,this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta, this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta,this.jPanelPaginacionDetalleNotaCreditoPuntoVenta, this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta, this.jPanelAccionesDetalleNotaCreditoPuntoVenta,this.jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta,this.jmenuBarDetalleNotaCreditoPuntoVenta,this.jmenuBarDetalleDetalleNotaCreditoPuntoVenta,this.jTtoolBarDetalleNotaCreditoPuntoVenta,this.jTtoolBarDetalleDetalleNotaCreditoPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta=this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta; 
		
		final JPanel jPanelParametrosReportesDetalleNotaCreditoPuntoVenta=this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosDetalleNotaCreditoPuntoVenta=this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta;
		final JTable jTableDatosDetalleNotaCreditoPuntoVenta=this.jTableDatosDetalleNotaCreditoPuntoVenta;		
		final JPanel jPanelPaginacionDetalleNotaCreditoPuntoVenta=this.jPanelPaginacionDetalleNotaCreditoPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta=this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesDetalleNotaCreditoPuntoVenta=this.jPanelAccionesDetalleNotaCreditoPuntoVenta;
		
		JPanel jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta=new JPanel();
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelCamposDetalleNotaCreditoPuntoVenta;
			jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta;
		}
		
		final JPanel jPanelCamposDetalleNotaCreditoPuntoVenta=jPanelCamposAuxiliarDetalleNotaCreditoPuntoVenta;
		final JPanel jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta=jPanelAccionesFormularioAuxiliarDetalleNotaCreditoPuntoVenta;
		
		
		final JMenuBar jmenuBarDetalleNotaCreditoPuntoVenta=this.jmenuBarDetalleNotaCreditoPuntoVenta;		
		final JToolBar jTtoolBarDetalleNotaCreditoPuntoVenta=this.jTtoolBarDetalleNotaCreditoPuntoVenta;
				
		JMenuBar jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=new JToolBar();
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jmenuBarDetalleDetalleNotaCreditoPuntoVenta;
			jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTtoolBarDetalleDetalleNotaCreditoPuntoVenta;		
		}
		
		final JMenuBar jmenuBarDetalleDetalleNotaCreditoPuntoVenta=jmenuBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta;
		final JToolBar jTtoolBarDetalleDetalleNotaCreditoPuntoVenta=jTtoolBarDetalleAuxiliarDetalleNotaCreditoPuntoVenta;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesDetalleNotaCreditoPuntoVenta;
			processRunnable.jTableDatos=jTableDatosDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesDetalleNotaCreditoPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarDetalleNotaCreditoPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleDetalleNotaCreditoPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta ,jPanelParametrosReportesDetalleNotaCreditoPuntoVenta, jTableDatosDetalleNotaCreditoPuntoVenta,/*jScrollPanelDatosDetalleNotaCreditoPuntoVenta,*/jPanelCamposDetalleNotaCreditoPuntoVenta,jPanelPaginacionDetalleNotaCreditoPuntoVenta, /*jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta,*/ jPanelAccionesDetalleNotaCreditoPuntoVenta,jPanelAccionesFormularioDetalleNotaCreditoPuntoVenta,jmenuBarDetalleNotaCreditoPuntoVenta,jmenuBarDetalleDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleNotaCreditoPuntoVenta,jTtoolBarDetalleDetalleNotaCreditoPuntoVenta));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarDetalleNotaCreditoPuntoVenta(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuDetalleNotaCreditoPuntoVenta(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarDetalleNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuDetalleNotaCreditoPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleDetalleNotaCreditoPuntoVenta,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.detallenotacreditopuntoventaConstantesFunciones.getsFinalQueryDetalleNotaCreditoPuntoVenta();
		String  finalQueryPaginacionTodos=this.detallenotacreditopuntoventaConstantesFunciones.getsFinalQueryDetalleNotaCreditoPuntoVenta();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=DetalleNotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNoDetalleNotaCreditoPuntoVenta(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=DetalleNotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesDetalleNotaCreditoPuntoVenta(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,DetalleNotaCreditoPuntoVentaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.detallenotacreditopuntoventasEliminados= new ArrayList<DetalleNotaCreditoPuntoVenta>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessDetalleNotaCreditoPuntoVenta();
		
				///*DetalleNotaCreditoPuntoVentaSessionBean*/this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			
			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=DetalleNotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesForeignKeysOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/detallenotacreditopuntoventa."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			detallenotacreditopuntoventasAux= new ArrayList<DetalleNotaCreditoPuntoVenta>();
			
				
			detallenotacreditopuntoventaLogic.setDatosCliente(this.datosCliente);
			detallenotacreditopuntoventaLogic.setDatosDeep(this.datosDeep);
			detallenotacreditopuntoventaLogic.setIsConDeep(true);
			
			
			detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					detallenotacreditopuntoventaLogic.getTodosDetalleNotaCreditoPuntoVentas(finalQueryGlobal,pagination);
					
					//detallenotacreditopuntoventaLogic.getTodosDetalleNotaCreditoPuntoVentasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null|| detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallenotacreditopuntoventasAux= new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux= new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallenotacreditopuntoventaLogic.getTodosDetalleNotaCreditoPuntoVentas(finalQueryGlobal+"",this.pagination);												
							
							//detallenotacreditopuntoventaLogic.getTodosDetalleNotaCreditoPuntoVentasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());					
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idDetalleNotaCreditoPuntoVenta=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idDetalleNotaCreditoPuntoVenta=this.idActual;
				
				} else if(this.idDetalleNotaCreditoPuntoVentaActual!=null && this.idDetalleNotaCreditoPuntoVentaActual!=0L) {
					idDetalleNotaCreditoPuntoVenta=idDetalleNotaCreditoPuntoVentaActual;
				}
				
					
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndicePorId(idDetalleNotaCreditoPuntoVenta);
				
				this.detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					detallenotacreditopuntoventaLogic.getEntity(idDetalleNotaCreditoPuntoVenta);
					
					//detallenotacreditopuntoventaLogic.getEntityWithConnection(idDetalleNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().add(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVenta());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
					this.detallenotacreditopuntoventas.add(detallenotacreditopuntoventa);
				}
				
				if(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVenta()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdBodega")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdBodega(finalQueryGlobal,pagination,id_bodegaFK_IdBodega);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdBodega(id_bodegaFK_IdBodega);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdBodega",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdBodega",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdEmpresa",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdEmpresa",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdNotaCreditoPuntoVenta")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdNotaCreditoPuntoVenta(id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta(finalQueryGlobal,pagination,id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdNotaCreditoPuntoVenta(id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdNotaCreditoPuntoVenta(id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta(finalQueryGlobal,pagination,id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdNotaCreditoPuntoVenta(id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdNotaCreditoPuntoVenta(id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdNotaCreditoPuntoVenta",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdNotaCreditoPuntoVenta",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdProducto")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdProducto(finalQueryGlobal,pagination,id_productoFK_IdProducto);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdProducto(id_productoFK_IdProducto);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdProducto",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdProducto",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdSucursal",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdSucursal",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUnidad")) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()==null||detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=detallenotacreditopuntoventas==null|| detallenotacreditopuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
						detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventasAux=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventasAux.addAll(detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdUnidad(finalQueryGlobal,pagination,id_unidadFK_IdUnidad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=DetalleNotaCreditoPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUnidad(id_unidadFK_IdUnidad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdUnidad",detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteDetalleNotaCreditoPuntoVentas("FK_IdUnidad",detallenotacreditopuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(new ArrayList<DetalleNotaCreditoPuntoVenta>());
						detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().addAll(detallenotacreditopuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventas=new ArrayList<DetalleNotaCreditoPuntoVenta>();
							detallenotacreditopuntoventas.addAll(detallenotacreditopuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesDetalleNotaCreditoPuntoVenta();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessDetalleNotaCreditoPuntoVenta();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallenotacreditopuntoventas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=detallenotacreditopuntoventas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) {
		Boolean permite=true;
		
		if(this.detallenotacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=DetalleNotaCreditoPuntoVentaConstantesFunciones.getOrderByListaDetalleNotaCreditoPuntoVenta();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=DetalleNotaCreditoPuntoVentaConstantesFunciones.getOrderByListaDetalleNotaCreditoPuntoVenta();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				if(detallenotacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					detallenotacreditopuntoventaTotales=detallenotacreditopuntoventa;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:this.detallenotacreditopuntoventas) {
				if(detallenotacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					detallenotacreditopuntoventaTotales=detallenotacreditopuntoventa;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.detallenotacreditopuntoventaAux=new DetalleNotaCreditoPuntoVenta();
			this.detallenotacreditopuntoventaAux.setsType(Constantes2.S_TOTALES);
			this.detallenotacreditopuntoventaAux.setIsNew(false);
			this.detallenotacreditopuntoventaAux.setIsChanged(false);
			this.detallenotacreditopuntoventaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				DetalleNotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this.detallenotacreditopuntoventaAux);
				
				this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().add(this.detallenotacreditopuntoventaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				DetalleNotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventas,this.detallenotacreditopuntoventaAux);
				
				this.detallenotacreditopuntoventas.add(this.detallenotacreditopuntoventaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		detallenotacreditopuntoventaTotales=new DetalleNotaCreditoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().remove(detallenotacreditopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.detallenotacreditopuntoventas.remove(detallenotacreditopuntoventaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		detallenotacreditopuntoventaTotales=new DetalleNotaCreditoPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				if(detallenotacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					detallenotacreditopuntoventaTotales=detallenotacreditopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleNotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),detallenotacreditopuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:this.detallenotacreditopuntoventas) {
				if(detallenotacreditopuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					detallenotacreditopuntoventaTotales=detallenotacreditopuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				DetalleNotaCreditoPuntoVentaConstantesFunciones.TotalizarValoresFilaDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventas,detallenotacreditopuntoventaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getDetalleNotaCreditoPuntoVentasFK_IdBodega()throws Exception {
		try {
			sAccionBusqueda="FK_IdBodega";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdNotaCreditoPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdProducto()throws Exception {
		try {
			sAccionBusqueda="FK_IdProducto";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdUnidad()throws Exception {
		try {
			sAccionBusqueda="FK_IdUnidad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getDetalleNotaCreditoPuntoVentasFK_IdBodega(String sFinalQuery,Long id_bodega)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdBodega(sFinalQuery,this.pagination,id_bodega);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta(String sFinalQuery,Long id_factura_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta(sFinalQuery,this.pagination,id_factura_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdProducto(String sFinalQuery,Long id_producto)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdProducto(sFinalQuery,this.pagination,id_producto);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getDetalleNotaCreditoPuntoVentasFK_IdUnidad(String sFinalQuery,Long id_unidad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentasFK_IdUnidad(sFinalQuery,this.pagination,id_unidad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosDetalleNotaCreditoPuntoVenta() {
		this.isPermisoTodoDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoNuevoDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoActualizarDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoEliminarDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoConsultaDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoReporteDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta=false;
		this.isPermisoCopiarDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoVerFormDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta=false;		
		this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=false;		
	}
	
	public void setPermisosUsuarioDetalleNotaCreditoPuntoVenta(Boolean isPermiso) {
		this.isPermisoTodoDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoNuevoDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoEliminarDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoConsultaDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoReporteDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoCopiarDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoVerFormDetalleNotaCreditoPuntoVenta=isPermiso;		
		this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioDetalleNotaCreditoPuntoVenta(Boolean isPermiso) {
		//this.isPermisoTodoDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoNuevoDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoEliminarDetalleNotaCreditoPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoConsultaDetalleNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoReporteDetalleNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoCopiarDetalleNotaCreditoPuntoVenta=isPermiso;		
		//this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta=isPermiso;
		//this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioDetalleNotaCreditoPuntoVentaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioDetalleNotaCreditoPuntoVentaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioDetalleNotaCreditoPuntoVentaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionDetalleNotaCreditoPuntoVentaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioDetalleNotaCreditoPuntoVentaClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioDetalleNotaCreditoPuntoVenta() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalDetalleNotaCreditoPuntoVenta=this.isPermisoActualizarDetalleNotaCreditoPuntoVenta;
			this.isPermisoEliminarDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormDetalleNotaCreditoPuntoVenta=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenDetalleNotaCreditoPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.setToolTipText(this.jTableDatosDetalleNotaCreditoPuntoVenta.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioDetalleNotaCreditoPuntoVenta(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioDetalleNotaCreditoPuntoVenta(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioDetalleNotaCreditoPuntoVenta() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyDetalleNotaCreditoPuntoVentaListas()throws Exception {
		try	{						
			
				this.notacreditopuntoventasForeignKey=new ArrayList();
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.bodegasForeignKey=new ArrayList();
				this.productosForeignKey=new ArrayList();
				this.unidadsForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyDetalleNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyDetalleNotaCreditoPuntoVentaListas(false);
			} else {
			
				this.cargarCombosForeignKeyNotaCreditoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.notacreditopuntoventasForeignKey==null||this.notacreditopuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=NotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNotaCreditoPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NotaCreditoPuntoVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=NotaCreditoPuntoVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosNotaCreditoPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodegaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=BodegaConstantesFunciones.SFINALQUERY;

				this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProductoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.productosForeignKey==null||this.productosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ProductoConstantesFunciones.SFINALQUERY;

				this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if(cargarCombosDependencia && (this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UnidadConstantesFunciones.SFINALQUERY;

				this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyDetalleNotaCreditoPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaReturnGeneral=new DetalleNotaCreditoPuntoVentaParameterReturnGeneral();
						
			


				String finalQueryGlobalNotaCreditoPuntoVenta="";

				if(((this.notacreditopuntoventasForeignKey==null||this.notacreditopuntoventasForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=NotaCreditoPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNotaCreditoPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalNotaCreditoPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,NotaCreditoPuntoVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalNotaCreditoPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalNotaCreditoPuntoVenta, "");
						finalQueryGlobalNotaCreditoPuntoVenta+=NotaCreditoPuntoVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosNotaCreditoPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalNotaCreditoPuntoVenta=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidNotaCreditoPuntoVentaActual();
					}
				} else {
					finalQueryGlobalNotaCreditoPuntoVenta="NONE";
				}


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_empresaDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_empresaDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_sucursalDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_sucursalDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalBodega="";

				if(((this.bodegasForeignKey==null||this.bodegasForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_bodegaDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_bodegaDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=BodegaConstantesFunciones.getArrayColumnasGlobalesBodega(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalBodega=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,BodegaConstantesFunciones.TABLENAME);

						finalQueryGlobalBodega=Funciones.GetFinalQueryAppend(finalQueryGlobalBodega, "");
						finalQueryGlobalBodega+=BodegaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosBodegasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalBodega=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidBodegaActual();
					}
				} else {
					finalQueryGlobalBodega="NONE";
				}


				String finalQueryGlobalProducto="";

				if(cargarCombosDependencia && ((this.productosForeignKey==null||this.productosForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_productoDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_productoDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ProductoConstantesFunciones.getArrayColumnasGlobalesProducto(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalProducto=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ProductoConstantesFunciones.TABLENAME);

						finalQueryGlobalProducto=Funciones.GetFinalQueryAppend(finalQueryGlobalProducto, "");
						finalQueryGlobalProducto+=ProductoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosProductosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalProducto=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidProductoActual();
					}
				} else {
					finalQueryGlobalProducto="NONE";
				}


				String finalQueryGlobalUnidad="";

				if(cargarCombosDependencia && ((this.unidadsForeignKey==null||this.unidadsForeignKey.size()<=0) && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_unidadDetalleNotaCreditoPuntoVenta)
					 || (this.esRecargarFks && this.detallenotacreditopuntoventaConstantesFunciones.cargarid_unidadDetalleNotaCreditoPuntoVenta)) {

					if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UnidadConstantesFunciones.getArrayColumnasGlobalesUnidad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUnidad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UnidadConstantesFunciones.TABLENAME);

						finalQueryGlobalUnidad=Funciones.GetFinalQueryAppend(finalQueryGlobalUnidad, "");
						finalQueryGlobalUnidad+=UnidadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUnidadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUnidad=" WHERE " + ConstantesSql.ID + "="+detallenotacreditopuntoventaSessionBean.getlidUnidadActual();
					}
				} else {
					finalQueryGlobalUnidad="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.cargarCombosLoteForeignKeyDetalleNotaCreditoPuntoVenta(finalQueryGlobalNotaCreditoPuntoVenta,finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalBodega,finalQueryGlobalProducto,finalQueryGlobalUnidad);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalNotaCreditoPuntoVenta.equals("NONE")) {
				this.notacreditopuntoventasForeignKey=detallenotacreditopuntoventaReturnGeneral.getnotacreditopuntoventasForeignKey();
			}

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=detallenotacreditopuntoventaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=detallenotacreditopuntoventaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalBodega.equals("NONE")) {
				this.bodegasForeignKey=detallenotacreditopuntoventaReturnGeneral.getbodegasForeignKey();
			}

			if(!finalQueryGlobalProducto.equals("NONE")) {
				this.productosForeignKey=detallenotacreditopuntoventaReturnGeneral.getproductosForeignKey();
			}

			if(!finalQueryGlobalUnidad.equals("NONE")) {
				this.unidadsForeignKey=detallenotacreditopuntoventaReturnGeneral.getunidadsForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyNotaCreditoPuntoVenta();
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyBodega();
			this.addItemDefectoCombosForeignKeyProducto();
			this.addItemDefectoCombosForeignKeyUnidad();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyNotaCreditoPuntoVenta()throws Exception {
		try {
			if(this.detallenotacreditopuntoventaSessionBean==null) {
				this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionNotaCreditoPuntoVenta()) {
				NotaCreditoPuntoVenta notacreditopuntoventa=new NotaCreditoPuntoVenta();
				NotaCreditoPuntoVentaConstantesFunciones.setNotaCreditoPuntoVentaDescripcion(notacreditopuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				notacreditopuntoventa.setId(null);

				if(!NotaCreditoPuntoVentaConstantesFunciones.ExisteEnLista(this.notacreditopuntoventasForeignKey,notacreditopuntoventa,true)) {

					this.notacreditopuntoventasForeignKey.add(0,notacreditopuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyBodega()throws Exception {
		try {

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionBodega()) {
				Bodega bodega=new Bodega();
				BodegaConstantesFunciones.setBodegaDescripcion(bodega,Constantes.SMENSAJE_ESCOJA_OPCION);
				bodega.setId(null);

				if(!BodegaConstantesFunciones.ExisteEnLista(this.bodegasForeignKey,bodega,true)) {

					this.bodegasForeignKey.add(0,bodega);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyProducto()throws Exception {
		try {

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionProducto()) {
				Producto producto=new Producto();
				ProductoConstantesFunciones.setProductoDescripcion(producto,Constantes.SMENSAJE_ESCOJA_OPCION);
				producto.setId(null);

				if(!ProductoConstantesFunciones.ExisteEnLista(this.productosForeignKey,producto,true)) {

					this.productosForeignKey.add(0,producto);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUnidad()throws Exception {
		try {

			if(!this.detallenotacreditopuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUnidad()) {
				Unidad unidad=new Unidad();
				UnidadConstantesFunciones.setUnidadDescripcion(unidad,Constantes.SMENSAJE_ESCOJA_OPCION);
				unidad.setId(null);

				if(!UnidadConstantesFunciones.ExisteEnLista(this.unidadsForeignKey,unidad,true)) {

					this.unidadsForeignKey.add(0,unidad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega("Todos");
			this.initActionsCombosForeignKeyProducto("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyBodega(sFormularioTipoBusqueda);
			this.initActionsCombosForeignKeyProducto(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyBodega(JComboBox jComboBoxBodegaGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Bodega bodegaLocal=(Bodega)jComboBoxBodegaGenerico.getSelectedItem();

			if(bodegaLocal!=null  && bodegaLocal.getId()!=null  && bodegaLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_bodega="+bodegaLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryProductoFromBodega(bodegaLocal);

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboProducto=sFinalQueryCombo;

			this.productosForeignKey=new ArrayList<Producto>();
			this.cargarCombosForeignKeyProducto(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyProducto(JComboBox jComboBoxProductoGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Producto productoLocal=(Producto)jComboBoxProductoGenerico.getSelectedItem();

			if(productoLocal!=null  && productoLocal.getId()!=null  && productoLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_producto="+productoLocal.getId();
			}
			//REDEFINE
			sFinalQueryCombo=InventarioSql.GetQueryUnidadFromBodegaYProducto(productoLocal,this.detallenotacreditopuntoventa.getid_bodega());

			//COPIA PARA VENTANA BUSQUEDA
			this.sFinalQueryComboUnidad=sFinalQueryCombo;

			this.unidadsForeignKey=new ArrayList<Unidad>();
			this.cargarCombosForeignKeyUnidad(true,false,false,sFinalQueryCombo,sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyBodega(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"id_bodegaDetalleNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleNotaCreditoPuntoVenta"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_bodegaDetalleNotaCreditoPuntoVenta"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta"));

					} else {
						this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta"));

						this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void initActionsCombosForeignKeyProducto(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
					}
				} else {
					if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta"));

						this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta"));

					} else {
						this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta"));

						this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
			
			
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa)throws Exception {	
		try {
			
			this.setActualNotaCreditoPuntoVentaForeignKey(detallenotacreditopuntoventa.getid_factura_punto_venta(),false,"Formulario");
			this.setActualBodegaForeignKey(detallenotacreditopuntoventa.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(detallenotacreditopuntoventa.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(detallenotacreditopuntoventa.getid_unidad(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,String sTipoEvento)throws Exception {	
		try {
			
			

				if(detallenotacreditopuntoventa.getProducto()!=null && !sTipoEvento.equals("id_productoDetalleNotaCreditoPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.productosForeignKey=new ArrayList<Producto>();
					this.productosForeignKey.add(detallenotacreditopuntoventa.getProducto());

					this.addItemDefectoCombosForeignKeyProducto();
					this.cargarCombosFrameProductosForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {	
		try {
			
			this.setActualNotaCreditoPuntoVentaForeignKey(this.detallenotacreditopuntoventaConstantesFunciones.getid_factura_punto_venta(),false,"Formulario");
			this.setActualBodegaForeignKey(this.detallenotacreditopuntoventaConstantesFunciones.getid_bodega(),false,"Formulario");
			this.setActualProductoForeignKey(this.detallenotacreditopuntoventaConstantesFunciones.getid_producto(),false,"Formulario");
			this.setActualUnidadForeignKey(this.detallenotacreditopuntoventaConstantesFunciones.getid_unidad(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {	
		try {
			
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroDetalleNotaCreditoPuntoVenta()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {
		try {
			

			this.cargarCombosFrameNotaCreditoPuntoVentasForeignKey("Todos");
			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameBodegasForeignKey("Todos");
			this.cargarCombosFrameProductosForeignKey("Todos");
			this.cargarCombosFrameUnidadsForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyDetalleNotaCreditoPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameNotaCreditoPuntoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyDetalleNotaCreditoPuntoVenta()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	







	public void recargarFormDetalleNotaCreditoPuntoVentaBodega(JComboBox<?> jComboBoxGenericoBodega,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleNotaCreditoPuntoVentaid_producto(jComboBoxGenericoBodega,sFormularioTipoBusqueda,"Bodega",false);
	}

	public void recargarFormDetalleNotaCreditoPuntoVentaProducto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda) throws Exception {

		this.recargarFormDetalleNotaCreditoPuntoVentaid_unidad(jComboBoxGenericoProducto,sFormularioTipoBusqueda,"Producto",false);
	}


	
	



	public void recargarFormDetalleNotaCreditoPuntoVentaid_producto(JComboBox<?> jComboBoxGenericoProducto,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Bodega")){
				this.setActualParaGuardarBodegaForeignKey(this.detallenotacreditopuntoventa,jComboBoxGenericoProducto);
			}

			if(this.detallenotacreditopuntoventa.getid_bodega()!=null && this.detallenotacreditopuntoventa.getid_bodega()!=0L) {
				sFinalQuery+="  WHERE  id_bodega="+this.detallenotacreditopuntoventa.getid_bodega();
			} else {
				sFinalQuery+="  WHERE  id_bodega=-1";
			}



			//BUCLE RECURSIVO
			this.setActualProductoForeignKey(this.detallenotacreditopuntoventa.getid_bodega(),true,sFormularioTipoBusqueda);

			this.cargarCombosProductosForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}



	public void recargarFormDetalleNotaCreditoPuntoVentaid_unidad(JComboBox<?> jComboBoxGenericoUnidad,String sFormularioTipoBusqueda,String sTipoComboOrigen,Boolean conIrServidorAplicacion) throws Exception {
		try {

			String sFinalQuery="";

			if(sTipoComboOrigen.equals("Producto")){
				this.setActualParaGuardarProductoForeignKey(this.detallenotacreditopuntoventa,jComboBoxGenericoUnidad);
			}

			if(this.detallenotacreditopuntoventa.getid_producto()!=null && this.detallenotacreditopuntoventa.getid_producto()!=0L) {
				sFinalQuery+="  WHERE  id_producto="+this.detallenotacreditopuntoventa.getid_producto();
			} else {
				sFinalQuery+="  WHERE  id_producto=-1";
			}



			//BUCLE RECURSIVO
			this.setActualUnidadForeignKey(this.detallenotacreditopuntoventa.getid_producto(),true,sFormularioTipoBusqueda);

			this.cargarCombosUnidadsForeignKeyLista(sFinalQuery);

			this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean(); 
		this.detallenotacreditopuntoventaConstantesFunciones=new DetalleNotaCreditoPuntoVentaConstantesFunciones(); 
		this.detallenotacreditopuntoventaBean=new DetalleNotaCreditoPuntoVenta();//(this.detallenotacreditopuntoventaConstantesFunciones); 		
		this.detallenotacreditopuntoventaReturnGeneral=new DetalleNotaCreditoPuntoVentaParameterReturnGeneral(); 
		
		this.detallenotacreditopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.detallenotacreditopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessDetalleNotaCreditoPuntoVenta(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.detallenotacreditopuntoventaConstantesFunciones=new DetalleNotaCreditoPuntoVentaConstantesFunciones(); 
			this.detallenotacreditopuntoventaBean=new DetalleNotaCreditoPuntoVenta();//this.detallenotacreditopuntoventaConstantesFunciones); 			
			this.detallenotacreditopuntoventaReturnGeneral=new DetalleNotaCreditoPuntoVentaParameterReturnGeneral(); 
		
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Detalle Nota Credito Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.detallenotacreditopuntoventa=new DetalleNotaCreditoPuntoVenta();
			this.detallenotacreditopuntoventas = new ArrayList<DetalleNotaCreditoPuntoVenta>();
			this.detallenotacreditopuntoventasAux = new ArrayList<DetalleNotaCreditoPuntoVenta>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic=new DetalleNotaCreditoPuntoVentaLogic();
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.detallenotacreditopuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.detallenotacreditopuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta);	
					}
					
					if(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta);
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta);
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta);
					this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta);
					this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setVisible(false);
					this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idDetalleNotaCreditoPuntoVentaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=DetalleNotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.detallenotacreditopuntoventaReturnGeneral=new DetalleNotaCreditoPuntoVentaParameterReturnGeneral();
			
			this.detallenotacreditopuntoventaParameterGeneral=new DetalleNotaCreditoPuntoVentaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			
			
			this.isVisibilidadFK_IdBodega=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=true;
			this.isVisibilidadFK_IdProducto=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUnidad=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosDetalleNotaCreditoPuntoVenta();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioDetalleNotaCreditoPuntoVenta(false);
			
			this.setPermisosUsuarioDetalleNotaCreditoPuntoVenta();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() 
				|| (this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado() && this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioDetalleNotaCreditoPuntoVentaClasesRelacionadas();
			}
			
			if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioDetalleNotaCreditoPuntoVentaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosDetalleNotaCreditoPuntoVenta();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualDetalleNotaCreditoPuntoVenta();
			}
			
			if(!this.isPermisoBusquedaDetalleNotaCreditoPuntoVenta) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta,this.isPermisoPaginacionMedioDetalleNotaCreditoPuntoVenta,this.isPermisoPaginacionTodoDetalleNotaCreditoPuntoVenta);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(DetalleNotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarDetalleNotaCreditoPuntoVenta());
				
				this.tiposColumnasSelect=DetalleNotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarDetalleNotaCreditoPuntoVenta(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioDetalleNotaCreditoPuntoVenta();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioDetalleNotaCreditoPuntoVenta(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioDetalleNotaCreditoPuntoVenta(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleNotaCreditoPuntoVenta() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.notacreditopuntoventaLogic=new NotaCreditoPuntoVentaLogic();
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.bodegaLogic=new BodegaLogic();
			this.productoLogic=new ProductoLogic();
			this.unidadLogic=new UnidadLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				detallenotacreditopuntoventaImplementable= (DetalleNotaCreditoPuntoVentaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleNotaCreditoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				detallenotacreditopuntoventaImplementableHome= (DetalleNotaCreditoPuntoVentaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+DetalleNotaCreditoPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.detallenotacreditopuntoventas= new ArrayList<DetalleNotaCreditoPuntoVenta>();
			this.detallenotacreditopuntoventasEliminados= new ArrayList<DetalleNotaCreditoPuntoVenta>();
						
			this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
			this.esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idProductoActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.notacreditopuntoventasForeignKey=new ArrayList<NotaCreditoPuntoVenta>() ;
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.bodegasForeignKey=new ArrayList<Bodega>() ;
			this.productosForeignKey=new ArrayList<Producto>() ;
			this.unidadsForeignKey=new ArrayList<Unidad>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyDetalleNotaCreditoPuntoVenta(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroDetalleNotaCreditoPuntoVenta();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=DetalleNotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioDetalleNotaCreditoPuntoVenta();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioDetalleNotaCreditoPuntoVenta();
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getTabCount(); i++) {
					this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessDetalleNotaCreditoPuntoVenta(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga DetalleNotaCreditoPuntoVenta: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectDetalleNotaCreditoPuntoVenta() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesDetalleNotaCreditoPuntoVenta")) {
				iIndex=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessDetalleNotaCreditoPuntoVenta();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyDetalleNotaCreditoPuntoVenta(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyDetalleNotaCreditoPuntoVenta(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyDetalleNotaCreditoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyDetalleNotaCreditoPuntoVentaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		this.cargarCombosFrameForeignKeyDetalleNotaCreditoPuntoVenta();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		}
	}
	
	

	public void cargarCombosForeignKeyNotaCreditoPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyNotaCreditoPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyNotaCreditoPuntoVenta();
				this.cargarCombosFrameNotaCreditoPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaNotaCreditoPuntoVenta(this.notacreditopuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyBodega(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyBodegaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyBodega();
				this.cargarCombosFrameBodegasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyBodega("Todos");
				}

			this.recargarComboTablaBodega(this.bodegasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyProducto(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyProductoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyProducto();
				this.cargarCombosFrameProductosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaProducto(this.productosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUnidad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyUnidadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyUnidad();
				this.cargarCombosFrameUnidadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyProducto("Todos");
				}

			this.recargarComboTablaUnidad(this.unidadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			
			if(jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>=1) {
				jTableDatosDetalleNotaCreditoPuntoVenta.removeRowSelectionInterval(0, jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()-1);						
			}
			
			this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoDetalleNotaCreditoPuntoVenta(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(true);			
			//this.detallenotacreditopuntoventa=new DetalleNotaCreditoPuntoVenta();
			//this.detallenotacreditopuntoventa.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta() ;
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.detallenotacreditopuntoventa);	
			this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);				
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar DetalleNotaCreditoPuntoVenta: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRows().length;			
			}
			
			detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoDetalleNotaCreditoPuntoVenta--;			
				//DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux= new DetalleNotaCreditoPuntoVenta();			
				//detallenotacreditopuntoventaAux.setId(this.iIdNuevoDetalleNotaCreditoPuntoVenta);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaOrigen=new DetalleNotaCreditoPuntoVenta();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaOrigen : detallenotacreditopuntoventasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							detallenotacreditopuntoventaOrigen =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							detallenotacreditopuntoventaOrigen =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaDetalleNotaCreditoPuntoVenta();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.detallenotacreditopuntoventa.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaOrigen,this.detallenotacreditopuntoventa,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().add(this.detallenotacreditopuntoventaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventas.add(this.detallenotacreditopuntoventaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoDetalleNotaCreditoPuntoVenta(), this.getIndiceNuevoDetalleNotaCreditoPuntoVenta());
				
				int iLastRow =  this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();									
		
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaOrigen=new DetalleNotaCreditoPuntoVenta();
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaDestino=new DetalleNotaCreditoPuntoVenta();
				
			detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || detallenotacreditopuntoventasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaOrigen =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallenotacreditopuntoventaOrigen =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						detallenotacreditopuntoventaDestino =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						detallenotacreditopuntoventaDestino =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				detallenotacreditopuntoventaOrigen =detallenotacreditopuntoventasSeleccionados.get(0);
				detallenotacreditopuntoventaDestino =detallenotacreditopuntoventasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaOrigen,detallenotacreditopuntoventaDestino,true,false);
				
				detallenotacreditopuntoventaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(detallenotacreditopuntoventaDestino,detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(detallenotacreditopuntoventaDestino,detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
				
				//this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoDetalleNotaCreditoPuntoVenta(), this.getIndiceNuevoDetalleNotaCreditoPuntoVenta());
				
				int iLastRow =  this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosDetalleNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(!isVisible);
			this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(!isVisible);
			this.jPanelAccionesDetalleNotaCreditoPuntoVenta.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameDetalleNotaCreditoPuntoVenta();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoDetalleNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionDetalleNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByDetalleNotaCreditoPuntoVenta();
			
			this.abrirFrameOrderByDetalleNotaCreditoPuntoVenta();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByDetalleNotaCreditoPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleDetalleNotaCreditoPuntoVenta(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.isMaximum()) {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSize(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.iWidthFormulario,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.isMaximum()) {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jContentPaneDetalleDetalleNotaCreditoPuntoVenta.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jContentPaneDetalleDetalleNotaCreditoPuntoVenta.getWidth(),DetalleNotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jContentPaneDetalleDetalleNotaCreditoPuntoVenta.getWidth(),DetalleNotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jContentPaneDetalleDetalleNotaCreditoPuntoVenta.getWidth(),DetalleNotaCreditoPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta,false,this);
				} else {
					this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta);
				this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setSelected(false);
				
				this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleNotaCreditoPuntoVenta"));
				
				this.inicializarActualizarBindingTablaOrderByDetalleNotaCreditoPuntoVenta();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta==null) {
				
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta=new ImportacionJInternalFrame(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta);
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setSelected(false);


				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleNotaCreditoPuntoVenta"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta==null) {
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta=new ReporteDinamicoJInternalFrame(DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta);
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setVisible(false);
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleNotaCreditoPuntoVenta();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta);
			
	       	this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSelected(false);
			
			//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.dispose();
			//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoDetalleNotaCreditoPuntoVenta() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionDetalleNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByDetalleNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setVisible(true);
	        this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByDetalleNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoDetalleNotaCreditoPuntoVenta() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionDetalleNotaCreditoPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setVisible(false);
	        this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarDetalleNotaCreditoPuntoVenta(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarDetalleNotaCreditoPuntoVenta(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(true);
			//this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false) ;
			
			if(detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarDetalleNotaCreditoPuntoVenta(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(true);
			//this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.detallenotacreditopuntoventa.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false) ;
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleDetalleNotaCreditoPuntoVenta(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Producto")) {
				if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_productoDetalleNotaCreditoPuntoVenta) {
					this.cargarCombosProductosForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
					this.cargarCombosFrameProductosForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_producto (id);

				this.recargarComboTablaProducto(this.productosForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	
	
	public void recargarComboTablaNotaCreditoPuntoVenta(List<NotaCreditoPuntoVenta> notacreditopuntoventasForeignKey)throws Exception{
		TableColumn tableColumnNotaCreditoPuntoVenta=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA));
		TableCellEditor tableCellEditorNotaCreditoPuntoVenta =tableColumnNotaCreditoPuntoVenta.getCellEditor();

		NotaCreditoPuntoVentaTableCell notacreditopuntoventaTableCellFk=(NotaCreditoPuntoVentaTableCell)tableCellEditorNotaCreditoPuntoVenta;

		if(notacreditopuntoventaTableCellFk!=null) {
			notacreditopuntoventaTableCellFk.setnotacreditopuntoventasForeignKey(notacreditopuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//notacreditopuntoventaTableCellFk.setRowActual(intSelectedRow);
			//notacreditopuntoventaTableCellFk.setnotacreditopuntoventasForeignKeyActual(notacreditopuntoventasForeignKey);
		//}


		if(notacreditopuntoventaTableCellFk!=null) {
			notacreditopuntoventaTableCellFk.RecargarNotaCreditoPuntoVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
			
	
	public void recargarComboTablaBodega(List<Bodega> bodegasForeignKey)throws Exception{
		TableColumn tableColumnBodega=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA));
		TableCellEditor tableCellEditorBodega =tableColumnBodega.getCellEditor();

		BodegaTableCell bodegaTableCellFk=(BodegaTableCell)tableCellEditorBodega;

		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.setbodegasForeignKey(bodegasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//bodegaTableCellFk.setRowActual(intSelectedRow);
			//bodegaTableCellFk.setbodegasForeignKeyActual(bodegasForeignKey);
		//}


		if(bodegaTableCellFk!=null) {
			bodegaTableCellFk.RecargarBodegasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaProducto(List<Producto> productosForeignKey)throws Exception{
		TableColumn tableColumnProducto=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO));
		TableCellEditor tableCellEditorProducto =tableColumnProducto.getCellEditor();

		ProductoTableCell productoTableCellFk=(ProductoTableCell)tableCellEditorProducto;

		if(productoTableCellFk!=null) {
			productoTableCellFk.setproductosForeignKey(productosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//productoTableCellFk.setRowActual(intSelectedRow);
			//productoTableCellFk.setproductosForeignKeyActual(productosForeignKey);
		//}


		if(productoTableCellFk!=null) {
			productoTableCellFk.RecargarProductosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaUnidad(List<Unidad> unidadsForeignKey)throws Exception{
		TableColumn tableColumnUnidad=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD));
		TableCellEditor tableCellEditorUnidad =tableColumnUnidad.getCellEditor();

		UnidadTableCell unidadTableCellFk=(UnidadTableCell)tableCellEditorUnidad;

		if(unidadTableCellFk!=null) {
			unidadTableCellFk.setunidadsForeignKey(unidadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//unidadTableCellFk.setRowActual(intSelectedRow);
			//unidadTableCellFk.setunidadsForeignKeyActual(unidadsForeignKey);
		//}


		if(unidadTableCellFk!=null) {
			unidadTableCellFk.RecargarUnidadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_producto (Long id) throws Exception {
		this.setActualProductoForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesDetalleNotaCreditoPuntoVenta(false);
			
			//if(!this.isEsNuevoDetalleNotaCreditoPuntoVenta) {								
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				
			}
			
			if(this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
					this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(false);
			
												
				
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleDetalleNotaCreditoPuntoVenta();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.detallenotacreditopuntoventa.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.detallenotacreditopuntoventa.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.detallenotacreditopuntoventa.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((DetalleNotaCreditoPuntoVentaModel) this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
				this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(false);
				
				
				
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleDetalleNotaCreditoPuntoVenta();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>=1) {
				jTableDatosDetalleNotaCreditoPuntoVenta.removeRowSelectionInterval(0, jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesDetalleNotaCreditoPuntoVenta(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(false) ;
			
			this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
			
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleDetalleNotaCreditoPuntoVenta();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				
				//SI ES MANUAL
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoDetalleNotaCreditoPuntoVenta--;			
			//DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux= new DetalleNotaCreditoPuntoVenta();			
			//detallenotacreditopuntoventaAux.setId(this.iIdNuevoDetalleNotaCreditoPuntoVenta);
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaDetalleNotaCreditoPuntoVenta();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
			
			this.detallenotacreditopuntoventa.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().add(this.detallenotacreditopuntoventaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.detallenotacreditopuntoventas.add(this.detallenotacreditopuntoventaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			
			this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoDetalleNotaCreditoPuntoVenta(), this.getIndiceNuevoDetalleNotaCreditoPuntoVenta());
			
			int iLastRow =  this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosDetalleNotaCreditoPuntoVenta.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosDetalleNotaCreditoPuntoVenta.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();
			}
			
			//this.abrirFrameTreeDetalleNotaCreditoPuntoVenta();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Detalle Nota CreditoS ?", "MANTENIMIENTO DE Detalle Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralDetalleNotaCreditoPuntoVenta();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.procesarImportacionDetalleNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.detallenotacreditopuntoventaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarDetalleNotaCreditoPuntoVentaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setFileImportacion(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionDetalleNotaCreditoPuntoVenta.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		

		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("DetalleNotaCreditoPuntoVentaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"DetalleNotaCreditoPuntoVentaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_NotaCreditoPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_NotaCreditoPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_NotaCreditoPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_NotaCreditoPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Bodega_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Bodega_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Bodega_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Bodega_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Producto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Producto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Producto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Producto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Unidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Unidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Unidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Unidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rie_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rie_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rie_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rie_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ntidad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ntidad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ntidad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ntidad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuentoValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuentoValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuentoValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuentoValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_aValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_aValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_aValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_aValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_eValor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_eValor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_eValor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_eValor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scripcion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scripcion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scripcion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scripcion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA:
					sNombreCampoCategoria="id_factura_punto_venta";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoria="id_bodega";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoria="id_producto";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoria="id_unidad";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoria="serie";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoria="cantidad";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoria="precio";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoria="descuento_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoria="iva_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoria="ice_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoria="descripcion";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA:
					sNombreCampoCategoriaValor="id_factura_punto_venta";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA:
					sNombreCampoCategoriaValor="id_bodega";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO:
					sNombreCampoCategoriaValor="id_producto";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD:
					sNombreCampoCategoriaValor="id_unidad";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE:
					sNombreCampoCategoriaValor="serie";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD:
					sNombreCampoCategoriaValor="cantidad";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO:
					sNombreCampoCategoriaValor="precio";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR:
					sNombreCampoCategoriaValor="descuento_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR:
					sNombreCampoCategoriaValor="iva_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR:
					sNombreCampoCategoriaValor="ice_valor";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION:
					sNombreCampoCategoriaValor="descripcion";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nota Credito",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_factura_punto_venta");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Bodega",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_bodega");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Producto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_producto");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Unidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_unidad");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Serie",sNombreCampoCategoria,sNombreCampoCategoriaValor,"serie");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cantidad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"cantidad");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"precio");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento_valor");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva_valor");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice %",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice_valor");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descripcion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descripcion");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("DetalleNotaCreditoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getbodega_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getproducto_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getunidad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getserie());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getcantidad());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getprecio());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getdescuento_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getiva_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getice_valor());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION);
					iRow++;

					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa:detallenotacreditopuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(detallenotacreditopuntoventa.getdescripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelDetalleNotaCreditoPuntoVenta(row);				
			//	iRow++;
			//}				
			
			//for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
			
			//SI ES MANUAL
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaDetalleNotaCreditoPuntoVenta() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosDetalleNotaCreditoPuntoVenta.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosDetalleNotaCreditoPuntoVenta.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosDetalleNotaCreditoPuntoVenta.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setMinimumSize(dimensionMinimum);
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setMaximumSize(dimensionMaximum);
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(esInicializar,true);
	}
	
	public void inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasDetalleNotaCreditoPuntoVenta(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleNotaCreditoPuntoVenta(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesDetalleNotaCreditoPuntoVenta(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualDetalleNotaCreditoPuntoVenta() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta();
		
		this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleNotaCreditoPuntoVenta();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesDetalleNotaCreditoPuntoVenta() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleNotaCreditoPuntoVenta(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleNotaCreditoPuntoVenta(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVenta.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosDetalleNotaCreditoPuntoVenta.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteDetalleNotaCreditoPuntoVenta.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionNuevoDetalleNotaCreditoPuntoVenta.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionSinCerrarDetalleNotaCreditoPuntoVenta.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionSinMensajeDetalleNotaCreditoPuntoVenta.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVenta.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosDetalleNotaCreditoPuntoVenta.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteDetalleNotaCreditoPuntoVenta.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionNuevoDetalleNotaCreditoPuntoVenta.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionSinCerrarDetalleNotaCreditoPuntoVenta.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jCheckBoxPostAccionSinMensajeDetalleNotaCreditoPuntoVenta.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesDetalleNotaCreditoPuntoVenta.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVenta.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesDetalleNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		try	{	
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualDetalleNotaCreditoPuntoVenta(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesDetalleNotaCreditoPuntoVenta() throws Exception {
		try	{
			if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleNotaCreditoPuntoVenta();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleNotaCreditoPuntoVenta() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualDetalleNotaCreditoPuntoVenta() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionDetalleNotaCreditoPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleNotaCreditoPuntoVenta();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualDetalleNotaCreditoPuntoVenta() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
				
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=DetalleNotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarDetalleNotaCreditoPuntoVenta(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=DetalleNotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarDetalleNotaCreditoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=DetalleNotaCreditoPuntoVentaConstantesFunciones.getTiposSeleccionarDetalleNotaCreditoPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualDetalleNotaCreditoPuntoVenta()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_bodegaFK_IdBodega=((Bodega)this.jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_factura_punto_ventaFK_IdNotaCreditoPuntoVenta=((NotaCreditoPuntoVenta)this.jComboBoxid_factura_punto_ventaFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_productoFK_IdProducto=((Producto)this.jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.getSelectedItem()!=null){this.id_unidadFK_IdUnidad=((Unidad)this.jComboBoxid_unidadFK_IdUnidadDetalleNotaCreditoPuntoVenta.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasDetalleNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {				
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualDetalleNotaCreditoPuntoVenta();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta() throws Exception {
		this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByDetalleNotaCreditoPuntoVenta() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVentaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVentaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=detallenotacreditopuntoventas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosDetalleNotaCreditoPuntoVenta.setModel(new DetalleNotaCreditoPuntoVentaModel(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosDetalleNotaCreditoPuntoVenta.setModel(new DetalleNotaCreditoPuntoVentaModel(this.detallenotacreditopuntoventas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByDetalleNotaCreditoPuntoVenta();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,detallenotacreditopuntoventaConstantesFunciones.resaltarSeleccionarDetalleNotaCreditoPuntoVenta,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+DetalleNotaCreditoPuntoVentaConstantesFunciones.SCLASSWEBTITULO,detallenotacreditopuntoventaConstantesFunciones.resaltarSeleccionarDetalleNotaCreditoPuntoVenta,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ID));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostraridDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltaridDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activaridDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"idDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltaridDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activaridDetalleNotaCreditoPuntoVenta,this,true,"idDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new NotaCreditoPuntoVentaTableCell(this.notacreditopuntoventasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new NotaCreditoPuntoVentaTableCell(this.notacreditopuntoventasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta,true,"id_factura_punto_ventaDetalleNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_empresaDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_empresaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_empresaDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_empresaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_empresaDetalleNotaCreditoPuntoVenta,false,"id_empresaDetalleNotaCreditoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_sucursalDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_sucursalDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_sucursalDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_sucursalDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_sucursalDetalleNotaCreditoPuntoVenta,false,"id_sucursalDetalleNotaCreditoPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_bodegaDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new BodegaTableCell(this.bodegasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_bodegaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_bodegaDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new BodegaTableCell(this.bodegasForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_bodegaDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_bodegaDetalleNotaCreditoPuntoVenta,true,"id_bodegaDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_productoDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ProductoTableCell(this.productosForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_productoDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_productoDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new ProductoTableCell(this.productosForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_productoDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_productoDetalleNotaCreditoPuntoVenta,true,"id_productoDetalleNotaCreditoPuntoVenta","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_unidadDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new UnidadTableCell(this.unidadsForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_unidadDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_unidadDetalleNotaCreditoPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new UnidadTableCell(this.unidadsForeignKey,this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_unidadDetalleNotaCreditoPuntoVenta,this,this.detallenotacreditopuntoventaConstantesFunciones.activarid_unidadDetalleNotaCreditoPuntoVenta,true,"id_unidadDetalleNotaCreditoPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarserieDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarserieDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarserieDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"serieDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarserieDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarserieDetalleNotaCreditoPuntoVenta,this,true,"serieDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarcantidadDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarcantidadDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarcantidadDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"cantidadDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarcantidadDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarcantidadDetalleNotaCreditoPuntoVenta,this,true,"cantidadDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarprecioDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarprecioDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarprecioDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"precioDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarprecioDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarprecioDetalleNotaCreditoPuntoVenta,this,true,"precioDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuentoDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuentoDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescuentoDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"descuentoDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuentoDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescuentoDetalleNotaCreditoPuntoVenta,this,true,"descuentoDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuento_valorDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuento_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescuento_valorDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"descuento_valorDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuento_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescuento_valorDetalleNotaCreditoPuntoVenta,this,true,"descuento_valorDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarivaDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarivaDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarivaDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"ivaDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarivaDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarivaDetalleNotaCreditoPuntoVenta,this,true,"ivaDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrariva_valorDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltariva_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activariva_valorDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"iva_valorDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltariva_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activariva_valorDetalleNotaCreditoPuntoVenta,this,true,"iva_valorDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrariceDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltariceDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activariceDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"iceDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltariceDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activariceDetalleNotaCreditoPuntoVenta,this,true,"iceDetalleNotaCreditoPuntoVenta","BASICO-CON_EVENT_CHANGE",true));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarice_valorDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarice_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarice_valorDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"ice_valorDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarice_valorDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarice_valorDetalleNotaCreditoPuntoVenta,this,true,"ice_valorDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrarsub_totalDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarsub_totalDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarsub_totalDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"sub_totalDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltarsub_totalDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activarsub_totalDetalleNotaCreditoPuntoVenta,this,true,"sub_totalDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrartotalDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltartotalDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activartotalDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"totalDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltartotalDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activartotalDetalleNotaCreditoPuntoVenta,this,true,"totalDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION));

		if(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescripcionDetalleNotaCreditoPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescripcionDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescripcionDetalleNotaCreditoPuntoVenta,iSizeTabla,this,true,"descripcionDetalleNotaCreditoPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescripcionDetalleNotaCreditoPuntoVenta,this.detallenotacreditopuntoventaConstantesFunciones.activardescripcionDetalleNotaCreditoPuntoVenta,this,true,"descripcionDetalleNotaCreditoPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new DetalleNotaCreditoPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosDetalleNotaCreditoPuntoVenta.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosDetalleNotaCreditoPuntoVenta.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosDetalleNotaCreditoPuntoVenta.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosDetalleNotaCreditoPuntoVenta.moveColumn(this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosDetalleNotaCreditoPuntoVenta.moveColumn(this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosDetalleNotaCreditoPuntoVenta.moveColumn(this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosDetalleNotaCreditoPuntoVenta.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosDetalleNotaCreditoPuntoVenta,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosDetalleNotaCreditoPuntoVenta.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=detallenotacreditopuntoventas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosDetalleNotaCreditoPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosDetalleNotaCreditoPuntoVenta();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
					
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.detallenotacreditopuntoventa.getsType().equals("DUPLICADO")
				   || this.detallenotacreditopuntoventa.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
				
				} else {
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					if(this.detallenotacreditopuntoventa.getId()>=0 && !this.detallenotacreditopuntoventa.getIsNew()) {						
						this.isEsNuevoDetalleNotaCreditoPuntoVenta=false;
						
					} else {
						this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoDetalleNotaCreditoPuntoVenta(esRelaciones);						
				
				this.seleccionarDetalleNotaCreditoPuntoVenta(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.detallenotacreditopuntoventa.getId()<0) {
					this.isEsNuevoDetalleNotaCreditoPuntoVenta=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarDetalleNotaCreditoPuntoVenta(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarDetalleNotaCreditoPuntoVenta(evt,rowIndex);
				}	
				
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion DetalleNotaCreditoPuntoVenta: " + this.dDif); 
					}
				}								
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarDetalleNotaCreditoPuntoVenta(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {
					if(this.detallenotacreditopuntoventa.getId()>0) {
						this.detallenotacreditopuntoventa.setIsDeleted(true);
						
						this.detallenotacreditopuntoventasEliminados.add(this.detallenotacreditopuntoventa);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().remove(this.detallenotacreditopuntoventa);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventas.remove(this.detallenotacreditopuntoventa);				
					}
					
					
					((DetalleNotaCreditoPuntoVentaModel) this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarDetalleNotaCreditoPuntoVenta(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoDetalleNotaCreditoPuntoVenta) {
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}
				
				//ARCHITECTURE
				try {
					

					//NotaCreditoPuntoVenta
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_factura_punto_ventaDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosNotaCreditoPuntoVentasForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_factura_punto_venta());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.notacreditopuntoventasForeignKey=new ArrayList<NotaCreditoPuntoVenta>();

						if(detallenotacreditopuntoventa.getNotaCreditoPuntoVenta()!=null) {
							this.notacreditopuntoventasForeignKey.add(detallenotacreditopuntoventa.getNotaCreditoPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyNotaCreditoPuntoVenta();
						this.cargarCombosFrameNotaCreditoPuntoVentasForeignKey("Todos");
					}
					this.setActualNotaCreditoPuntoVentaForeignKey(this.detallenotacreditopuntoventa.getid_factura_punto_venta(),false,"Formulario");

					//Empresa
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_empresaDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_empresaDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_empresa());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(detallenotacreditopuntoventa.getEmpresa()!=null) {
							this.empresasForeignKey.add(detallenotacreditopuntoventa.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.detallenotacreditopuntoventa.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_sucursalDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_sucursalDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_sucursal());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(detallenotacreditopuntoventa.getSucursal()!=null) {
							this.sucursalsForeignKey.add(detallenotacreditopuntoventa.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.detallenotacreditopuntoventa.getid_sucursal(),false,"Formulario");

					//Bodega
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_bodegaDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_bodegaDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosBodegasForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_bodega());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.bodegasForeignKey=new ArrayList<Bodega>();

						if(detallenotacreditopuntoventa.getBodega()!=null) {
							this.bodegasForeignKey.add(detallenotacreditopuntoventa.getBodega());
						}

						this.addItemDefectoCombosForeignKeyBodega();
						this.cargarCombosFrameBodegasForeignKey("Todos");
					}
					this.setActualBodegaForeignKey(this.detallenotacreditopuntoventa.getid_bodega(),false,"Formulario");

					//Producto
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_productoDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_productoDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosProductosForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_producto());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.productosForeignKey=new ArrayList<Producto>();

						if(detallenotacreditopuntoventa.getProducto()!=null) {
							this.productosForeignKey.add(detallenotacreditopuntoventa.getProducto());
						}

						this.addItemDefectoCombosForeignKeyProducto();
						this.cargarCombosFrameProductosForeignKey("Todos");
					}
					this.setActualProductoForeignKey(this.detallenotacreditopuntoventa.getid_producto(),false,"Formulario");

					//Unidad
					if(!this.detallenotacreditopuntoventaConstantesFunciones.cargarid_unidadDetalleNotaCreditoPuntoVenta || this.detallenotacreditopuntoventaConstantesFunciones.event_dependid_unidadDetalleNotaCreditoPuntoVenta) {
						//this.cargarCombosUnidadsForeignKeyLista(" where id="+this.detallenotacreditopuntoventa.getid_unidad());
									//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
						this.unidadsForeignKey=new ArrayList<Unidad>();

						if(detallenotacreditopuntoventa.getUnidad()!=null) {
							this.unidadsForeignKey.add(detallenotacreditopuntoventa.getUnidad());
						}

						this.addItemDefectoCombosForeignKeyUnidad();
						this.cargarCombosFrameUnidadsForeignKey("Todos");
					}
					this.setActualUnidadForeignKey(this.detallenotacreditopuntoventa.getid_unidad(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa);
	}
	
	public void setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getserie());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.gettotal().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescripcion());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,detallenotacreditopuntoventaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				detallenotacreditopuntoventaLocal=this.detallenotacreditopuntoventa;
			} else {
				detallenotacreditopuntoventaLocal=this.detallenotacreditopuntoventaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(detallenotacreditopuntoventaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaLocal,true);
					
					if(detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(detallenotacreditopuntoventaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(detallenotacreditopuntoventaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventa,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.getText()==null || this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.getText()=="" || this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.getText()=="Id") {
				this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setText("0");
			}

			if(conColumnasBase) {detallenotacreditopuntoventa.setId(Long.parseLong(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelIdDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setserie(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelserieDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setcantidad(Integer.parseInt(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelcantidadDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setprecio(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelprecioDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuentoDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setdescuento_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescuento_valorDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setiva(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelivaDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setiva_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliva_valorDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setice(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeliceDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setice_valor(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelice_valorDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelsub_totalDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.settotal(Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeltotalDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			detallenotacreditopuntoventa.setdescripcion(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabeldescripcionDetalleNotaCreditoPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaBean,DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && detallenotacreditopuntoventaBean.getid_factura_punto_venta()!=null && !detallenotacreditopuntoventaBean.getid_factura_punto_venta().equals(-1L))) {detallenotacreditopuntoventa.setid_factura_punto_venta(detallenotacreditopuntoventaBean.getid_factura_punto_venta());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaBean.getid_bodega()!=null && !detallenotacreditopuntoventaBean.getid_bodega().equals(-1L))) {detallenotacreditopuntoventa.setid_bodega(detallenotacreditopuntoventaBean.getid_bodega());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaBean.getid_producto()!=null && !detallenotacreditopuntoventaBean.getid_producto().equals(-1L))) {detallenotacreditopuntoventa.setid_producto(detallenotacreditopuntoventaBean.getid_producto());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaBean.getid_unidad()!=null && !detallenotacreditopuntoventaBean.getid_unidad().equals(-1L))) {detallenotacreditopuntoventa.setid_unidad(detallenotacreditopuntoventaBean.getid_unidad());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaOrigen,DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getId()!=null && !detallenotacreditopuntoventaOrigen.getId().equals(0L))) {detallenotacreditopuntoventa.setId(detallenotacreditopuntoventaOrigen.getId());}}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getid_factura_punto_venta()!=null && !detallenotacreditopuntoventaOrigen.getid_factura_punto_venta().equals(-1L))) {detallenotacreditopuntoventa.setid_factura_punto_venta(detallenotacreditopuntoventaOrigen.getid_factura_punto_venta());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getid_bodega()!=null && !detallenotacreditopuntoventaOrigen.getid_bodega().equals(-1L))) {detallenotacreditopuntoventa.setid_bodega(detallenotacreditopuntoventaOrigen.getid_bodega());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getid_producto()!=null && !detallenotacreditopuntoventaOrigen.getid_producto().equals(-1L))) {detallenotacreditopuntoventa.setid_producto(detallenotacreditopuntoventaOrigen.getid_producto());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getid_unidad()!=null && !detallenotacreditopuntoventaOrigen.getid_unidad().equals(-1L))) {detallenotacreditopuntoventa.setid_unidad(detallenotacreditopuntoventaOrigen.getid_unidad());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getserie()!=null && !detallenotacreditopuntoventaOrigen.getserie().equals(""))) {detallenotacreditopuntoventa.setserie(detallenotacreditopuntoventaOrigen.getserie());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getcantidad()!=null && !detallenotacreditopuntoventaOrigen.getcantidad().equals(0))) {detallenotacreditopuntoventa.setcantidad(detallenotacreditopuntoventaOrigen.getcantidad());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getprecio()!=null && !detallenotacreditopuntoventaOrigen.getprecio().equals(0.0))) {detallenotacreditopuntoventa.setprecio(detallenotacreditopuntoventaOrigen.getprecio());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getdescuento()!=null && !detallenotacreditopuntoventaOrigen.getdescuento().equals(0.0))) {detallenotacreditopuntoventa.setdescuento(detallenotacreditopuntoventaOrigen.getdescuento());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getdescuento_valor()!=null && !detallenotacreditopuntoventaOrigen.getdescuento_valor().equals(0.0))) {detallenotacreditopuntoventa.setdescuento_valor(detallenotacreditopuntoventaOrigen.getdescuento_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getiva()!=null && !detallenotacreditopuntoventaOrigen.getiva().equals(0.0))) {detallenotacreditopuntoventa.setiva(detallenotacreditopuntoventaOrigen.getiva());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getiva_valor()!=null && !detallenotacreditopuntoventaOrigen.getiva_valor().equals(0.0))) {detallenotacreditopuntoventa.setiva_valor(detallenotacreditopuntoventaOrigen.getiva_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getice()!=null && !detallenotacreditopuntoventaOrigen.getice().equals(0.0))) {detallenotacreditopuntoventa.setice(detallenotacreditopuntoventaOrigen.getice());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getice_valor()!=null && !detallenotacreditopuntoventaOrigen.getice_valor().equals(0.0))) {detallenotacreditopuntoventa.setice_valor(detallenotacreditopuntoventaOrigen.getice_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getsub_total()!=null && !detallenotacreditopuntoventaOrigen.getsub_total().equals(0.0))) {detallenotacreditopuntoventa.setsub_total(detallenotacreditopuntoventaOrigen.getsub_total());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.gettotal()!=null && !detallenotacreditopuntoventaOrigen.gettotal().equals(0.0))) {detallenotacreditopuntoventa.settotal(detallenotacreditopuntoventaOrigen.gettotal());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaOrigen.getdescripcion()!=null && !detallenotacreditopuntoventaOrigen.getdescripcion().equals(""))) {detallenotacreditopuntoventa.setdescripcion(detallenotacreditopuntoventaOrigen.getdescripcion());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getId().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getserie());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getice().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.gettotal().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventa.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVentaBean detallenotacreditopuntoventaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getId().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getserie());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getcantidad().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getprecio().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getdescuento_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getiva().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getiva_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getice().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getice_valor().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.gettotal().toString());
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setText(detallenotacreditopuntoventaBean.getdescripcion());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVentaParameterReturnGeneral detallenotacreditopuntoventaReturnGeneral,DetalleNotaCreditoPuntoVentaBean detallenotacreditopuntoventaBean,Boolean conDefault) throws Exception { 
		try {
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal=new DetalleNotaCreditoPuntoVenta();
			
			detallenotacreditopuntoventaLocal=detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getId()!=null && !detallenotacreditopuntoventaLocal.getId().equals(0L))) {detallenotacreditopuntoventaBean.setId(detallenotacreditopuntoventaLocal.getId());}}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getid_factura_punto_venta()!=null && !detallenotacreditopuntoventaLocal.getid_factura_punto_venta().equals(-1L))) {detallenotacreditopuntoventaBean.setid_factura_punto_venta(detallenotacreditopuntoventaLocal.getid_factura_punto_venta());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getid_bodega()!=null && !detallenotacreditopuntoventaLocal.getid_bodega().equals(-1L))) {detallenotacreditopuntoventaBean.setid_bodega(detallenotacreditopuntoventaLocal.getid_bodega());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getid_producto()!=null && !detallenotacreditopuntoventaLocal.getid_producto().equals(-1L))) {detallenotacreditopuntoventaBean.setid_producto(detallenotacreditopuntoventaLocal.getid_producto());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getid_unidad()!=null && !detallenotacreditopuntoventaLocal.getid_unidad().equals(-1L))) {detallenotacreditopuntoventaBean.setid_unidad(detallenotacreditopuntoventaLocal.getid_unidad());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getserie()!=null && !detallenotacreditopuntoventaLocal.getserie().equals(""))) {detallenotacreditopuntoventaBean.setserie(detallenotacreditopuntoventaLocal.getserie());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getcantidad()!=null && !detallenotacreditopuntoventaLocal.getcantidad().equals(0))) {detallenotacreditopuntoventaBean.setcantidad(detallenotacreditopuntoventaLocal.getcantidad());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getprecio()!=null && !detallenotacreditopuntoventaLocal.getprecio().equals(0.0))) {detallenotacreditopuntoventaBean.setprecio(detallenotacreditopuntoventaLocal.getprecio());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getdescuento()!=null && !detallenotacreditopuntoventaLocal.getdescuento().equals(0.0))) {detallenotacreditopuntoventaBean.setdescuento(detallenotacreditopuntoventaLocal.getdescuento());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getdescuento_valor()!=null && !detallenotacreditopuntoventaLocal.getdescuento_valor().equals(0.0))) {detallenotacreditopuntoventaBean.setdescuento_valor(detallenotacreditopuntoventaLocal.getdescuento_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getiva()!=null && !detallenotacreditopuntoventaLocal.getiva().equals(0.0))) {detallenotacreditopuntoventaBean.setiva(detallenotacreditopuntoventaLocal.getiva());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getiva_valor()!=null && !detallenotacreditopuntoventaLocal.getiva_valor().equals(0.0))) {detallenotacreditopuntoventaBean.setiva_valor(detallenotacreditopuntoventaLocal.getiva_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getice()!=null && !detallenotacreditopuntoventaLocal.getice().equals(0.0))) {detallenotacreditopuntoventaBean.setice(detallenotacreditopuntoventaLocal.getice());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getice_valor()!=null && !detallenotacreditopuntoventaLocal.getice_valor().equals(0.0))) {detallenotacreditopuntoventaBean.setice_valor(detallenotacreditopuntoventaLocal.getice_valor());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getsub_total()!=null && !detallenotacreditopuntoventaLocal.getsub_total().equals(0.0))) {detallenotacreditopuntoventaBean.setsub_total(detallenotacreditopuntoventaLocal.getsub_total());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.gettotal()!=null && !detallenotacreditopuntoventaLocal.gettotal().equals(0.0))) {detallenotacreditopuntoventaBean.settotal(detallenotacreditopuntoventaLocal.gettotal());}
			if(conDefault || (!conDefault && detallenotacreditopuntoventaLocal.getdescripcion()!=null && !detallenotacreditopuntoventaLocal.getdescripcion().equals(""))) {detallenotacreditopuntoventaBean.setdescripcion(detallenotacreditopuntoventaLocal.getdescripcion());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxDetalleNotaCreditoPuntoVentaGenerico(Long idDetalleNotaCreditoPuntoVentaSeleccionado,JComboBox jComboBoxDetalleNotaCreditoPuntoVenta,List<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasLocal)throws Exception {
		try {
			DetalleNotaCreditoPuntoVenta  detallenotacreditopuntoventaTemp=null;

			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasLocal) {
				if(detallenotacreditopuntoventaAux.getId()!=null && detallenotacreditopuntoventaAux.getId().equals(idDetalleNotaCreditoPuntoVentaSeleccionado)) {
					detallenotacreditopuntoventaTemp=detallenotacreditopuntoventaAux;
					break;
				}
			}

			jComboBoxDetalleNotaCreditoPuntoVenta.setSelectedItem(detallenotacreditopuntoventaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxDetalleNotaCreditoPuntoVentaGenerico(JComboBox jComboBoxDetalleNotaCreditoPuntoVenta,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxDetalleNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxDetalleNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxDetalleNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleNotaCreditoPuntoVenta.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxDetalleNotaCreditoPuntoVenta.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxDetalleNotaCreditoPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxDetalleNotaCreditoPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxDetalleNotaCreditoPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallenotacreditopuntoventa=(DetalleNotaCreditoPuntoVenta) detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) detallenotacreditopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("NotaCreditoPuntoVenta")) {
			//sDescripcion=this.getActualNotaCreditoPuntoVentaForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualNotaCreditoPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion();
			}
		}

		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=detallenotacreditopuntoventa.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=detallenotacreditopuntoventa.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Bodega")) {
			//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getbodega_descripcion();
			} else {
				//sDescripcion=this.getActualBodegaForeignKeyDescripcion((Long)value);
				sDescripcion=detallenotacreditopuntoventa.getbodega_descripcion();
			}
		}

		if(sTipo.equals("Producto")) {
			//sDescripcion=this.getActualProductoForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getproducto_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallenotacreditopuntoventa.getproducto_descripcion();
			}
		}

		if(sTipo.equals("Unidad")) {
			//sDescripcion=this.getActualUnidadForeignKeyDescripcion((Long)value);
			if(!detallenotacreditopuntoventa.getIsNew() && !detallenotacreditopuntoventa.getIsChanged() && !detallenotacreditopuntoventa.getIsDeleted()) {
				sDescripcion=detallenotacreditopuntoventa.getunidad_descripcion();
			} else {
				//ES DEPENDIENTE, SE FORZA DESDE DESCRIPCION
				sDescripcion=detallenotacreditopuntoventa.getunidad_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaRow=new DetalleNotaCreditoPuntoVenta();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallenotacreditopuntoventaRow=(DetalleNotaCreditoPuntoVenta) detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			detallenotacreditopuntoventaRow=(DetalleNotaCreditoPuntoVenta) detallenotacreditopuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));			
			this.jButtonDuplicarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta && this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta));			
			this.jButtonCopiarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta && this.isPermisoCopiarDetalleNotaCreditoPuntoVenta));
			this.jButtonVerFormDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta && this.isPermisoVerFormDetalleNotaCreditoPuntoVenta));
			
			this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));			
			
			this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoEliminarDetalleNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta);							
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));			
			
			}
						
			this.jButtonGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));						
			this.jButtonDuplicarToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta && this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta));						
			this.jButtonCopiarToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta && this.isPermisoCopiarDetalleNotaCreditoPuntoVenta));			
			this.jButtonVerFormToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta && this.isPermisoVerFormDetalleNotaCreditoPuntoVenta));			
			this.jButtonAbrirOrderByToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));
			this.jButtonNuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));			
			this.jButtonNuevoGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));			
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta  && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoEliminarDetalleNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarToolBarDetalleNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta);				
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemDuplicarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta && this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemCopiarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta && this.isPermisoCopiarDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemVerFormDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta && this.isPermisoVerFormDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemAbrirOrderByDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));			
			//this.jMenuItemMostrarOcultarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));
			this.jMenuItemDetalleAbrirOrderByDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));			
			//this.jMenuItemDetalleMostrarOcultarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta && this.isPermisoOrdenDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta));			
			this.jMenuItemNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoNuevoDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));									
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemModificarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemActualizarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta && this.isPermisoActualizarDetalleNotaCreditoPuntoVenta));	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemEliminarDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta && this.isPermisoEliminarDetalleNotaCreditoPuntoVenta));
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemCancelarDetalleNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta);				
			}
			
			this.jMenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));						
			this.jMenuItemGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=this.jButtonNuevoDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta=this.jButtonDuplicarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta=this.jButtonCopiarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta=this.jButtonVerFormDetalleNotaCreditoPuntoVenta.isVisible();
			
			this.isVisibilidadCeldaOrdenDetalleNotaCreditoPuntoVenta=this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=this.jButtonModificarDetalleNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=this.jButtonGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=this.jButtonNuevoToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=this.jButtonNuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=this.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=this.jButtonGuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=this.jMenuItemNuevoDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=this.jMenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemModificarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemActualizarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemEliminarDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemCancelarDetalleNotaCreditoPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=this.jMenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=this.jMenuItemGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesDetalleNotaCreditoPuntoVenta(Boolean esInicializar) {
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
				//if(this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleNotaCreditoPuntoVenta();
			}
			
			this.inicializarActualizarBindingBotonesManualDetalleNotaCreditoPuntoVenta(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualDetalleNotaCreditoPuntoVenta() {
		this.jButtonNuevoDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoNuevoDetalleNotaCreditoPuntoVenta);			
		this.jButtonDuplicarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoDuplicarDetalleNotaCreditoPuntoVenta);			
		this.jButtonCopiarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoCopiarDetalleNotaCreditoPuntoVenta);			
		this.jButtonVerFormDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoVerFormDetalleNotaCreditoPuntoVenta);			
		
		this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoOrdenDetalleNotaCreditoPuntoVenta);					
		
		this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoNuevoDetalleNotaCreditoPuntoVenta);			
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarDetalleNotaCreditoPuntoVenta);	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarDetalleNotaCreditoPuntoVenta);	
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoEliminarDetalleNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta);						
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta);							
		}
		
		this.jButtonGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarDetalleNotaCreditoPuntoVenta);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleNotaCreditoPuntoVenta() {
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarDetalleNotaCreditoPuntoVenta);	
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoActualizarDetalleNotaCreditoPuntoVenta);	
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.setVisible(this.isPermisoEliminarDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta);							
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta && this.isPermisoGuardarCambiosDetalleNotaCreditoPuntoVenta));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosDetalleNotaCreditoPuntoVenta() {
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualDetalleNotaCreditoPuntoVenta();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesDetalleNotaCreditoPuntoVenta() {
	}
	
	public void jTableDatosDetalleNotaCreditoPuntoVentaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarDetalleNotaCreditoPuntoVenta(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.detallenotacreditopuntoventa.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisonotacreditopuntoventa=true;

			idTienePermisonotacreditopuntoventa=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(NotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisonotacreditopuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.notacreditopuntoventaBeanSwingJInternalFrame=new NotaCreditoPuntoVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.notacreditopuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.notacreditopuntoventaBeanSwingJInternalFrame.getNotaCreditoPuntoVentaLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_factura_punto_venta()!=null) {
					this.notacreditopuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.notacreditopuntoventaBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_factura_punto_venta());
					this.notacreditopuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.notacreditopuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.notacreditopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaNotaCreditoPuntoVenta();
				}

				JInternalFrameBase jinternalFrame =this.notacreditopuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordernotacreditopuntoventa=(TitledBorder)this.notacreditopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosNotaCreditoPuntoVenta.getBorder();

				titledBordernotacreditopuntoventa.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Nota Credito");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_factura_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_factura_punto_venta = "+this.detallenotacreditopuntoventa.getid_factura_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.detallenotacreditopuntoventa.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.detallenotacreditopuntoventa.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisobodega=true;

			idTienePermisobodega=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(BodegaConstantesFunciones.CLASSNAME);

			if(idTienePermisobodega) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.bodegaBeanSwingJInternalFrame=new BodegaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.bodegaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.bodegaBeanSwingJInternalFrame.getBodegaLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_bodega()!=null) {
					this.bodegaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.bodegaBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_bodega());
					this.bodegaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.bodegaBeanSwingJInternalFrame.inicializarActualizarBindingTablaBodega();
				}

				JInternalFrameBase jinternalFrame =this.bodegaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderbodega=(TitledBorder)this.bodegaBeanSwingJInternalFrame.jScrollPanelDatosBodega.getBorder();

				titledBorderbodega.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Bodega");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_bodega()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_bodega = "+this.detallenotacreditopuntoventa.getid_bodega().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.productoBeanSwingJInternalFrame.sTipoBusqueda="Producto";

			if(!this.sFinalQueryGeneral_producto.equals("")) {
				this.productoBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_producto);
				this.productoBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}

			if(!this.sFinalQueryComboProducto.equals("") && false) {

				//BUSQUEDA FILTRADA DESDE COMBO EVENT Y EVENTDEPEND
				this.productoBeanSwingJInternalFrame.sFinalQueryGeneral=this.sFinalQueryComboProducto;
				this.productoBeanSwingJInternalFrame.procesarBusqueda(this.productoBeanSwingJInternalFrame.sAccionBusqueda);
				this.productoBeanSwingJInternalFrame.inicializarActualizarBindingProducto(false);
			}


			JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=null;
			TitledBorder titledBorderproducto=null;

			if(!this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Producto");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_productoDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoproducto=true;

			idTienePermisoproducto=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(ProductoConstantesFunciones.CLASSNAME);

			if(idTienePermisoproducto) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.productoBeanSwingJInternalFrame=new ProductoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.productoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.productoBeanSwingJInternalFrame.getProductoLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_producto()!=null) {
					this.productoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.productoBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_producto());
					this.productoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.productoBeanSwingJInternalFrame.inicializarActualizarBindingTablaProducto();
				}

				JInternalFrameBase jinternalFrame =this.productoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderproducto=(TitledBorder)this.productoBeanSwingJInternalFrame.jScrollPanelDatosProducto.getBorder();

				titledBorderproducto.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Producto");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_productoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_producto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_producto = "+this.detallenotacreditopuntoventa.getid_producto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisounidad=true;

			idTienePermisounidad=this.tienePermisosUsuarioEnPaginaWebDetalleNotaCreditoPuntoVenta(UnidadConstantesFunciones.CLASSNAME);

			if(idTienePermisounidad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosDetalleNotaCreditoPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);

				this.unidadBeanSwingJInternalFrame=new UnidadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.unidadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.unidadBeanSwingJInternalFrame.getUnidadLogic().setConnexion(this.detallenotacreditopuntoventaLogic.getConnexion());

				if(this.detallenotacreditopuntoventa.getid_unidad()!=null) {
					this.unidadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.unidadBeanSwingJInternalFrame.setIdActual(this.detallenotacreditopuntoventa.getid_unidad());
					this.unidadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.unidadBeanSwingJInternalFrame.inicializarActualizarBindingTablaUnidad();
				}

				JInternalFrameBase jinternalFrame =this.unidadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderDetalleNotaCreditoPuntoVenta=(TitledBorder)this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.getBorder();
				TitledBorder titledBorderunidad=(TitledBorder)this.unidadBeanSwingJInternalFrame.jScrollPanelDatosUnidad.getBorder();

				titledBorderunidad.setTitle(titledBorderDetalleNotaCreditoPuntoVenta.getTitle() + " -> Unidad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_unidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getid_unidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_unidad = "+this.detallenotacreditopuntoventa.getid_unidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonserieDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getserie()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where serie like '%"+this.detallenotacreditopuntoventa.getserie()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncantidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getcantidad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where cantidad = "+this.detallenotacreditopuntoventa.getcantidad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonprecioDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getprecio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where precio = "+this.detallenotacreditopuntoventa.getprecio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.detallenotacreditopuntoventa.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getdescuento_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento_valor = "+this.detallenotacreditopuntoventa.getdescuento_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.detallenotacreditopuntoventa.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniva_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getiva_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva_valor = "+this.detallenotacreditopuntoventa.getiva_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.detallenotacreditopuntoventa.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonice_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getice_valor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice_valor = "+this.detallenotacreditopuntoventa.getice_valor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.detallenotacreditopuntoventa.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.detallenotacreditopuntoventa.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescripcionDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.getdetallenotacreditopuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.detallenotacreditopuntoventa==null) {
						this.detallenotacreditopuntoventa = new DetalleNotaCreditoPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);
				}

				if(this.detallenotacreditopuntoventa.getdescripcion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descripcion like '%"+this.detallenotacreditopuntoventa.getdescripcion()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdBodegaDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdBodega();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdEmpresa();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdNotaCreditoPuntoVenta();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdProductoDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdProducto();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdSucursal();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUnidadDetalleNotaCreditoPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);

			this.getDetalleNotaCreditoPuntoVentasFK_IdUnidad();

			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);

			//if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.detallenotacreditopuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameDetalleNotaCreditoPuntoVenta() {
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta=null;
		}
		
		if(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta!=null) {
			this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.setVisible(false);	    			
			this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.dispose();
			this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessDetalleNotaCreditoPuntoVenta();
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			
			if(sTipo.equals("NuevoDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarDetalleNotaCreditoPuntoVenta")) {
				jButtonDuplicarDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarDetalleNotaCreditoPuntoVenta")) {
				jButtonCopiarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormDetalleNotaCreditoPuntoVenta")) {
				jButtonVerFormDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonDuplicarDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarDetalleNotaCreditoPuntoVenta")) {
				jButtonDuplicarDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarDetalleNotaCreditoPuntoVenta")) {
				jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarDetalleNotaCreditoPuntoVenta")) {
				jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarDetalleNotaCreditoPuntoVenta")) {
				jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarDetalleNotaCreditoPuntoVenta")) {
				jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarDetalleNotaCreditoPuntoVenta")) {
				jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarDetalleNotaCreditoPuntoVenta")) {
				jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarDetalleNotaCreditoPuntoVenta")) {
				jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarDetalleNotaCreditoPuntoVenta")) {
				jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonMostrarOcultarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta")) {
				jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonCopiarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonVerFormDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarDetalleNotaCreditoPuntoVenta")) {
				jButtonCopiarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormDetalleNotaCreditoPuntoVenta")) {
				jButtonVerFormDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionDetalleNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionDetalleNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresDetalleNotaCreditoPuntoVenta")) {
				jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreDetalleNotaCreditoPuntoVenta")) {
				jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesDetalleNotaCreditoPuntoVenta")) {
				jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesDetalleNotaCreditoPuntoVenta")) {
				jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByDetalleNotaCreditoPuntoVenta") || sTipo.equals("MenuItemDetalleAbrirOrderByDetalleNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarDetalleNotaCreditoPuntoVenta") || sTipo.equals("MenuItemDetalleMostrarOcultarDetalleNotaCreditoPuntoVenta")) {
				jButtonMostrarOcultarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoDetalleNotaCreditoPuntoVenta")) {
				jButtonGenerarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta")) {
				
				jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionDetalleNotaCreditoPuntoVenta")) {
				
				jButtonGenerarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionDetalleNotaCreditoPuntoVenta")) {
				
				jButtonAbrirImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesDetalleNotaCreditoPuntoVenta")) {
				jComboBoxTiposAccionesDetalleNotaCreditoPuntoVentaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesDetalleNotaCreditoPuntoVenta")) {
				jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVentaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioDetalleNotaCreditoPuntoVenta")) {
				jComboBoxTiposAccionesDetalleNotaCreditoPuntoVentaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarDetalleNotaCreditoPuntoVenta")) {
				
				jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVentaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralDetalleNotaCreditoPuntoVenta")) {
				jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVentaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByDetalleNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarDetalleNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarOrderByDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonidDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_empresaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_unidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonserieDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoncantidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonprecioDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuentoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonivaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniva_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniceDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonice_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonsub_totalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescripcionDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdBodegaDetalleNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdBodegaDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdProductoDetalleNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdProductoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdUnidadDetalleNotaCreditoPuntoVenta")) {
				this.jButtonFK_IdUnidadDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			
			;
			
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessDetalleNotaCreditoPuntoVenta();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				


			if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("precioDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("iceDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal=null;
			
			if(!this.getEsControlTabla()) {
				detallenotacreditopuntoventaLocal=this.detallenotacreditopuntoventa;
			} else {
				detallenotacreditopuntoventaLocal=this.detallenotacreditopuntoventaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


				if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVenta")) {
					if(detallenotacreditopuntoventaLocal.getcantidad()==Integer.parseInt(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("precioDetalleNotaCreditoPuntoVenta")) {
					if(detallenotacreditopuntoventaLocal.getprecio()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVenta")) {
					if(detallenotacreditopuntoventaLocal.getdescuento()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVenta")) {
					if(detallenotacreditopuntoventaLocal.getiva()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.getText())){existeCambio=false;};
				}
				 else if(sTipo.equals("iceDetalleNotaCreditoPuntoVenta")) {
					if(detallenotacreditopuntoventaLocal.getice()==Double.parseDouble(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.getText())){existeCambio=false;};
				}
			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
							
				
				


			if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("precioDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("iceDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("precioDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("iceDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"TEXTBOX",classes,false,esControlTabla);
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
								
						
				


				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
								
				
				


				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
							
				
				


				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
								
				
				


			if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("precioDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("iceDetalleNotaCreditoPuntoVenta")) {
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.LABEL,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"LABEL",classes,false,esControlTabla);
			}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosDetalleNotaCreditoPuntoVenta")) {
					jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosDetalleNotaCreditoPuntoVenta")) {
					jCheckBoxSeleccionadosDetalleNotaCreditoPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarDetalleNotaCreditoPuntoVenta")) {
					
				}
				
				


				
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
												
				
				


				
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
				//recargarFormDetalleNotaCreditoPuntoVentaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
				//recargarFormDetalleNotaCreditoPuntoVentaProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
				//recargarFormDetalleNotaCreditoPuntoVentaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
				//recargarFormDetalleNotaCreditoPuntoVentaProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
			}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.detallenotacreditopuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.detallenotacreditopuntoventa);
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyBodega(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
				//recargarFormDetalleNotaCreditoPuntoVentaBodega(jComboBoxid_bodegaFK_IdBodegaDetalleNotaCreditoPuntoVenta,"FK_IdBodega");
			}
			 else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta;
				}

				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}


				this.procesarActionsCombosForeignKeyProducto(jComboBoxGenerico,"Formulario");

				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta")) {
				this.procesarActionsCombosForeignKeyProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
				//recargarFormDetalleNotaCreditoPuntoVentaProducto(jComboBoxid_productoFK_IdProductoDetalleNotaCreditoPuntoVenta,"FK_IdProducto");
			}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(DetalleNotaCreditoPuntoVenta.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",DetalleNotaCreditoPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaDetalleNotaCreditoPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.detallenotacreditopuntoventaAnterior =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarDetalleNotaCreditoPuntoVenta")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosDetalleNotaCreditoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.detallenotacreditopuntoventa =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.detallenotacreditopuntoventa);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarDetalleNotaCreditoPuntoVenta")) {
				
				}
				
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarDetalleNotaCreditoPuntoVenta")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarDetalleNotaCreditoPuntoVenta")) {
			
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessDetalleNotaCreditoPuntoVenta();
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("NuevoDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarDetalleNotaCreditoPuntoVenta")) {
				jButtonDuplicarDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarDetalleNotaCreditoPuntoVenta")) {
				jButtonCopiarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormDetalleNotaCreditoPuntoVenta")) {
				jButtonVerFormDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarDetalleNotaCreditoPuntoVenta")) {
				jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarDetalleNotaCreditoPuntoVenta")) {
				jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarDetalleNotaCreditoPuntoVenta")) {
				jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarDetalleNotaCreditoPuntoVenta")) {
				jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarDetalleNotaCreditoPuntoVenta")) {
				jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosDetalleNotaCreditoPuntoVenta")) {
				jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByDetalleNotaCreditoPuntoVenta")) {
				jButtonAbrirOrderByDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionDetalleNotaCreditoPuntoVenta")) {
				jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresDetalleNotaCreditoPuntoVenta")) {
				jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesDetalleNotaCreditoPuntoVenta")) {
				jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonidDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_empresaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_bodegaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVenta")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_productoDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_productoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_unidadDetalleNotaCreditoPuntoVentaUpdate")) {
				this.jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_unidadDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonid_unidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("serieDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonserieDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("cantidadDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoncantidadDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("precioDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonprecioDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuentoDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuento_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonivaDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iva_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniva_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtoniceDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ice_valorDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonice_valorDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtonsub_totalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtontotalDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descripcionDetalleNotaCreditoPuntoVentaBusqueda")) {
				this.jButtondescripcionDetalleNotaCreditoPuntoVentaBusquedaActionPerformed(evt);
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessDetalleNotaCreditoPuntoVenta();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameDetalleNotaCreditoPuntoVenta")) {
				closingInternalFrameDetalleNotaCreditoPuntoVenta();
				
			} else if(sTipo.equals("jButtonCancelarDetalleNotaCreditoPuntoVenta")) {
				JInternalFrameBase jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta = (JInternalFrameBase)evt.getSource();
	            	
	            DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(null);
			}
			
			DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.detallenotacreditopuntoventa,new Object(),this.detallenotacreditopuntoventaParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormDetalleNotaCreditoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormDetalleNotaCreditoPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {
			if(!esControlTabla) {
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);			
				}
				
				if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.procesarEventosDetalleNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this.detallenotacreditopuntoventa,this.detallenotacreditopuntoventaParameterGeneral,this.isEsNuevoDetalleNotaCreditoPuntoVenta,classes);//this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral,this.detallenotacreditopuntoventaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanDetalleNotaCreditoPuntoVenta(classes,this.detallenotacreditopuntoventaReturnGeneral,this.detallenotacreditopuntoventaBean,false);
					}
						
					if(this.detallenotacreditopuntoventaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta());	
					}
						
					if(this.detallenotacreditopuntoventaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta(),classes);//this.detallenotacreditopuntoventaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,classes);//this.detallenotacreditopuntoventaBean);									
				}
			
				if(DetalleNotaCreditoPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventa);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.detallenotacreditopuntoventaAnterior!=null) {
						this.detallenotacreditopuntoventa=this.detallenotacreditopuntoventaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.procesarEventosDetalleNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this.detallenotacreditopuntoventa,this.detallenotacreditopuntoventaParameterGeneral,this.isEsNuevoDetalleNotaCreditoPuntoVenta,classes);//this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.detallenotacreditopuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta(),detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta(),this.detallenotacreditopuntoventas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosDetalleNotaCreditoPuntoVenta.repaint();
				
				//((AbstractTableModel) this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosDetalleNotaCreditoPuntoVenta();
			}
		}
	}
	
	public void actualizarVisualTableDatosDetalleNotaCreditoPuntoVenta() throws Exception {
		
		DetalleNotaCreditoPuntoVentaModel detallenotacreditopuntoventaModel=(DetalleNotaCreditoPuntoVentaModel)this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			detallenotacreditopuntoventaModel.detallenotacreditopuntoventas=this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			detallenotacreditopuntoventaModel.detallenotacreditopuntoventas=this.detallenotacreditopuntoventas;
		}
		
		
		((DetalleNotaCreditoPuntoVentaModel) this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaDetalleNotaCreditoPuntoVenta() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getdetallenotacreditopuntoventaAnterior(),this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getdetallenotacreditopuntoventaAnterior(),this.detallenotacreditopuntoventas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosDetalleNotaCreditoPuntoVenta();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallenotacreditopuntoventa,new Object(),generalEntityParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsOfDetalleNotaCreditoPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=DetalleNotaCreditoPuntoVentaConstantesFunciones.getClassesRelationshipsFromStringsOfDetalleNotaCreditoPuntoVenta(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormDetalleNotaCreditoPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.detallenotacreditopuntoventa,new Object(),generalEntityParameterGeneral,this.detallenotacreditopuntoventaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVentaBean detallenotacreditopuntoventaBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanDetalleNotaCreditoPuntoVenta(ArrayList<Classe> classes,DetalleNotaCreditoPuntoVentaReturnGeneral detallenotacreditopuntoventaReturnGeneral,DetalleNotaCreditoPuntoVentaBean detallenotacreditopuntoventaBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta = new DetalleNotaCreditoPuntoVentaDetalleFormJInternalFrame(jDesktopPane,this.detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones(),this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setVisible(false);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setSelected(false);						
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.detallenotacreditopuntoventaLogic=this.detallenotacreditopuntoventaLogic;
		
		this.cargarCombosFrameForeignKeyDetalleNotaCreditoPuntoVenta("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleDetalleNotaCreditoPuntoVenta();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleDetalleNotaCreditoPuntoVenta();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyDetalleNotaCreditoPuntoVenta("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyDetalleNotaCreditoPuntoVenta();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleNotaCreditoPuntoVenta"));
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarDetalleNotaCreditoPuntoVenta"));

		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleNotaCreditoPuntoVenta"));
					
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemModificarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarDetalleNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleNotaCreditoPuntoVenta"));
						
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemActualizarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarDetalleNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleNotaCreditoPuntoVenta"));
								
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemEliminarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarDetalleNotaCreditoPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleNotaCreditoPuntoVenta"));
					
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemCancelarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleNotaCreditoPuntoVenta"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleNotaCreditoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleNotaCreditoPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleNotaCreditoPuntoVenta"));
		
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"cantidadDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleNotaCreditoPuntoVenta,"cantidadDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"precioDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"precioDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldprecioDetalleNotaCreditoPuntoVenta,"precioDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"descuentoDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"descuentoDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddescuentoDetalleNotaCreditoPuntoVenta,"descuentoDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"ivaDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"ivaDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldivaDetalleNotaCreditoPuntoVenta,"ivaDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"iceDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"iceDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldiceDetalleNotaCreditoPuntoVenta,"iceDetalleNotaCreditoPuntoVenta"));


				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonidDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonserieDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoncantidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonprecioDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuentoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonivaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniva_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniceDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonice_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonsub_totalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtontotalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescripcionDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleNotaCreditoPuntoVentaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleNotaCreditoPuntoVenta"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameDetalleNotaCreditoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarDetalleNotaCreditoPuntoVenta"));
		}
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarDetalleNotaCreditoPuntoVenta"));
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarDetalleNotaCreditoPuntoVenta"));
		
		this.jButtonNuevoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoDetalleNotaCreditoPuntoVenta"));
		
		this.jButtonDuplicarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarDetalleNotaCreditoPuntoVenta"));
		
		this.jButtonCopiarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"CopiarDetalleNotaCreditoPuntoVenta"));
		
		this.jButtonVerFormDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"VerFormDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jButtonDuplicarToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemDuplicarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarDetalleNotaCreditoPuntoVenta"));		
		
		
		this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoRelacionesDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarDetalleNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonModificarToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarDetalleNotaCreditoPuntoVenta"));
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemModificarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarDetalleNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarDetalleNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonActualizarToolBarDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarDetalleNotaCreditoPuntoVenta"));
				
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemActualizarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarDetalleNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarDetalleNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonEliminarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarDetalleNotaCreditoPuntoVenta"));
						
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemEliminarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarDetalleNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarDetalleNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonCancelarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarDetalleNotaCreditoPuntoVenta"));
			
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemCancelarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarDetalleNotaCreditoPuntoVenta"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarDetalleNotaCreditoPuntoVenta"));		
		
		
		this.jButtonCerrarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonCerrarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemCerrarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCerrarDetalleNotaCreditoPuntoVenta"));
			
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jMenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosDetalleNotaCreditoPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarDetalleNotaCreditoPuntoVenta"));
		}
		
		this.jButtonCopiarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CopiarToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jButtonVerFormToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"VerFormToolBarDetalleNotaCreditoPuntoVenta"));
		
		this.jMenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemCopiarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCopiarDetalleNotaCreditoPuntoVenta"));		
		
		this.jMenuItemVerFormDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemVerFormDetalleNotaCreditoPuntoVenta"));		
		
		
		this.jButtonGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonGuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jButtonRecargarInformacionDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionDetalleNotaCreditoPuntoVenta"));
					
		this.jButtonRecargarInformacionToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarDetalleNotaCreditoPuntoVenta"));
		
		this.jMenuItemRecargarInformacionDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionDetalleNotaCreditoPuntoVenta"));		
		
		
		
		this.jButtonAnterioresDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonAnterioresToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresToolBarDetalleNotaCreditoPuntoVenta"));
		
		this.jMenuItemAnterioresDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresDetalleNotaCreditoPuntoVenta"));		
		
		
		this.jButtonSiguientesDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonSiguientesToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemSiguientesDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemAbrirOrderByDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemMostrarOcultarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemDetalleAbrirOrderByDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemDetalleMostarOcultarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarDetalleNotaCreditoPuntoVenta"));		
		
		
		this.jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosDetalleNotaCreditoPuntoVenta"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta"));
			
		this.jMenuItemNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosDetalleNotaCreditoPuntoVenta"));

		this.jCheckBoxSeleccionadosDetalleNotaCreditoPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionadosDetalleNotaCreditoPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioDetalleNotaCreditoPuntoVenta"));
		}
		
		
		this.jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposRelacionesDetalleNotaCreditoPuntoVenta"));
			
		this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesDetalleNotaCreditoPuntoVenta"));
					
		this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposSeleccionarDetalleNotaCreditoPuntoVenta"));
			
		this.jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralDetalleNotaCreditoPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
		
		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"cantidadDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"cantidadDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldcantidadDetalleNotaCreditoPuntoVenta,"cantidadDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"precioDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"precioDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldprecioDetalleNotaCreditoPuntoVenta,"precioDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"descuentoDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"descuentoDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFielddescuentoDetalleNotaCreditoPuntoVenta,"descuentoDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"ivaDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"ivaDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldivaDetalleNotaCreditoPuntoVenta,"ivaDetalleNotaCreditoPuntoVenta"));


		//CAMPO EVENTO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.addFocusListener(new TextFieldFocusListener(this,"iceDetalleNotaCreditoPuntoVenta"));
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.addActionListener(new TextFieldActionListener(this,"iceDetalleNotaCreditoPuntoVenta"));
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.getDocument().addDocumentListener(new TextFieldDocumentListener(this,this.jTextFieldiceDetalleNotaCreditoPuntoVenta,"iceDetalleNotaCreditoPuntoVenta"));


		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonidDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonserieDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoncantidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonprecioDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuentoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonivaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniva_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniceDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonice_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonsub_totalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtontotalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescripcionDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleNotaCreditoPuntoVentaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdBodegaDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleNotaCreditoPuntoVenta"));

			this.jButtonFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta"));

			this.jButtonFK_IdProductoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleNotaCreditoPuntoVenta"));

			this.jButtonBuscarFK_IdProductoid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));

			this.jButtonFK_IdUnidadDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleNotaCreditoPuntoVenta"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameReporteDinamicoDetalleNotaCreditoPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta"));
			}
			
			//this.jButtonCerrarReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoDetalleNotaCreditoPuntoVenta"));				
			//this.jButtonGenerarReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoDetalleNotaCreditoPuntoVenta"));
			//this.jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionDetalleNotaCreditoPuntoVenta"));
				this.jInternalFrameImportacionDetalleNotaCreditoPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionDetalleNotaCreditoPuntoVenta"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByDetalleNotaCreditoPuntoVenta"));
			
			this.jButtonAbrirOrderByToolBarDetalleNotaCreditoPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarDetalleNotaCreditoPuntoVenta"));			
			
			if(this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta!=null) {
				this.jInternalFrameOrderByDetalleNotaCreditoPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByDetalleNotaCreditoPuntoVenta"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTabbedPaneRelacionesDetalleNotaCreditoPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesDetalleNotaCreditoPuntoVenta"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameDetalleNotaCreditoPuntoVenta();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta = (JInternalFrameBase)event.getSource();
	            	
	            DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosDetalleNotaCreditoPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosDetalleNotaCreditoPuntoVenta.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonNuevoDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoDetalleNotaCreditoPuntoVentaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonModificarDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonActualizarDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonEliminarDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonCancelarDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarDetalleNotaCreditoPuntoVenta";
		inputMap = this.jButtonCerrarDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosDetalleNotaCreditoPuntoVenta";
		inputMap = this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonGuardarCambiosDetalleNotaCreditoPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVenta.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVentaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesDetalleNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonidDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_factura_punto_ventaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_empresaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_sucursalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_bodegaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_bodegaDetalleNotaCreditoPuntoVentaBusqueda"));
		//jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_productoDetalleNotaCreditoPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_unidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_unidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonserieDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"serieDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoncantidadDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"cantidadDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonprecioDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"precioDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuentoDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescuento_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuento_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonivaDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniva_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iva_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtoniceDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonice_valorDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ice_valorDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonsub_totalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtontotalDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalDetalleNotaCreditoPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtondescripcionDetalleNotaCreditoPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descripcionDetalleNotaCreditoPuntoVentaBusqueda"));
		
		
		this.jButtonFK_IdBodegaDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdBodegaDetalleNotaCreditoPuntoVenta"));

		this.jButtonFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta"));

		this.jButtonFK_IdProductoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdProductoDetalleNotaCreditoPuntoVenta"));

		this.jButtonBuscarFK_IdProductoid_productoDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"id_productoDetalleNotaCreditoPuntoVenta"));

		this.jButtonFK_IdUnidadDetalleNotaCreditoPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdUnidadDetalleNotaCreditoPuntoVenta"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionDetalleNotaCreditoPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionDetalleNotaCreditoPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarDetalleNotaCreditoPuntoVenta.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosDetalleNotaCreditoPuntoVenta(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
					detallenotacreditopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventas) {
					detallenotacreditopuntoventaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosDetalleNotaCreditoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
						detallenotacreditopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventas) {
						detallenotacreditopuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosDetalleNotaCreditoPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosDetalleNotaCreditoPuntoVenta.getSelectedRows();
			
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaLocal=new DetalleNotaCreditoPuntoVenta();
			
			//this.seleccionarTodosDetalleNotaCreditoPuntoVenta(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					detallenotacreditopuntoventaLocal =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas().toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					detallenotacreditopuntoventaLocal =(DetalleNotaCreditoPuntoVenta) this.detallenotacreditopuntoventas.toArray()[this.jTableDatosDetalleNotaCreditoPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				detallenotacreditopuntoventaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
						detallenotacreditopuntoventaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventas) {
						detallenotacreditopuntoventaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosDetalleNotaCreditoPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosDetalleNotaCreditoPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosDetalleNotaCreditoPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualDetalleNotaCreditoPuntoVentaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarDetalleNotaCreditoPuntoVentaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralDetalleNotaCreditoPuntoVenta.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
				
						if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallenotacreditopuntoventaAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallenotacreditopuntoventaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detallenotacreditopuntoventaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallenotacreditopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallenotacreditopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							detallenotacreditopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detallenotacreditopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventas) {
					
						if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE)) {
							existe=true;
							detallenotacreditopuntoventaAux.setserie(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD)) {
							existe=true;
							detallenotacreditopuntoventaAux.setcantidad(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO)) {
							existe=true;
							detallenotacreditopuntoventaAux.setprecio(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescuento_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							detallenotacreditopuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setiva_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							detallenotacreditopuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR)) {
							existe=true;
							detallenotacreditopuntoventaAux.setice_valor(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							detallenotacreditopuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							detallenotacreditopuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION)) {
							existe=true;
							detallenotacreditopuntoventaAux.setdescripcion(this.sValorCampoGeneral);
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesDetalleNotaCreditoPuntoVentaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteDetalleNotaCreditoPuntoVenta) {				
					conSplash=true;//false;										
					
					//this.startProcessDetalleNotaCreditoPuntoVenta(conSplash);
				
					this.generarReporteDetalleNotaCreditoPuntoVentasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoDetalleNotaCreditoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleNotaCreditoPuntoVentasSeleccionados(false);
				//this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoDetalleNotaCreditoPuntoVentasSeleccionados(true);
				//this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleNotaCreditoPuntoVenta();
				
				this.exportarDetalleNotaCreditoPuntoVentasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionDetalleNotaCreditoPuntoVentas();
				//this.importarDetalleNotaCreditoPuntoVentas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessDetalleNotaCreditoPuntoVenta();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelDetalleNotaCreditoPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Detalle Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessDetalleNotaCreditoPuntoVenta();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoDetalleNotaCreditoPuntoVenta)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyDetalleNotaCreditoPuntoVenta(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
				}	
			} 			
			else if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteDetalleNotaCreditoPuntoVenta) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessDetalleNotaCreditoPuntoVenta(conSplash);
					
						//this.actualizarParametrosGeneralDetalleNotaCreditoPuntoVenta();
						
						this.generarReporteProcesoAccionDetalleNotaCreditoPuntoVentasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Detalle Nota CreditoS SELECCIONADOS?", "MANTENIMIENTO DE Detalle Nota Credito", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessDetalleNotaCreditoPuntoVenta();
				
						this.actualizarParametrosGeneralDetalleNotaCreditoPuntoVenta();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.detallenotacreditopuntoventaReturnGeneral=detallenotacreditopuntoventaLogic.procesarAccionDetalleNotaCreditoPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas(),this.detallenotacreditopuntoventaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarDetalleNotaCreditoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralDetalleNotaCreditoPuntoVenta();
					
					DetalleNotaCreditoPuntoVentaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarDetalleNotaCreditoPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxTiposAccionesFormularioDetalleNotaCreditoPuntoVenta.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessDetalleNotaCreditoPuntoVenta(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVentaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessDetalleNotaCreditoPuntoVenta();
			
			if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
			DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa=new DetalleNotaCreditoPuntoVenta();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesDetalleNotaCreditoPuntoVenta.getSelectedItem();
			
			
			
			
			detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
			//this.sTipoAccion;
			
			if(detallenotacreditopuntoventasSeleccionados.size()==1) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
					detallenotacreditopuntoventa=detallenotacreditopuntoventaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessDetalleNotaCreditoPuntoVenta();
			
      		//this.finishProcessDetalleNotaCreditoPuntoVenta(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarDetalleNotaCreditoPuntoVentaReturnGeneral() throws Exception {
		if(this.detallenotacreditopuntoventaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.detallenotacreditopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.detallenotacreditopuntoventaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.detallenotacreditopuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.detallenotacreditopuntoventaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.detallenotacreditopuntoventaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
		}
		
		if(this.detallenotacreditopuntoventaReturnGeneral.getConRetornoLista() || this.detallenotacreditopuntoventaReturnGeneral.getConRetornoObjeto()) {
			if(this.detallenotacreditopuntoventaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVentas(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.detallenotacreditopuntoventaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.detallenotacreditopuntoventaLogic.setDetalleNotaCreditoPuntoVenta(this.detallenotacreditopuntoventaReturnGeneral.getDetalleNotaCreditoPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingDetalleNotaCreditoPuntoVenta(false);
		}
	}
	
	public void actualizarParametrosGeneralDetalleNotaCreditoPuntoVenta() throws Exception {
		
		
	}
	
	public ArrayList<DetalleNotaCreditoPuntoVenta> getDetalleNotaCreditoPuntoVentasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioDetalleNotaCreditoPuntoVenta) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas()) {
					if(detallenotacreditopuntoventaAux.getIsSelected()) {
						detallenotacreditopuntoventasSeleccionados.add(detallenotacreditopuntoventaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:this.detallenotacreditopuntoventas) {
					if(detallenotacreditopuntoventaAux.getIsSelected()) {
						detallenotacreditopuntoventasSeleccionados.add(detallenotacreditopuntoventaAux);				
					}
				}
			}
			
			if(detallenotacreditopuntoventasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						detallenotacreditopuntoventasSeleccionados.addAll(this.detallenotacreditopuntoventaLogic.getDetalleNotaCreditoPuntoVentas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						detallenotacreditopuntoventasSeleccionados.addAll(this.detallenotacreditopuntoventas);				
					}
				}
			}
		} else {
			detallenotacreditopuntoventasSeleccionados.add(this.detallenotacreditopuntoventa);
		}
		
		return detallenotacreditopuntoventasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalDetalleNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoDetalleNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleNotaCreditoPuntoVentasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoDetalleNotaCreditoPuntoVentasSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Detalle Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados);
		
	}	
	
	public void generarReporteNormalDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionDetalleNotaCreditoPuntoVentasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		
		this.abrirInicializarFrameReporteDinamicoDetalleNotaCreditoPuntoVenta();
		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoDetalleNotaCreditoPuntoVenta();
		
		
		//this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados ,detallenotacreditopuntoventaImplementable,detallenotacreditopuntoventaImplementableHome);
	}
	
	public void mostrarImportacionDetalleNotaCreditoPuntoVentas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionDetalleNotaCreditoPuntoVenta();
		
		this.abrirFrameImportacionDetalleNotaCreditoPuntoVenta();		
		
			
		//this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados ,detallenotacreditopuntoventaImplementable,detallenotacreditopuntoventaImplementableHome);
	}
	
	public void importarDetalleNotaCreditoPuntoVentas() throws Exception {		
	
	}
	
	public void exportarDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelDetalleNotaCreditoPuntoVentasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoDetalleNotaCreditoPuntoVentasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlDetalleNotaCreditoPuntoVentasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Detalle Nota Credito",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarDetalleNotaCreditoPuntoVenta(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//detallenotacreditopuntoventaAux.setsDetalleGeneralEntityReporte(detallenotacreditopuntoventaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarDetalleNotaCreditoPuntoVenta(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=detallenotacreditopuntoventa.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getbodega_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getproducto_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getunidad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getserie();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getcantidad().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getprecio().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getdescuento_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getiva_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getice_valor().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.gettotal().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=detallenotacreditopuntoventa.getdescripcion();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("DetalleNotaCreditoPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelDetalleNotaCreditoPuntoVenta(row);				
				iRow++;
			}				
			
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlDetalleNotaCreditoPuntoVentasSeleccionados() throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();		
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"detallenotacreditopuntoventa.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("detallenotacreditopuntoventas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("detallenotacreditopuntoventa");
			//elementRoot.appendChild(element);
		
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
				element = document.createElement("detallenotacreditopuntoventa");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Detalle Nota Credito",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelDetalleNotaCreditoPuntoVenta(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_PRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCUENTOVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IVAVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_ICEVALOR);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_TOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getbodega_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getproducto_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getunidad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getserie());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getcantidad());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getprecio());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getdescuento_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getiva_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getice_valor());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.gettotal());
		cell = row.createCell(iColumn++);cell.setCellValue(detallenotacreditopuntoventa.getdescripcion());				
	}
	
	public void setFilaDatosExportarXmlDetalleNotaCreditoPuntoVenta(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventa,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(detallenotacreditopuntoventa.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(detallenotacreditopuntoventa.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementnotacreditopuntoventa_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDNOTACREDITOPUNTOVENTA);
		elementnotacreditopuntoventa_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getnotacreditopuntoventa_descripcion()));
		element.appendChild(elementnotacreditopuntoventa_descripcion);

		Element elementempresa_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementbodega_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDBODEGA);
		elementbodega_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getbodega_descripcion()));
		element.appendChild(elementbodega_descripcion);

		Element elementproducto_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDPRODUCTO);
		elementproducto_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getproducto_descripcion()));
		element.appendChild(elementproducto_descripcion);

		Element elementunidad_descripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IDUNIDAD);
		elementunidad_descripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getunidad_descripcion()));
		element.appendChild(elementunidad_descripcion);

		Element elementserie = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.SERIE);
		elementserie.appendChild(document.createTextNode(detallenotacreditopuntoventa.getserie().trim()));
		element.appendChild(elementserie);

		Element elementcantidad = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.CANTIDAD);
		elementcantidad.appendChild(document.createTextNode(detallenotacreditopuntoventa.getcantidad().toString().trim()));
		element.appendChild(elementcantidad);

		Element elementprecio = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.PRECIO);
		elementprecio.appendChild(document.createTextNode(detallenotacreditopuntoventa.getprecio().toString().trim()));
		element.appendChild(elementprecio);

		Element elementdescuento = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(detallenotacreditopuntoventa.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementdescuento_valor = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCUENTOVALOR);
		elementdescuento_valor.appendChild(document.createTextNode(detallenotacreditopuntoventa.getdescuento_valor().toString().trim()));
		element.appendChild(elementdescuento_valor);

		Element elementiva = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(detallenotacreditopuntoventa.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementiva_valor = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.IVAVALOR);
		elementiva_valor.appendChild(document.createTextNode(detallenotacreditopuntoventa.getiva_valor().toString().trim()));
		element.appendChild(elementiva_valor);

		Element elementice = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(detallenotacreditopuntoventa.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementice_valor = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.ICEVALOR);
		elementice_valor.appendChild(document.createTextNode(detallenotacreditopuntoventa.getice_valor().toString().trim()));
		element.appendChild(elementice_valor);

		Element elementsub_total = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(detallenotacreditopuntoventa.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(detallenotacreditopuntoventa.gettotal().toString().trim()));
		element.appendChild(elementtotal);

		Element elementdescripcion = document.createElement(DetalleNotaCreditoPuntoVentaConstantesFunciones.DESCRIPCION);
		elementdescripcion.appendChild(document.createTextNode(detallenotacreditopuntoventa.getdescripcion().trim()));
		element.appendChild(elementdescripcion);
	}
	
	public void generarReporteGroupGenericoDetalleNotaCreditoPuntoVentasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados=new ArrayList<DetalleNotaCreditoPuntoVenta>();
		
		detallenotacreditopuntoventasSeleccionados=this.getDetalleNotaCreditoPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoDetalleNotaCreditoPuntoVenta(detallenotacreditopuntoventasSeleccionados);
		
		this.generarReporteDetalleNotaCreditoPuntoVentas("Todos",detallenotacreditopuntoventasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoDetalleNotaCreditoPuntoVenta(ArrayList<DetalleNotaCreditoPuntoVenta> detallenotacreditopuntoventasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(DetalleNotaCreditoPuntoVenta detallenotacreditopuntoventaAux:detallenotacreditopuntoventasSeleccionados) {
				detallenotacreditopuntoventaAux.setsDetalleGeneralEntityReporte(detallenotacreditopuntoventaAux.toString());
			
				if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDNOTACREDITOPUNTOVENTA)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getnotacreditopuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDBODEGA)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getbodega_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDPRODUCTO)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getproducto_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_IDUNIDAD)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getunidad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_SERIE)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getserie());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_CANTIDAD)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getcantidad().toString());
				}
				 else if(sTipoSeleccionar.equals(DetalleNotaCreditoPuntoVentaConstantesFunciones.LABEL_DESCRIPCION)) {
					existe=true;
					detallenotacreditopuntoventaAux.setsDescripcionGeneralEntityReporte1(detallenotacreditopuntoventaAux.getdescripcion());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,DetalleNotaCreditoPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesDetalleNotaCreditoPuntoVenta(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=true;
				this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=true;
				this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=true;
			}
			
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaModificarDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaCancelarDetalleNotaCreditoPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarDetalleNotaCreditoPuntoVenta=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(DetalleNotaCreditoPuntoVentaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=true;
		} else {
			this.actualizarEstadoPanelsDetalleNotaCreditoPuntoVenta(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarDetalleNotaCreditoPuntoVenta=false;
			//this.isVisibilidadCeldaVerFormDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarDetalleNotaCreditoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
		} else {
			this.isVisibilidadCeldaNuevoDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosDetalleNotaCreditoPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!detallenotacreditopuntoventaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;												
			}
			
			this.jButtonCerrarDetalleNotaCreditoPuntoVenta.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesDetalleNotaCreditoPuntoVenta=false;
		}
		
		if(!this.permiteMantenimiento(this.detallenotacreditopuntoventa)) {
			this.isVisibilidadCeldaActualizarDetalleNotaCreditoPuntoVenta=false;
			this.isVisibilidadCeldaEliminarDetalleNotaCreditoPuntoVenta=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesDetalleNotaCreditoPuntoVenta() {
	}
	
	public void actualizarEstadoPanelsDetalleNotaCreditoPuntoVenta(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta!=null) {
				this.jScrollPanelDatosDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelPaginacionDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
					this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.detallenotacreditopuntoventaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta!=null) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta!=null) {
				this.jPanelParametrosReportesDetalleNotaCreditoPuntoVenta.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaNotaCreditoPuntoVenta(Boolean isParaNotaCreditoPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaNotaCreditoPuntoVentaNegation=!isParaNotaCreditoPuntoVenta;

			this.isVisibilidadFK_IdBodega=isParaNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaNotaCreditoPuntoVenta;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaNotaCreditoPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdBodega=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdBodega=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaBodega(Boolean isParaBodega){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaBodegaNegation=!isParaBodega;

			this.isVisibilidadFK_IdBodega=isParaBodega;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaBodegaNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaProducto(Boolean isParaProducto){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaProductoNegation=!isParaProducto;

			this.isVisibilidadFK_IdBodega=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaProducto;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaProductoNegation;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaUnidad(Boolean isParaUnidad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUnidadNegation=!isParaUnidad;

			this.isVisibilidadFK_IdBodega=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdBodega) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdNotaCreditoPuntoVenta=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdNotaCreditoPuntoVenta) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdProducto=isParaUnidadNegation;
			if(!this.isVisibilidadFK_IdProducto) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);}

			this.isVisibilidadFK_IdUnidad=isParaUnidad;
			if(!this.isVisibilidadFK_IdUnidad) {this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);}
		}
		
	}
	
	
	
	

	public String registrarSesionDetalleNotaCreditoPuntoVentaParaBusquedaProductos() throws Exception {
		Boolean isPaginaPopupProducto=false;

		try {

			if(detallenotacreditopuntoventaSessionBean==null) {
				detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
			}

			if(productoSessionBean==null) {
				productoSessionBean=new ProductoSessionBean();
			}

			productoSessionBean.setsPathNavegacionActual(detallenotacreditopuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ProductoConstantesFunciones.SCLASSWEBTITULO);
			productoSessionBean.setisPermiteRecargarInformacion(false);
			productoSessionBean.setisPaginaPopup(true);
			isPaginaPopupProducto=productoSessionBean.getisPaginaPopup();
			productoSessionBean.setisPaginaPopup(false);
			productoSessionBean.setEstaModoBusqueda(true);
			productoSessionBean.setsFuncionBusquedaRapida("window.opener.detallenotacreditopuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_producto(TO_REPLACE);");
			productoSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeProducto(true);
			productoSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeProducto(DetalleNotaCreditoPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//productoSessionBean.setisBusquedaDesdeForeignKeySesionDetalleNotaCreditoPuntoVenta(true);
			//productoSessionBean.setlidDetalleNotaCreditoPuntoVentaActual(this.idDetalleNotaCreditoPuntoVentaActual);

			detallenotacreditopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyDetalleNotaCreditoPuntoVenta(true);
			detallenotacreditopuntoventaSessionBean.setlIdDetalleNotaCreditoPuntoVentaActualForeignKey(this.idDetalleNotaCreditoPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//DetalleNotaCreditoPuntoVentaSessionBean detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
		
		if(this.detallenotacreditopuntoventaSessionBean==null) {
			this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
		}
		
		this.detallenotacreditopuntoventaSessionBean.setsUltimaBusquedaDetalleNotaCreditoPuntoVenta(this.getsAccionBusqueda());
		this.detallenotacreditopuntoventaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.detallenotacreditopuntoventaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
			detallenotacreditopuntoventaSessionBean.setid_bodega(this.getid_bodegaFK_IdBodega());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			detallenotacreditopuntoventaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdNotaCreditoPuntoVenta")) {
			detallenotacreditopuntoventaSessionBean.setid_factura_punto_venta(this.getid_factura_punto_ventaFK_IdNotaCreditoPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
			detallenotacreditopuntoventaSessionBean.setid_producto(this.getid_productoFK_IdProducto());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			detallenotacreditopuntoventaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
			detallenotacreditopuntoventaSessionBean.setid_unidad(this.getid_unidadFK_IdUnidad());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//DetalleNotaCreditoPuntoVentaSessionBean detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
		
		if(this.detallenotacreditopuntoventaSessionBean==null) {
			this.detallenotacreditopuntoventaSessionBean=new DetalleNotaCreditoPuntoVentaSessionBean();
		}
		
		if(this.detallenotacreditopuntoventaSessionBean.getsUltimaBusquedaDetalleNotaCreditoPuntoVenta()!=null&&!this.detallenotacreditopuntoventaSessionBean.getsUltimaBusquedaDetalleNotaCreditoPuntoVenta().equals("")) {
			this.setsAccionBusqueda(detallenotacreditopuntoventaSessionBean.getsUltimaBusquedaDetalleNotaCreditoPuntoVenta());
			this.setiNumeroPaginacion(detallenotacreditopuntoventaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(detallenotacreditopuntoventaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdBodega")) {
				this.setid_bodegaFK_IdBodega(detallenotacreditopuntoventaSessionBean.getid_bodega());
				detallenotacreditopuntoventaSessionBean.setid_bodega(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(detallenotacreditopuntoventaSessionBean.getid_empresa());
				detallenotacreditopuntoventaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdNotaCreditoPuntoVenta")) {
				this.setid_factura_punto_ventaFK_IdNotaCreditoPuntoVenta(detallenotacreditopuntoventaSessionBean.getid_factura_punto_venta());
				detallenotacreditopuntoventaSessionBean.setid_factura_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdProducto")) {
				this.setid_productoFK_IdProducto(detallenotacreditopuntoventaSessionBean.getid_producto());
				detallenotacreditopuntoventaSessionBean.setid_producto(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(detallenotacreditopuntoventaSessionBean.getid_sucursal());
				detallenotacreditopuntoventaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUnidad")) {
				this.setid_unidadFK_IdUnidad(detallenotacreditopuntoventaSessionBean.getid_unidad());
				detallenotacreditopuntoventaSessionBean.setid_unidad(-1L);
			}
		}
		
		this.detallenotacreditopuntoventaSessionBean.setsUltimaBusquedaDetalleNotaCreditoPuntoVenta("");
		this.detallenotacreditopuntoventaSessionBean.setiNumeroPaginacion(DetalleNotaCreditoPuntoVentaConstantesFunciones.INUMEROPAGINACION);
		this.detallenotacreditopuntoventaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaDetalleNotaCreditoPuntoVenta(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioDetalleNotaCreditoPuntoVenta() {
		this.updateBorderResaltarBusquedasFormularioDetalleNotaCreditoPuntoVenta();
		this.updateVisibilidadBusquedasFormularioDetalleNotaCreditoPuntoVenta();
		this.updateHabilitarBusquedasFormularioDetalleNotaCreditoPuntoVenta();
	}
	
	public void updateBorderResaltarBusquedasFormularioDetalleNotaCreditoPuntoVenta() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponents().length>0) {
	

		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdBodegaDetalleNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			}
		}

		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			}
		}

		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdProductoDetalleNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdProductoDetalleNotaCreditoPuntoVenta);
			}
		}

		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdUnidadDetalleNotaCreditoPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioDetalleNotaCreditoPuntoVenta() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			if(!this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdBodegaDetalleNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			if(!this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdProductoDetalleNotaCreditoPuntoVenta);
			if(!this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdProductoDetalleNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			if(!this.detallenotacreditopuntoventaConstantesFunciones.mostrarFK_IdUnidadDetalleNotaCreditoPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioDetalleNotaCreditoPuntoVenta() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdBodegaDetalleNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setEnabledAt(index,this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setEnabledAt(index,this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdProductoDetalleNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setEnabledAt(index,this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdProductoDetalleNotaCreditoPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdUnidadDetalleNotaCreditoPuntoVenta);
				this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setEnabledAt(index,this.detallenotacreditopuntoventaConstantesFunciones.activarFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaDetalleNotaCreditoPuntoVenta(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdBodega")) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdBodegaDetalleNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);

			this.detallenotacreditopuntoventaConstantesFunciones.setResaltarFK_IdBodegaDetalleNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdBodegaDetalleNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdNotaCreditoPuntoVenta")) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);

			this.detallenotacreditopuntoventaConstantesFunciones.setResaltarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdNotaCreditoPuntoVentaDetalleNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdProducto")) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdProductoDetalleNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);

			this.detallenotacreditopuntoventaConstantesFunciones.setResaltarFK_IdProductoDetalleNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdProductoDetalleNotaCreditoPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdUnidad")) {
			index= this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.indexOfComponent(this.jPanelFK_IdUnidadDetalleNotaCreditoPuntoVenta);

			this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasDetalleNotaCreditoPuntoVenta.getComponent(index);

			this.detallenotacreditopuntoventaConstantesFunciones.setResaltarFK_IdUnidadDetalleNotaCreditoPuntoVenta(resaltar);

			jPanel.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarFK_IdUnidadDetalleNotaCreditoPuntoVenta);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarDetalleNotaCreditoPuntoVenta.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioDetalleNotaCreditoPuntoVenta() throws Exception {

		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioDetalleNotaCreditoPuntoVenta();
		this.updateVisibilidadResaltarControlesFormularioDetalleNotaCreditoPuntoVenta();
		this.updateHabilitarResaltarControlesFormularioDetalleNotaCreditoPuntoVenta();
		
	}
	
	public void updateBorderResaltarControlesFormularioDetalleNotaCreditoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltaridDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltaridDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_empresaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_empresaDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_sucursalDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_sucursalDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_bodegaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_bodegaDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_productoDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_productoDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_unidadDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarid_unidadDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarserieDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarserieDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarcantidadDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarcantidadDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarprecioDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarprecioDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuentoDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuentoDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuento_valorDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescuento_valorDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarivaDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarivaDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltariva_valorDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltariva_valorDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltariceDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltariceDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarice_valorDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarice_valorDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltarsub_totalDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltarsub_totalDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltartotalDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltartotalDetalleNotaCreditoPuntoVenta);}
		if(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescripcionDetalleNotaCreditoPuntoVenta!=null && this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setBorder(this.detallenotacreditopuntoventaConstantesFunciones.resaltardescripcionDetalleNotaCreditoPuntoVenta);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioDetalleNotaCreditoPuntoVenta() throws Exception {		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
	
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostraridDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelidDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostraridDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_empresaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_empresaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_empresaDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_sucursalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_sucursalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_sucursalDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_bodegaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_bodegaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_bodegaDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_productoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_productoDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_productoDetalleNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_productoDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_unidadDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelid_unidadDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarid_unidadDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarserieDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelserieDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarserieDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarcantidadDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelcantidadDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarcantidadDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarprecioDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelprecioDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarprecioDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuentoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneldescuentoDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuentoDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuento_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneldescuento_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescuento_valorDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarivaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelivaDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarivaDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrariva_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneliva_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrariva_valorDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrariceDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneliceDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrariceDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarice_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelice_valorDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarice_valorDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarsub_totalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPanelsub_totalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrarsub_totalDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrartotalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneltotalDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrartotalDetalleNotaCreditoPuntoVenta);
		//this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescripcionDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jPaneldescripcionDetalleNotaCreditoPuntoVenta.setVisible(this.detallenotacreditopuntoventaConstantesFunciones.mostrardescripcionDetalleNotaCreditoPuntoVenta);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioDetalleNotaCreditoPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta!=null) {
	
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jLabelidDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activaridDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_factura_punto_ventaDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_factura_punto_ventaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_empresaDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_empresaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_sucursalDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_sucursalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_bodegaDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_bodegaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_productoDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_productoDetalleNotaCreditoPuntoVenta);
			this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jButtonid_productoDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_productoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jComboBoxid_unidadDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarid_unidadDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldserieDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarserieDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldcantidadDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarcantidadDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldprecioDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarprecioDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuentoDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activardescuentoDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFielddescuento_valorDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activardescuento_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldivaDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarivaDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiva_valorDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activariva_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldiceDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activariceDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldice_valorDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarice_valorDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldsub_totalDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activarsub_totalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextFieldtotalDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activartotalDetalleNotaCreditoPuntoVenta);
		this.jInternalFrameDetalleFormDetalleNotaCreditoPuntoVenta.jTextAreadescripcionDetalleNotaCreditoPuntoVenta.setEnabled(this.detallenotacreditopuntoventaConstantesFunciones.activardescripcionDetalleNotaCreditoPuntoVenta);
		}
	}
	
		
}