/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.puntoventa.presentation.swing.jinternalframes;


import java.sql.Time;


import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.puntoventa.util.FacturaPuntoVentaConstantesFunciones;
import com.bydan.erp.puntoventa.util.FacturaPuntoVentaParameterReturnGeneral;
//import com.bydan.erp.puntoventa.util.FacturaPuntoVentaParameterGeneral;
//import com.bydan.erp.puntoventa.presentation.report.source.FacturaPuntoVentaBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.puntoventa.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.puntoventa.resources.reportes.AuxiliarReportes;


import com.bydan.erp.puntoventa.util.*;
import com.bydan.erp.puntoventa.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.comisiones.business.logic.*;
import com.bydan.erp.cartera.business.logic.*;
import com.bydan.erp.inventario.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.puntoventa.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.comisiones.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.cartera.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.inventario.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.puntoventa.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.comisiones.business.entity.*;
import com.bydan.erp.cartera.business.entity.*;
import com.bydan.erp.inventario.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.comisiones.util.*;
import com.bydan.erp.cartera.util.*;
import com.bydan.erp.inventario.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.comisiones.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.cartera.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.inventario.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class FacturaPuntoVentaBeanSwingJInternalFrame extends FacturaPuntoVentaJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(FacturaPuntoVentaBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<FacturaPuntoVenta> facturapuntoventaValidator = new ClassValidator<FacturaPuntoVenta>(FacturaPuntoVenta.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public FacturaPuntoVenta facturapuntoventa;	
	public FacturaPuntoVenta facturapuntoventaAux;
	public FacturaPuntoVenta facturapuntoventaAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public FacturaPuntoVenta facturapuntoventaTotales;
	public Long idFacturaPuntoVentaActual;
	public Long iIdNuevoFacturaPuntoVenta=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboVendedor="";

	public List<Vendedor> vendedorsForeignKey;

	public List<Vendedor> getvendedorsForeignKey() {
		return vendedorsForeignKey;
	}

	public void setvendedorsForeignKey(List<Vendedor> vendedorsForeignKey) {
		this.vendedorsForeignKey = vendedorsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Vendedor vendedorForeignKey;

	public Vendedor getvendedorForeignKey() {
		return vendedorForeignKey;
	}

	public void setvendedorForeignKey(Vendedor vendedorForeignKey) {
		this.vendedorForeignKey = vendedorForeignKey;
	}

	public String sFinalQueryComboCliente="";

	public List<Cliente> clientesForeignKey;

	public List<Cliente> getclientesForeignKey() {
		return clientesForeignKey;
	}

	public void setclientesForeignKey(List<Cliente> clientesForeignKey) {
		this.clientesForeignKey = clientesForeignKey;
	}

	//OBJETO FK ACTUAL
	public Cliente clienteForeignKey;

	public Cliente getclienteForeignKey() {
		return clienteForeignKey;
	}

	public void setclienteForeignKey(Cliente clienteForeignKey) {
		this.clienteForeignKey = clienteForeignKey;
	}

	public String sFinalQueryComboCaja="";

	public List<Caja> cajasForeignKey;

	public List<Caja> getcajasForeignKey() {
		return cajasForeignKey;
	}

	public void setcajasForeignKey(List<Caja> cajasForeignKey) {
		this.cajasForeignKey = cajasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Caja cajaForeignKey;

	public Caja getcajaForeignKey() {
		return cajaForeignKey;
	}

	public void setcajaForeignKey(Caja cajaForeignKey) {
		this.cajaForeignKey = cajaForeignKey;
	}

	public String sFinalQueryComboTipoPrecio="";

	public List<TipoPrecio> tipopreciosForeignKey;

	public List<TipoPrecio> gettipopreciosForeignKey() {
		return tipopreciosForeignKey;
	}

	public void settipopreciosForeignKey(List<TipoPrecio> tipopreciosForeignKey) {
		this.tipopreciosForeignKey = tipopreciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoPrecio tipoprecioForeignKey;

	public TipoPrecio gettipoprecioForeignKey() {
		return tipoprecioForeignKey;
	}

	public void settipoprecioForeignKey(TipoPrecio tipoprecioForeignKey) {
		this.tipoprecioForeignKey = tipoprecioForeignKey;
	}

	public String sFinalQueryComboMesa="";

	public List<Mesa> mesasForeignKey;

	public List<Mesa> getmesasForeignKey() {
		return mesasForeignKey;
	}

	public void setmesasForeignKey(List<Mesa> mesasForeignKey) {
		this.mesasForeignKey = mesasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mesa mesaForeignKey;

	public Mesa getmesaForeignKey() {
		return mesaForeignKey;
	}

	public void setmesaForeignKey(Mesa mesaForeignKey) {
		this.mesaForeignKey = mesaForeignKey;
	}

	public String sFinalQueryComboFormato="";

	public List<Formato> formatosForeignKey;

	public List<Formato> getformatosForeignKey() {
		return formatosForeignKey;
	}

	public void setformatosForeignKey(List<Formato> formatosForeignKey) {
		this.formatosForeignKey = formatosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Formato formatoForeignKey;

	public Formato getformatoForeignKey() {
		return formatoForeignKey;
	}

	public void setformatoForeignKey(Formato formatoForeignKey) {
		this.formatoForeignKey = formatoForeignKey;
	}

	public String sFinalQueryComboTipoFacturaPuntoVenta="";

	public List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey;

	public List<TipoFacturaPuntoVenta> gettipofacturapuntoventasForeignKey() {
		return tipofacturapuntoventasForeignKey;
	}

	public void settipofacturapuntoventasForeignKey(List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey) {
		this.tipofacturapuntoventasForeignKey = tipofacturapuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public TipoFacturaPuntoVenta tipofacturapuntoventaForeignKey;

	public TipoFacturaPuntoVenta gettipofacturapuntoventaForeignKey() {
		return tipofacturapuntoventaForeignKey;
	}

	public void settipofacturapuntoventaForeignKey(TipoFacturaPuntoVenta tipofacturapuntoventaForeignKey) {
		this.tipofacturapuntoventaForeignKey = tipofacturapuntoventaForeignKey;
	}

	public String sFinalQueryComboEstadoFacturaPuntoVenta="";

	public List<EstadoFacturaPuntoVenta> estadofacturapuntoventasForeignKey;

	public List<EstadoFacturaPuntoVenta> getestadofacturapuntoventasForeignKey() {
		return estadofacturapuntoventasForeignKey;
	}

	public void setestadofacturapuntoventasForeignKey(List<EstadoFacturaPuntoVenta> estadofacturapuntoventasForeignKey) {
		this.estadofacturapuntoventasForeignKey = estadofacturapuntoventasForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoFacturaPuntoVenta estadofacturapuntoventaForeignKey;

	public EstadoFacturaPuntoVenta getestadofacturapuntoventaForeignKey() {
		return estadofacturapuntoventaForeignKey;
	}

	public void setestadofacturapuntoventaForeignKey(EstadoFacturaPuntoVenta estadofacturapuntoventaForeignKey) {
		this.estadofacturapuntoventaForeignKey = estadofacturapuntoventaForeignKey;
	}

	public String sFinalQueryComboAsientoContable="";

	public List<AsientoContable> asientocontablesForeignKey;

	public List<AsientoContable> getasientocontablesForeignKey() {
		return asientocontablesForeignKey;
	}

	public void setasientocontablesForeignKey(List<AsientoContable> asientocontablesForeignKey) {
		this.asientocontablesForeignKey = asientocontablesForeignKey;
	}

	//OBJETO FK ACTUAL
	public AsientoContable asientocontableForeignKey;

	public AsientoContable getasientocontableForeignKey() {
		return asientocontableForeignKey;
	}

	public void setasientocontableForeignKey(AsientoContable asientocontableForeignKey) {
		this.asientocontableForeignKey = asientocontableForeignKey;
	}

		
	
	
	
	//BUSQUEDA INTERNA FK
	public Long idVendedorActual=0L;

	public Long getidVendedorActual() {
		return idVendedorActual;
	}

	public void setidVendedorActual(Long idVendedorActual) {
		this.idVendedorActual= idVendedorActual;
	}
	public Long idClienteActual=0L;

	public Long getidClienteActual() {
		return idClienteActual;
	}

	public void setidClienteActual(Long idClienteActual) {
		this.idClienteActual= idClienteActual;
	}
	public Long idAsientoContableActual=0L;

	public Long getidAsientoContableActual() {
		return idAsientoContableActual;
	}

	public void setidAsientoContableActual(Long idAsientoContableActual) {
		this.idAsientoContableActual= idAsientoContableActual;
	}
	
	

	public Boolean isTienePermisosFormaPagoPuntoVenta=false;

	public Boolean getIsTienePermisosFormaPagoPuntoVenta() {
		return isTienePermisosFormaPagoPuntoVenta;
	}

	public void setIsTienePermisosFormaPagoPuntoVenta(Boolean isTienePermisosFormaPagoPuntoVenta) {
		this.isTienePermisosFormaPagoPuntoVenta= isTienePermisosFormaPagoPuntoVenta;
	}


	public Boolean isTienePermisosDetalleFacturaPuntoVenta=false;

	public Boolean getIsTienePermisosDetalleFacturaPuntoVenta() {
		return isTienePermisosDetalleFacturaPuntoVenta;
	}

	public void setIsTienePermisosDetalleFacturaPuntoVenta(Boolean isTienePermisosDetalleFacturaPuntoVenta) {
		this.isTienePermisosDetalleFacturaPuntoVenta= isTienePermisosDetalleFacturaPuntoVenta;
	}

	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoFacturaPuntoVenta;
	public Boolean isPermisoNuevoFacturaPuntoVenta;
	public Boolean isPermisoActualizarFacturaPuntoVenta;
	public Boolean isPermisoActualizarOriginalFacturaPuntoVenta;
	public Boolean isPermisoEliminarFacturaPuntoVenta;
	public Boolean isPermisoGuardarCambiosFacturaPuntoVenta;
	public Boolean isPermisoConsultaFacturaPuntoVenta;
	public Boolean isPermisoBusquedaFacturaPuntoVenta;
	public Boolean isPermisoReporteFacturaPuntoVenta;
	public Boolean isPermisoPaginacionMedioFacturaPuntoVenta;
	public Boolean isPermisoPaginacionAltoFacturaPuntoVenta;
	public Boolean isPermisoPaginacionTodoFacturaPuntoVenta;
	public Boolean isPermisoCopiarFacturaPuntoVenta;
	public Boolean isPermisoVerFormFacturaPuntoVenta;
	public Boolean isPermisoDuplicarFacturaPuntoVenta;
	public Boolean isPermisoOrdenFacturaPuntoVenta;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public FacturaPuntoVentaParameterReturnGeneral facturapuntoventaReturnGeneral;
	public FacturaPuntoVentaParameterReturnGeneral facturapuntoventaParameterGeneral;
	
	

	public FormaPagoPuntoVentaLogic formapagopuntoventaLogic=null;

	public FormaPagoPuntoVentaLogic getFormaPagoPuntoVentaLogic() {
		return formapagopuntoventaLogic;
	}

	public void setFormaPagoPuntoVentaLogic(FormaPagoPuntoVentaLogic formapagopuntoventaLogic) {
		this.formapagopuntoventaLogic = formapagopuntoventaLogic;
	}


	public DetalleFacturaPuntoVentaLogic detallefacturapuntoventaLogic=null;

	public DetalleFacturaPuntoVentaLogic getDetalleFacturaPuntoVentaLogic() {
		return detallefacturapuntoventaLogic;
	}

	public void setDetalleFacturaPuntoVentaLogic(DetalleFacturaPuntoVentaLogic detallefacturapuntoventaLogic) {
		this.detallefacturapuntoventaLogic = detallefacturapuntoventaLogic;
	}
 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoFacturaPuntoVenta=false;
	public Boolean esParaAccionDesdeFormularioFacturaPuntoVenta=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected FacturaPuntoVentaSessionBeanAdditional facturapuntoventaSessionBeanAdditional=null;
	
	public FacturaPuntoVentaSessionBeanAdditional getFacturaPuntoVentaSessionBeanAdditional() {
		return this.facturapuntoventaSessionBeanAdditional;
	}
	
	public void setFacturaPuntoVentaSessionBeanAdditional(FacturaPuntoVentaSessionBeanAdditional facturapuntoventaSessionBeanAdditional) {
		try {
			this.facturapuntoventaSessionBeanAdditional=facturapuntoventaSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected FacturaPuntoVentaBeanSwingJInternalFrameAdditional facturapuntoventaBeanSwingJInternalFrameAdditional=null;
	//public class FacturaPuntoVentaBeanSwingJInternalFrame
	
	public FacturaPuntoVentaBeanSwingJInternalFrameAdditional getFacturaPuntoVentaBeanSwingJInternalFrameAdditional() {
		return this.facturapuntoventaBeanSwingJInternalFrameAdditional;
	}
	
	public void setFacturaPuntoVentaBeanSwingJInternalFrameAdditional(FacturaPuntoVentaBeanSwingJInternalFrameAdditional facturapuntoventaBeanSwingJInternalFrameAdditional) {
		try {
			this.facturapuntoventaBeanSwingJInternalFrameAdditional=facturapuntoventaBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public FacturaPuntoVentaLogic facturapuntoventaLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public FacturaPuntoVenta facturapuntoventaBean;
	public FacturaPuntoVentaConstantesFunciones facturapuntoventaConstantesFunciones;
	//public FacturaPuntoVentaParameterReturnGeneral facturapuntoventaReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public UsuarioLogic usuarioLogic;
	public VendedorLogic vendedorLogic;
	public ClienteLogic clienteLogic;
	public CajaLogic cajaLogic;
	public TipoPrecioLogic tipoprecioLogic;
	public MesaLogic mesaLogic;
	public FormatoLogic formatoLogic;
	public TipoFacturaPuntoVentaLogic tipofacturapuntoventaLogic;
	public EstadoFacturaPuntoVentaLogic estadofacturapuntoventaLogic;
	public AsientoContableLogic asientocontableLogic;
	
	//PARAMETROS
	
	
	//public List<FacturaPuntoVenta> facturapuntoventas;	
	//public List<FacturaPuntoVenta> facturapuntoventasEliminados;
	//public List<FacturaPuntoVenta> facturapuntoventasAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaDuplicarFacturaPuntoVenta=true;
	public Boolean isVisibilidadCeldaCopiarFacturaPuntoVenta=true;
	public Boolean isVisibilidadCeldaVerFormFacturaPuntoVenta=true;
	public Boolean isVisibilidadCeldaOrdenFacturaPuntoVenta=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaModificarFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaCancelarFacturaPuntoVenta=false;
	public Boolean isVisibilidadCeldaGuardarFacturaPuntoVenta=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;	
	
	
	public Boolean isVisibilidadFK_IdAsientoContable=false;
	public Boolean isVisibilidadFK_IdCaja=false;
	public Boolean isVisibilidadFK_IdCliente=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoFacturaPuntoVenta=false;
	public Boolean isVisibilidadFK_IdFormato=false;
	public Boolean isVisibilidadFK_IdMesa=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdTipoFacturaPuntoVenta=false;
	public Boolean isVisibilidadFK_IdTipoPrecio=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	public Boolean isVisibilidadFK_IdVendedor=false;
	
	public Long getiIdNuevoFacturaPuntoVenta() {
		return this.iIdNuevoFacturaPuntoVenta;
	}

	public void setiIdNuevoFacturaPuntoVenta(Long iIdNuevoFacturaPuntoVenta) {
		this.iIdNuevoFacturaPuntoVenta = iIdNuevoFacturaPuntoVenta;
	}
	
	public Long getidFacturaPuntoVentaActual() {
		return this.idFacturaPuntoVentaActual;
	}

	public void setidFacturaPuntoVentaActual(Long idFacturaPuntoVentaActual) {
		this.idFacturaPuntoVentaActual = idFacturaPuntoVentaActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public FacturaPuntoVenta getfacturapuntoventa() {
		return this.facturapuntoventa;
	}

	public void setfacturapuntoventa(FacturaPuntoVenta facturapuntoventa) {
		this.facturapuntoventa = facturapuntoventa;
	}
	
	public FacturaPuntoVenta getfacturapuntoventaAux() {
		return this.facturapuntoventaAux;
	}

	public void setfacturapuntoventaAux(FacturaPuntoVenta facturapuntoventaAux) {
		this.facturapuntoventaAux = facturapuntoventaAux;
	}				
	
	public FacturaPuntoVenta getfacturapuntoventaAnterior() {
		return this.facturapuntoventaAnterior;
	}

	public void setfacturapuntoventaAnterior(FacturaPuntoVenta facturapuntoventaAnterior) {
		this.facturapuntoventaAnterior = facturapuntoventaAnterior;
	}	
	
	public FacturaPuntoVenta getfacturapuntoventaTotales() {
		return this.facturapuntoventaTotales;
	}

	public void setfacturapuntoventaTotales(FacturaPuntoVenta facturapuntoventaTotales) {
		this.facturapuntoventaTotales = facturapuntoventaTotales;
	}	
	
	public FacturaPuntoVenta getfacturapuntoventaBean() {
		return this.facturapuntoventaBean;
	}

	public void setfacturapuntoventaBean(FacturaPuntoVenta facturapuntoventaBean) {
		this.facturapuntoventaBean = facturapuntoventaBean;
	}	
	
	public FacturaPuntoVentaParameterReturnGeneral getfacturapuntoventaReturnGeneral() {
		return this.facturapuntoventaReturnGeneral;
	}

	public void setfacturapuntoventaReturnGeneral(FacturaPuntoVentaParameterReturnGeneral facturapuntoventaReturnGeneral) {
		this.facturapuntoventaReturnGeneral = facturapuntoventaReturnGeneral;
	}	
	
	
	public Long id_asiento_contableFK_IdAsientoContable=null;

	public Long getid_asiento_contableFK_IdAsientoContable() {
		return this.id_asiento_contableFK_IdAsientoContable;
	}

	public void setid_asiento_contableFK_IdAsientoContable(Long id_asiento_contableFK_IdAsientoContable) {
		this.id_asiento_contableFK_IdAsientoContable = id_asiento_contableFK_IdAsientoContable;
	}

	public Long id_cajaFK_IdCaja=-1L;

	public Long getid_cajaFK_IdCaja() {
		return this.id_cajaFK_IdCaja;
	}

	public void setid_cajaFK_IdCaja(Long id_cajaFK_IdCaja) {
		this.id_cajaFK_IdCaja = id_cajaFK_IdCaja;
	}

	public Long id_clienteFK_IdCliente=-1L;

	public Long getid_clienteFK_IdCliente() {
		return this.id_clienteFK_IdCliente;
	}

	public void setid_clienteFK_IdCliente(Long id_clienteFK_IdCliente) {
		this.id_clienteFK_IdCliente = id_clienteFK_IdCliente;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta=-1L;

	public Long getid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta() {
		return this.id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta;
	}

	public void setid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta(Long id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta) {
		this.id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta = id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta;
	}

	public Long id_formatoFK_IdFormato=-1L;

	public Long getid_formatoFK_IdFormato() {
		return this.id_formatoFK_IdFormato;
	}

	public void setid_formatoFK_IdFormato(Long id_formatoFK_IdFormato) {
		this.id_formatoFK_IdFormato = id_formatoFK_IdFormato;
	}

	public Long id_mesaFK_IdMesa=-1L;

	public Long getid_mesaFK_IdMesa() {
		return this.id_mesaFK_IdMesa;
	}

	public void setid_mesaFK_IdMesa(Long id_mesaFK_IdMesa) {
		this.id_mesaFK_IdMesa = id_mesaFK_IdMesa;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta=-1L;

	public Long getid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta() {
		return this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta;
	}

	public void setid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta(Long id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta) {
		this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta = id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta;
	}

	public Long id_tipo_precioFK_IdTipoPrecio=-1L;

	public Long getid_tipo_precioFK_IdTipoPrecio() {
		return this.id_tipo_precioFK_IdTipoPrecio;
	}

	public void setid_tipo_precioFK_IdTipoPrecio(Long id_tipo_precioFK_IdTipoPrecio) {
		this.id_tipo_precioFK_IdTipoPrecio = id_tipo_precioFK_IdTipoPrecio;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

	public Long id_vendedorFK_IdVendedor=-1L;

	public Long getid_vendedorFK_IdVendedor() {
		return this.id_vendedorFK_IdVendedor;
	}

	public void setid_vendedorFK_IdVendedor(Long id_vendedorFK_IdVendedor) {
		this.id_vendedorFK_IdVendedor = id_vendedorFK_IdVendedor;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public FacturaPuntoVentaLogic getFacturaPuntoVentaLogic()	{		
		return facturapuntoventaLogic;
	}

	public void setFacturaPuntoVentaLogic(FacturaPuntoVentaLogic facturapuntoventaLogic) {
		this.facturapuntoventaLogic = facturapuntoventaLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoFacturaPuntoVenta() {
		return isEsNuevoFacturaPuntoVenta;
	}

	public void setIsEsNuevoFacturaPuntoVenta(Boolean isEsNuevoFacturaPuntoVenta) {
		this.isEsNuevoFacturaPuntoVenta = isEsNuevoFacturaPuntoVenta;
	}

	public Boolean getEsParaAccionDesdeFormularioFacturaPuntoVenta() {
		return esParaAccionDesdeFormularioFacturaPuntoVenta;
	}
	
	public void setEsParaAccionDesdeFormularioFacturaPuntoVenta(Boolean esParaAccionDesdeFormularioFacturaPuntoVenta) {
		this.esParaAccionDesdeFormularioFacturaPuntoVenta = esParaAccionDesdeFormularioFacturaPuntoVenta;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosVendedorsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.vendedorsForeignKey=new ArrayList<Vendedor>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			VendedorLogic vendedorLogic=new VendedorLogic();

			//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//vendedorLogic.getVendedorDataAccess().setIsForForeingKeyData(true);

					vendedorLogic.getTodosVendedorsWithConnection(sFinalQuery,new Pagination());

					this.vendedorsForeignKey=vendedorLogic.getVendedors();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaVendedor(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidVendedorActual());
					this.vendedorsForeignKey.add(vendedorLogic.getVendedor());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosClientesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.clientesForeignKey=new ArrayList<Cliente>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			ClienteLogic clienteLogic=new ClienteLogic();

			//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//clienteLogic.getClienteDataAccess().setIsForForeingKeyData(true);

					clienteLogic.getTodosClientesWithConnection(sFinalQuery,new Pagination());

					this.clientesForeignKey=clienteLogic.getClientes();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCliente(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidClienteActual());
					this.clientesForeignKey.add(clienteLogic.getCliente());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCajasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.cajasForeignKey=new ArrayList<Caja>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CajaLogic cajaLogic=new CajaLogic();

			//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//cajaLogic.getCajaDataAccess().setIsForForeingKeyData(true);

					cajaLogic.getTodosCajasWithConnection(sFinalQuery,new Pagination());

					this.cajasForeignKey=cajaLogic.getCajas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCaja(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					cajaLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidCajaActual());
					this.cajasForeignKey.add(cajaLogic.getCaja());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoPreciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoPrecioLogic tipoprecioLogic=new TipoPrecioLogic();

			//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipoprecioLogic.getTipoPrecioDataAccess().setIsForForeingKeyData(true);

					tipoprecioLogic.getTodosTipoPreciosWithConnection(sFinalQuery,new Pagination());

					this.tipopreciosForeignKey=tipoprecioLogic.getTipoPrecios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoPrecio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipoprecioLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidTipoPrecioActual());
					this.tipopreciosForeignKey.add(tipoprecioLogic.getTipoPrecio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMesasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.mesasForeignKey=new ArrayList<Mesa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesaLogic mesaLogic=new MesaLogic();

			//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesaLogic.getMesaDataAccess().setIsForForeingKeyData(true);

					mesaLogic.getTodosMesasWithConnection(sFinalQuery,new Pagination());

					this.mesasForeignKey=mesaLogic.getMesas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMesa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesaLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidMesaActual());
					this.mesasForeignKey.add(mesaLogic.getMesa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosFormatosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.formatosForeignKey=new ArrayList<Formato>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			FormatoLogic formatoLogic=new FormatoLogic();

			//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//formatoLogic.getFormatoDataAccess().setIsForForeingKeyData(true);

					formatoLogic.getTodosFormatosWithConnection(sFinalQuery,new Pagination());

					this.formatosForeignKey=formatoLogic.getFormatos();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaFormato(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					formatoLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidFormatoActual());
					this.formatosForeignKey.add(formatoLogic.getFormato());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosTipoFacturaPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			TipoFacturaPuntoVentaLogic tipofacturapuntoventaLogic=new TipoFacturaPuntoVentaLogic();

			//tipofacturapuntoventaLogic.getTipoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//tipofacturapuntoventaLogic.getTipoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

					tipofacturapuntoventaLogic.getTodosTipoFacturaPuntoVentasWithConnection(sFinalQuery,new Pagination());

					this.tipofacturapuntoventasForeignKey=tipofacturapuntoventaLogic.getTipoFacturaPuntoVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaTipoFacturaPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					tipofacturapuntoventaLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidTipoFacturaPuntoVentaActual());
					this.tipofacturapuntoventasForeignKey.add(tipofacturapuntoventaLogic.getTipoFacturaPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoFacturaPuntoVentasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadofacturapuntoventasForeignKey=new ArrayList<EstadoFacturaPuntoVenta>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoFacturaPuntoVentaLogic estadofacturapuntoventaLogic=new EstadoFacturaPuntoVentaLogic();

			//estadofacturapuntoventaLogic.getEstadoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFacturaPuntoVenta()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadofacturapuntoventaLogic.getEstadoFacturaPuntoVentaDataAccess().setIsForForeingKeyData(true);

					estadofacturapuntoventaLogic.getTodosEstadoFacturaPuntoVentasWithConnection(sFinalQuery,new Pagination());

					this.estadofacturapuntoventasForeignKey=estadofacturapuntoventaLogic.getEstadoFacturaPuntoVentas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoFacturaPuntoVenta(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadofacturapuntoventaLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidEstadoFacturaPuntoVentaActual());
					this.estadofacturapuntoventasForeignKey.add(estadofacturapuntoventaLogic.getEstadoFacturaPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAsientoContablesForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AsientoContableLogic asientocontableLogic=new AsientoContableLogic();

			//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//asientocontableLogic.getAsientoContableDataAccess().setIsForForeingKeyData(true);

					asientocontableLogic.getTodosAsientoContablesWithConnection(sFinalQuery,new Pagination());

					this.asientocontablesForeignKey=asientocontableLogic.getAsientoContables();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAsientoContable(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(facturapuntoventaSessionBean.getlidAsientoContableActual());
					this.asientocontablesForeignKey.add(asientocontableLogic.getAsientoContable());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaFacturaPuntoVenta.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaFacturaPuntoVentaGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaFacturaPuntoVentaGenerico!=null && jComboBoxid_empresaFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_empresaFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalFacturaPuntoVenta.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalFacturaPuntoVentaGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalFacturaPuntoVentaGenerico!=null && jComboBoxid_sucursalFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_sucursalFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioFacturaPuntoVenta.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioFacturaPuntoVentaGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioFacturaPuntoVentaGenerico!=null && jComboBoxid_usuarioFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_usuarioFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualVendedorForeignKey(Long idVendedorSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(vendedorTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setVendedor(vendedorTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setSelectedItem(vendedorTemp);
					}
				} else {
					//jComboBoxid_vendedorFacturaPuntoVenta.setSelectedItem(vendedorTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){
					if(vendedorTemp!=null && jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta!=null) {
						jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.setSelectedItem(vendedorTemp);
					} else {
						if(jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta!=null) {
							//jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.setSelectedItem(vendedorTemp);
							if(jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualVendedorForeignKeyDescripcion(Long idVendedorSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}


			sDescripcion=VendedorConstantesFunciones.getVendedorDescripcion(vendedorTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualVendedorForeignKeyGenerico(Long idVendedorSeleccionado,JComboBox jComboBoxid_vendedorFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorTemp=null;

			for(Vendedor vendedorAux:vendedorsForeignKey) {
				if(vendedorAux.getId()!=null && vendedorAux.getId().equals(idVendedorSeleccionado)) {
					vendedorTemp=vendedorAux;
					break;
				}
			}

			if(vendedorTemp!=null) {
				jComboBoxid_vendedorFacturaPuntoVentaGenerico.setSelectedItem(vendedorTemp);
			} else {
				if(jComboBoxid_vendedorFacturaPuntoVentaGenerico!=null && jComboBoxid_vendedorFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_vendedorFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualClienteForeignKey(Long idClienteSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(clienteTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setCliente(clienteTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setSelectedItem(clienteTemp);
					}
				} else {
					//jComboBoxid_clienteFacturaPuntoVenta.setSelectedItem(clienteTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){
					if(clienteTemp!=null && jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta!=null) {
						jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.setSelectedItem(clienteTemp);
					} else {
						if(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta!=null) {
							//jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.setSelectedItem(clienteTemp);
							if(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualClienteForeignKeyDescripcion(Long idClienteSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}


			sDescripcion=ClienteConstantesFunciones.getClienteDescripcion(clienteTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualClienteForeignKeyGenerico(Long idClienteSeleccionado,JComboBox jComboBoxid_clienteFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteTemp=null;

			for(Cliente clienteAux:clientesForeignKey) {
				if(clienteAux.getId()!=null && clienteAux.getId().equals(idClienteSeleccionado)) {
					clienteTemp=clienteAux;
					break;
				}
			}

			if(clienteTemp!=null) {
				jComboBoxid_clienteFacturaPuntoVentaGenerico.setSelectedItem(clienteTemp);
			} else {
				if(jComboBoxid_clienteFacturaPuntoVentaGenerico!=null && jComboBoxid_clienteFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_clienteFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCajaForeignKey(Long idCajaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(cajaTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setCaja(cajaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setSelectedItem(cajaTemp);
					}
				} else {
					//jComboBoxid_cajaFacturaPuntoVenta.setSelectedItem(cajaTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){
					if(cajaTemp!=null && jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta!=null) {
						jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.setSelectedItem(cajaTemp);
					} else {
						if(jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta!=null) {
							//jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.setSelectedItem(cajaTemp);
							if(jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCajaForeignKeyDescripcion(Long idCajaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}


			sDescripcion=CajaConstantesFunciones.getCajaDescripcion(cajaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCajaForeignKeyGenerico(Long idCajaSeleccionado,JComboBox jComboBoxid_cajaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaTemp=null;

			for(Caja cajaAux:cajasForeignKey) {
				if(cajaAux.getId()!=null && cajaAux.getId().equals(idCajaSeleccionado)) {
					cajaTemp=cajaAux;
					break;
				}
			}

			if(cajaTemp!=null) {
				jComboBoxid_cajaFacturaPuntoVentaGenerico.setSelectedItem(cajaTemp);
			} else {
				if(jComboBoxid_cajaFacturaPuntoVentaGenerico!=null && jComboBoxid_cajaFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_cajaFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoPrecioForeignKey(Long idTipoPrecioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipoprecioTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setTipoPrecio(tipoprecioTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedItem(tipoprecioTemp);
					}
				} else {
					//jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedItem(tipoprecioTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipoprecioTemp!=null && jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta!=null) {
						jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.setSelectedItem(tipoprecioTemp);
					} else {
						if(jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta!=null) {
							//jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.setSelectedItem(tipoprecioTemp);
							if(jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoPrecioForeignKeyDescripcion(Long idTipoPrecioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}


			sDescripcion=TipoPrecioConstantesFunciones.getTipoPrecioDescripcion(tipoprecioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoPrecioForeignKeyGenerico(Long idTipoPrecioSeleccionado,JComboBox jComboBoxid_tipo_precioFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioTemp=null;

			for(TipoPrecio tipoprecioAux:tipopreciosForeignKey) {
				if(tipoprecioAux.getId()!=null && tipoprecioAux.getId().equals(idTipoPrecioSeleccionado)) {
					tipoprecioTemp=tipoprecioAux;
					break;
				}
			}

			if(tipoprecioTemp!=null) {
				jComboBoxid_tipo_precioFacturaPuntoVentaGenerico.setSelectedItem(tipoprecioTemp);
			} else {
				if(jComboBoxid_tipo_precioFacturaPuntoVentaGenerico!=null && jComboBoxid_tipo_precioFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_precioFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesaForeignKey(Long idMesaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesaTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setMesa(mesaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setSelectedItem(mesaTemp);
					}
				} else {
					//jComboBoxid_mesaFacturaPuntoVenta.setSelectedItem(mesaTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){
					if(mesaTemp!=null && jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta!=null) {
						jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.setSelectedItem(mesaTemp);
					} else {
						if(jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta!=null) {
							//jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.setSelectedItem(mesaTemp);
							if(jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesaForeignKeyDescripcion(Long idMesaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}


			sDescripcion=MesaConstantesFunciones.getMesaDescripcion(mesaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesaForeignKeyGenerico(Long idMesaSeleccionado,JComboBox jComboBoxid_mesaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaTemp=null;

			for(Mesa mesaAux:mesasForeignKey) {
				if(mesaAux.getId()!=null && mesaAux.getId().equals(idMesaSeleccionado)) {
					mesaTemp=mesaAux;
					break;
				}
			}

			if(mesaTemp!=null) {
				jComboBoxid_mesaFacturaPuntoVentaGenerico.setSelectedItem(mesaTemp);
			} else {
				if(jComboBoxid_mesaFacturaPuntoVentaGenerico!=null && jComboBoxid_mesaFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_mesaFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualFormatoForeignKey(Long idFormatoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(formatoTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setFormato(formatoTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setSelectedItem(formatoTemp);
					}
				} else {
					//jComboBoxid_formatoFacturaPuntoVenta.setSelectedItem(formatoTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdFormato") || sFormularioTipoBusqueda.equals("Todos")){
					if(formatoTemp!=null && jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta!=null) {
						jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.setSelectedItem(formatoTemp);
					} else {
						if(jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta!=null) {
							//jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.setSelectedItem(formatoTemp);
							if(jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualFormatoForeignKeyDescripcion(Long idFormatoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}


			sDescripcion=FormatoConstantesFunciones.getFormatoDescripcion(formatoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualFormatoForeignKeyGenerico(Long idFormatoSeleccionado,JComboBox jComboBoxid_formatoFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Formato  formatoTemp=null;

			for(Formato formatoAux:formatosForeignKey) {
				if(formatoAux.getId()!=null && formatoAux.getId().equals(idFormatoSeleccionado)) {
					formatoTemp=formatoAux;
					break;
				}
			}

			if(formatoTemp!=null) {
				jComboBoxid_formatoFacturaPuntoVentaGenerico.setSelectedItem(formatoTemp);
			} else {
				if(jComboBoxid_formatoFacturaPuntoVentaGenerico!=null && jComboBoxid_formatoFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_formatoFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualTipoFacturaPuntoVentaForeignKey(Long idTipoFacturaPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(tipofacturapuntoventaTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setTipoFacturaPuntoVenta(tipofacturapuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					}
				} else {
					//jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(tipofacturapuntoventaTemp!=null && jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta!=null) {
						jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
					} else {
						if(jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta!=null) {
							//jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventaTemp);
							if(jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualTipoFacturaPuntoVentaForeignKeyDescripcion(Long idTipoFacturaPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}


			sDescripcion=TipoFacturaPuntoVentaConstantesFunciones.getTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualTipoFacturaPuntoVentaForeignKeyGenerico(Long idTipoFacturaPuntoVentaSeleccionado,JComboBox jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaTemp=null;

			for(TipoFacturaPuntoVenta tipofacturapuntoventaAux:tipofacturapuntoventasForeignKey) {
				if(tipofacturapuntoventaAux.getId()!=null && tipofacturapuntoventaAux.getId().equals(idTipoFacturaPuntoVentaSeleccionado)) {
					tipofacturapuntoventaTemp=tipofacturapuntoventaAux;
					break;
				}
			}

			if(tipofacturapuntoventaTemp!=null) {
				jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico.setSelectedItem(tipofacturapuntoventaTemp);
			} else {
				if(jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico!=null && jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoFacturaPuntoVentaForeignKey(Long idEstadoFacturaPuntoVentaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoFacturaPuntoVenta  estadofacturapuntoventaTemp=null;

			for(EstadoFacturaPuntoVenta estadofacturapuntoventaAux:estadofacturapuntoventasForeignKey) {
				if(estadofacturapuntoventaAux.getId()!=null && estadofacturapuntoventaAux.getId().equals(idEstadoFacturaPuntoVentaSeleccionado)) {
					estadofacturapuntoventaTemp=estadofacturapuntoventaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadofacturapuntoventaTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setEstadoFacturaPuntoVenta(estadofacturapuntoventaTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventaTemp);
					}
				} else {
					//jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventaTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadofacturapuntoventaTemp!=null && jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta!=null) {
						jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventaTemp);
					} else {
						if(jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta!=null) {
							//jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventaTemp);
							if(jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoFacturaPuntoVentaForeignKeyDescripcion(Long idEstadoFacturaPuntoVentaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoFacturaPuntoVenta  estadofacturapuntoventaTemp=null;

			for(EstadoFacturaPuntoVenta estadofacturapuntoventaAux:estadofacturapuntoventasForeignKey) {
				if(estadofacturapuntoventaAux.getId()!=null && estadofacturapuntoventaAux.getId().equals(idEstadoFacturaPuntoVentaSeleccionado)) {
					estadofacturapuntoventaTemp=estadofacturapuntoventaAux;
					break;
				}
			}


			sDescripcion=EstadoFacturaPuntoVentaConstantesFunciones.getEstadoFacturaPuntoVentaDescripcion(estadofacturapuntoventaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoFacturaPuntoVentaForeignKeyGenerico(Long idEstadoFacturaPuntoVentaSeleccionado,JComboBox jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoFacturaPuntoVenta  estadofacturapuntoventaTemp=null;

			for(EstadoFacturaPuntoVenta estadofacturapuntoventaAux:estadofacturapuntoventasForeignKey) {
				if(estadofacturapuntoventaAux.getId()!=null && estadofacturapuntoventaAux.getId().equals(idEstadoFacturaPuntoVentaSeleccionado)) {
					estadofacturapuntoventaTemp=estadofacturapuntoventaAux;
					break;
				}
			}

			if(estadofacturapuntoventaTemp!=null) {
				jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico.setSelectedItem(estadofacturapuntoventaTemp);
			} else {
				if(jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico!=null && jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAsientoContableForeignKey(Long idAsientoContableSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(asientocontableTemp!=null) {

					if(this.facturapuntoventa!=null) {
						this.facturapuntoventa.setAsientoContable(asientocontableTemp);
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedItem(asientocontableTemp);
					}
				} else {
					//jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedItem(asientocontableTemp);
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.getItemCount()>0) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){
					if(asientocontableTemp!=null && jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta!=null) {
						jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.setSelectedItem(asientocontableTemp);
					} else {
						if(jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta!=null) {
							//jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.setSelectedItem(asientocontableTemp);
							if(jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.getItemCount()>0) {
								jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAsientoContableForeignKeyDescripcion(Long idAsientoContableSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}


			sDescripcion=AsientoContableConstantesFunciones.getAsientoContableDescripcion(asientocontableTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAsientoContableForeignKeyGenerico(Long idAsientoContableSeleccionado,JComboBox jComboBoxid_asiento_contableFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableTemp=null;

			for(AsientoContable asientocontableAux:asientocontablesForeignKey) {
				if(asientocontableAux.getId()!=null && asientocontableAux.getId().equals(idAsientoContableSeleccionado)) {
					asientocontableTemp=asientocontableAux;
					break;
				}
			}

			if(asientocontableTemp!=null) {
				jComboBoxid_asiento_contableFacturaPuntoVentaGenerico.setSelectedItem(asientocontableTemp);
			} else {
				if(jComboBoxid_asiento_contableFacturaPuntoVentaGenerico!=null && jComboBoxid_asiento_contableFacturaPuntoVentaGenerico.getItemCount()>0) {
					jComboBoxid_asiento_contableFacturaPuntoVentaGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_empresaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaFacturaPuntoVentaGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				facturapuntoventa.setid_empresa(empresaAux.getId());
				facturapuntoventa.setempresa_descripcion(FacturaPuntoVentaConstantesFunciones.getEmpresaDescripcion(empresaAux));
				facturapuntoventa.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_sucursalFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalFacturaPuntoVentaGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				facturapuntoventa.setid_sucursal(sucursalAux.getId());
				facturapuntoventa.setsucursal_descripcion(FacturaPuntoVentaConstantesFunciones.getSucursalDescripcion(sucursalAux));
				facturapuntoventa.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_usuarioFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioFacturaPuntoVentaGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				facturapuntoventa.setid_usuario(usuarioAux.getId());
				facturapuntoventa.setusuario_descripcion(FacturaPuntoVentaConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				facturapuntoventa.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarVendedorForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_vendedorFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Vendedor  vendedorAux=new Vendedor();

			if(jComboBoxid_vendedorFacturaPuntoVentaGenerico==null) {
				vendedorAux=(Vendedor)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.getSelectedItem();
			} else {
				vendedorAux=(Vendedor)jComboBoxid_vendedorFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(vendedorAux!=null && vendedorAux.getId()!=null) {
				facturapuntoventa.setid_vendedor(vendedorAux.getId());
				facturapuntoventa.setvendedor_descripcion(FacturaPuntoVentaConstantesFunciones.getVendedorDescripcion(vendedorAux));
				facturapuntoventa.setVendedor(vendedorAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarClienteForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_clienteFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Cliente  clienteAux=new Cliente();

			if(jComboBoxid_clienteFacturaPuntoVentaGenerico==null) {
				clienteAux=(Cliente)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.getSelectedItem();
			} else {
				clienteAux=(Cliente)jComboBoxid_clienteFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(clienteAux!=null && clienteAux.getId()!=null) {
				facturapuntoventa.setid_cliente(clienteAux.getId());
				facturapuntoventa.setcliente_descripcion(FacturaPuntoVentaConstantesFunciones.getClienteDescripcion(clienteAux));
				facturapuntoventa.setCliente(clienteAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCajaForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_cajaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Caja  cajaAux=new Caja();

			if(jComboBoxid_cajaFacturaPuntoVentaGenerico==null) {
				cajaAux=(Caja)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.getSelectedItem();
			} else {
				cajaAux=(Caja)jComboBoxid_cajaFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(cajaAux!=null && cajaAux.getId()!=null) {
				facturapuntoventa.setid_caja(cajaAux.getId());
				facturapuntoventa.setcaja_descripcion(FacturaPuntoVentaConstantesFunciones.getCajaDescripcion(cajaAux));
				facturapuntoventa.setCaja(cajaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoPrecioForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_tipo_precioFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoPrecio  tipoprecioAux=new TipoPrecio();

			if(jComboBoxid_tipo_precioFacturaPuntoVentaGenerico==null) {
				tipoprecioAux=(TipoPrecio)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.getSelectedItem();
			} else {
				tipoprecioAux=(TipoPrecio)jComboBoxid_tipo_precioFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(tipoprecioAux!=null && tipoprecioAux.getId()!=null) {
				facturapuntoventa.setid_tipo_precio(tipoprecioAux.getId());
				facturapuntoventa.settipoprecio_descripcion(FacturaPuntoVentaConstantesFunciones.getTipoPrecioDescripcion(tipoprecioAux));
				facturapuntoventa.setTipoPrecio(tipoprecioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesaForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_mesaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Mesa  mesaAux=new Mesa();

			if(jComboBoxid_mesaFacturaPuntoVentaGenerico==null) {
				mesaAux=(Mesa)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.getSelectedItem();
			} else {
				mesaAux=(Mesa)jComboBoxid_mesaFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(mesaAux!=null && mesaAux.getId()!=null) {
				facturapuntoventa.setid_mesa(mesaAux.getId());
				facturapuntoventa.setmesa_descripcion(FacturaPuntoVentaConstantesFunciones.getMesaDescripcion(mesaAux));
				facturapuntoventa.setMesa(mesaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarFormatoForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_formatoFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			Formato  formatoAux=new Formato();

			if(jComboBoxid_formatoFacturaPuntoVentaGenerico==null) {
				formatoAux=(Formato)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.getSelectedItem();
			} else {
				formatoAux=(Formato)jComboBoxid_formatoFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(formatoAux!=null && formatoAux.getId()!=null) {
				facturapuntoventa.setid_formato(formatoAux.getId());
				facturapuntoventa.setformato_descripcion(FacturaPuntoVentaConstantesFunciones.getFormatoDescripcion(formatoAux));
				facturapuntoventa.setFormato(formatoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarTipoFacturaPuntoVentaForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			TipoFacturaPuntoVenta  tipofacturapuntoventaAux=new TipoFacturaPuntoVenta();

			if(jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico==null) {
				tipofacturapuntoventaAux=(TipoFacturaPuntoVenta)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.getSelectedItem();
			} else {
				tipofacturapuntoventaAux=(TipoFacturaPuntoVenta)jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(tipofacturapuntoventaAux!=null && tipofacturapuntoventaAux.getId()!=null) {
				facturapuntoventa.setid_tipo_factura_punto_venta(tipofacturapuntoventaAux.getId());
				facturapuntoventa.settipofacturapuntoventa_descripcion(FacturaPuntoVentaConstantesFunciones.getTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventaAux));
				facturapuntoventa.setTipoFacturaPuntoVenta(tipofacturapuntoventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoFacturaPuntoVentaForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			EstadoFacturaPuntoVenta  estadofacturapuntoventaAux=new EstadoFacturaPuntoVenta();

			if(jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico==null) {
				estadofacturapuntoventaAux=(EstadoFacturaPuntoVenta)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.getSelectedItem();
			} else {
				estadofacturapuntoventaAux=(EstadoFacturaPuntoVenta)jComboBoxid_estado_factura_punto_ventaFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(estadofacturapuntoventaAux!=null && estadofacturapuntoventaAux.getId()!=null) {
				facturapuntoventa.setid_estado_factura_punto_venta(estadofacturapuntoventaAux.getId());
				facturapuntoventa.setestadofacturapuntoventa_descripcion(FacturaPuntoVentaConstantesFunciones.getEstadoFacturaPuntoVentaDescripcion(estadofacturapuntoventaAux));
				facturapuntoventa.setEstadoFacturaPuntoVenta(estadofacturapuntoventaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAsientoContableForeignKey(FacturaPuntoVenta facturapuntoventa,JComboBox jComboBoxid_asiento_contableFacturaPuntoVentaGenerico)throws Exception
	{
		try
		{
			AsientoContable  asientocontableAux=new AsientoContable();

			if(jComboBoxid_asiento_contableFacturaPuntoVentaGenerico==null) {
				asientocontableAux=(AsientoContable)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.getSelectedItem();
			} else {
				asientocontableAux=(AsientoContable)jComboBoxid_asiento_contableFacturaPuntoVentaGenerico.getSelectedItem();
			}

			if(asientocontableAux!=null) {
				facturapuntoventa.setid_asiento_contable(asientocontableAux.getId());
				facturapuntoventa.setasientocontable_descripcion(FacturaPuntoVentaConstantesFunciones.getAsientoContableDescripcion(asientocontableAux));
				facturapuntoventa.setAsientoContable(asientocontableAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameVendedorsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingVendedor=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.addItem(vendedor);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdVendedor") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.removeAllItems();

							for(Vendedor vendedor:this.vendedorsForeignKey) {
								this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.addItem(vendedor);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameClientesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCliente=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.addItem(cliente);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCliente") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.removeAllItems();

							for(Cliente cliente:this.clientesForeignKey) {
								this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.addItem(cliente);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCajasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCaja=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.addItem(caja);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCaja") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.removeAllItems();

							for(Caja caja:this.cajasForeignKey) {
								this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.addItem(caja);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoPreciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoPrecio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.addItem(tipoprecio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoPrecio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.removeAllItems();

							for(TipoPrecio tipoprecio:this.tipopreciosForeignKey) {
								this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.addItem(tipoprecio);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMesasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMesa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.addItem(mesa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMesa") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.removeAllItems();

							for(Mesa mesa:this.mesasForeignKey) {
								this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.addItem(mesa);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameFormatosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingFormato=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.addItem(formato);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdFormato") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.removeAllItems();

							for(Formato formato:this.formatosForeignKey) {
								this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.addItem(formato);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameTipoFacturaPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingTipoFacturaPuntoVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.removeAllItems();

							for(TipoFacturaPuntoVenta tipofacturapuntoventa:this.tipofacturapuntoventasForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.addItem(tipofacturapuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.removeAllItems();

							for(TipoFacturaPuntoVenta tipofacturapuntoventa:this.tipofacturapuntoventasForeignKey) {
								this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.addItem(tipofacturapuntoventa);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoFacturaPuntoVentasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoFacturaPuntoVenta=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.removeAllItems();

							for(EstadoFacturaPuntoVenta estadofacturapuntoventa:this.estadofacturapuntoventasForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.addItem(estadofacturapuntoventa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoFacturaPuntoVenta") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.removeAllItems();

							for(EstadoFacturaPuntoVenta estadofacturapuntoventa:this.estadofacturapuntoventasForeignKey) {
								this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.addItem(estadofacturapuntoventa);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAsientoContablesForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAsientoContable=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.addItem(asientocontable);
							}
						}
					}

					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { 
					}

					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAsientoContable") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.removeAllItems();

							for(AsientoContable asientocontable:this.asientocontablesForeignKey) {
								this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.addItem(asientocontable);
							}
						}

						if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameVendedorForeignKey(Vendedor vendedor,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setSelectedItem(vendedor);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.setSelectedItem(vendedor);
						} else {
							this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameClienteForeignKey(Cliente cliente,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setSelectedItem(cliente);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.setSelectedItem(cliente);
						} else {
							this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCajaForeignKey(Caja caja,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setSelectedItem(caja);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.setSelectedItem(caja);
						} else {
							this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoPrecioForeignKey(TipoPrecio tipoprecio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedItem(tipoprecio);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.setSelectedItem(tipoprecio);
						} else {
							this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesaForeignKey(Mesa mesa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setSelectedItem(mesa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.setSelectedItem(mesa);
						} else {
							this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameFormatoForeignKey(Formato formato,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setSelectedItem(formato);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.setSelectedItem(formato);
						} else {
							this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameTipoFacturaPuntoVentaForeignKey(TipoFacturaPuntoVenta tipofacturapuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(tipofacturapuntoventa);
						} else {
							this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoFacturaPuntoVentaForeignKey(EstadoFacturaPuntoVenta estadofacturapuntoventa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventa);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.setSelectedItem(estadofacturapuntoventa);
						} else {
							this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAsientoContableForeignKey(AsientoContable asientocontable,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedItem(asientocontable);
						}
					} else {
						if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.setSelectedItem(asientocontable);
						} else {
							this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesFacturaPuntoVenta() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			FacturaPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesFacturaPuntoVenta(this.facturapuntoventaLogic.getFacturaPuntoVentas());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			FacturaPuntoVentaConstantesFunciones.refrescarForeignKeysDescripcionesFacturaPuntoVenta(this.facturapuntoventas);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(Vendedor.class));
		classes.add(new Classe(Cliente.class));
		classes.add(new Classe(Caja.class));
		classes.add(new Classe(TipoPrecio.class));
		classes.add(new Classe(Mesa.class));
		classes.add(new Classe(Formato.class));
		classes.add(new Classe(TipoFacturaPuntoVenta.class));
		classes.add(new Classe(EstadoFacturaPuntoVenta.class));
		classes.add(new Classe(AsientoContable.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//facturapuntoventaLogic.setFacturaPuntoVentas(this.facturapuntoventas);
			facturapuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public FacturaPuntoVentaParameterReturnGeneral getFacturaPuntoVentaParameterGeneral() {
		return this.facturapuntoventaParameterGeneral;
	}
	
	public void setFacturaPuntoVentaParameterGeneral(FacturaPuntoVentaParameterReturnGeneral facturapuntoventaParameterGeneral) {
		this.facturapuntoventaParameterGeneral = facturapuntoventaParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoFacturaPuntoVenta() {
		return isPermisoTodoFacturaPuntoVenta;
	}

	public void setIsPermisoTodoFacturaPuntoVenta(Boolean isPermisoTodoFacturaPuntoVenta) {
		this.isPermisoTodoFacturaPuntoVenta = isPermisoTodoFacturaPuntoVenta;
	}

	public Boolean getIsPermisoNuevoFacturaPuntoVenta() {
		return isPermisoNuevoFacturaPuntoVenta;
	}

	public void setIsPermisoNuevoFacturaPuntoVenta(Boolean isPermisoNuevoFacturaPuntoVenta) {
		this.isPermisoNuevoFacturaPuntoVenta = isPermisoNuevoFacturaPuntoVenta;
	}

	public Boolean getIsPermisoActualizarFacturaPuntoVenta() {
		return isPermisoActualizarFacturaPuntoVenta;
	}

	public void setIsPermisoActualizarFacturaPuntoVenta(Boolean isPermisoActualizarFacturaPuntoVenta) {
		this.isPermisoActualizarFacturaPuntoVenta = isPermisoActualizarFacturaPuntoVenta;
	}

	public Boolean getIsPermisoEliminarFacturaPuntoVenta() {
		return isPermisoEliminarFacturaPuntoVenta;
	}

	public void setIsPermisoEliminarFacturaPuntoVenta(Boolean isPermisoEliminarFacturaPuntoVenta) {
		this.isPermisoEliminarFacturaPuntoVenta = isPermisoEliminarFacturaPuntoVenta;
	}

	public Boolean getIsPermisoGuardarCambiosFacturaPuntoVenta() {
		return isPermisoGuardarCambiosFacturaPuntoVenta;
	}

	public void setIsPermisoGuardarCambiosFacturaPuntoVenta(Boolean isPermisoGuardarCambiosFacturaPuntoVenta) {
		this.isPermisoGuardarCambiosFacturaPuntoVenta = isPermisoGuardarCambiosFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoConsultaFacturaPuntoVenta() {
		return isPermisoConsultaFacturaPuntoVenta;
	}

	public void setIsPermisoConsultaFacturaPuntoVenta(Boolean isPermisoConsultaFacturaPuntoVenta) {
		this.isPermisoConsultaFacturaPuntoVenta = isPermisoConsultaFacturaPuntoVenta;
	}

	public Boolean getIsPermisoBusquedaFacturaPuntoVenta() {
		return isPermisoBusquedaFacturaPuntoVenta;
	}

	public void setIsPermisoBusquedaFacturaPuntoVenta(Boolean isPermisoBusquedaFacturaPuntoVenta) {
		this.isPermisoBusquedaFacturaPuntoVenta = isPermisoBusquedaFacturaPuntoVenta;
	}

	public Boolean getIsPermisoReporteFacturaPuntoVenta() {
		return isPermisoReporteFacturaPuntoVenta;
	}

	public void setIsPermisoReporteFacturaPuntoVenta(Boolean isPermisoReporteFacturaPuntoVenta) {
		this.isPermisoReporteFacturaPuntoVenta = isPermisoReporteFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionMedioFacturaPuntoVenta() {
		return isPermisoPaginacionMedioFacturaPuntoVenta;
	}

	public void setIsPermisoPaginacionMedioFacturaPuntoVenta(Boolean isPermisoPaginacionMedioFacturaPuntoVenta) {
		this.isPermisoPaginacionMedioFacturaPuntoVenta = isPermisoPaginacionMedioFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionTodoFacturaPuntoVenta() {
		return isPermisoPaginacionTodoFacturaPuntoVenta;
	}

	public void setIsPermisoPaginacionTodoFacturaPuntoVenta(Boolean isPermisoPaginacionTodoFacturaPuntoVenta) {
		this.isPermisoPaginacionTodoFacturaPuntoVenta = isPermisoPaginacionTodoFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoPaginacionAltoFacturaPuntoVenta() {
		return isPermisoPaginacionAltoFacturaPuntoVenta;
	}

	public void setIsPermisoPaginacionAltoFacturaPuntoVenta(Boolean isPermisoPaginacionAltoFacturaPuntoVenta) {
		this.isPermisoPaginacionAltoFacturaPuntoVenta = isPermisoPaginacionAltoFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoCopiarFacturaPuntoVenta() {
		return isPermisoCopiarFacturaPuntoVenta;
	}

	public void setIsPermisoCopiarFacturaPuntoVenta(Boolean isPermisoCopiarFacturaPuntoVenta) {
		this.isPermisoCopiarFacturaPuntoVenta = isPermisoCopiarFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoVerFormFacturaPuntoVenta() {
		return isPermisoVerFormFacturaPuntoVenta;
	}

	public void setIsPermisoVerFormFacturaPuntoVenta(Boolean isPermisoVerFormFacturaPuntoVenta) {
		this.isPermisoVerFormFacturaPuntoVenta = isPermisoVerFormFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoDuplicarFacturaPuntoVenta() {
		return isPermisoDuplicarFacturaPuntoVenta;
	}

	public void setIsPermisoDuplicarFacturaPuntoVenta(Boolean isPermisoDuplicarFacturaPuntoVenta) {
		this.isPermisoDuplicarFacturaPuntoVenta = isPermisoDuplicarFacturaPuntoVenta;
	}
	
	public Boolean getIsPermisoOrdenFacturaPuntoVenta() {
		return isPermisoOrdenFacturaPuntoVenta;
	}

	public void setIsPermisoOrdenFacturaPuntoVenta(Boolean isPermisoOrdenFacturaPuntoVenta) {
		this.isPermisoOrdenFacturaPuntoVenta = isPermisoOrdenFacturaPuntoVenta;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoFacturaPuntoVenta() {
		return isVisibilidadCeldaNuevoFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoFacturaPuntoVenta(Boolean isVisibilidadCeldaNuevoFacturaPuntoVenta) {
		this.isVisibilidadCeldaNuevoFacturaPuntoVenta = isVisibilidadCeldaNuevoFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarFacturaPuntoVenta() {
		return isVisibilidadCeldaDuplicarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaDuplicarFacturaPuntoVenta(Boolean isVisibilidadCeldaDuplicarFacturaPuntoVenta) {
		this.isVisibilidadCeldaDuplicarFacturaPuntoVenta = isVisibilidadCeldaDuplicarFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarFacturaPuntoVenta() {
		return isVisibilidadCeldaCopiarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaCopiarFacturaPuntoVenta(Boolean isVisibilidadCeldaCopiarFacturaPuntoVenta) {
		this.isVisibilidadCeldaCopiarFacturaPuntoVenta = isVisibilidadCeldaCopiarFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormFacturaPuntoVenta() {
		return isVisibilidadCeldaVerFormFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaVerFormFacturaPuntoVenta(Boolean isVisibilidadCeldaVerFormFacturaPuntoVenta) {
		this.isVisibilidadCeldaVerFormFacturaPuntoVenta = isVisibilidadCeldaVerFormFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenFacturaPuntoVenta() {
		return isVisibilidadCeldaOrdenFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaOrdenFacturaPuntoVenta(Boolean isVisibilidadCeldaOrdenFacturaPuntoVenta) {
		this.isVisibilidadCeldaOrdenFacturaPuntoVenta = isVisibilidadCeldaOrdenFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta() {
		return isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta(Boolean isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta) {
		this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta = isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaModificarFacturaPuntoVenta() {
		return isVisibilidadCeldaModificarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaModificarFacturaPuntoVenta(Boolean isVisibilidadCeldaModificarFacturaPuntoVenta) {
		this.isVisibilidadCeldaModificarFacturaPuntoVenta = isVisibilidadCeldaModificarFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarFacturaPuntoVenta() {
		return isVisibilidadCeldaActualizarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaActualizarFacturaPuntoVenta(Boolean isVisibilidadCeldaActualizarFacturaPuntoVenta) {
		this.isVisibilidadCeldaActualizarFacturaPuntoVenta = isVisibilidadCeldaActualizarFacturaPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaEliminarFacturaPuntoVenta() {
		return isVisibilidadCeldaEliminarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaEliminarFacturaPuntoVenta(Boolean isVisibilidadCeldaEliminarFacturaPuntoVenta) {
		this.isVisibilidadCeldaEliminarFacturaPuntoVenta = isVisibilidadCeldaEliminarFacturaPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaCancelarFacturaPuntoVenta() {
		return isVisibilidadCeldaCancelarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaCancelarFacturaPuntoVenta(Boolean isVisibilidadCeldaCancelarFacturaPuntoVenta) {
		this.isVisibilidadCeldaCancelarFacturaPuntoVenta = isVisibilidadCeldaCancelarFacturaPuntoVenta;
	}

	public Boolean getIsVisibilidadCeldaGuardarFacturaPuntoVenta() {
		return isVisibilidadCeldaGuardarFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarFacturaPuntoVenta(Boolean isVisibilidadCeldaGuardarFacturaPuntoVenta) {
		this.isVisibilidadCeldaGuardarFacturaPuntoVenta = isVisibilidadCeldaGuardarFacturaPuntoVenta;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosFacturaPuntoVenta() {
		return isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta;
	}

	public void setIsVisibilidadCeldaGuardarCambiosFacturaPuntoVenta(Boolean isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta) {
		this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta = isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta;
	}
		
	public FacturaPuntoVentaSessionBean getfacturapuntoventaSessionBean() {
		return this.facturapuntoventaSessionBean;
	}
	
	public void setfacturapuntoventaSessionBean(FacturaPuntoVentaSessionBean facturapuntoventaSessionBean) {
		this.facturapuntoventaSessionBean=facturapuntoventaSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAsientoContable() {
		return this.isVisibilidadFK_IdAsientoContable;
	}

	public void setisVisibilidadFK_IdAsientoContable(Boolean isVisibilidadFK_IdAsientoContable) {
		this.isVisibilidadFK_IdAsientoContable=isVisibilidadFK_IdAsientoContable;
	}

	public Boolean getisVisibilidadFK_IdCaja() {
		return this.isVisibilidadFK_IdCaja;
	}

	public void setisVisibilidadFK_IdCaja(Boolean isVisibilidadFK_IdCaja) {
		this.isVisibilidadFK_IdCaja=isVisibilidadFK_IdCaja;
	}

	public Boolean getisVisibilidadFK_IdCliente() {
		return this.isVisibilidadFK_IdCliente;
	}

	public void setisVisibilidadFK_IdCliente(Boolean isVisibilidadFK_IdCliente) {
		this.isVisibilidadFK_IdCliente=isVisibilidadFK_IdCliente;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoFacturaPuntoVenta() {
		return this.isVisibilidadFK_IdEstadoFacturaPuntoVenta;
	}

	public void setisVisibilidadFK_IdEstadoFacturaPuntoVenta(Boolean isVisibilidadFK_IdEstadoFacturaPuntoVenta) {
		this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isVisibilidadFK_IdEstadoFacturaPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdFormato() {
		return this.isVisibilidadFK_IdFormato;
	}

	public void setisVisibilidadFK_IdFormato(Boolean isVisibilidadFK_IdFormato) {
		this.isVisibilidadFK_IdFormato=isVisibilidadFK_IdFormato;
	}

	public Boolean getisVisibilidadFK_IdMesa() {
		return this.isVisibilidadFK_IdMesa;
	}

	public void setisVisibilidadFK_IdMesa(Boolean isVisibilidadFK_IdMesa) {
		this.isVisibilidadFK_IdMesa=isVisibilidadFK_IdMesa;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdTipoFacturaPuntoVenta() {
		return this.isVisibilidadFK_IdTipoFacturaPuntoVenta;
	}

	public void setisVisibilidadFK_IdTipoFacturaPuntoVenta(Boolean isVisibilidadFK_IdTipoFacturaPuntoVenta) {
		this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isVisibilidadFK_IdTipoFacturaPuntoVenta;
	}

	public Boolean getisVisibilidadFK_IdTipoPrecio() {
		return this.isVisibilidadFK_IdTipoPrecio;
	}

	public void setisVisibilidadFK_IdTipoPrecio(Boolean isVisibilidadFK_IdTipoPrecio) {
		this.isVisibilidadFK_IdTipoPrecio=isVisibilidadFK_IdTipoPrecio;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	public Boolean getisVisibilidadFK_IdVendedor() {
		return this.isVisibilidadFK_IdVendedor;
	}

	public void setisVisibilidadFK_IdVendedor(Boolean isVisibilidadFK_IdVendedor) {
		this.isVisibilidadFK_IdVendedor=isVisibilidadFK_IdVendedor;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarSucursalForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarUsuarioForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarVendedorForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarClienteForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarCajaForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarTipoPrecioForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarMesaForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarFormatoForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarTipoFacturaPuntoVentaForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarEstadoFacturaPuntoVentaForeignKey(facturapuntoventa,null);
				this.setActualParaGuardarAsientoContableForeignKey(facturapuntoventa,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(FacturaPuntoVenta facturapuntoventa,FacturaPuntoVenta facturapuntoventaAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalFacturaPuntoVenta(facturapuntoventa);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		facturapuntoventaAux.setId(facturapuntoventa.getId());
		facturapuntoventaAux.setVersionRow(facturapuntoventa.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessFacturaPuntoVenta();
		
			int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = facturapuntoventaValidator.getInvalidValues(this.facturapuntoventa);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			facturapuntoventaLogic.setDatosCliente(datosCliente);
			facturapuntoventaLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				facturapuntoventaAux=new  FacturaPuntoVenta();
				
				facturapuntoventaAux.setIsNew(true);
				facturapuntoventaAux.setIsChanged(true);
				
				facturapuntoventaAux.setFacturaPuntoVentaOriginal(this.facturapuntoventa);
				
				facturapuntoventaAux.setId(this.facturapuntoventa.getId());	
				facturapuntoventaAux.setVersionRow(this.facturapuntoventa.getVersionRow());	
				facturapuntoventaAux.setid_empresa(this.facturapuntoventa.getid_empresa());	
				facturapuntoventaAux.setid_sucursal(this.facturapuntoventa.getid_sucursal());	
				facturapuntoventaAux.setid_usuario(this.facturapuntoventa.getid_usuario());	
				facturapuntoventaAux.setid_vendedor(this.facturapuntoventa.getid_vendedor());	
				facturapuntoventaAux.setid_cliente(this.facturapuntoventa.getid_cliente());	
				facturapuntoventaAux.setid_caja(this.facturapuntoventa.getid_caja());	
				facturapuntoventaAux.setid_tipo_precio(this.facturapuntoventa.getid_tipo_precio());	
				facturapuntoventaAux.setid_mesa(this.facturapuntoventa.getid_mesa());	
				facturapuntoventaAux.setid_formato(this.facturapuntoventa.getid_formato());	
				facturapuntoventaAux.setid_tipo_factura_punto_venta(this.facturapuntoventa.getid_tipo_factura_punto_venta());	
				facturapuntoventaAux.setid_estado_factura_punto_venta(this.facturapuntoventa.getid_estado_factura_punto_venta());	
				facturapuntoventaAux.setid_asiento_contable(this.facturapuntoventa.getid_asiento_contable());	
				facturapuntoventaAux.setnumero_secuencial(this.facturapuntoventa.getnumero_secuencial());	
				facturapuntoventaAux.setcodigo_cliente(this.facturapuntoventa.getcodigo_cliente());	
				facturapuntoventaAux.setnombre_cliente(this.facturapuntoventa.getnombre_cliente());	
				facturapuntoventaAux.settarjeta_cliente(this.facturapuntoventa.gettarjeta_cliente());	
				facturapuntoventaAux.setdireccion_cliente(this.facturapuntoventa.getdireccion_cliente());	
				facturapuntoventaAux.settelefono_cliente(this.facturapuntoventa.gettelefono_cliente());	
				facturapuntoventaAux.setfecha(this.facturapuntoventa.getfecha());	
				facturapuntoventaAux.sethora(this.facturapuntoventa.gethora());	
				facturapuntoventaAux.settotal_iva(this.facturapuntoventa.gettotal_iva());	
				facturapuntoventaAux.settotal_sin_iva(this.facturapuntoventa.gettotal_sin_iva());	
				facturapuntoventaAux.setiva(this.facturapuntoventa.getiva());	
				facturapuntoventaAux.setdescuento(this.facturapuntoventa.getdescuento());	
				facturapuntoventaAux.setfinanciamiento(this.facturapuntoventa.getfinanciamiento());	
				facturapuntoventaAux.setflete(this.facturapuntoventa.getflete());	
				facturapuntoventaAux.setice(this.facturapuntoventa.getice());	
				facturapuntoventaAux.setotros(this.facturapuntoventa.getotros());	
				facturapuntoventaAux.setsub_total(this.facturapuntoventa.getsub_total());	
				facturapuntoventaAux.settotal(this.facturapuntoventa.gettotal());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturapuntoventaAux,facturapuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.saveFacturaPuntoVentas();//WithConnection
						//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesFacturaPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						}
						//ARCHITECTURE	
						
						if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturapuntoventaLogic.saveFacturaPuntoVentaRelaciones(facturapuntoventaAux,this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas(),this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());//WithConnection
								//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.setDetalleFacturaPuntoVentas(new ArrayList<DetalleFacturaPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas= new ArrayList<DetalleFacturaPuntoVenta>();
							}
							//ARCHITECTURE	
						} else {
							
							

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturapuntoventaAux,facturapuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				facturapuntoventaAux=new  FacturaPuntoVenta();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado() 
					|| (this.facturapuntoventaSessionBean.getEsGuardarRelacionado() && this.facturapuntoventa.getId()>=0)) {
						
					facturapuntoventaAux.setIsNew(false);
				}
				
				facturapuntoventaAux.setIsDeleted(false);
			
				facturapuntoventaAux.setId(this.facturapuntoventa.getId());	
				facturapuntoventaAux.setVersionRow(this.facturapuntoventa.getVersionRow());	
				facturapuntoventaAux.setid_empresa(this.facturapuntoventa.getid_empresa());	
				facturapuntoventaAux.setid_sucursal(this.facturapuntoventa.getid_sucursal());	
				facturapuntoventaAux.setid_usuario(this.facturapuntoventa.getid_usuario());	
				facturapuntoventaAux.setid_vendedor(this.facturapuntoventa.getid_vendedor());	
				facturapuntoventaAux.setid_cliente(this.facturapuntoventa.getid_cliente());	
				facturapuntoventaAux.setid_caja(this.facturapuntoventa.getid_caja());	
				facturapuntoventaAux.setid_tipo_precio(this.facturapuntoventa.getid_tipo_precio());	
				facturapuntoventaAux.setid_mesa(this.facturapuntoventa.getid_mesa());	
				facturapuntoventaAux.setid_formato(this.facturapuntoventa.getid_formato());	
				facturapuntoventaAux.setid_tipo_factura_punto_venta(this.facturapuntoventa.getid_tipo_factura_punto_venta());	
				facturapuntoventaAux.setid_estado_factura_punto_venta(this.facturapuntoventa.getid_estado_factura_punto_venta());	
				facturapuntoventaAux.setid_asiento_contable(this.facturapuntoventa.getid_asiento_contable());	
				facturapuntoventaAux.setnumero_secuencial(this.facturapuntoventa.getnumero_secuencial());	
				facturapuntoventaAux.setcodigo_cliente(this.facturapuntoventa.getcodigo_cliente());	
				facturapuntoventaAux.setnombre_cliente(this.facturapuntoventa.getnombre_cliente());	
				facturapuntoventaAux.settarjeta_cliente(this.facturapuntoventa.gettarjeta_cliente());	
				facturapuntoventaAux.setdireccion_cliente(this.facturapuntoventa.getdireccion_cliente());	
				facturapuntoventaAux.settelefono_cliente(this.facturapuntoventa.gettelefono_cliente());	
				facturapuntoventaAux.setfecha(this.facturapuntoventa.getfecha());	
				facturapuntoventaAux.sethora(this.facturapuntoventa.gethora());	
				facturapuntoventaAux.settotal_iva(this.facturapuntoventa.gettotal_iva());	
				facturapuntoventaAux.settotal_sin_iva(this.facturapuntoventa.gettotal_sin_iva());	
				facturapuntoventaAux.setiva(this.facturapuntoventa.getiva());	
				facturapuntoventaAux.setdescuento(this.facturapuntoventa.getdescuento());	
				facturapuntoventaAux.setfinanciamiento(this.facturapuntoventa.getfinanciamiento());	
				facturapuntoventaAux.setflete(this.facturapuntoventa.getflete());	
				facturapuntoventaAux.setice(this.facturapuntoventa.getice());	
				facturapuntoventaAux.setotros(this.facturapuntoventa.getotros());	
				facturapuntoventaAux.setsub_total(this.facturapuntoventa.getsub_total());	
				facturapuntoventaAux.settotal(this.facturapuntoventa.gettotal());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturapuntoventaAux,facturapuntoventas);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.saveFacturaPuntoVentas();//WithConnection
						//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);
					
					this.refrescarForeignKeysDescripcionesFacturaPuntoVenta();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						}
						//ARCHITECTURE
						
						if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturapuntoventaLogic.saveFacturaPuntoVentaRelaciones(facturapuntoventaAux,this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas(),this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());//WithConnection
								//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.setDetalleFacturaPuntoVentas(new ArrayList<DetalleFacturaPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas= new ArrayList<DetalleFacturaPuntoVenta>();
							}
							//ARCHITECTURE
						} else {
							
							

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
									|| this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(facturapuntoventaAux,facturapuntoventas);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.facturapuntoventa,facturapuntoventaAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				facturapuntoventaAux=new  FacturaPuntoVenta();
				
				facturapuntoventaAux.setIsNew(false);
				facturapuntoventaAux.setIsChanged(false);
				
				facturapuntoventaAux.setIsDeleted(true);
				
				facturapuntoventaAux.setId(this.facturapuntoventa.getId());	
				facturapuntoventaAux.setVersionRow(this.facturapuntoventa.getVersionRow());	
				facturapuntoventaAux.setid_empresa(this.facturapuntoventa.getid_empresa());	
				facturapuntoventaAux.setid_sucursal(this.facturapuntoventa.getid_sucursal());	
				facturapuntoventaAux.setid_usuario(this.facturapuntoventa.getid_usuario());	
				facturapuntoventaAux.setid_vendedor(this.facturapuntoventa.getid_vendedor());	
				facturapuntoventaAux.setid_cliente(this.facturapuntoventa.getid_cliente());	
				facturapuntoventaAux.setid_caja(this.facturapuntoventa.getid_caja());	
				facturapuntoventaAux.setid_tipo_precio(this.facturapuntoventa.getid_tipo_precio());	
				facturapuntoventaAux.setid_mesa(this.facturapuntoventa.getid_mesa());	
				facturapuntoventaAux.setid_formato(this.facturapuntoventa.getid_formato());	
				facturapuntoventaAux.setid_tipo_factura_punto_venta(this.facturapuntoventa.getid_tipo_factura_punto_venta());	
				facturapuntoventaAux.setid_estado_factura_punto_venta(this.facturapuntoventa.getid_estado_factura_punto_venta());	
				facturapuntoventaAux.setid_asiento_contable(this.facturapuntoventa.getid_asiento_contable());	
				facturapuntoventaAux.setnumero_secuencial(this.facturapuntoventa.getnumero_secuencial());	
				facturapuntoventaAux.setcodigo_cliente(this.facturapuntoventa.getcodigo_cliente());	
				facturapuntoventaAux.setnombre_cliente(this.facturapuntoventa.getnombre_cliente());	
				facturapuntoventaAux.settarjeta_cliente(this.facturapuntoventa.gettarjeta_cliente());	
				facturapuntoventaAux.setdireccion_cliente(this.facturapuntoventa.getdireccion_cliente());	
				facturapuntoventaAux.settelefono_cliente(this.facturapuntoventa.gettelefono_cliente());	
				facturapuntoventaAux.setfecha(this.facturapuntoventa.getfecha());	
				facturapuntoventaAux.sethora(this.facturapuntoventa.gethora());	
				facturapuntoventaAux.settotal_iva(this.facturapuntoventa.gettotal_iva());	
				facturapuntoventaAux.settotal_sin_iva(this.facturapuntoventa.gettotal_sin_iva());	
				facturapuntoventaAux.setiva(this.facturapuntoventa.getiva());	
				facturapuntoventaAux.setdescuento(this.facturapuntoventa.getdescuento());	
				facturapuntoventaAux.setfinanciamiento(this.facturapuntoventa.getfinanciamiento());	
				facturapuntoventaAux.setflete(this.facturapuntoventa.getflete());	
				facturapuntoventaAux.setice(this.facturapuntoventa.getice());	
				facturapuntoventaAux.setotros(this.facturapuntoventa.getotros());	
				facturapuntoventaAux.setsub_total(this.facturapuntoventa.getsub_total());	
				facturapuntoventaAux.settotal(this.facturapuntoventa.gettotal());	
				
				if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.facturapuntoventaAux.getId()>=0) {	
						this.facturapuntoventasEliminados.add(facturapuntoventaAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturapuntoventaAux,facturapuntoventas);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.saveFacturaPuntoVentas();//WithConnection
						//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas().addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventasEliminados);
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas.addAll(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventasEliminados);
						}
						//ARCHITECTURE
						
						
						if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}
								if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {/*this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();*/}	
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								facturapuntoventaLogic.saveFacturaPuntoVentaRelaciones(facturapuntoventaAux,this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas(),this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());//WithConnection
								//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(new ArrayList<FormaPagoPuntoVenta>());
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.setDetalleFacturaPuntoVentas(new ArrayList<DetalleFacturaPuntoVenta>());
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas= new ArrayList<FormaPagoPuntoVenta>();
							this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas= new ArrayList<DetalleFacturaPuntoVenta>();
							}
							//ARCHITECTURE
						}
					}  else {
							
						

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());

							if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.conTotales) {this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.quitarFilaTotales();}
							facturapuntoventaAux.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
								|| this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(facturapuntoventaAux,facturapuntoventaLogic.getFacturaPuntoVentas());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(facturapuntoventaAux,facturapuntoventas);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getFacturaPuntoVentas().addAll(this.facturapuntoventasEliminados);
					
					facturapuntoventaLogic.saveFacturaPuntoVentas();//WithConnection
					//facturapuntoventaLogic.getSetVersionRowFacturaPuntoVentas();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesFacturaPuntoVenta();
				
				this.facturapuntoventasEliminados= new ArrayList<FacturaPuntoVenta>();		
			}
			
			if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Factura Punto Venta GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.facturapuntoventa=facturapuntoventaAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessFacturaPuntoVenta();
      	}
		
	}	
	
	public void actualizarRelaciones(FacturaPuntoVenta facturapuntoventaLocal) throws Exception {
		
		if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
				facturapuntoventaLocal.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
				facturapuntoventaLocal.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());
			
			} else {
			
				facturapuntoventaLocal.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventas);
				facturapuntoventaLocal.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventas);	
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(FacturaPuntoVenta facturapuntoventaLocal) throws Exception {	
		if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				facturapuntoventaLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				facturapuntoventaLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				facturapuntoventaLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(VendedorDetalleFormJInternalFrame.class)) {
				VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrameLocal=(VendedorBeanSwingJInternalFrame) ((VendedorDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				vendedorBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoVendedor(vendedorBeanSwingJInternalFrameLocal.getvendedor(),true);
				vendedorBeanSwingJInternalFrameLocal.actualizarLista(vendedorBeanSwingJInternalFrameLocal.vendedor,this.vendedorsForeignKey);

				vendedorBeanSwingJInternalFrameLocal.actualizarRelaciones(vendedorBeanSwingJInternalFrameLocal.vendedor);

				facturapuntoventaLocal.setVendedor(vendedorBeanSwingJInternalFrameLocal.vendedor);

				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey("Formulario");
				this.setActualVendedorForeignKey(vendedorBeanSwingJInternalFrameLocal.vendedor.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(ClienteDetalleFormJInternalFrame.class)) {
				ClienteBeanSwingJInternalFrame clienteBeanSwingJInternalFrameLocal=(ClienteBeanSwingJInternalFrame) ((ClienteDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				clienteBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCliente(clienteBeanSwingJInternalFrameLocal.getcliente(),true);
				clienteBeanSwingJInternalFrameLocal.actualizarLista(clienteBeanSwingJInternalFrameLocal.cliente,this.clientesForeignKey);

				clienteBeanSwingJInternalFrameLocal.actualizarRelaciones(clienteBeanSwingJInternalFrameLocal.cliente);

				facturapuntoventaLocal.setCliente(clienteBeanSwingJInternalFrameLocal.cliente);

				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey("Formulario");
				this.setActualClienteForeignKey(clienteBeanSwingJInternalFrameLocal.cliente.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CajaDetalleFormJInternalFrame.class)) {
				CajaBeanSwingJInternalFrame cajaBeanSwingJInternalFrameLocal=(CajaBeanSwingJInternalFrame) ((CajaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				cajaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCaja(cajaBeanSwingJInternalFrameLocal.getcaja(),true);
				cajaBeanSwingJInternalFrameLocal.actualizarLista(cajaBeanSwingJInternalFrameLocal.caja,this.cajasForeignKey);

				cajaBeanSwingJInternalFrameLocal.actualizarRelaciones(cajaBeanSwingJInternalFrameLocal.caja);

				facturapuntoventaLocal.setCaja(cajaBeanSwingJInternalFrameLocal.caja);

				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey("Formulario");
				this.setActualCajaForeignKey(cajaBeanSwingJInternalFrameLocal.caja.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoPrecioDetalleFormJInternalFrame.class)) {
				TipoPrecioBeanSwingJInternalFrame tipoprecioBeanSwingJInternalFrameLocal=(TipoPrecioBeanSwingJInternalFrame) ((TipoPrecioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipoprecioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.gettipoprecio(),true);
				tipoprecioBeanSwingJInternalFrameLocal.actualizarLista(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio,this.tipopreciosForeignKey);

				tipoprecioBeanSwingJInternalFrameLocal.actualizarRelaciones(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				facturapuntoventaLocal.setTipoPrecio(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio);

				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey("Formulario");
				this.setActualTipoPrecioForeignKey(tipoprecioBeanSwingJInternalFrameLocal.tipoprecio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesaDetalleFormJInternalFrame.class)) {
				MesaBeanSwingJInternalFrame mesaBeanSwingJInternalFrameLocal=(MesaBeanSwingJInternalFrame) ((MesaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMesa(mesaBeanSwingJInternalFrameLocal.getmesa(),true);
				mesaBeanSwingJInternalFrameLocal.actualizarLista(mesaBeanSwingJInternalFrameLocal.mesa,this.mesasForeignKey);

				mesaBeanSwingJInternalFrameLocal.actualizarRelaciones(mesaBeanSwingJInternalFrameLocal.mesa);

				facturapuntoventaLocal.setMesa(mesaBeanSwingJInternalFrameLocal.mesa);

				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey("Formulario");
				this.setActualMesaForeignKey(mesaBeanSwingJInternalFrameLocal.mesa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(FormatoDetalleFormJInternalFrame.class)) {
				FormatoBeanSwingJInternalFrame formatoBeanSwingJInternalFrameLocal=(FormatoBeanSwingJInternalFrame) ((FormatoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				formatoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoFormato(formatoBeanSwingJInternalFrameLocal.getformato(),true);
				formatoBeanSwingJInternalFrameLocal.actualizarLista(formatoBeanSwingJInternalFrameLocal.formato,this.formatosForeignKey);

				formatoBeanSwingJInternalFrameLocal.actualizarRelaciones(formatoBeanSwingJInternalFrameLocal.formato);

				facturapuntoventaLocal.setFormato(formatoBeanSwingJInternalFrameLocal.formato);

				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey("Formulario");
				this.setActualFormatoForeignKey(formatoBeanSwingJInternalFrameLocal.formato.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(TipoFacturaPuntoVentaDetalleFormJInternalFrame.class)) {
				TipoFacturaPuntoVentaBeanSwingJInternalFrame tipofacturapuntoventaBeanSwingJInternalFrameLocal=(TipoFacturaPuntoVentaBeanSwingJInternalFrame) ((TipoFacturaPuntoVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				tipofacturapuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoTipoFacturaPuntoVenta(tipofacturapuntoventaBeanSwingJInternalFrameLocal.gettipofacturapuntoventa(),true);
				tipofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarLista(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa,this.tipofacturapuntoventasForeignKey);

				tipofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa);

				facturapuntoventaLocal.setTipoFacturaPuntoVenta(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa);

				this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
				this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Formulario");
				this.setActualTipoFacturaPuntoVentaForeignKey(tipofacturapuntoventaBeanSwingJInternalFrameLocal.tipofacturapuntoventa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoFacturaPuntoVentaDetalleFormJInternalFrame.class)) {
				EstadoFacturaPuntoVentaBeanSwingJInternalFrame estadofacturapuntoventaBeanSwingJInternalFrameLocal=(EstadoFacturaPuntoVentaBeanSwingJInternalFrame) ((EstadoFacturaPuntoVentaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadofacturapuntoventaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoFacturaPuntoVenta(estadofacturapuntoventaBeanSwingJInternalFrameLocal.getestadofacturapuntoventa(),true);
				estadofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarLista(estadofacturapuntoventaBeanSwingJInternalFrameLocal.estadofacturapuntoventa,this.estadofacturapuntoventasForeignKey);

				estadofacturapuntoventaBeanSwingJInternalFrameLocal.actualizarRelaciones(estadofacturapuntoventaBeanSwingJInternalFrameLocal.estadofacturapuntoventa);

				facturapuntoventaLocal.setEstadoFacturaPuntoVenta(estadofacturapuntoventaBeanSwingJInternalFrameLocal.estadofacturapuntoventa);

				this.addItemDefectoCombosForeignKeyEstadoFacturaPuntoVenta();
				this.cargarCombosFrameEstadoFacturaPuntoVentasForeignKey("Formulario");
				this.setActualEstadoFacturaPuntoVentaForeignKey(estadofacturapuntoventaBeanSwingJInternalFrameLocal.estadofacturapuntoventa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AsientoContableDetalleFormJInternalFrame.class)) {
				AsientoContableBeanSwingJInternalFrame asientocontableBeanSwingJInternalFrameLocal=(AsientoContableBeanSwingJInternalFrame) ((AsientoContableDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				asientocontableBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAsientoContable(asientocontableBeanSwingJInternalFrameLocal.getasientocontable(),true);
				asientocontableBeanSwingJInternalFrameLocal.actualizarLista(asientocontableBeanSwingJInternalFrameLocal.asientocontable,this.asientocontablesForeignKey);

				asientocontableBeanSwingJInternalFrameLocal.actualizarRelaciones(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				facturapuntoventaLocal.setAsientoContable(asientocontableBeanSwingJInternalFrameLocal.asientocontable);

				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey("Formulario");
				this.setActualAsientoContableForeignKey(asientocontableBeanSwingJInternalFrameLocal.asientocontable.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarFacturaPuntoVentaActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = facturapuntoventaValidator.getInvalidValues(this.facturapuntoventa);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(FacturaPuntoVenta facturapuntoventa,List<FacturaPuntoVenta> facturapuntoventas) throws Exception {
		try	{		
			FacturaPuntoVentaConstantesFunciones.actualizarLista(facturapuntoventa,facturapuntoventas,this.facturapuntoventaSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(FacturaPuntoVenta facturapuntoventa,List<FacturaPuntoVenta> facturapuntoventas) throws Exception {
		try	{			
			FacturaPuntoVentaConstantesFunciones.actualizarSelectedLista(facturapuntoventa,facturapuntoventas);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<FacturaPuntoVenta> facturapuntoventasLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				facturapuntoventasLocal=this.facturapuntoventaLogic.getFacturaPuntoVentas();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				facturapuntoventasLocal=this.facturapuntoventas;
			}
			//ARCHITECTURE
		
			for(FacturaPuntoVenta facturapuntoventaLocal:facturapuntoventasLocal) {
				if(this.permiteMantenimiento(facturapuntoventaLocal) && facturapuntoventaLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+FacturaPuntoVentaConstantesFunciones.getFacturaPuntoVentaLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_empresaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_sucursalFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_usuarioFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDVENDEDOR)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_vendedorFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDCAJA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_cajaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDTIPOPRECIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_tipo_precioFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDMESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_mesaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDFORMATO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_formatoFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDTIPOFACTURAPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_tipo_factura_punto_ventaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDESTADOFACTURAPUNTOVENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_estado_factura_punto_ventaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IDASIENTOCONTABLE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_asiento_contableFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.NUMEROSECUENCIAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnumero_secuencialFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.CODIGOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelcodigo_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.NOMBRECLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnombre_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.TARJETACLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltarjeta_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.DIRECCIONCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldireccion_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.TELEFONOCLIENTE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltelefono_clienteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfechaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.HORA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelhoraFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.TOTALIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_ivaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.TOTALSINIVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_sin_ivaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.IVA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelivaFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.DESCUENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldescuentoFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.FINANCIAMIENTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfinanciamientoFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.FLETE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfleteFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.ICE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeliceFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.OTROS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelotrosFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.SUBTOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelsub_totalFacturaPuntoVenta,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(FacturaPuntoVentaConstantesFunciones.TOTAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotalFacturaPuntoVenta,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_empresaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_sucursalFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_usuarioFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_vendedorFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_cajaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_tipo_precioFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_mesaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_formatoFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_tipo_factura_punto_ventaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_estado_factura_punto_ventaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelid_asiento_contableFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnumero_secuencialFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelcodigo_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnombre_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltarjeta_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldireccion_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltelefono_clienteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfechaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelhoraFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_ivaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_sin_ivaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelivaFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldescuentoFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfinanciamientoFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfleteFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeliceFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelotrosFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelsub_totalFacturaPuntoVenta,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotalFacturaPuntoVenta,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
		 else  if(sTipo.equals("FormaPagoPuntoVenta")) {
			if(this.facturapuntoventa==null) {
				this.facturapuntoventa= new FacturaPuntoVenta();
			}

			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoFacturaPuntoVenta
				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.getformapagopuntoventa().setFacturaPuntoVenta(this.facturapuntoventa);
			}

			return;
		}
		 else  if(sTipo.equals("DetalleFacturaPuntoVenta")) {
			if(this.facturapuntoventa==null) {
				this.facturapuntoventa= new FacturaPuntoVenta();
			}

			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) { //&& this.isEsNuevoFacturaPuntoVenta
				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);//false
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.getdetallefacturapuntoventa().setFacturaPuntoVenta(this.facturapuntoventa);
			}

			return;
		}
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoFacturaPuntoVenta--;	
		
		
		this.facturapuntoventaAux=new FacturaPuntoVenta();
		
		this.facturapuntoventaAux.setId(this.iIdNuevoFacturaPuntoVenta);
		this.facturapuntoventaAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.facturapuntoventaLogic.getFacturaPuntoVentas().add(this.facturapuntoventaAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.facturapuntoventas.add(this.facturapuntoventaAux);
		}
		//ARCHITECTURE
		
		this.facturapuntoventa=this.facturapuntoventaAux;
		
		if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventa);
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaPuntoVenta(this.facturapuntoventa);
		}
				
		//this.setDefaultControlesFacturaPuntoVenta();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyFacturaPuntoVenta();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyFacturaPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaPuntoVenta();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaPuntoVenta(this.facturapuntoventaBean,this.facturapuntoventa,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
			classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.facturapuntoventaReturnGeneral=facturapuntoventaLogic.procesarEventosFacturaPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturapuntoventaLogic.getFacturaPuntoVentas(),this.facturapuntoventa,this.facturapuntoventaParameterGeneral,this.isEsNuevoFacturaPuntoVenta,classes);//this.facturapuntoventaLogic.getFacturaPuntoVenta()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanFacturaPuntoVenta(this.facturapuntoventaReturnGeneral,this.facturapuntoventaBean,false);
		
		if(this.facturapuntoventaReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta());
		}
		
		if(this.facturapuntoventaReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta(),classes);//this.facturapuntoventaBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyFacturaPuntoVenta();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyFacturaPuntoVenta();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.RecargarFormFacturaPuntoVenta(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
						
			if(facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
				

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado() && FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFormaPagoPuntoVentaActionPerformed(null,-1,false,true,null);
				}

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.getEsGuardarRelacionado() && DetalleFacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaPuntoVentaActionPerformed(null,-1,false,true,null);
				}				
			}
				
			//SI ES MANUAL
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaPuntoVenta();
			}
			
			this.actualizarVisualTableDatosFacturaPuntoVenta();
			
			this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoFacturaPuntoVenta(), this.getIndiceNuevoFacturaPuntoVenta());
			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
						
			this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesFacturaPuntoVenta(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarnumero_secuencialFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarcodigo_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarnombre_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activartarjeta_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activardireccion_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activartelefono_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarfechaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarhoraFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activartotal_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activartotal_sin_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activardescuentoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarfinanciamientoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarfleteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activariceFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarotrosFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarsub_totalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activartotalFacturaPuntoVenta);	
		//
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_empresaFacturaPuntoVenta);//
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_sucursalFacturaPuntoVenta);//
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_usuarioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_vendedorFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_cajaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_tipo_precioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_mesaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_formatoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_estado_factura_punto_ventaFacturaPuntoVenta);//
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setEnabled(isHabilitar && this.facturapuntoventaConstantesFunciones.activarid_asiento_contableFacturaPuntoVenta);
	};
	
	public void setDefaultControlesFacturaPuntoVenta() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoFacturaPuntoVenta(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.facturapuntoventaSessionBean.setConGuardarRelaciones(true);			
			this.facturapuntoventaSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.setVisible(true);
			
			

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.setEsGuardarRelacionado(true);
				//this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(true);
			}		
		} else {
			//this.facturapuntoventaSessionBean.setConGuardarRelaciones(false);			
			this.facturapuntoventaSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.setVisible(false);
			
			

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.setEsGuardarRelacionado(false);
				//this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.getContentPane().setVisible(false);
			}
		}
	};
	
	public int getIndiceNuevoFacturaPuntoVenta() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
				if(facturapuntoventaAux.getId().equals(this.iIdNuevoFacturaPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventas) {
				if(facturapuntoventaAux.getId().equals(this.iIdNuevoFacturaPuntoVenta)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
				if(facturapuntoventaAux.getId().equals(facturapuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventas) {
				if(facturapuntoventaAux.getId().equals(facturapuntoventa.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventaOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
				if(facturapuntoventaAux.getFacturaPuntoVentaOriginal().getId().equals(facturapuntoventaOriginal.getId())) {
					existe=true;
					facturapuntoventaOriginal.setId(facturapuntoventaAux.getId());
					facturapuntoventaOriginal.setVersionRow(facturapuntoventaAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventas) {
				if(facturapuntoventaAux.getFacturaPuntoVentaOriginal().getId().equals(facturapuntoventaOriginal.getId())) {
					existe=true;
					facturapuntoventaOriginal.setId(facturapuntoventaAux.getId());
					facturapuntoventaOriginal.setVersionRow(facturapuntoventaAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosFacturaPuntoVenta(Boolean esParaCancelar) throws Exception {
		facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
		facturapuntoventaAux=new FacturaPuntoVenta();
		
		if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
					if(facturapuntoventaAux.getId()<0) {
						facturapuntoventasAux.add(facturapuntoventaAux);
					}		
				}
				this.iIdNuevoFacturaPuntoVenta=0L;
				this.facturapuntoventaLogic.getFacturaPuntoVentas().removeAll(facturapuntoventasAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventas) {
					if(facturapuntoventaAux.getId()<0) {
						facturapuntoventasAux.add(facturapuntoventaAux);
					}		
				}
				this.iIdNuevoFacturaPuntoVenta=0L;
				this.facturapuntoventas.removeAll(facturapuntoventasAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoFacturaPuntoVenta 
					&& this.facturapuntoventaLogic.getFacturaPuntoVentas().size()>0
					) {
					facturapuntoventaAux=this.facturapuntoventaLogic.getFacturaPuntoVentas().get(this.facturapuntoventaLogic.getFacturaPuntoVentas().size() - 1);
				
					if(facturapuntoventaAux.getId()<0) {
						this.facturapuntoventaLogic.getFacturaPuntoVentas().remove(facturapuntoventaAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoFacturaPuntoVenta && this.facturapuntoventas.size()>0) {
					facturapuntoventaAux=this.facturapuntoventas.get(this.facturapuntoventas.size() - 1);
				
					if(facturapuntoventaAux.getId()<0) {
						this.facturapuntoventas.remove(facturapuntoventaAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoFacturaPuntoVenta(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(facturapuntoventa.getId()<0) {
				this.facturapuntoventaLogic.getFacturaPuntoVentas().remove(this.facturapuntoventa);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(facturapuntoventa.getId()<0) {
				this.facturapuntoventas.remove(this.facturapuntoventa);
			}
		}			
	}
	
	public void setEstadosInicialesFacturaPuntoVenta(List<FacturaPuntoVenta> facturapuntoventasAux) throws Exception {
		FacturaPuntoVentaConstantesFunciones.setEstadosInicialesFacturaPuntoVenta(facturapuntoventasAux);
	}
	
	public void setEstadosInicialesFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventaAux) throws Exception {
		FacturaPuntoVentaConstantesFunciones.setEstadosInicialesFacturaPuntoVenta(facturapuntoventaAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarFacturaPuntoVentaActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarFacturaPuntoVentaActual()) {
				if(!this.isEsNuevoFacturaPuntoVenta) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoFacturaPuntoVenta=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarFacturaPuntoVentaActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Factura Punto Venta ?", "MANTENIMIENTO DE Factura Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(FacturaPuntoVenta facturapuntoventa) throws Exception {
		FacturaPuntoVentaConstantesFunciones.seleccionarAsignar(this.facturapuntoventa,facturapuntoventa);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarFacturaPuntoVenta=this.isPermisoActualizarOriginalFacturaPuntoVenta;
			
			
			this.seleccionarAsignar(facturapuntoventa);
			
			

			idVendedorActual=facturapuntoventa.getid_vendedor();
			this.seleccionarVendedorActual();

			idClienteActual=facturapuntoventa.getid_cliente();
			this.seleccionarClienteActual();

			idAsientoContableActual=facturapuntoventa.getid_asiento_contable();
			this.seleccionarAsientoContableActual();
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			FacturaPuntoVentaConstantesFunciones.quitarEspaciosFacturaPuntoVenta(this.facturapuntoventa,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.facturapuntoventaSessionBean.setsFuncionBusquedaRapida(this.facturapuntoventaSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	//BUSQUEDA INTERNA FK
	public void seleccionarVendedorActual() throws Exception {
		try	{
			Vendedor vendedorAux=new Vendedor();

			if(this.idVendedorActual != null && this.idVendedorActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					vendedorLogic.getEntityWithConnection(this.idVendedorActual);
					vendedorAux= vendedorLogic.getVendedor();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				vendedorsForeignKey=new ArrayList<Vendedor>();
				vendedorsForeignKey.add(vendedorAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarClienteActual() throws Exception {
		try	{
			Cliente clienteAux=new Cliente();

			if(this.idClienteActual != null && this.idClienteActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					clienteLogic.getEntityWithConnection(this.idClienteActual);
					clienteAux= clienteLogic.getCliente();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				clientesForeignKey=new ArrayList<Cliente>();
				clientesForeignKey.add(clienteAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	public void seleccionarAsientoContableActual() throws Exception {
		try	{
			AsientoContable asientocontableAux=new AsientoContable();

			if(this.idAsientoContableActual != null && this.idAsientoContableActual>0) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					asientocontableLogic.getEntityWithConnection(this.idAsientoContableActual);
					asientocontableAux= asientocontableLogic.getAsientoContable();
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE

				asientocontablesForeignKey=new ArrayList<AsientoContable>();
				asientocontablesForeignKey.add(asientocontableAux);
			}

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoFacturaPuntoVenta) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosFacturaPuntoVenta(esParaCancelar);				
				this.cancelarNuevoFacturaPuntoVenta(esParaCancelar);								
			}
			
			this.facturapuntoventa=new FacturaPuntoVenta();
			
			this.inicializarFacturaPuntoVenta();
			
			this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarFacturaPuntoVenta() throws Exception {
		try {
			FacturaPuntoVentaConstantesFunciones.inicializarFacturaPuntoVenta(this.facturapuntoventa);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.facturapuntoventaLogic.getFacturaPuntoVentas().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteFacturaPuntoVentas(String sAccionBusqueda,List<FacturaPuntoVenta> facturapuntoventasParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="FacturaPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="FacturaPuntoVentaMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("FacturaPuntoVentaMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="FacturaPuntoVenta"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Factura Punto Ventas");		
		parameters.put("busquedapor", FacturaPuntoVentaConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			classes.add(new Classe(FormaPagoPuntoVenta.class));
			classes.add(new Classe(DetalleFacturaPuntoVenta.class));
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {		
				try	{
					
					FacturaPuntoVentaLogic facturapuntoventaLogicAuxiliar=new FacturaPuntoVentaLogic();
					facturapuntoventaLogicAuxiliar.setDatosCliente(facturapuntoventaLogic.getDatosCliente());				
					facturapuntoventaLogicAuxiliar.setFacturaPuntoVentas(facturapuntoventasParaReportes);
					
					facturapuntoventaLogicAuxiliar.cargarRelacionesLoteForeignKeyFacturaPuntoVentaWithConnection(); //deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes, "");
					
					facturapuntoventasParaReportes=facturapuntoventaLogicAuxiliar.getFacturaPuntoVentas();
					
					//facturapuntoventaLogic.getNewConnexionToDeep();
					
					//for (FacturaPuntoVenta facturapuntoventa:facturapuntoventasParaReportes) {
					//	facturapuntoventaLogic.deepLoad(facturapuntoventa, false, DeepLoadType.INCLUDE, classes);
					//}						
					//facturapuntoventaLogic.commitNewConnexionToDeep();
					
						
				} catch(Exception e) {
					throw e;
					
				} finally {
					//facturapuntoventaLogic.closeNewConnexionToDeep();
				}
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			//ARCHITECTURE		
			
		
			
			

			InputStream reportFileFormaPagoPuntoVenta = AuxiliarReportes.class.getResourceAsStream("FormaPagoPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_formapagopuntoventa", reportFileFormaPagoPuntoVenta);

			InputStream reportFileDetalleFacturaPuntoVenta = AuxiliarReportes.class.getResourceAsStream("DetalleFacturaPuntoVentaDetalleRelacionesDesign.jasper");
			parameters.put("subreport_detallefacturapuntoventa", reportFileDetalleFacturaPuntoVenta);
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceFacturaPuntoVenta=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			FacturaPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			FacturaPuntoVentaConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceFacturaPuntoVenta=new JRBeanArrayDataSource(FacturaPuntoVentaJInternalFrame.TraerFacturaPuntoVentaBeans(facturapuntoventasParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceFacturaPuntoVenta);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+FacturaPuntoVentaConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+FacturaPuntoVentaConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(FacturaPuntoVentaBean.TraerFacturaPuntoVentaBeans(facturapuntoventasParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoFacturaPuntoVentaActionPerformed(null);
					//this.generarExcelReporteFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesFacturaPuntoVentas(sAccionBusqueda,sTipoArchivoReporte,facturapuntoventasParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteFacturaPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaPuntoVenta> facturapuntoventasParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaPuntoVentas");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaPuntoVenta("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(FacturaPuntoVenta facturapuntoventa : facturapuntoventasParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			FacturaPuntoVentaConstantesFunciones.generarExcelReporteDataFacturaPuntoVenta("NORMAL",row,workbook,facturapuntoventa,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderFacturaPuntoVenta(String sTipo,Row row,Workbook workbook) {
		
		FacturaPuntoVentaConstantesFunciones.generarExcelReporteHeaderFacturaPuntoVenta(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalFacturaPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaPuntoVenta> facturapuntoventasParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(FacturaPuntoVenta facturapuntoventa : facturapuntoventasParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(FacturaPuntoVentaConstantesFunciones.getFacturaPuntoVentaDescripcion(facturapuntoventa));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getvendedor_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getcliente_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getcaja_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettipoprecio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getmesa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getformato_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettipofacturapuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getestadofacturapuntoventa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getasientocontable_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getnumero_secuencial());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getcodigo_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getnombre_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettarjeta_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getdireccion_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettelefono_cliente());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_HORA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_HORA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gethora());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettotal_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettotal_sin_iva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_IVA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IVA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getiva());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getdescuento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getfinanciamiento());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getflete());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_ICE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_ICE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getice());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getotros());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.getsub_total());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(facturapuntoventa.gettotal());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesFacturaPuntoVentas(String sAccionBusqueda,String sTipoArchivoReporte,List<FacturaPuntoVenta> facturapuntoventasParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<FacturaPuntoVenta> facturapuntoventasRespaldo=null;
		
		classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.facturapuntoventaLogic.setDatosCliente(this.datosCliente);
		this.facturapuntoventaLogic.setDatosDeep(this.datosDeep);
		this.facturapuntoventaLogic.setIsConDeep(true);
		
		facturapuntoventasRespaldo=this.facturapuntoventaLogic.getFacturaPuntoVentas();
		
		this.facturapuntoventaLogic.setFacturaPuntoVentas(facturapuntoventasParaReportes);	
		this.facturapuntoventaLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		facturapuntoventasParaReportes=this.facturapuntoventaLogic.getFacturaPuntoVentas();
		this.facturapuntoventaLogic.setFacturaPuntoVentas(facturapuntoventasRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("FacturaPuntoVentas");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderFacturaPuntoVenta("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(FacturaPuntoVenta facturapuntoventa : facturapuntoventasParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderFacturaPuntoVenta("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			FacturaPuntoVentaConstantesFunciones.generarExcelReporteDataFacturaPuntoVenta("NORMAL",row,workbook,facturapuntoventa,cellStyleDataAux);
		
			
			


				//FormaPagoPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(facturapuntoventa.getFormaPagoPuntoVentas()!=null && facturapuntoventa.getFormaPagoPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					FormaPagoPuntoVentaConstantesFunciones.generarExcelReporteHeaderFormaPagoPuntoVenta("RELACIONADO",row,workbook);
				}

				if(facturapuntoventa.getFormaPagoPuntoVentas()!=null) {
					i2=0;
					for(FormaPagoPuntoVenta formapagopuntoventa : facturapuntoventa.getFormaPagoPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						FormaPagoPuntoVentaConstantesFunciones.generarExcelReporteDataFormaPagoPuntoVenta("RELACIONADO",row,workbook,formapagopuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}


				//DetalleFacturaPuntoVenta
			if(!paraDinamico || (paraDinamico && this.existeRelacionReporteDinamico(DetalleFacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO))) {

				if(facturapuntoventa.getDetalleFacturaPuntoVentas()!=null && facturapuntoventa.getDetalleFacturaPuntoVentas().size()>0) {
					row = sheet.createRow(iRow++);

					iCell=1;iRowLast=iRow-1; cell = row.createCell(iCell++);cell.setCellStyle(cellStyleDataTitulo);sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,1,5));
					cell.setCellValue(DetalleFacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);

					row = sheet.createRow(iRow++);
					DetalleFacturaPuntoVentaConstantesFunciones.generarExcelReporteHeaderDetalleFacturaPuntoVenta("RELACIONADO",row,workbook);
				}

				if(facturapuntoventa.getDetalleFacturaPuntoVentas()!=null) {
					i2=0;
					for(DetalleFacturaPuntoVenta detallefacturapuntoventa : facturapuntoventa.getDetalleFacturaPuntoVentas()) {
						row = sheet.createRow(iRow++);

						cellStyleDataAuxHijo=null;
						if(i2%2==0) {
							cellStyleDataAuxHijo=cellStyleData;
						}

						DetalleFacturaPuntoVentaConstantesFunciones.generarExcelReporteDataDetalleFacturaPuntoVenta("RELACIONADO",row,workbook,detallefacturapuntoventa,cellStyleDataAuxHijo);
						i2++;
					}
				}
			}
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(FacturaPuntoVentaConstantesFunciones.getFacturaPuntoVentaDescripcion(facturapuntoventa));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessFacturaPuntoVenta() throws Exception {		
		this.startProcessFacturaPuntoVenta(true);
	}
	
	public void startProcessFacturaPuntoVenta(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasFacturaPuntoVenta ,this.jPanelParametrosReportesFacturaPuntoVenta, this.jScrollPanelDatosFacturaPuntoVenta,this.jPanelPaginacionFacturaPuntoVenta, this.jScrollPanelDatosEdicionFacturaPuntoVenta, this.jPanelAccionesFacturaPuntoVenta,this.jPanelAccionesFormularioFacturaPuntoVenta,this.jmenuBarFacturaPuntoVenta,this.jmenuBarDetalleFacturaPuntoVenta,this.jTtoolBarFacturaPuntoVenta,this.jTtoolBarDetalleFacturaPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaPuntoVenta=this.jTabbedPaneBusquedasFacturaPuntoVenta; 
		
		final JPanel jPanelParametrosReportesFacturaPuntoVenta=this.jPanelParametrosReportesFacturaPuntoVenta;
		//final JScrollPane jScrollPanelDatosFacturaPuntoVenta=this.jScrollPanelDatosFacturaPuntoVenta;
		final JTable jTableDatosFacturaPuntoVenta=this.jTableDatosFacturaPuntoVenta;		
		final JPanel jPanelPaginacionFacturaPuntoVenta=this.jPanelPaginacionFacturaPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionFacturaPuntoVenta=this.jScrollPanelDatosEdicionFacturaPuntoVenta;
		final JPanel jPanelAccionesFacturaPuntoVenta=this.jPanelAccionesFacturaPuntoVenta;
		
		JPanel jPanelCamposAuxiliarFacturaPuntoVenta=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarFacturaPuntoVenta=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			jPanelCamposAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelCamposFacturaPuntoVenta;
			jPanelAccionesFormularioAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelAccionesFormularioFacturaPuntoVenta;
		}
		
		final JPanel jPanelCamposFacturaPuntoVenta=jPanelCamposAuxiliarFacturaPuntoVenta;
		final JPanel jPanelAccionesFormularioFacturaPuntoVenta=jPanelAccionesFormularioAuxiliarFacturaPuntoVenta;
		
		
		final JMenuBar jmenuBarFacturaPuntoVenta=this.jmenuBarFacturaPuntoVenta;
		final JToolBar jTtoolBarFacturaPuntoVenta=this.jTtoolBarFacturaPuntoVenta;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarFacturaPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaPuntoVenta=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jmenuBarDetalleFacturaPuntoVenta;
			jTtoolBarDetalleAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jTtoolBarDetalleFacturaPuntoVenta;
		}
		
		final JMenuBar jmenuBarDetalleFacturaPuntoVenta=jmenuBarDetalleAuxiliarFacturaPuntoVenta;
		final JToolBar jTtoolBarDetalleFacturaPuntoVenta=jTtoolBarDetalleAuxiliarFacturaPuntoVenta;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaPuntoVenta;
			processRunnable.jTableDatos=jTableDatosFacturaPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposFacturaPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarFacturaPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaPuntoVenta ,jPanelParametrosReportesFacturaPuntoVenta,jTableDatosFacturaPuntoVenta, /*jScrollPanelDatosFacturaPuntoVenta,*/jPanelCamposFacturaPuntoVenta,jPanelPaginacionFacturaPuntoVenta, /*jScrollPanelDatosEdicionFacturaPuntoVenta,*/ jPanelAccionesFacturaPuntoVenta,jPanelAccionesFormularioFacturaPuntoVenta,jmenuBarFacturaPuntoVenta,jmenuBarDetalleFacturaPuntoVenta,jTtoolBarFacturaPuntoVenta,jTtoolBarDetalleFacturaPuntoVenta);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasFacturaPuntoVenta ,jPanelParametrosReportesFacturaPuntoVenta, jScrollPanelDatosFacturaPuntoVenta,jPanelPaginacionFacturaPuntoVenta, jScrollPanelDatosEdicionFacturaPuntoVenta, jPanelAccionesFacturaPuntoVenta,jPanelAccionesFormularioFacturaPuntoVenta,jmenuBarFacturaPuntoVenta,jmenuBarDetalleFacturaPuntoVenta,jTtoolBarFacturaPuntoVenta,jTtoolBarDetalleFacturaPuntoVenta);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessFacturaPuntoVenta() {// throws Exception 
		this.finishProcessFacturaPuntoVenta(true);
	}
	
	public void finishProcessFacturaPuntoVenta(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasFacturaPuntoVenta ,this.jPanelParametrosReportesFacturaPuntoVenta, this.jScrollPanelDatosFacturaPuntoVenta,this.jPanelPaginacionFacturaPuntoVenta, this.jScrollPanelDatosEdicionFacturaPuntoVenta, this.jPanelAccionesFacturaPuntoVenta,this.jPanelAccionesFormularioFacturaPuntoVenta,this.jmenuBarFacturaPuntoVenta,this.jmenuBarDetalleFacturaPuntoVenta,this.jTtoolBarFacturaPuntoVenta,this.jTtoolBarDetalleFacturaPuntoVenta);		
		
		final JTabbedPane jTabbedPaneBusquedasFacturaPuntoVenta=this.jTabbedPaneBusquedasFacturaPuntoVenta; 
		
		final JPanel jPanelParametrosReportesFacturaPuntoVenta=this.jPanelParametrosReportesFacturaPuntoVenta;
		//final JScrollPane jScrollPanelDatosFacturaPuntoVenta=this.jScrollPanelDatosFacturaPuntoVenta;
		final JTable jTableDatosFacturaPuntoVenta=this.jTableDatosFacturaPuntoVenta;		
		final JPanel jPanelPaginacionFacturaPuntoVenta=this.jPanelPaginacionFacturaPuntoVenta;
		//final JScrollPane jScrollPanelDatosEdicionFacturaPuntoVenta=this.jScrollPanelDatosEdicionFacturaPuntoVenta;
		final JPanel jPanelAccionesFacturaPuntoVenta=this.jPanelAccionesFacturaPuntoVenta;
		
		JPanel jPanelCamposAuxiliarFacturaPuntoVenta=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarFacturaPuntoVenta=new JPanel();
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			jPanelCamposAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelCamposFacturaPuntoVenta;
			jPanelAccionesFormularioAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelAccionesFormularioFacturaPuntoVenta;
		}
		
		final JPanel jPanelCamposFacturaPuntoVenta=jPanelCamposAuxiliarFacturaPuntoVenta;
		final JPanel jPanelAccionesFormularioFacturaPuntoVenta=jPanelAccionesFormularioAuxiliarFacturaPuntoVenta;
		
		
		final JMenuBar jmenuBarFacturaPuntoVenta=this.jmenuBarFacturaPuntoVenta;		
		final JToolBar jTtoolBarFacturaPuntoVenta=this.jTtoolBarFacturaPuntoVenta;
				
		JMenuBar jmenuBarDetalleAuxiliarFacturaPuntoVenta=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarFacturaPuntoVenta=new JToolBar();
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			jmenuBarDetalleAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jmenuBarDetalleFacturaPuntoVenta;
			jTtoolBarDetalleAuxiliarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jTtoolBarDetalleFacturaPuntoVenta;		
		}
		
		final JMenuBar jmenuBarDetalleFacturaPuntoVenta=jmenuBarDetalleAuxiliarFacturaPuntoVenta;
		final JToolBar jTtoolBarDetalleFacturaPuntoVenta=jTtoolBarDetalleAuxiliarFacturaPuntoVenta;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasFacturaPuntoVenta;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesFacturaPuntoVenta;
			processRunnable.jTableDatos=jTableDatosFacturaPuntoVenta;
			processRunnable.jPanelCampos=jPanelCamposFacturaPuntoVenta;
			processRunnable.jPanelPaginacion=jPanelPaginacionFacturaPuntoVenta;
			processRunnable.jPanelAcciones=jPanelAccionesFacturaPuntoVenta;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioFacturaPuntoVenta;
			
			
			processRunnable.jmenuBar=jmenuBarFacturaPuntoVenta;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleFacturaPuntoVenta;
			processRunnable.jTtoolBar=jTtoolBarFacturaPuntoVenta;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleFacturaPuntoVenta;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasFacturaPuntoVenta ,jPanelParametrosReportesFacturaPuntoVenta, jTableDatosFacturaPuntoVenta,/*jScrollPanelDatosFacturaPuntoVenta,*/jPanelCamposFacturaPuntoVenta,jPanelPaginacionFacturaPuntoVenta, /*jScrollPanelDatosEdicionFacturaPuntoVenta,*/ jPanelAccionesFacturaPuntoVenta,jPanelAccionesFormularioFacturaPuntoVenta,jmenuBarFacturaPuntoVenta,jmenuBarDetalleFacturaPuntoVenta,jTtoolBarFacturaPuntoVenta,jTtoolBarDetalleFacturaPuntoVenta));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesFacturaPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarFacturaPuntoVenta(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuFacturaPuntoVenta(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarFacturaPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarFacturaPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleFacturaPuntoVenta,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuFacturaPuntoVenta(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarFacturaPuntoVenta,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleFacturaPuntoVenta,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.facturapuntoventaConstantesFunciones.getsFinalQueryFacturaPuntoVenta();
		String  finalQueryPaginacionTodos=this.facturapuntoventaConstantesFunciones.getsFinalQueryFacturaPuntoVenta();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=FacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesNoFacturaPuntoVenta(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=FacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesFacturaPuntoVenta(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,FacturaPuntoVentaConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.facturapuntoventasEliminados= new ArrayList<FacturaPuntoVenta>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessFacturaPuntoVenta();
		
				///*FacturaPuntoVentaSessionBean*/this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			
			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=FacturaPuntoVentaConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=FacturaPuntoVentaConstantesFunciones.getClassesForeignKeysOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/facturapuntoventa."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			facturapuntoventasAux= new ArrayList<FacturaPuntoVenta>();
			
				
			facturapuntoventaLogic.setDatosCliente(this.datosCliente);
			facturapuntoventaLogic.setDatosDeep(this.datosDeep);
			facturapuntoventaLogic.setIsConDeep(true);
			
			
			facturapuntoventaLogic.getFacturaPuntoVentaDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					facturapuntoventaLogic.getTodosFacturaPuntoVentas(finalQueryGlobal,pagination);
					
					//facturapuntoventaLogic.getTodosFacturaPuntoVentasWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(facturapuntoventaLogic.getFacturaPuntoVentas()==null|| facturapuntoventaLogic.getFacturaPuntoVentas().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturapuntoventasAux= new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux= new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturapuntoventaLogic.getTodosFacturaPuntoVentas(finalQueryGlobal+"",this.pagination);												
							
							//facturapuntoventaLogic.getTodosFacturaPuntoVentasWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventaLogic.getFacturaPuntoVentas() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());					
							facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idFacturaPuntoVenta=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idFacturaPuntoVenta=this.idActual;
				
				} else if(this.idFacturaPuntoVentaActual!=null && this.idFacturaPuntoVentaActual!=0L) {
					idFacturaPuntoVenta=idFacturaPuntoVentaActual;
				}
				
					
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndicePorId(idFacturaPuntoVenta);
				
				this.facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					facturapuntoventaLogic.getEntity(idFacturaPuntoVenta);
					
					//facturapuntoventaLogic.getEntityWithConnection(idFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
					facturapuntoventaLogic.getFacturaPuntoVentas().add(facturapuntoventaLogic.getFacturaPuntoVenta());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
					this.facturapuntoventas.add(facturapuntoventa);
				}
				
				if(facturapuntoventaLogic.getFacturaPuntoVenta()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAsientoContable")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdAsientoContable(finalQueryGlobal,pagination,id_asiento_contableFK_IdAsientoContable);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdAsientoContable(id_asiento_contableFK_IdAsientoContable);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdAsientoContable",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdAsientoContable",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCaja")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCaja(finalQueryGlobal,pagination,id_cajaFK_IdCaja);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCaja(id_cajaFK_IdCaja);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdCaja",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdCaja",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCliente")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCliente(finalQueryGlobal,pagination,id_clienteFK_IdCliente);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdCliente(id_clienteFK_IdCliente);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdCliente",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdCliente",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdEmpresa",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdEmpresa",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoFacturaPuntoVenta")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoFacturaPuntoVenta(id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta(finalQueryGlobal,pagination,id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoFacturaPuntoVenta(id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoFacturaPuntoVenta(id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta(finalQueryGlobal,pagination,id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoFacturaPuntoVenta(id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdEstadoFacturaPuntoVenta(id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdEstadoFacturaPuntoVenta",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdEstadoFacturaPuntoVenta",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdFormato")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdFormato(finalQueryGlobal,pagination,id_formatoFK_IdFormato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdFormato(finalQueryGlobal,pagination,id_formatoFK_IdFormato);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdFormato(id_formatoFK_IdFormato);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdFormato",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdFormato",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMesa")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdMesa(finalQueryGlobal,pagination,id_mesaFK_IdMesa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdMesa(id_mesaFK_IdMesa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdMesa",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdMesa",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdSucursal",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdSucursal",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoFacturaPuntoVenta")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta(finalQueryGlobal,pagination,id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta(finalQueryGlobal,pagination,id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoFacturaPuntoVenta(id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdTipoFacturaPuntoVenta",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdTipoFacturaPuntoVenta",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdTipoPrecio")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoPrecio(finalQueryGlobal,pagination,id_tipo_precioFK_IdTipoPrecio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdTipoPrecio(id_tipo_precioFK_IdTipoPrecio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdTipoPrecio",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdTipoPrecio",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdUsuario",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdUsuario",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdVendedor")) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas()==null||facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=facturapuntoventas==null|| facturapuntoventas.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
						facturapuntoventasAux.addAll(facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventasAux=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventasAux.addAll(facturapuntoventas);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							facturapuntoventaLogic.getFacturaPuntoVentasFK_IdVendedor(finalQueryGlobal,pagination,id_vendedorFK_IdVendedor);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=FacturaPuntoVentaConstantesFunciones.getDetalleIndiceFK_IdVendedor(id_vendedorFK_IdVendedor);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteFacturaPuntoVentas("FK_IdVendedor",facturapuntoventaLogic.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteFacturaPuntoVentas("FK_IdVendedor",facturapuntoventas);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaLogic.setFacturaPuntoVentas(new ArrayList<FacturaPuntoVenta>());
						facturapuntoventaLogic.getFacturaPuntoVentas().addAll(facturapuntoventasAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
							facturapuntoventas.addAll(facturapuntoventasAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesFacturaPuntoVenta();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessFacturaPuntoVenta();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturapuntoventaLogic.getFacturaPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturapuntoventas.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=facturapuntoventaLogic.getFacturaPuntoVentas().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=facturapuntoventas.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(FacturaPuntoVenta facturapuntoventa) {
		Boolean permite=true;
		
		if(this.facturapuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=FacturaPuntoVentaConstantesFunciones.getOrderByListaFacturaPuntoVenta();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=FacturaPuntoVentaConstantesFunciones.getOrderByListaFacturaPuntoVenta();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaPuntoVenta facturapuntoventa:facturapuntoventaLogic.getFacturaPuntoVentas()) {
				if(facturapuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					facturapuntoventaTotales=facturapuntoventa;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaPuntoVenta facturapuntoventa:this.facturapuntoventas) {
				if(facturapuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					facturapuntoventaTotales=facturapuntoventa;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.facturapuntoventaAux=new FacturaPuntoVenta();
			this.facturapuntoventaAux.setsType(Constantes2.S_TOTALES);
			this.facturapuntoventaAux.setIsNew(false);
			this.facturapuntoventaAux.setIsChanged(false);
			this.facturapuntoventaAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				FacturaPuntoVentaConstantesFunciones.TotalizarValoresFilaFacturaPuntoVenta(this.facturapuntoventaLogic.getFacturaPuntoVentas(),this.facturapuntoventaAux);
				
				this.facturapuntoventaLogic.getFacturaPuntoVentas().add(this.facturapuntoventaAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				FacturaPuntoVentaConstantesFunciones.TotalizarValoresFilaFacturaPuntoVenta(this.facturapuntoventas,this.facturapuntoventaAux);
				
				this.facturapuntoventas.add(this.facturapuntoventaAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		facturapuntoventaTotales=new FacturaPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturapuntoventaLogic.getFacturaPuntoVentas().remove(facturapuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.facturapuntoventas.remove(facturapuntoventaTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		facturapuntoventaTotales=new FacturaPuntoVenta();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(FacturaPuntoVenta facturapuntoventa:facturapuntoventaLogic.getFacturaPuntoVentas()) {
				if(facturapuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					facturapuntoventaTotales=facturapuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaPuntoVentaConstantesFunciones.TotalizarValoresFilaFacturaPuntoVenta(this.facturapuntoventaLogic.getFacturaPuntoVentas(),facturapuntoventaTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(FacturaPuntoVenta facturapuntoventa:this.facturapuntoventas) {
				if(facturapuntoventa.getsType().equals(Constantes2.S_TOTALES)) {
					facturapuntoventaTotales=facturapuntoventa;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				FacturaPuntoVentaConstantesFunciones.TotalizarValoresFilaFacturaPuntoVenta(this.facturapuntoventas,facturapuntoventaTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getFacturaPuntoVentasFK_IdAsientoContable()throws Exception {
		try {
			sAccionBusqueda="FK_IdAsientoContable";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdCaja()throws Exception {
		try {
			sAccionBusqueda="FK_IdCaja";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdCliente()throws Exception {
		try {
			sAccionBusqueda="FK_IdCliente";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoFacturaPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdFormato()throws Exception {
		try {
			sAccionBusqueda="FK_IdFormato";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdMesa()throws Exception {
		try {
			sAccionBusqueda="FK_IdMesa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoFacturaPuntoVenta";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdTipoPrecio()throws Exception {
		try {
			sAccionBusqueda="FK_IdTipoPrecio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getFacturaPuntoVentasFK_IdVendedor()throws Exception {
		try {
			sAccionBusqueda="FK_IdVendedor";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getFacturaPuntoVentasFK_IdAsientoContable(String sFinalQuery,Long id_asiento_contable)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdAsientoContable(sFinalQuery,this.pagination,id_asiento_contable);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdCaja(String sFinalQuery,Long id_caja)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCaja(sFinalQuery,this.pagination,id_caja);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdCliente(String sFinalQuery,Long id_cliente)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdCliente(sFinalQuery,this.pagination,id_cliente);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta(String sFinalQuery,Long id_estado_factura_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta(sFinalQuery,this.pagination,id_estado_factura_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdFormato(String sFinalQuery,Long id_formato)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdFormato(sFinalQuery,this.pagination,id_formato);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdMesa(String sFinalQuery,Long id_mesa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdMesa(sFinalQuery,this.pagination,id_mesa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta(String sFinalQuery,Long id_tipo_factura_punto_venta)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta(sFinalQuery,this.pagination,id_tipo_factura_punto_venta);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdTipoPrecio(String sFinalQuery,Long id_tipo_precio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdTipoPrecio(sFinalQuery,this.pagination,id_tipo_precio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getFacturaPuntoVentasFK_IdVendedor(String sFinalQuery,Long id_vendedor)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLogic.getFacturaPuntoVentasFK_IdVendedor(sFinalQuery,this.pagination,id_vendedor);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosFacturaPuntoVenta() {
		this.isPermisoTodoFacturaPuntoVenta=false;
		this.isPermisoNuevoFacturaPuntoVenta=false;
		this.isPermisoActualizarFacturaPuntoVenta=false;
		this.isPermisoActualizarOriginalFacturaPuntoVenta=false;
		this.isPermisoEliminarFacturaPuntoVenta=false;
		this.isPermisoGuardarCambiosFacturaPuntoVenta=false;
		this.isPermisoConsultaFacturaPuntoVenta=false;
		this.isPermisoBusquedaFacturaPuntoVenta=false;
		this.isPermisoReporteFacturaPuntoVenta=false;		
		this.isPermisoOrdenFacturaPuntoVenta=false;		
		this.isPermisoPaginacionMedioFacturaPuntoVenta=false;		
		this.isPermisoPaginacionAltoFacturaPuntoVenta=false;
		this.isPermisoPaginacionTodoFacturaPuntoVenta=false;
		this.isPermisoCopiarFacturaPuntoVenta=false;		
		this.isPermisoVerFormFacturaPuntoVenta=false;		
		this.isPermisoDuplicarFacturaPuntoVenta=false;		
		this.isPermisoOrdenFacturaPuntoVenta=false;		
	}
	
	public void setPermisosUsuarioFacturaPuntoVenta(Boolean isPermiso) {
		this.isPermisoTodoFacturaPuntoVenta=isPermiso;
		this.isPermisoNuevoFacturaPuntoVenta=isPermiso;
		this.isPermisoActualizarFacturaPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalFacturaPuntoVenta=isPermiso;
		this.isPermisoEliminarFacturaPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosFacturaPuntoVenta=isPermiso;
		this.isPermisoConsultaFacturaPuntoVenta=isPermiso;
		this.isPermisoBusquedaFacturaPuntoVenta=isPermiso;
		this.isPermisoReporteFacturaPuntoVenta=isPermiso;
		this.isPermisoOrdenFacturaPuntoVenta=isPermiso;		
		this.isPermisoPaginacionMedioFacturaPuntoVenta=isPermiso;		
		this.isPermisoPaginacionAltoFacturaPuntoVenta=isPermiso;		
		this.isPermisoPaginacionTodoFacturaPuntoVenta=isPermiso;		
		this.isPermisoCopiarFacturaPuntoVenta=isPermiso;		
		this.isPermisoVerFormFacturaPuntoVenta=isPermiso;		
		this.isPermisoDuplicarFacturaPuntoVenta=isPermiso;
		this.isPermisoOrdenFacturaPuntoVenta=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioFacturaPuntoVenta(Boolean isPermiso) {
		//this.isPermisoTodoFacturaPuntoVenta=isPermiso;
		this.isPermisoNuevoFacturaPuntoVenta=isPermiso;
		this.isPermisoActualizarFacturaPuntoVenta=isPermiso;
		this.isPermisoActualizarOriginalFacturaPuntoVenta=isPermiso;
		this.isPermisoEliminarFacturaPuntoVenta=isPermiso;
		this.isPermisoGuardarCambiosFacturaPuntoVenta=isPermiso;
		//this.isPermisoConsultaFacturaPuntoVenta=isPermiso;
		//this.isPermisoBusquedaFacturaPuntoVenta=isPermiso;
		//this.isPermisoReporteFacturaPuntoVenta=isPermiso;
		//this.isPermisoOrdenFacturaPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionMedioFacturaPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionAltoFacturaPuntoVenta=isPermiso;		
		//this.isPermisoPaginacionTodoFacturaPuntoVenta=isPermiso;		
		//this.isPermisoCopiarFacturaPuntoVenta=isPermiso;		
		//this.isPermisoDuplicarFacturaPuntoVenta=isPermiso;
		//this.isPermisoOrdenFacturaPuntoVenta=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioFacturaPuntoVentaClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		arrPaginas.add(FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);
		arrPaginas.add(DetalleFacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
		if(FacturaPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		

		this.isTienePermisosFormaPagoPuntoVenta=false;
		this.isTienePermisosFormaPagoPuntoVenta=this.verificarGetPermisosUsuarioOpcionFacturaPuntoVentaClaseRelacionada(this.opcionsRelacionadas,FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);

		this.isTienePermisosDetalleFacturaPuntoVenta=false;
		this.isTienePermisosDetalleFacturaPuntoVenta=this.verificarGetPermisosUsuarioOpcionFacturaPuntoVentaClaseRelacionada(this.opcionsRelacionadas,DetalleFacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioFacturaPuntoVentaClasesRelacionadas(Boolean conPermiso) throws Exception {
		
		this.isTienePermisosFormaPagoPuntoVenta=conPermiso;
		this.isTienePermisosDetalleFacturaPuntoVenta=conPermiso;
	}
	
	public Boolean verificarGetPermisosUsuarioFacturaPuntoVentaClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionFacturaPuntoVentaClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioFacturaPuntoVentaClasesRelacionadas() throws Exception {
		

		if(!this.isTienePermisosFormaPagoPuntoVenta && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.remove(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.getContentPane());
		}

		if(!this.isTienePermisosDetalleFacturaPuntoVenta && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.remove(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.getContentPane());
		}
	}
	
	public void setPermisosUsuarioFacturaPuntoVenta() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(FacturaPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoFacturaPuntoVenta=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarFacturaPuntoVenta=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalFacturaPuntoVenta=this.isPermisoActualizarFacturaPuntoVenta;
			this.isPermisoEliminarFacturaPuntoVenta=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosFacturaPuntoVenta=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaFacturaPuntoVenta=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaFacturaPuntoVenta=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoFacturaPuntoVenta=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteFacturaPuntoVenta=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioFacturaPuntoVenta=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoFacturaPuntoVenta=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoFacturaPuntoVenta=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarFacturaPuntoVenta=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormFacturaPuntoVenta=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarFacturaPuntoVenta=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenFacturaPuntoVenta=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosFacturaPuntoVenta.setToolTipText(this.jTableDatosFacturaPuntoVenta.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioFacturaPuntoVenta(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioFacturaPuntoVenta(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(FacturaPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(FacturaPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioFacturaPuntoVenta() throws Exception {
		Reporte reporte=null;
		
		

		if(this.isTienePermisosFormaPagoPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarFormaPagoPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Forma Pago");
			reporte.setsDescripcion("Forma Pago");
			this.tiposRelaciones.add(reporte);
		}

		if(this.isTienePermisosDetalleFacturaPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarDetalleFacturaPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {

			reporte=new Reporte();
			reporte.setsCodigo("Detalle Factura");
			reporte.setsDescripcion("Detalle Factura");
			this.tiposRelaciones.add(reporte);
		}
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyFacturaPuntoVentaListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.vendedorsForeignKey=new ArrayList();
				this.clientesForeignKey=new ArrayList();
				this.cajasForeignKey=new ArrayList();
				this.tipopreciosForeignKey=new ArrayList();
				this.mesasForeignKey=new ArrayList();
				this.formatosForeignKey=new ArrayList();
				this.tipofacturapuntoventasForeignKey=new ArrayList();
				this.estadofacturapuntoventasForeignKey=new ArrayList();
				this.asientocontablesForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyFacturaPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(FacturaPuntoVentaJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyFacturaPuntoVentaListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyTipoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyVendedorListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=VendedorConstantesFunciones.SFINALQUERY;

				this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyClienteListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=ClienteConstantesFunciones.SFINALQUERY;

				this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCajaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CajaConstantesFunciones.SFINALQUERY;

				this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoPrecioConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesaConstantesFunciones.SFINALQUERY;

				this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormatoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=FormatoConstantesFunciones.SFINALQUERY;

				this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFacturaPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.tipofacturapuntoventasForeignKey==null||this.tipofacturapuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=TipoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesTipoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaPuntoVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=TipoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoFacturaPuntoVentaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadofacturapuntoventasForeignKey==null||this.estadofacturapuntoventasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesEstadoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoFacturaPuntoVentaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContableListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AsientoContableConstantesFunciones.SFINALQUERY;

				this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyFacturaPuntoVentaListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			FacturaPuntoVentaParameterReturnGeneral facturapuntoventaReturnGeneral=new FacturaPuntoVentaParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_empresaFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_empresaFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_sucursalFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_sucursalFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_usuarioFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_usuarioFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalVendedor="";

				if(((this.vendedorsForeignKey==null||this.vendedorsForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_vendedorFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_vendedorFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=VendedorConstantesFunciones.getArrayColumnasGlobalesVendedor(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalVendedor=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,VendedorConstantesFunciones.TABLENAME);

						finalQueryGlobalVendedor=Funciones.GetFinalQueryAppend(finalQueryGlobalVendedor, "");
						finalQueryGlobalVendedor+=VendedorConstantesFunciones.SFINALQUERY;

						//this.cargarCombosVendedorsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalVendedor=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidVendedorActual();
					}
				} else {
					finalQueryGlobalVendedor="NONE";
				}


				String finalQueryGlobalCliente="";

				if(((this.clientesForeignKey==null||this.clientesForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_clienteFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_clienteFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=ClienteConstantesFunciones.getArrayColumnasGlobalesCliente(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCliente=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,ClienteConstantesFunciones.TABLENAME);

						finalQueryGlobalCliente=Funciones.GetFinalQueryAppend(finalQueryGlobalCliente, "");
						finalQueryGlobalCliente+=ClienteConstantesFunciones.SFINALQUERY;

						//this.cargarCombosClientesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCliente=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidClienteActual();
					}
				} else {
					finalQueryGlobalCliente="NONE";
				}


				String finalQueryGlobalCaja="";

				if(((this.cajasForeignKey==null||this.cajasForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_cajaFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_cajaFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CajaConstantesFunciones.getArrayColumnasGlobalesCaja(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCaja=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CajaConstantesFunciones.TABLENAME);

						finalQueryGlobalCaja=Funciones.GetFinalQueryAppend(finalQueryGlobalCaja, "");
						finalQueryGlobalCaja+=CajaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCajasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCaja=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidCajaActual();
					}
				} else {
					finalQueryGlobalCaja="NONE";
				}


				String finalQueryGlobalTipoPrecio="";

				if(((this.tipopreciosForeignKey==null||this.tipopreciosForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_tipo_precioFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_tipo_precioFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoPrecioConstantesFunciones.getArrayColumnasGlobalesTipoPrecio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoPrecio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoPrecioConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoPrecio=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoPrecio, "");
						finalQueryGlobalTipoPrecio+=TipoPrecioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoPreciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoPrecio=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidTipoPrecioActual();
					}
				} else {
					finalQueryGlobalTipoPrecio="NONE";
				}


				String finalQueryGlobalMesa="";

				if(((this.mesasForeignKey==null||this.mesasForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_mesaFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_mesaFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesaConstantesFunciones.getArrayColumnasGlobalesMesa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMesa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesaConstantesFunciones.TABLENAME);

						finalQueryGlobalMesa=Funciones.GetFinalQueryAppend(finalQueryGlobalMesa, "");
						finalQueryGlobalMesa+=MesaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMesasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMesa=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidMesaActual();
					}
				} else {
					finalQueryGlobalMesa="NONE";
				}


				String finalQueryGlobalFormato="";

				if(((this.formatosForeignKey==null||this.formatosForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_formatoFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_formatoFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=FormatoConstantesFunciones.getArrayColumnasGlobalesFormato(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalFormato=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,FormatoConstantesFunciones.TABLENAME);

						finalQueryGlobalFormato=Funciones.GetFinalQueryAppend(finalQueryGlobalFormato, "");
						finalQueryGlobalFormato+=FormatoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosFormatosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalFormato=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidFormatoActual();
					}
				} else {
					finalQueryGlobalFormato="NONE";
				}


				String finalQueryGlobalTipoFacturaPuntoVenta="";

				if(((this.tipofacturapuntoventasForeignKey==null||this.tipofacturapuntoventasForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=TipoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesTipoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalTipoFacturaPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,TipoFacturaPuntoVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalTipoFacturaPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalTipoFacturaPuntoVenta, "");
						finalQueryGlobalTipoFacturaPuntoVenta+=TipoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalTipoFacturaPuntoVenta=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidTipoFacturaPuntoVentaActual();
					}
				} else {
					finalQueryGlobalTipoFacturaPuntoVenta="NONE";
				}


				String finalQueryGlobalEstadoFacturaPuntoVenta="";

				if(((this.estadofacturapuntoventasForeignKey==null||this.estadofacturapuntoventasForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_estado_factura_punto_ventaFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_estado_factura_punto_ventaFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFacturaPuntoVenta()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoFacturaPuntoVentaConstantesFunciones.getArrayColumnasGlobalesEstadoFacturaPuntoVenta(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoFacturaPuntoVenta=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoFacturaPuntoVentaConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoFacturaPuntoVenta=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoFacturaPuntoVenta, "");
						finalQueryGlobalEstadoFacturaPuntoVenta+=EstadoFacturaPuntoVentaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoFacturaPuntoVentasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoFacturaPuntoVenta=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidEstadoFacturaPuntoVentaActual();
					}
				} else {
					finalQueryGlobalEstadoFacturaPuntoVenta="NONE";
				}


				String finalQueryGlobalAsientoContable="";

				if(((this.asientocontablesForeignKey==null||this.asientocontablesForeignKey.size()<=0) && this.facturapuntoventaConstantesFunciones.cargarid_asiento_contableFacturaPuntoVenta)
					 || (this.esRecargarFks && this.facturapuntoventaConstantesFunciones.cargarid_asiento_contableFacturaPuntoVenta)) {

					if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AsientoContableConstantesFunciones.getArrayColumnasGlobalesAsientoContable(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAsientoContable=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AsientoContableConstantesFunciones.TABLENAME);

						finalQueryGlobalAsientoContable=Funciones.GetFinalQueryAppend(finalQueryGlobalAsientoContable, "");
						finalQueryGlobalAsientoContable+=AsientoContableConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAsientoContablesForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAsientoContable=" WHERE " + ConstantesSql.ID + "="+facturapuntoventaSessionBean.getlidAsientoContableActual();
					}
				} else {
					finalQueryGlobalAsientoContable="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				facturapuntoventaReturnGeneral=facturapuntoventaLogic.cargarCombosLoteForeignKeyFacturaPuntoVenta(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalUsuario,finalQueryGlobalVendedor,finalQueryGlobalCliente,finalQueryGlobalCaja,finalQueryGlobalTipoPrecio,finalQueryGlobalMesa,finalQueryGlobalFormato,finalQueryGlobalTipoFacturaPuntoVenta,finalQueryGlobalEstadoFacturaPuntoVenta,finalQueryGlobalAsientoContable);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=facturapuntoventaReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=facturapuntoventaReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=facturapuntoventaReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalVendedor.equals("NONE")) {
				this.vendedorsForeignKey=facturapuntoventaReturnGeneral.getvendedorsForeignKey();
			}

			if(!finalQueryGlobalCliente.equals("NONE")) {
				this.clientesForeignKey=facturapuntoventaReturnGeneral.getclientesForeignKey();
			}

			if(!finalQueryGlobalCaja.equals("NONE")) {
				this.cajasForeignKey=facturapuntoventaReturnGeneral.getcajasForeignKey();
			}

			if(!finalQueryGlobalTipoPrecio.equals("NONE")) {
				this.tipopreciosForeignKey=facturapuntoventaReturnGeneral.gettipopreciosForeignKey();
			}

			if(!finalQueryGlobalMesa.equals("NONE")) {
				this.mesasForeignKey=facturapuntoventaReturnGeneral.getmesasForeignKey();
			}

			if(!finalQueryGlobalFormato.equals("NONE")) {
				this.formatosForeignKey=facturapuntoventaReturnGeneral.getformatosForeignKey();
			}

			if(!finalQueryGlobalTipoFacturaPuntoVenta.equals("NONE")) {
				this.tipofacturapuntoventasForeignKey=facturapuntoventaReturnGeneral.gettipofacturapuntoventasForeignKey();
			}

			if(!finalQueryGlobalEstadoFacturaPuntoVenta.equals("NONE")) {
				this.estadofacturapuntoventasForeignKey=facturapuntoventaReturnGeneral.getestadofacturapuntoventasForeignKey();
			}

			if(!finalQueryGlobalAsientoContable.equals("NONE")) {
				this.asientocontablesForeignKey=facturapuntoventaReturnGeneral.getasientocontablesForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyFacturaPuntoVenta()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyVendedor();
			this.addItemDefectoCombosForeignKeyCliente();
			this.addItemDefectoCombosForeignKeyCaja();
			this.addItemDefectoCombosForeignKeyTipoPrecio();
			this.addItemDefectoCombosForeignKeyMesa();
			this.addItemDefectoCombosForeignKeyFormato();
			this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
			this.addItemDefectoCombosForeignKeyEstadoFacturaPuntoVenta();
			this.addItemDefectoCombosForeignKeyAsientoContable();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyVendedor()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionVendedor()) {
				Vendedor vendedor=new Vendedor();
				VendedorConstantesFunciones.setVendedorDescripcion(vendedor,Constantes.SMENSAJE_ESCOJA_OPCION);
				vendedor.setId(null);

				if(!VendedorConstantesFunciones.ExisteEnLista(this.vendedorsForeignKey,vendedor,true)) {

					this.vendedorsForeignKey.add(0,vendedor);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCliente()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCliente()) {
				Cliente cliente=new Cliente();
				ClienteConstantesFunciones.setClienteDescripcion(cliente,Constantes.SMENSAJE_ESCOJA_OPCION);
				cliente.setId(null);

				if(!ClienteConstantesFunciones.ExisteEnLista(this.clientesForeignKey,cliente,true)) {

					this.clientesForeignKey.add(0,cliente);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCaja()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionCaja()) {
				Caja caja=new Caja();
				CajaConstantesFunciones.setCajaDescripcion(caja,Constantes.SMENSAJE_ESCOJA_OPCION);
				caja.setId(null);

				if(!CajaConstantesFunciones.ExisteEnLista(this.cajasForeignKey,caja,true)) {

					this.cajasForeignKey.add(0,caja);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoPrecio()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoPrecio()) {
				TipoPrecio tipoprecio=new TipoPrecio();
				TipoPrecioConstantesFunciones.setTipoPrecioDescripcion(tipoprecio,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipoprecio.setId(null);

				if(!TipoPrecioConstantesFunciones.ExisteEnLista(this.tipopreciosForeignKey,tipoprecio,true)) {

					this.tipopreciosForeignKey.add(0,tipoprecio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMesa()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionMesa()) {
				Mesa mesa=new Mesa();
				MesaConstantesFunciones.setMesaDescripcion(mesa,Constantes.SMENSAJE_ESCOJA_OPCION);
				mesa.setId(null);

				if(!MesaConstantesFunciones.ExisteEnLista(this.mesasForeignKey,mesa,true)) {

					this.mesasForeignKey.add(0,mesa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyFormato()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionFormato()) {
				Formato formato=new Formato();
				FormatoConstantesFunciones.setFormatoDescripcion(formato,Constantes.SMENSAJE_ESCOJA_OPCION);
				formato.setId(null);

				if(!FormatoConstantesFunciones.ExisteEnLista(this.formatosForeignKey,formato,true)) {

					this.formatosForeignKey.add(0,formato);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionTipoFacturaPuntoVenta()) {
				TipoFacturaPuntoVenta tipofacturapuntoventa=new TipoFacturaPuntoVenta();
				TipoFacturaPuntoVentaConstantesFunciones.setTipoFacturaPuntoVentaDescripcion(tipofacturapuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				tipofacturapuntoventa.setId(null);

				if(!TipoFacturaPuntoVentaConstantesFunciones.ExisteEnLista(this.tipofacturapuntoventasForeignKey,tipofacturapuntoventa,true)) {

					this.tipofacturapuntoventasForeignKey.add(0,tipofacturapuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoFacturaPuntoVenta()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionEstadoFacturaPuntoVenta()) {
				EstadoFacturaPuntoVenta estadofacturapuntoventa=new EstadoFacturaPuntoVenta();
				EstadoFacturaPuntoVentaConstantesFunciones.setEstadoFacturaPuntoVentaDescripcion(estadofacturapuntoventa,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadofacturapuntoventa.setId(null);

				if(!EstadoFacturaPuntoVentaConstantesFunciones.ExisteEnLista(this.estadofacturapuntoventasForeignKey,estadofacturapuntoventa,true)) {

					this.estadofacturapuntoventasForeignKey.add(0,estadofacturapuntoventa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAsientoContable()throws Exception {
		try {

			if(!this.facturapuntoventaSessionBean.getisBusquedaDesdeForeignKeySesionAsientoContable()) {
				AsientoContable asientocontable=new AsientoContable();
				AsientoContableConstantesFunciones.setAsientoContableDescripcion(asientocontable,Constantes.SMENSAJE_ESCOJA_OPCION);
				asientocontable.setId(null);

				if(!AsientoContableConstantesFunciones.ExisteEnLista(this.asientocontablesForeignKey,asientocontable,true)) {

					this.asientocontablesForeignKey.add(0,asientocontable);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyFacturaPuntoVenta()throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente("Todos");
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyFacturaPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			
			this.initActionsCombosForeignKeyCliente(sFormularioTipoBusqueda);
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	@SuppressWarnings("rawtypes")
	public void procesarActionsCombosForeignKeyCliente(JComboBox jComboBoxClienteGenerico,String sFormularioTipoBusqueda)throws Exception {
		try {
			String sFinalQueryCombo="";
			Cliente clienteLocal=(Cliente)jComboBoxClienteGenerico.getSelectedItem();

			if(clienteLocal!=null  && clienteLocal.getId()!=null  && clienteLocal.getId()>0) {
				sFinalQueryCombo="  WHERE  id_cliente="+clienteLocal.getId();
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	



	public void initActionsCombosForeignKeyCliente(String sFormularioTipoBusqueda)throws Exception {
		try {
			if(sFormularioTipoBusqueda.equals("Todos") || sFormularioTipoBusqueda.equals("Formulario")) {
				if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.addItemListener(new ComboBoxItemListener(this,"id_clienteFacturaPuntoVenta"));
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clienteFacturaPuntoVenta"));
					}
				} else {
					if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.addActionListener(new ComboBoxActionListener(this,"id_clienteFacturaPuntoVenta"));
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"id_clienteFacturaPuntoVenta"));
					}
				}
			}

			if(sFormularioTipoBusqueda.equals("Todos")) {

				if(!this.conCargarMinimo) {
				
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.addItemListener(new ComboBoxItemListener(this,"jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta"));

					} else {
						this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.addActionListener(new ComboBoxActionListener(this,"jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta"));

						this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.addFocusListener(new ComboBoxFocusListener(this,"jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta"));

					}
			
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesGlobalesCombosForeignKeyFacturaPuntoVenta()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
			
			
				this.facturapuntoventa.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaPuntoVenta();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa)throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(facturapuntoventa.getid_vendedor(),false,"Formulario");
			this.setActualClienteForeignKey(facturapuntoventa.getid_cliente(),false,"Formulario");
			this.setActualCajaForeignKey(facturapuntoventa.getid_caja(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(facturapuntoventa.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(facturapuntoventa.getid_mesa(),false,"Formulario");
			this.setActualFormatoForeignKey(facturapuntoventa.getid_formato(),false,"Formulario");
			this.setActualTipoFacturaPuntoVentaForeignKey(facturapuntoventa.getid_tipo_factura_punto_venta(),false,"Formulario");
			this.setActualEstadoFacturaPuntoVentaForeignKey(facturapuntoventa.getid_estado_factura_punto_venta(),false,"Formulario");
			this.setActualAsientoContableForeignKey(facturapuntoventa.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,String sTipoEvento)throws Exception {	
		try {
			
			

				if(facturapuntoventa.getVendedor()!=null && !sTipoEvento.equals("id_vendedorFacturaPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.vendedorsForeignKey=new ArrayList<Vendedor>();
					this.vendedorsForeignKey.add(facturapuntoventa.getVendedor());

					this.addItemDefectoCombosForeignKeyVendedor();
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				if(facturapuntoventa.getCliente()!=null && !sTipoEvento.equals("id_clienteFacturaPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.clientesForeignKey=new ArrayList<Cliente>();
					this.clientesForeignKey.add(facturapuntoventa.getCliente());

					this.addItemDefectoCombosForeignKeyCliente();
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				if(facturapuntoventa.getAsientoContable()!=null && !sTipoEvento.equals("id_asiento_contableFacturaPuntoVenta")) { //sTipoEvento Evita Bucle Infinito

					this.asientocontablesForeignKey=new ArrayList<AsientoContable>();
					this.asientocontablesForeignKey.add(facturapuntoventa.getAsientoContable());

					this.addItemDefectoCombosForeignKeyAsientoContable();
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyFacturaPuntoVenta()throws Exception {	
		try {
			
			this.setActualVendedorForeignKey(this.facturapuntoventaConstantesFunciones.getid_vendedor(),false,"Formulario");
			this.setActualClienteForeignKey(this.facturapuntoventaConstantesFunciones.getid_cliente(),false,"Formulario");
			this.setActualCajaForeignKey(this.facturapuntoventaConstantesFunciones.getid_caja(),false,"Formulario");
			this.setActualTipoPrecioForeignKey(this.facturapuntoventaConstantesFunciones.getid_tipo_precio(),false,"Formulario");
			this.setActualMesaForeignKey(this.facturapuntoventaConstantesFunciones.getid_mesa(),false,"Formulario");
			this.setActualFormatoForeignKey(this.facturapuntoventaConstantesFunciones.getid_formato(),false,"Formulario");
			this.setActualTipoFacturaPuntoVentaForeignKey(this.facturapuntoventaConstantesFunciones.getid_tipo_factura_punto_venta(),false,"Formulario");
			this.setActualEstadoFacturaPuntoVentaForeignKey(this.facturapuntoventaConstantesFunciones.getid_estado_factura_punto_venta(),false,"Formulario");
			this.setActualAsientoContableForeignKey(this.facturapuntoventaConstantesFunciones.getid_asiento_contable(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyFacturaPuntoVenta()throws Exception {	
		try {
			

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyFacturaPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyFacturaPuntoVenta()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroFacturaPuntoVenta()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyFacturaPuntoVenta()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameVendedorsForeignKey("Todos");
			this.cargarCombosFrameClientesForeignKey("Todos");
			this.cargarCombosFrameCajasForeignKey("Todos");
			this.cargarCombosFrameTipoPreciosForeignKey("Todos");
			this.cargarCombosFrameMesasForeignKey("Todos");
			this.cargarCombosFrameFormatosForeignKey("Todos");
			this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Todos");
			this.cargarCombosFrameEstadoFacturaPuntoVentasForeignKey("Todos");
			this.cargarCombosFrameAsientoContablesForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyFacturaPuntoVenta(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyFacturaPuntoVenta()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.getItemCount()>0) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	









	public void recargarFormFacturaPuntoVentaCliente(JComboBox<?> jComboBoxGenericoCliente,String sFormularioTipoBusqueda) throws Exception {

	}














	
	

	public FacturaPuntoVentaBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public FacturaPuntoVentaBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public FacturaPuntoVentaBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean(); 
		this.facturapuntoventaConstantesFunciones=new FacturaPuntoVentaConstantesFunciones(); 
		this.facturapuntoventaBean=new FacturaPuntoVenta();//(this.facturapuntoventaConstantesFunciones); 		
		this.facturapuntoventaReturnGeneral=new FacturaPuntoVentaParameterReturnGeneral(); 
		
		this.facturapuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.facturapuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public FacturaPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public FacturaPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public FacturaPuntoVentaBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessFacturaPuntoVenta(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			//OBLIGA VALIDA CON GUARDAR RELACIONES, TAMBIEN EN SWING
			conGuardarRelaciones=true;
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.facturapuntoventaConstantesFunciones=new FacturaPuntoVentaConstantesFunciones(); 
			this.facturapuntoventaBean=new FacturaPuntoVenta();//this.facturapuntoventaConstantesFunciones); 			
			this.facturapuntoventaReturnGeneral=new FacturaPuntoVentaParameterReturnGeneral(); 
		
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Factura Punto Venta Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.facturapuntoventa=new FacturaPuntoVenta();
			this.facturapuntoventas = new ArrayList<FacturaPuntoVenta>();
			this.facturapuntoventasAux = new ArrayList<FacturaPuntoVenta>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic=new FacturaPuntoVentaLogic();
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.facturapuntoventaSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.facturapuntoventaSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormFacturaPuntoVenta);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaPuntoVenta);	
					}
					
					if(this.jInternalFrameImportacionFacturaPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaPuntoVenta);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByFacturaPuntoVenta!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByFacturaPuntoVenta);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaPuntoVenta);
				this.jInternalFrameDetalleFormFacturaPuntoVenta.setVisible(false);
				this.jInternalFrameDetalleFormFacturaPuntoVenta.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaPuntoVenta);
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setVisible(false);
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionFacturaPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionFacturaPuntoVenta);
					this.jInternalFrameImportacionFacturaPuntoVenta.setVisible(false);
					this.jInternalFrameImportacionFacturaPuntoVenta.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByFacturaPuntoVenta!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByFacturaPuntoVenta);
					this.jInternalFrameOrderByFacturaPuntoVenta.setVisible(false);
					this.jInternalFrameOrderByFacturaPuntoVenta.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idFacturaPuntoVentaActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=FacturaPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.facturapuntoventaReturnGeneral=new FacturaPuntoVentaParameterReturnGeneral();
			
			this.facturapuntoventaParameterGeneral=new FacturaPuntoVentaParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.facturapuntoventaLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(FacturaPuntoVentaJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
				arrPaginas.add(FormaPagoPuntoVentaConstantesFunciones.SNOMBREOPCION);
				arrPaginas.add(DetalleFacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),this.facturapuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),this.facturapuntoventaSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaCopiarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaVerFormFacturaPuntoVenta=true;
			this.isVisibilidadCeldaOrdenFacturaPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			
			
			this.isVisibilidadFK_IdAsientoContable=true;
			this.isVisibilidadFK_IdCaja=true;
			this.isVisibilidadFK_IdCliente=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=true;
			this.isVisibilidadFK_IdFormato=true;
			this.isVisibilidadFK_IdMesa=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=true;
			this.isVisibilidadFK_IdTipoPrecio=true;
			this.isVisibilidadFK_IdUsuario=true;
			this.isVisibilidadFK_IdVendedor=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosFacturaPuntoVenta();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioFacturaPuntoVenta(false);
			
			this.setPermisosUsuarioFacturaPuntoVenta();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado() 
				|| (this.facturapuntoventaSessionBean.getEsGuardarRelacionado() && this.facturapuntoventaSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioFacturaPuntoVentaClasesRelacionadas();
			}
			
			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioFacturaPuntoVentaClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosFacturaPuntoVenta();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualFacturaPuntoVenta();
			}
			
			if(!this.isPermisoBusquedaFacturaPuntoVenta) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				this.tiposReportes.add(new Reporte("RELACIONES","RELACIONES"));
				this.tiposReportesDinamico.add(new Reporte("RELACIONES","RELACIONES"));
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioFacturaPuntoVenta,this.isPermisoPaginacionMedioFacturaPuntoVenta,this.isPermisoPaginacionTodoFacturaPuntoVenta);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(FacturaPuntoVentaConstantesFunciones.getTiposSeleccionarFacturaPuntoVenta());
				
				this.tiposColumnasSelect=FacturaPuntoVentaConstantesFunciones.getTiposSeleccionarFacturaPuntoVenta(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				this.cargarTiposRelacionesSelectFacturaPuntoVenta();				
				//this.tiposRelacionesSelect=FacturaPuntoVentaConstantesFunciones.getTiposRelacionesFacturaPuntoVenta(true);
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioFacturaPuntoVenta();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioFacturaPuntoVenta(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioFacturaPuntoVenta(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaPuntoVenta() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			
			this.formapagopuntoventaLogic=new FormaPagoPuntoVentaLogic();
			this.detallefacturapuntoventaLogic=new DetalleFacturaPuntoVentaLogic(); 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.vendedorLogic=new VendedorLogic();
			this.clienteLogic=new ClienteLogic();
			this.cajaLogic=new CajaLogic();
			this.tipoprecioLogic=new TipoPrecioLogic();
			this.mesaLogic=new MesaLogic();
			this.formatoLogic=new FormatoLogic();
			this.tipofacturapuntoventaLogic=new TipoFacturaPuntoVentaLogic();
			this.estadofacturapuntoventaLogic=new EstadoFacturaPuntoVentaLogic();
			this.asientocontableLogic=new AsientoContableLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				facturapuntoventaImplementable= (FacturaPuntoVentaImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				facturapuntoventaImplementableHome= (FacturaPuntoVentaImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+FacturaPuntoVentaConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.facturapuntoventas= new ArrayList<FacturaPuntoVenta>();
			this.facturapuntoventasEliminados= new ArrayList<FacturaPuntoVenta>();
						
			this.isEsNuevoFacturaPuntoVenta=false;
			this.esParaAccionDesdeFormularioFacturaPuntoVenta=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			//BUSQUEDA INTERNA FK
			this.idVendedorActual=0L;
			this.idClienteActual=0L;
			this.idAsientoContableActual=0L;
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.vendedorsForeignKey=new ArrayList<Vendedor>() ;
			this.clientesForeignKey=new ArrayList<Cliente>() ;
			this.cajasForeignKey=new ArrayList<Caja>() ;
			this.tipopreciosForeignKey=new ArrayList<TipoPrecio>() ;
			this.mesasForeignKey=new ArrayList<Mesa>() ;
			this.formatosForeignKey=new ArrayList<Formato>() ;
			this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>() ;
			this.estadofacturapuntoventasForeignKey=new ArrayList<EstadoFacturaPuntoVenta>() ;
			this.asientocontablesForeignKey=new ArrayList<AsientoContable>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyFacturaPuntoVenta(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroFacturaPuntoVenta();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=FacturaPuntoVentaConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingFacturaPuntoVenta(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioFacturaPuntoVenta();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioFacturaPuntoVenta();
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasFacturaPuntoVenta.getTabCount(); i++) {
					this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessFacturaPuntoVenta(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga FacturaPuntoVenta: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectFacturaPuntoVenta() {
		Reporte reporte=new Reporte();
		
	

		reporte=new Reporte();
		reporte.setsCodigo(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);

		reporte=new Reporte();
		reporte.setsCodigo(DetalleFacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		reporte.setsDescripcion(DetalleFacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
		this.tiposRelacionesSelect.add(reporte);
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesFacturaPuntoVenta")) {
				iIndex=this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();	
				
				

				if(sTitle.equals("Detalle Facturas")) {
					if(!DetalleFacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessFacturaPuntoVenta();

						this.cargarParteTabPanelRelacionadaDetalleFacturaPuntoVenta(iIndex,intSelectedRow);
					}
					
				}

				if(sTitle.equals("Forma Pagoes")) {
					if(!FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						procesaCargarParteTab=true;
						this.startProcessFacturaPuntoVenta();

						this.cargarParteTabPanelRelacionadaFormaPagoPuntoVenta(iIndex,intSelectedRow);
					}
					
				}
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessFacturaPuntoVenta();	
			}
		}
    }
	
	

	public void cargarParteTabPanelRelacionadaDetalleFacturaPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormFacturaPuntoVenta.cargarSessionConBeanSwingJInternalFrameDetalleFacturaPuntoVenta(false,true,iIndex);
		this.jButtonDetalleFacturaPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaDetalleFacturaPuntoVenta();

		//this.jTabbedPaneRelacionesFacturaPuntoVenta.updateUI();
		//this.jTabbedPaneRelacionesFacturaPuntoVenta.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesFacturaPuntoVenta.setSelectedIndex(iIndex);


	}

	public void cargarParteTabPanelRelacionadaFormaPagoPuntoVenta(int iIndex,int intSelectedRow) throws Exception {
		this.jInternalFrameDetalleFormFacturaPuntoVenta.cargarSessionConBeanSwingJInternalFrameFormaPagoPuntoVenta(false,true,iIndex);
		this.jButtonFormaPagoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
		this.redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta();

		//this.jTabbedPaneRelacionesFacturaPuntoVenta.updateUI();
		//this.jTabbedPaneRelacionesFacturaPuntoVenta.removeTabAt(iIndex);
		//this.jTabbedPaneRelacionesFacturaPuntoVenta.setSelectedIndex(iIndex);


	}
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
				 if(sTipo.equals("FormaPagoPuntoVenta")) {
				int row=this.jTableDatosFacturaPuntoVenta.getSelectedRow();
				jButtonFormaPagoPuntoVentaActionPerformed(evt,row,true,false,null);
				}
				 else  if(sTipo.equals("DetalleFacturaPuntoVenta")) {
				int row=this.jTableDatosFacturaPuntoVenta.getSelectedRow();
				jButtonDetalleFacturaPuntoVentaActionPerformed(evt,row,true,false,null);
				}
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
		if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			for(Reporte reporte:this.tiposRelaciones) {
			

				if(reporte.getsCodigo().equals("Forma Pago")) {

					if(this.isTienePermisosFormaPagoPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarFormaPagoPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Forma Pagoes"+"("+FormaPagoPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Forma Pagoes");

						if(facturapuntoventaConstantesFunciones.resaltarFormaPagoPuntoVentaFacturaPuntoVenta!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(facturapuntoventaConstantesFunciones.resaltarFormaPagoPuntoVentaFacturaPuntoVenta);
						}

						jmenuItem.setEnabled(this.facturapuntoventaConstantesFunciones.activarFormaPagoPuntoVentaFacturaPuntoVenta);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"FormaPagoPuntoVenta"));

						

						this.jInternalFrameDetalleFormFacturaPuntoVenta.jmenuDetalleFacturaPuntoVenta.add(jmenuItem);

						
					}

					continue;
				}

				if(reporte.getsCodigo().equals("Detalle Factura")) {

					if(this.isTienePermisosDetalleFacturaPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarDetalleFacturaPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {
						if(Constantes.ISDEVELOPING) {
							sLabelMenu="Detalle Facturas"+"("+DetalleFacturaPuntoVentaConstantesFunciones.CLASSNAME+")";
						}

						jmenuItem = new JMenuItem(sLabelMenu);
						//jmenuItem.setMnemonic(KeyEvent.VK_S);
						//jmenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.ALT_MASK));
						jmenuItem.setActionCommand("Detalle Facturas");

						if(facturapuntoventaConstantesFunciones.resaltarDetalleFacturaPuntoVentaFacturaPuntoVenta!=null) {
							jmenuItem.setBorderPainted(true);
							jmenuItem.setBorder(facturapuntoventaConstantesFunciones.resaltarDetalleFacturaPuntoVentaFacturaPuntoVenta);
						}

						jmenuItem.setEnabled(this.facturapuntoventaConstantesFunciones.activarDetalleFacturaPuntoVentaFacturaPuntoVenta);

						jmenuItem.addActionListener (new MenuItemRelacionActionListener(this,"DetalleFacturaPuntoVenta"));

						

						this.jInternalFrameDetalleFormFacturaPuntoVenta.jmenuDetalleFacturaPuntoVenta.add(jmenuItem);

						
					}

					continue;
				}
			}
		}
	}		
	
	public void cargarCombosForeignKeyFacturaPuntoVenta(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyFacturaPuntoVenta(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyFacturaPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyFacturaPuntoVentaListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyFacturaPuntoVenta();
		
		this.cargarCombosFrameForeignKeyFacturaPuntoVenta();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyFacturaPuntoVenta();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyFacturaPuntoVenta();
		}
	}
	
	

	public void cargarCombosForeignKeyVendedor(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyVendedorListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyVendedor();
				this.cargarCombosFrameVendedorsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaVendedor(this.vendedorsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCliente(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyClienteListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCliente();
				this.cargarCombosFrameClientesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCliente(this.clientesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCaja(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCajaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCaja();
				this.cargarCombosFrameCajasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaCaja(this.cajasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoPrecio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoPrecioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoPrecio();
				this.cargarCombosFrameTipoPreciosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaTipoPrecio(this.tipopreciosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesa(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMesa();
				this.cargarCombosFrameMesasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaMesa(this.mesasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyFormato(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyFormatoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyFormato();
				this.cargarCombosFrameFormatosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaFormato(this.formatosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyTipoFacturaPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyTipoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
				this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaTipoFacturaPuntoVenta(this.tipofacturapuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoFacturaPuntoVenta(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoFacturaPuntoVentaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoFacturaPuntoVenta();
				this.cargarCombosFrameEstadoFacturaPuntoVentasForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaEstadoFacturaPuntoVenta(this.estadofacturapuntoventasForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAsientoContable(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAsientoContableListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAsientoContable();
				this.cargarCombosFrameAsientoContablesForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
					this.initActionsCombosForeignKeyCliente("Todos");
				}

			this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoFacturaPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			
			if(jTableDatosFacturaPuntoVenta.getRowCount()>=1) {
				jTableDatosFacturaPuntoVenta.removeRowSelectionInterval(0, jTableDatosFacturaPuntoVenta.getRowCount()-1);						
			}
			
			this.isEsNuevoFacturaPuntoVenta=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoFacturaPuntoVenta(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesFacturaPuntoVenta(true);			
			//this.facturapuntoventa=new FacturaPuntoVenta();
			//this.facturapuntoventa.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta() ;
			
			if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaPuntoVenta(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.facturapuntoventa);	
			this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);				
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar FacturaPuntoVenta: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarFacturaPuntoVentaActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosFacturaPuntoVenta.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosFacturaPuntoVenta.getSelectedRows().length;			
			}
			
			facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoFacturaPuntoVenta--;			
				//FacturaPuntoVenta facturapuntoventaAux= new FacturaPuntoVenta();			
				//facturapuntoventaAux.setId(this.iIdNuevoFacturaPuntoVenta);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//FacturaPuntoVenta facturapuntoventaOrigen=new FacturaPuntoVenta();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(FacturaPuntoVenta facturapuntoventaOrigen : facturapuntoventasSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							facturapuntoventaOrigen =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							facturapuntoventaOrigen =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaFacturaPuntoVenta();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.facturapuntoventa.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosFacturaPuntoVenta(facturapuntoventaOrigen,this.facturapuntoventa,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturapuntoventaLogic.getFacturaPuntoVentas().add(this.facturapuntoventaAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturapuntoventas.add(this.facturapuntoventaAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
				
				this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoFacturaPuntoVenta(), this.getIndiceNuevoFacturaPuntoVenta());
				
				int iLastRow =  this.jTableDatosFacturaPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();									
		
			FacturaPuntoVenta facturapuntoventaOrigen=new FacturaPuntoVenta();
			FacturaPuntoVenta facturapuntoventaDestino=new FacturaPuntoVenta();
				
			facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosFacturaPuntoVenta.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || facturapuntoventasSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosFacturaPuntoVenta.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaOrigen =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturapuntoventaOrigen =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						facturapuntoventaDestino =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						facturapuntoventaDestino =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				facturapuntoventaOrigen =facturapuntoventasSeleccionados.get(0);
				facturapuntoventaDestino =facturapuntoventasSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosFacturaPuntoVenta(facturapuntoventaOrigen,facturapuntoventaDestino,true,false);
				
				facturapuntoventaDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(facturapuntoventaDestino,facturapuntoventaLogic.getFacturaPuntoVentas());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(facturapuntoventaDestino,facturapuntoventas);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
				
				//this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoFacturaPuntoVenta(), this.getIndiceNuevoFacturaPuntoVenta());
				
				int iLastRow =  this.jTableDatosFacturaPuntoVenta.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosFacturaPuntoVenta.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosFacturaPuntoVenta.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesFacturaPuntoVenta.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(!isVisible);
			this.jPanelPaginacionFacturaPuntoVenta.setVisible(!isVisible);
			this.jPanelAccionesFacturaPuntoVenta.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameFacturaPuntoVenta();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoFacturaPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionFacturaPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByFacturaPuntoVenta();
			
			this.abrirFrameOrderByFacturaPuntoVenta();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByFacturaPuntoVenta();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleFacturaPuntoVenta(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaPuntoVenta);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.isMaximum()) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormFacturaPuntoVenta.setSize(this.jInternalFrameDetalleFormFacturaPuntoVenta.iWidthFormulario,this.jInternalFrameDetalleFormFacturaPuntoVenta.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormFacturaPuntoVenta.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormFacturaPuntoVenta.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormFacturaPuntoVenta.isMaximum()) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth(),FacturaPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth(),FacturaPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth(),FacturaPuntoVentaConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					

					if(DetalleFacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaDetalleFacturaPuntoVenta();
					}

					if(FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
						this.redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta();
					}
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormFacturaPuntoVenta.setVisible(true);
	        this.jInternalFrameDetalleFormFacturaPuntoVenta.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByFacturaPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByFacturaPuntoVenta==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByFacturaPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaPuntoVenta,false,this);
				} else {
					this.jInternalFrameOrderByFacturaPuntoVenta=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByFacturaPuntoVenta,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByFacturaPuntoVenta);
				this.jInternalFrameOrderByFacturaPuntoVenta.setVisible(false);
				this.jInternalFrameOrderByFacturaPuntoVenta.setSelected(false);
				
				this.jInternalFrameOrderByFacturaPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaPuntoVenta"));
				
				this.inicializarActualizarBindingTablaOrderByFacturaPuntoVenta();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionFacturaPuntoVenta() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionFacturaPuntoVenta==null) {
				
				this.jInternalFrameImportacionFacturaPuntoVenta=new ImportacionJInternalFrame(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionFacturaPuntoVenta);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionFacturaPuntoVenta);
				this.jInternalFrameImportacionFacturaPuntoVenta.setVisible(false);
				this.jInternalFrameImportacionFacturaPuntoVenta.setSelected(false);


				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaPuntoVenta"));
				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaPuntoVenta"));
				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaPuntoVenta"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoFacturaPuntoVenta() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta==null) {
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta=new ReporteDinamicoJInternalFrame(FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoFacturaPuntoVenta);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoFacturaPuntoVenta);
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setVisible(false);
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaPuntoVenta"));
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaPuntoVenta"));
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaPuntoVenta"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaPuntoVenta();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		

	public void redimensionarTablaPanelRelacionadaDetalleFacturaPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaPuntoVenta.setPreferredSize(dimension);


	}

	public void redimensionarTablaPanelRelacionadaFormaPagoPuntoVenta() {
		Dimension dimension=new Dimension();

		dimension=this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.getPreferredSize();
		dimension.setSize(this.jInternalFrameDetalleFormFacturaPuntoVenta.jContentPaneDetalleFacturaPuntoVenta.getWidth(),dimension.getHeight());

		this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setMinimumSize(dimension);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setMaximumSize(dimension);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.setPreferredSize(dimension);


	}
					
	public void cerrarFrameDetalleFacturaPuntoVenta() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormFacturaPuntoVenta);
			
	       	this.jInternalFrameDetalleFormFacturaPuntoVenta.setVisible(false);
	        this.jInternalFrameDetalleFormFacturaPuntoVenta.setSelected(false);
			
			//this.jInternalFrameDetalleFormFacturaPuntoVenta.dispose();
			//this.jInternalFrameDetalleFormFacturaPuntoVenta=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoFacturaPuntoVenta() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setVisible(true);
	        this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionFacturaPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionFacturaPuntoVenta.setVisible(true);
	        this.jInternalFrameImportacionFacturaPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByFacturaPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByFacturaPuntoVenta.setVisible(true);
	        this.jInternalFrameOrderByFacturaPuntoVenta.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByFacturaPuntoVenta() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByFacturaPuntoVenta.setVisible(false);
	        this.jInternalFrameOrderByFacturaPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoFacturaPuntoVenta() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setVisible(false);
	        this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionFacturaPuntoVenta() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionFacturaPuntoVenta.setVisible(false);
	        this.jInternalFrameImportacionFacturaPuntoVenta.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	

				public void abrirFrameTreeVendedor(String sTipoProceso) { //throws Exception
					try {
						//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
						//this.jDesktopPane.add(jInternalFrameTreeVendedor);
						VendedorBeanSwingJInternalFrame vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
						vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setsTipoProceso(sTipoProceso);

						if(sTipoProceso.equals("BUSQUEDA_FK")) {
							vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.sTipoBusqueda="Vendedor";
						}

						vendedorBeanSwingJInternalFrame.getTodosVendedorArbol();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVendedors(vendedorBeanSwingJInternalFrame.vendedorsArbol);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.CargarTreeVendedor();
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setVisible(true);
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.setSelected(true);

						//SE CAMBIA PARENT ORIGINAL PARA QUE RETORNE EN ESTE FORMULARIO
						vendedorBeanSwingJInternalFrame.jInternalFrameTreeVendedor.jInternalFrameParent=this;
						TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
						TitledBorder titledBorderVendedor=(TitledBorder)vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

						titledBorderVendedor.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Vendedor");


						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,vendedorBeanSwingJInternalFrame);
						}
						this.jDesktopPane.add(vendedorBeanSwingJInternalFrame);

					} catch (Exception e) {
						e.getStackTrace();
						//Funciones<%=getFrameworkDomain()%>.manageException(this, e,logger,<%=GetNombreClaseC(TablaBase.ToString())%>ConstantesFunciones.CLASSNAME);
					}
				}

				public void cerrarFrameTreeVendedor(VendedorBeanSwingJInternalFrame jInternalFrameTreeVendedor) throws Exception {
					try {
						//jDesktopPane.add(jInternalFrameTreeVendedor);
						jInternalFrameTreeVendedor.setVisible(false);
						jInternalFrameTreeVendedor.setSelected(false);
						//jInternalFrameTreeVendedor.dispose();
						//jInternalFrameTreeVendedor=null;
					} catch (final java.beans.PropertyVetoException e) {
						FuncionesSwing.manageException(this, e,logger);
					}
				}
	
	public void jButtonModificarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarFacturaPuntoVenta(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarFacturaPuntoVenta(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesFacturaPuntoVenta(true);
			//this.isEsNuevoFacturaPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false) ;
			
			if(facturapuntoventaSessionBean.getConGuardarRelaciones()) {
			

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado() && FormaPagoPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonFormaPagoPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.getEsGuardarRelacionado() && DetalleFacturaPuntoVentaJInternalFrame.ESTA_CARGADO_PORPARTE) {
					this.jButtonDetalleFacturaPuntoVentaActionPerformed(null,intSelectedRow,false,true,null);
				}
			}
			
			if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaPuntoVenta(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaFacturaPuntoVentaActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarFacturaPuntoVenta(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesFacturaPuntoVenta(true);
			//this.isEsNuevoFacturaPuntoVenta=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.facturapuntoventa.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false) ;
			
			if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleFacturaPuntoVenta(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
			
			if(sType.equals("Vendedor")) {
				if(!this.facturapuntoventaConstantesFunciones.cargarid_vendedorFacturaPuntoVenta) {
					this.cargarCombosVendedorsForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
					this.cargarCombosFrameVendedorsForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_vendedor (id);

				this.recargarComboTablaVendedor(this.vendedorsForeignKey);

			}
			
			if(sType.equals("Cliente")) {
				if(!this.facturapuntoventaConstantesFunciones.cargarid_clienteFacturaPuntoVenta) {
					this.cargarCombosClientesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
					this.cargarCombosFrameClientesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_cliente (id);

				this.recargarComboTablaCliente(this.clientesForeignKey);

			}
			
			if(sType.equals("AsientoContable")) {
				if(!this.facturapuntoventaConstantesFunciones.cargarid_asiento_contableFacturaPuntoVenta) {
					this.cargarCombosAsientoContablesForeignKeyLista(" where id="+id);
					//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
					this.cargarCombosFrameAsientoContablesForeignKey("Todos");
				}

				this.setCombosCodigoDesdeBusquedaid_asiento_contable (id);

				this.recargarComboTablaAsientoContable(this.asientocontablesForeignKey);

			}
		} catch(Exception e) {
			throw e;
		}
	}
	
				
	
	public void recargarComboTablaVendedor(List<Vendedor> vendedorsForeignKey)throws Exception{
		TableColumn tableColumnVendedor=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));
		TableCellEditor tableCellEditorVendedor =tableColumnVendedor.getCellEditor();

		VendedorTableCell vendedorTableCellFk=(VendedorTableCell)tableCellEditorVendedor;

		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.setvendedorsForeignKey(vendedorsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//vendedorTableCellFk.setRowActual(intSelectedRow);
			//vendedorTableCellFk.setvendedorsForeignKeyActual(vendedorsForeignKey);
		//}


		if(vendedorTableCellFk!=null) {
			vendedorTableCellFk.RecargarVendedorsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCliente(List<Cliente> clientesForeignKey)throws Exception{
		TableColumn tableColumnCliente=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));
		TableCellEditor tableCellEditorCliente =tableColumnCliente.getCellEditor();

		ClienteTableCell clienteTableCellFk=(ClienteTableCell)tableCellEditorCliente;

		if(clienteTableCellFk!=null) {
			clienteTableCellFk.setclientesForeignKey(clientesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//clienteTableCellFk.setRowActual(intSelectedRow);
			//clienteTableCellFk.setclientesForeignKeyActual(clientesForeignKey);
		//}


		if(clienteTableCellFk!=null) {
			clienteTableCellFk.RecargarClientesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCaja(List<Caja> cajasForeignKey)throws Exception{
		TableColumn tableColumnCaja=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA));
		TableCellEditor tableCellEditorCaja =tableColumnCaja.getCellEditor();

		CajaTableCell cajaTableCellFk=(CajaTableCell)tableCellEditorCaja;

		if(cajaTableCellFk!=null) {
			cajaTableCellFk.setcajasForeignKey(cajasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//cajaTableCellFk.setRowActual(intSelectedRow);
			//cajaTableCellFk.setcajasForeignKeyActual(cajasForeignKey);
		//}


		if(cajaTableCellFk!=null) {
			cajaTableCellFk.RecargarCajasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoPrecio(List<TipoPrecio> tipopreciosForeignKey)throws Exception{
		TableColumn tableColumnTipoPrecio=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));
		TableCellEditor tableCellEditorTipoPrecio =tableColumnTipoPrecio.getCellEditor();

		TipoPrecioTableCell tipoprecioTableCellFk=(TipoPrecioTableCell)tableCellEditorTipoPrecio;

		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.settipopreciosForeignKey(tipopreciosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipoprecioTableCellFk.setRowActual(intSelectedRow);
			//tipoprecioTableCellFk.settipopreciosForeignKeyActual(tipopreciosForeignKey);
		//}


		if(tipoprecioTableCellFk!=null) {
			tipoprecioTableCellFk.RecargarTipoPreciosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMesa(List<Mesa> mesasForeignKey)throws Exception{
		TableColumn tableColumnMesa=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA));
		TableCellEditor tableCellEditorMesa =tableColumnMesa.getCellEditor();

		MesaTableCell mesaTableCellFk=(MesaTableCell)tableCellEditorMesa;

		if(mesaTableCellFk!=null) {
			mesaTableCellFk.setmesasForeignKey(mesasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesaTableCellFk.setRowActual(intSelectedRow);
			//mesaTableCellFk.setmesasForeignKeyActual(mesasForeignKey);
		//}


		if(mesaTableCellFk!=null) {
			mesaTableCellFk.RecargarMesasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaFormato(List<Formato> formatosForeignKey)throws Exception{
		TableColumn tableColumnFormato=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO));
		TableCellEditor tableCellEditorFormato =tableColumnFormato.getCellEditor();

		FormatoTableCell formatoTableCellFk=(FormatoTableCell)tableCellEditorFormato;

		if(formatoTableCellFk!=null) {
			formatoTableCellFk.setformatosForeignKey(formatosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//formatoTableCellFk.setRowActual(intSelectedRow);
			//formatoTableCellFk.setformatosForeignKeyActual(formatosForeignKey);
		//}


		if(formatoTableCellFk!=null) {
			formatoTableCellFk.RecargarFormatosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaTipoFacturaPuntoVenta(List<TipoFacturaPuntoVenta> tipofacturapuntoventasForeignKey)throws Exception{
		TableColumn tableColumnTipoFacturaPuntoVenta=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA));
		TableCellEditor tableCellEditorTipoFacturaPuntoVenta =tableColumnTipoFacturaPuntoVenta.getCellEditor();

		TipoFacturaPuntoVentaTableCell tipofacturapuntoventaTableCellFk=(TipoFacturaPuntoVentaTableCell)tableCellEditorTipoFacturaPuntoVenta;

		if(tipofacturapuntoventaTableCellFk!=null) {
			tipofacturapuntoventaTableCellFk.settipofacturapuntoventasForeignKey(tipofacturapuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//tipofacturapuntoventaTableCellFk.setRowActual(intSelectedRow);
			//tipofacturapuntoventaTableCellFk.settipofacturapuntoventasForeignKeyActual(tipofacturapuntoventasForeignKey);
		//}


		if(tipofacturapuntoventaTableCellFk!=null) {
			tipofacturapuntoventaTableCellFk.RecargarTipoFacturaPuntoVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaEstadoFacturaPuntoVenta(List<EstadoFacturaPuntoVenta> estadofacturapuntoventasForeignKey)throws Exception{
		TableColumn tableColumnEstadoFacturaPuntoVenta=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA));
		TableCellEditor tableCellEditorEstadoFacturaPuntoVenta =tableColumnEstadoFacturaPuntoVenta.getCellEditor();

		EstadoFacturaPuntoVentaTableCell estadofacturapuntoventaTableCellFk=(EstadoFacturaPuntoVentaTableCell)tableCellEditorEstadoFacturaPuntoVenta;

		if(estadofacturapuntoventaTableCellFk!=null) {
			estadofacturapuntoventaTableCellFk.setestadofacturapuntoventasForeignKey(estadofacturapuntoventasForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadofacturapuntoventaTableCellFk.setRowActual(intSelectedRow);
			//estadofacturapuntoventaTableCellFk.setestadofacturapuntoventasForeignKeyActual(estadofacturapuntoventasForeignKey);
		//}


		if(estadofacturapuntoventaTableCellFk!=null) {
			estadofacturapuntoventaTableCellFk.RecargarEstadoFacturaPuntoVentasForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAsientoContable(List<AsientoContable> asientocontablesForeignKey)throws Exception{
		TableColumn tableColumnAsientoContable=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE));
		TableCellEditor tableCellEditorAsientoContable =tableColumnAsientoContable.getCellEditor();

		AsientoContableTableCell asientocontableTableCellFk=(AsientoContableTableCell)tableCellEditorAsientoContable;

		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.setasientocontablesForeignKey(asientocontablesForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();

		//if(intSelectedRow<=0) {
			//asientocontableTableCellFk.setRowActual(intSelectedRow);
			//asientocontableTableCellFk.setasientocontablesForeignKeyActual(asientocontablesForeignKey);
		//}


		if(asientocontableTableCellFk!=null) {
			asientocontableTableCellFk.RecargarAsientoContablesForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	

	public void setCombosCodigoDesdeBusquedaid_vendedor (Long id) throws Exception {
		this.setActualVendedorForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_cliente (Long id) throws Exception {
		this.setActualClienteForeignKey(id,true,"Todos");

	};
	

	public void setCombosCodigoDesdeBusquedaid_asiento_contable (Long id) throws Exception {
		this.setActualAsientoContableForeignKey(id,true,"Todos");

	};
	
	public void jButtonActualizarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesFacturaPuntoVenta(false);
			
			//if(!this.isEsNuevoFacturaPuntoVenta) {								
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				
			}
			
			if(this.permiteMantenimiento(this.facturapuntoventa)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoFacturaPuntoVenta=true;
					this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
					this.isEsNuevoFacturaPuntoVenta=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoFacturaPuntoVenta=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoFacturaPuntoVenta=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesFacturaPuntoVenta(false);
			
												
				
				if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleFacturaPuntoVenta();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoFacturaPuntoVentaActionPerformed(evt,facturapuntoventaSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualFacturaPuntoVenta(this.facturapuntoventa,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,facturapuntoventaSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.facturapuntoventa.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.facturapuntoventa.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				this.facturapuntoventa.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.facturapuntoventa)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((FacturaPuntoVentaModel) this.jTableDatosFacturaPuntoVenta.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoFacturaPuntoVenta=true;
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
				this.isEsNuevoFacturaPuntoVenta=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(false);
				
				this.habilitarDeshabilitarControlesFacturaPuntoVenta(false);
				
				
				
				if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleFacturaPuntoVenta();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosFacturaPuntoVenta.getRowCount()>=1) {
				jTableDatosFacturaPuntoVenta.removeRowSelectionInterval(0, jTableDatosFacturaPuntoVenta.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesFacturaPuntoVenta(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(false) ;
			
			this.isEsNuevoFacturaPuntoVenta=false;
			
			if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleFacturaPuntoVenta();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingFacturaPuntoVenta(false);
				
				//SI ES MANUAL
				if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualFacturaPuntoVenta();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoFacturaPuntoVenta--;			
			//FacturaPuntoVenta facturapuntoventaAux= new FacturaPuntoVenta();			
			//facturapuntoventaAux.setId(this.iIdNuevoFacturaPuntoVenta);
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaFacturaPuntoVenta();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
			
			this.facturapuntoventa.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.facturapuntoventaLogic.getFacturaPuntoVentas().add(this.facturapuntoventaAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.facturapuntoventas.add(this.facturapuntoventaAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			
			this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(this.getIndiceNuevoFacturaPuntoVenta(), this.getIndiceNuevoFacturaPuntoVenta());
			
			int iLastRow =  this.jTableDatosFacturaPuntoVenta.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosFacturaPuntoVenta.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosFacturaPuntoVenta.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
			
			//SI ES MANUAL
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaPuntoVenta();
			}
			
			//this.abrirFrameTreeFacturaPuntoVenta();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Factura Punto VentaS ?", "MANTENIMIENTO DE Factura Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionFacturaPuntoVenta.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralFacturaPuntoVenta();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.facturapuntoventaReturnGeneral=facturapuntoventaLogic.procesarImportacionFacturaPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.facturapuntoventaParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarFacturaPuntoVentaReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionFacturaPuntoVenta.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionFacturaPuntoVenta.setFileImportacion(this.jInternalFrameImportacionFacturaPuntoVenta.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionFacturaPuntoVenta.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionFacturaPuntoVenta.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionFacturaPuntoVenta.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionFacturaPuntoVenta.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		

		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("FacturaPuntoVentaBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"FacturaPuntoVentaBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Vendedor_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Vendedor_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Vendedor_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Vendedor_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Cliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Cliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Cliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Cliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Caja_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Caja_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Caja_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Caja_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoPrecio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoPrecio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoPrecio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoPrecio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mesa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mesa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mesa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mesa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Formato_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Formato_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Formato_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Formato_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_TipoFacturaPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_TipoFacturaPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_TipoFacturaPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_TipoFacturaPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoFacturaPuntoVenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoFacturaPuntoVenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoFacturaPuntoVenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoFacturaPuntoVenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_AsientoContable_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_AsientoContable_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_AsientoContable_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_AsientoContable_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_meroSecuencial_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_meroSecuencial_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_meroSecuencial_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_meroSecuencial_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_digoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_digoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_digoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_digoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_mbreCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_mbreCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_mbreCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_mbreCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rjetaCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rjetaCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rjetaCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rjetaCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_reccionCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_reccionCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_reccionCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_reccionCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lefonoCliente_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lefonoCliente_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lefonoCliente_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lefonoCliente_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_HORA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ra_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ra_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ra_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ra_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talSinIva_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talSinIva_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talSinIva_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talSinIva_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IVA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_scuento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_scuento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_scuento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_scuento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_nanciamiento_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_nanciamiento_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_nanciamiento_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_nanciamiento_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FLETE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ete_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ete_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ete_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ete_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_ICE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_e_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_e_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_e_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_e_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_OTROS:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_ros_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_ros_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_ros_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_ros_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_bTotal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_bTotal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_bTotal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_bTotal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_tal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_tal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_tal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_tal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoria="id_vendedor";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoria="id_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoria="id_caja";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoria="id_tipo_precio";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoria="id_mesa";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoria="id_formato";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					sNombreCampoCategoria="id_tipo_factura_punto_venta";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA:
					sNombreCampoCategoria="id_estado_factura_punto_venta";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoria="id_asiento_contable";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoria="numero_secuencial";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoria="codigo_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoria="nombre_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoria="tarjeta_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoria="direccion_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoria="telefono_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoria="hora";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoria="total_iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoria="total_sin_iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoria="iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoria="descuento";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoria="financiamiento";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoria="flete";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoria="ice";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_OTROS:
					sNombreCampoCategoria="otros";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoria="sub_total";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoria="total";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					sNombreCampoCategoriaValor="id_vendedor";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					sNombreCampoCategoriaValor="id_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					sNombreCampoCategoriaValor="id_caja";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					sNombreCampoCategoriaValor="id_tipo_precio";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA:
					sNombreCampoCategoriaValor="id_mesa";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					sNombreCampoCategoriaValor="id_formato";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					sNombreCampoCategoriaValor="id_tipo_factura_punto_venta";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA:
					sNombreCampoCategoriaValor="id_estado_factura_punto_venta";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					sNombreCampoCategoriaValor="id_asiento_contable";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					sNombreCampoCategoriaValor="numero_secuencial";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					sNombreCampoCategoriaValor="codigo_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					sNombreCampoCategoriaValor="nombre_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					sNombreCampoCategoriaValor="tarjeta_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					sNombreCampoCategoriaValor="direccion_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					sNombreCampoCategoriaValor="telefono_cliente";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_HORA:
					sNombreCampoCategoriaValor="hora";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					sNombreCampoCategoriaValor="total_iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					sNombreCampoCategoriaValor="total_sin_iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IVA:
					sNombreCampoCategoriaValor="iva";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					sNombreCampoCategoriaValor="descuento";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					sNombreCampoCategoriaValor="financiamiento";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FLETE:
					sNombreCampoCategoriaValor="flete";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_ICE:
					sNombreCampoCategoriaValor="ice";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_OTROS:
					sNombreCampoCategoriaValor="otros";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					sNombreCampoCategoriaValor="sub_total";
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL:
					sNombreCampoCategoriaValor="total";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Vendedor",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_vendedor");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Caja",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_caja");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo Precio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_precio");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mesa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mesa");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Formato",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_formato");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tipo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_tipo_factura_punto_venta");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_factura_punto_venta");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Asiento C",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_asiento_contable");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"No Secuencial",sNombreCampoCategoria,sNombreCampoCategoriaValor,"numero_secuencial");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Codigo Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"codigo_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Nombre Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"nombre_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Tarjeta Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"tarjeta_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Direccion Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"direccion_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Telefono Cliente",sNombreCampoCategoria,sNombreCampoCategoriaValor,"telefono_cliente");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_HORA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Hora",sNombreCampoCategoria,sNombreCampoCategoriaValor,"hora");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_iva");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Sin Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_sin_iva");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IVA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Iva",sNombreCampoCategoria,sNombreCampoCategoriaValor,"iva");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Descuento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"descuento");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Financiamiento",sNombreCampoCategoria,sNombreCampoCategoriaValor,"financiamiento");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FLETE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Flete",sNombreCampoCategoria,sNombreCampoCategoriaValor,"flete");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_ICE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ice",sNombreCampoCategoria,sNombreCampoCategoriaValor,"ice");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_OTROS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Otros",sNombreCampoCategoria,sNombreCampoCategoriaValor,"otros");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sub Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"sub_total");
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("FacturaPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getvendedor_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getcliente_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getcaja_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettipoprecio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getmesa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getformato_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettipofacturapuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getestadofacturapuntoventa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getasientocontable_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getnumero_secuencial());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getcodigo_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getnombre_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettarjeta_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getdireccion_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettelefono_cliente());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_HORA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_HORA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gethora());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettotal_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettotal_sin_iva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_IVA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IVA);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getiva());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getdescuento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getfinanciamiento());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_FLETE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getflete());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_ICE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_ICE);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getice());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_OTROS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getotros());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.getsub_total());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL);
					iRow++;

					for(FacturaPuntoVenta facturapuntoventa:facturapuntoventasSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(facturapuntoventa.gettotal());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelFacturaPuntoVenta(row);				
			//	iRow++;
			//}				
			
			//for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelFacturaPuntoVenta(facturapuntoventaAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
			
			//SI ES MANUAL
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualFacturaPuntoVenta();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
			
			//SI ES MANUAL
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaPuntoVenta();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
			
			//SI ES MANUAL
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualFacturaPuntoVenta();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaFacturaPuntoVenta() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosFacturaPuntoVenta.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosFacturaPuntoVenta.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosFacturaPuntoVenta.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosFacturaPuntoVenta.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosFacturaPuntoVenta.setMinimumSize(dimensionMinimum);
		this.jTableDatosFacturaPuntoVenta.setMaximumSize(dimensionMaximum);
		this.jTableDatosFacturaPuntoVenta.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingFacturaPuntoVenta(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingFacturaPuntoVenta(esInicializar,true);
	}
	
	public void inicializarActualizarBindingFacturaPuntoVenta(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaFacturaPuntoVenta(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesFacturaPuntoVenta(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasFacturaPuntoVenta(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaPuntoVenta(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesFacturaPuntoVenta(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualFacturaPuntoVenta() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaFacturaPuntoVenta();
		
		this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaPuntoVenta();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesFacturaPuntoVenta() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaPuntoVenta(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaPuntoVenta(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosFacturaPuntoVenta.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosFacturaPuntoVenta.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteFacturaPuntoVenta.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionNuevoFacturaPuntoVenta.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionSinCerrarFacturaPuntoVenta.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionSinMensajeFacturaPuntoVenta.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosFacturaPuntoVenta.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosFacturaPuntoVenta.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteFacturaPuntoVenta.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionNuevoFacturaPuntoVenta.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionSinCerrarFacturaPuntoVenta.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jCheckBoxPostAccionSinMensajeFacturaPuntoVenta.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionFacturaPuntoVenta.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionFacturaPuntoVenta.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesFacturaPuntoVenta.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesFacturaPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesFacturaPuntoVenta.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarFacturaPuntoVenta.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesFacturaPuntoVenta.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesFacturaPuntoVenta.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralFacturaPuntoVenta.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesFacturaPuntoVenta(Boolean esInicializar) throws Exception {
		try	{	
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualFacturaPuntoVenta(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesFacturaPuntoVenta() throws Exception {
		try	{
			if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaPuntoVenta();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaPuntoVenta() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFacturaPuntoVenta() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesFacturaPuntoVenta.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesFacturaPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesFacturaPuntoVenta.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionFacturaPuntoVenta.addItem(reporte);
			}
			
			
			if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionFacturaPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionFacturaPuntoVenta.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesFacturaPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesFacturaPuntoVenta.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarFacturaPuntoVenta.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarFacturaPuntoVenta.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarFacturaPuntoVenta.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaPuntoVenta();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualFacturaPuntoVenta() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
				
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=FacturaPuntoVentaConstantesFunciones.getTiposSeleccionarFacturaPuntoVenta(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=FacturaPuntoVentaConstantesFunciones.getTiposSeleccionarFacturaPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=FacturaPuntoVentaConstantesFunciones.getTiposSeleccionarFacturaPuntoVenta(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualFacturaPuntoVenta()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.getSelectedItem()!=null){this.id_asiento_contableFK_IdAsientoContable=((AsientoContable)this.jComboBoxid_asiento_contableFK_IdAsientoContableFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.getSelectedItem()!=null){this.id_cajaFK_IdCaja=((Caja)this.jComboBoxid_cajaFK_IdCajaFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.getSelectedItem()!=null){this.id_clienteFK_IdCliente=((Cliente)this.jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.getSelectedItem()!=null){this.id_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta=((EstadoFacturaPuntoVenta)this.jComboBoxid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.getSelectedItem()!=null){this.id_formatoFK_IdFormato=((Formato)this.jComboBoxid_formatoFK_IdFormatoFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.getSelectedItem()!=null){this.id_mesaFK_IdMesa=((Mesa)this.jComboBoxid_mesaFK_IdMesaFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.getSelectedItem()!=null){this.id_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta=((TipoFacturaPuntoVenta)this.jComboBoxid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.getSelectedItem()!=null){this.id_tipo_precioFK_IdTipoPrecio=((TipoPrecio)this.jComboBoxid_tipo_precioFK_IdTipoPrecioFacturaPuntoVenta.getSelectedItem()).getId();}
		if(this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.getSelectedItem()!=null){this.id_vendedorFK_IdVendedor=((Vendedor)this.jComboBoxid_vendedorFK_IdVendedorFacturaPuntoVenta.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasFacturaPuntoVenta(Boolean esInicializar) throws Exception {				
		if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualFacturaPuntoVenta();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaFacturaPuntoVenta() throws Exception {
		this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByFacturaPuntoVenta() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosFacturaPuntoVentaOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVentaOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaFacturaPuntoVenta(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=facturapuntoventaLogic.getFacturaPuntoVentas().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=facturapuntoventas.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosFacturaPuntoVenta.setModel(new FacturaPuntoVentaModel(this.facturapuntoventaLogic.getFacturaPuntoVentas(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosFacturaPuntoVenta.setModel(new FacturaPuntoVentaModel(this.facturapuntoventas,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByFacturaPuntoVenta!=null && this.jInternalFrameOrderByFacturaPuntoVenta.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByFacturaPuntoVenta();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO,facturapuntoventaConstantesFunciones.resaltarSeleccionarFacturaPuntoVenta,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+FacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO,facturapuntoventaConstantesFunciones.resaltarSeleccionarFacturaPuntoVenta,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_ID));

		if(this.facturapuntoventaConstantesFunciones.mostraridFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltaridFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activaridFacturaPuntoVenta,iSizeTabla,this,true,"idFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltaridFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activaridFacturaPuntoVenta,this,true,"idFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_empresaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_empresaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_empresaFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_empresaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_empresaFacturaPuntoVenta,false,"id_empresaFacturaPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_sucursalFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_sucursalFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_sucursalFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_sucursalFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_sucursalFacturaPuntoVenta,false,"id_sucursalFacturaPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_usuarioFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_usuarioFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_usuarioFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_usuarioFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_usuarioFacturaPuntoVenta,false,"id_usuarioFacturaPuntoVenta","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_vendedorFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new VendedorTableCell(this.vendedorsForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_vendedorFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_vendedorFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new VendedorTableCell(this.vendedorsForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_vendedorFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_vendedorFacturaPuntoVenta,true,"id_vendedorFacturaPuntoVenta","CON_BUSQUEDA"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new ClienteTableCell(this.clientesForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_clienteFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_clienteFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new ClienteTableCell(this.clientesForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_clienteFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_clienteFacturaPuntoVenta,true,"id_clienteFacturaPuntoVenta","CON_BUSQUEDA-CON_EVENT_CHANGE"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,75);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_cajaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CajaTableCell(this.cajasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_cajaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_cajaFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new CajaTableCell(this.cajasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_cajaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_cajaFacturaPuntoVenta,true,"id_cajaFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_precioFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_tipo_precioFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_tipo_precioFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new TipoPrecioTableCell(this.tipopreciosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_tipo_precioFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_tipo_precioFacturaPuntoVenta,true,"id_tipo_precioFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_mesaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesaTableCell(this.mesasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_mesaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_mesaFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new MesaTableCell(this.mesasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_mesaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_mesaFacturaPuntoVenta,true,"id_mesaFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_formatoFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new FormatoTableCell(this.formatosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_formatoFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_formatoFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new FormatoTableCell(this.formatosForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_formatoFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_formatoFacturaPuntoVenta,true,"id_formatoFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new TipoFacturaPuntoVentaTableCell(this.tipofacturapuntoventasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new TipoFacturaPuntoVentaTableCell(this.tipofacturapuntoventasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaFacturaPuntoVenta,true,"id_tipo_factura_punto_ventaFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA));

		if(this.facturapuntoventaConstantesFunciones.mostrarid_estado_factura_punto_ventaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoFacturaPuntoVentaTableCell(this.estadofacturapuntoventasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_estado_factura_punto_ventaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_estado_factura_punto_ventaFacturaPuntoVenta,iSizeTabla));
			tableColumn.setCellEditor(new EstadoFacturaPuntoVentaTableCell(this.estadofacturapuntoventasForeignKey,this.facturapuntoventaConstantesFunciones.resaltarid_estado_factura_punto_ventaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarid_estado_factura_punto_ventaFacturaPuntoVenta,true,"id_estado_factura_punto_ventaFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL));

		if(this.facturapuntoventaConstantesFunciones.mostrarnumero_secuencialFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltarnumero_secuencialFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarnumero_secuencialFacturaPuntoVenta,iSizeTabla,this,true,"numero_secuencialFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarnumero_secuencialFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarnumero_secuencialFacturaPuntoVenta,this,true,"numero_secuencialFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrarcodigo_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltarcodigo_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarcodigo_clienteFacturaPuntoVenta,iSizeTabla,this,true,"codigo_clienteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarcodigo_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarcodigo_clienteFacturaPuntoVenta,this,true,"codigo_clienteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrarnombre_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltarnombre_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarnombre_clienteFacturaPuntoVenta,iSizeTabla,this,true,"nombre_clienteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarnombre_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarnombre_clienteFacturaPuntoVenta,this,true,"nombre_clienteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrartarjeta_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltartarjeta_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartarjeta_clienteFacturaPuntoVenta,iSizeTabla,this,true,"tarjeta_clienteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltartarjeta_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartarjeta_clienteFacturaPuntoVenta,this,true,"tarjeta_clienteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrardireccion_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltardireccion_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activardireccion_clienteFacturaPuntoVenta,iSizeTabla,this,true,"direccion_clienteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltardireccion_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activardireccion_clienteFacturaPuntoVenta,this,true,"direccion_clienteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE));

		if(this.facturapuntoventaConstantesFunciones.mostrartelefono_clienteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new LabelRenderer(this.facturapuntoventaConstantesFunciones.resaltartelefono_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartelefono_clienteFacturaPuntoVenta,iSizeTabla,this,true,"telefono_clienteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltartelefono_clienteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartelefono_clienteFacturaPuntoVenta,this,true,"telefono_clienteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_FECHA));

		if(this.facturapuntoventaConstantesFunciones.mostrarfechaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.facturapuntoventaConstantesFunciones.resaltarfechaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfechaFacturaPuntoVenta,iSizeTabla,this,true,"fechaFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarfechaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfechaFacturaPuntoVenta,this,true,"fechaFacturaPuntoVenta","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_HORA));

		if(this.facturapuntoventaConstantesFunciones.mostrarhoraFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_HORA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TimeRenderer(this.facturapuntoventaConstantesFunciones.resaltarhoraFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarhoraFacturaPuntoVenta,iSizeTabla,this,true,"horaFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TimeEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarhoraFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarhoraFacturaPuntoVenta,iSizeTabla,this,true,"horaFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA));

		if(this.facturapuntoventaConstantesFunciones.mostrartotal_ivaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltartotal_ivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotal_ivaFacturaPuntoVenta,iSizeTabla,this,true,"total_ivaFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltartotal_ivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotal_ivaFacturaPuntoVenta,this,true,"total_ivaFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA));

		if(this.facturapuntoventaConstantesFunciones.mostrartotal_sin_ivaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltartotal_sin_ivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotal_sin_ivaFacturaPuntoVenta,iSizeTabla,this,true,"total_sin_ivaFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltartotal_sin_ivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotal_sin_ivaFacturaPuntoVenta,this,true,"total_sin_ivaFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_IVA));

		if(this.facturapuntoventaConstantesFunciones.mostrarivaFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_IVA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltarivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarivaFacturaPuntoVenta,iSizeTabla,this,true,"ivaFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarivaFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarivaFacturaPuntoVenta,this,true,"ivaFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO));

		if(this.facturapuntoventaConstantesFunciones.mostrardescuentoFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltardescuentoFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activardescuentoFacturaPuntoVenta,iSizeTabla,this,true,"descuentoFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltardescuentoFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activardescuentoFacturaPuntoVenta,this,true,"descuentoFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO));

		if(this.facturapuntoventaConstantesFunciones.mostrarfinanciamientoFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltarfinanciamientoFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfinanciamientoFacturaPuntoVenta,iSizeTabla,this,true,"financiamientoFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarfinanciamientoFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfinanciamientoFacturaPuntoVenta,this,true,"financiamientoFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_FLETE));

		if(this.facturapuntoventaConstantesFunciones.mostrarfleteFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_FLETE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltarfleteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfleteFacturaPuntoVenta,iSizeTabla,this,true,"fleteFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarfleteFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarfleteFacturaPuntoVenta,this,true,"fleteFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_ICE));

		if(this.facturapuntoventaConstantesFunciones.mostrariceFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_ICE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltariceFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activariceFacturaPuntoVenta,iSizeTabla,this,true,"iceFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltariceFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activariceFacturaPuntoVenta,this,true,"iceFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_OTROS));

		if(this.facturapuntoventaConstantesFunciones.mostrarotrosFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_OTROS,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltarotrosFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarotrosFacturaPuntoVenta,iSizeTabla,this,true,"otrosFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarotrosFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarotrosFacturaPuntoVenta,this,true,"otrosFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL));

		if(this.facturapuntoventaConstantesFunciones.mostrarsub_totalFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltarsub_totalFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarsub_totalFacturaPuntoVenta,iSizeTabla,this,true,"sub_totalFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltarsub_totalFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activarsub_totalFacturaPuntoVenta,this,true,"sub_totalFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL));

		if(this.facturapuntoventaConstantesFunciones.mostrartotalFacturaPuntoVenta && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.facturapuntoventaConstantesFunciones.resaltartotalFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotalFacturaPuntoVenta,iSizeTabla,this,true,"totalFacturaPuntoVenta","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.facturapuntoventaConstantesFunciones.resaltartotalFacturaPuntoVenta,this.facturapuntoventaConstantesFunciones.activartotalFacturaPuntoVenta,this,true,"totalFacturaPuntoVenta","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new FacturaPuntoVentaPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			

			if(this.isTienePermisosFormaPagoPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarFormaPagoPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Forma Pagoes");
				tableColumn.setHeaderValue("Forma Pagoes");
				tableColumn.setCellRenderer(new FormaPagoPuntoVentaTableCell(facturapuntoventaConstantesFunciones.resaltarFormaPagoPuntoVentaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarFormaPagoPuntoVentaFacturaPuntoVenta));
				tableColumn.setCellEditor(new FormaPagoPuntoVentaTableCell(facturapuntoventaConstantesFunciones.resaltarFormaPagoPuntoVentaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarFormaPagoPuntoVentaFacturaPuntoVenta));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
			}

			if(this.isTienePermisosDetalleFacturaPuntoVenta && this.facturapuntoventaConstantesFunciones.mostrarDetalleFacturaPuntoVentaFacturaPuntoVenta && !FacturaPuntoVentaConstantesFunciones.ISGUARDARREL) {
				tableColumn= new TableColumn();
				tableColumn.setIdentifier("Detalle Facturas");
				tableColumn.setHeaderValue("Detalle Facturas");
				tableColumn.setCellRenderer(new DetalleFacturaPuntoVentaTableCell(facturapuntoventaConstantesFunciones.resaltarDetalleFacturaPuntoVentaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarDetalleFacturaPuntoVentaFacturaPuntoVenta));
				tableColumn.setCellEditor(new DetalleFacturaPuntoVentaTableCell(facturapuntoventaConstantesFunciones.resaltarDetalleFacturaPuntoVentaFacturaPuntoVenta,this,this.facturapuntoventaConstantesFunciones.activarDetalleFacturaPuntoVentaFacturaPuntoVenta));

				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_CONTROL + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);

				this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
			}
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				//tableColumn= new TableColumn();
				//tableColumn.setIdentifier(sLabelColumnAccion);
				//tableColumn.setHeaderValue(sLabelColumnAccion);
				//tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				//tableColumn.setCellEditor(new IdTableCell(this,false,false,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				//tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				//tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				//tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				//this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				//this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta) {
					//tableColumn= new TableColumn();
					//tableColumn.setIdentifier(Constantes2.S_ELI);
					//tableColumn.setHeaderValue(sLabelColumnAccionEli);
					//tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					//tableColumn.setCellEditor(new IdTableCell(this,false,true,this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					//tableColumn.setPreferredWidth(65); 	 
					//tableColumn.setWidth(65); 	 
					//tableColumn.setMinWidth(65); 
					//tableColumn.setMaxWidth(65);
					
					//this.iWidthTableDefinicion+=65;
						
					//this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
				}
			}			
						
			if(this.conMaximoRelaciones && this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				if(this.conFuncionalidadRelaciones) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier("Editar Rel");
					tableColumn.setHeaderValue("Editar Rel");
					tableColumn.setCellRenderer(new IdTableCell(this,true,false,iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,true,false,iSizeTabla));
		
					tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
					tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
					
					this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
					this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
				}
			}
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosFacturaPuntoVenta.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta) {
				//iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		//iUltimaColumna++;	
		
				
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {			
				//PERMITE EDITAR RELACIONES
				iUltimaColumna++;//2
			}
		}
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta) {
				////REUBICA ELIMINAR SIMPLE
				//jTableDatosFacturaPuntoVenta.moveColumn(this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				//iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		//jTableDatosFacturaPuntoVenta.moveColumn(this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		if(this.conFuncionalidadRelaciones) {
			if(this.conMaximoRelaciones && this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {	
				if(iUltimaColumna>1) {
					iUltimaColumna--;
				}
				
				//iNuevaPosicionColumna++;
				
				//REUBICA EDITAR RELACIONES
				jTableDatosFacturaPuntoVenta.moveColumn(this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1
			}
		}
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosFacturaPuntoVenta.moveColumn(this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosFacturaPuntoVenta.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosFacturaPuntoVenta.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosFacturaPuntoVenta,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosFacturaPuntoVenta.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosFacturaPuntoVenta.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosFacturaPuntoVenta.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=facturapuntoventaLogic.getFacturaPuntoVentas().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=facturapuntoventas.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosFacturaPuntoVenta.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosFacturaPuntoVenta.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosFacturaPuntoVenta();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoFacturaPuntoVenta=false;
					
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.facturapuntoventa.getsType().equals("DUPLICADO")
				   || this.facturapuntoventa.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoFacturaPuntoVenta=true;
				
				} else {
					this.isEsNuevoFacturaPuntoVenta=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					if(this.facturapuntoventa.getId()>=0 && !this.facturapuntoventa.getIsNew()) {						
						this.isEsNuevoFacturaPuntoVenta=false;
						
					} else {
						this.isEsNuevoFacturaPuntoVenta=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoFacturaPuntoVenta(esRelaciones);						
				
				this.seleccionarFacturaPuntoVenta(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.facturapuntoventa.getId()<0) {
					this.isEsNuevoFacturaPuntoVenta=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarFacturaPuntoVenta(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarFacturaPuntoVenta(evt,rowIndex);
				}	
				
				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion FacturaPuntoVenta: " + this.dDif); 
					}
				}								
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarFacturaPuntoVenta(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.facturapuntoventa)) {
					if(this.facturapuntoventa.getId()>0) {
						this.facturapuntoventa.setIsDeleted(true);
						
						this.facturapuntoventasEliminados.add(this.facturapuntoventa);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.facturapuntoventaLogic.getFacturaPuntoVentas().remove(this.facturapuntoventa);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.facturapuntoventas.remove(this.facturapuntoventa);				
					}
					
					
					((FacturaPuntoVentaModel) this.jTableDatosFacturaPuntoVenta.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarFacturaPuntoVenta(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoFacturaPuntoVenta) {
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosFacturaPuntoVenta.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosFacturaPuntoVenta.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventa);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.facturapuntoventaConstantesFunciones.cargarid_empresaFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_empresaFacturaPuntoVenta) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.facturapuntoventa.getid_empresa());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(facturapuntoventa.getEmpresa()!=null) {
							this.empresasForeignKey.add(facturapuntoventa.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.facturapuntoventa.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.facturapuntoventaConstantesFunciones.cargarid_sucursalFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_sucursalFacturaPuntoVenta) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.facturapuntoventa.getid_sucursal());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(facturapuntoventa.getSucursal()!=null) {
							this.sucursalsForeignKey.add(facturapuntoventa.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.facturapuntoventa.getid_sucursal(),false,"Formulario");

					//Usuario
					if(!this.facturapuntoventaConstantesFunciones.cargarid_usuarioFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_usuarioFacturaPuntoVenta) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.facturapuntoventa.getid_usuario());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(facturapuntoventa.getUsuario()!=null) {
							this.usuariosForeignKey.add(facturapuntoventa.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.facturapuntoventa.getid_usuario(),false,"Formulario");

					//Vendedor
					if(!this.facturapuntoventaConstantesFunciones.cargarid_vendedorFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_vendedorFacturaPuntoVenta) {
						//this.cargarCombosVendedorsForeignKeyLista(" where id="+this.facturapuntoventa.getid_vendedor());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.vendedorsForeignKey=new ArrayList<Vendedor>();

						if(facturapuntoventa.getVendedor()!=null) {
							this.vendedorsForeignKey.add(facturapuntoventa.getVendedor());
						}

						this.addItemDefectoCombosForeignKeyVendedor();
						this.cargarCombosFrameVendedorsForeignKey("Todos");
					}
					this.setActualVendedorForeignKey(this.facturapuntoventa.getid_vendedor(),false,"Formulario");

					//Cliente
					if(!this.facturapuntoventaConstantesFunciones.cargarid_clienteFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_clienteFacturaPuntoVenta) {
						//this.cargarCombosClientesForeignKeyLista(" where id="+this.facturapuntoventa.getid_cliente());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.clientesForeignKey=new ArrayList<Cliente>();

						if(facturapuntoventa.getCliente()!=null) {
							this.clientesForeignKey.add(facturapuntoventa.getCliente());
						}

						this.addItemDefectoCombosForeignKeyCliente();
						this.cargarCombosFrameClientesForeignKey("Todos");
					}
					this.setActualClienteForeignKey(this.facturapuntoventa.getid_cliente(),false,"Formulario");

					//Caja
					if(!this.facturapuntoventaConstantesFunciones.cargarid_cajaFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_cajaFacturaPuntoVenta) {
						//this.cargarCombosCajasForeignKeyLista(" where id="+this.facturapuntoventa.getid_caja());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.cajasForeignKey=new ArrayList<Caja>();

						if(facturapuntoventa.getCaja()!=null) {
							this.cajasForeignKey.add(facturapuntoventa.getCaja());
						}

						this.addItemDefectoCombosForeignKeyCaja();
						this.cargarCombosFrameCajasForeignKey("Todos");
					}
					this.setActualCajaForeignKey(this.facturapuntoventa.getid_caja(),false,"Formulario");

					//TipoPrecio
					if(!this.facturapuntoventaConstantesFunciones.cargarid_tipo_precioFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_tipo_precioFacturaPuntoVenta) {
						//this.cargarCombosTipoPreciosForeignKeyLista(" where id="+this.facturapuntoventa.getid_tipo_precio());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.tipopreciosForeignKey=new ArrayList<TipoPrecio>();

						if(facturapuntoventa.getTipoPrecio()!=null) {
							this.tipopreciosForeignKey.add(facturapuntoventa.getTipoPrecio());
						}

						this.addItemDefectoCombosForeignKeyTipoPrecio();
						this.cargarCombosFrameTipoPreciosForeignKey("Todos");
					}
					this.setActualTipoPrecioForeignKey(this.facturapuntoventa.getid_tipo_precio(),false,"Formulario");

					//Mesa
					if(!this.facturapuntoventaConstantesFunciones.cargarid_mesaFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_mesaFacturaPuntoVenta) {
						//this.cargarCombosMesasForeignKeyLista(" where id="+this.facturapuntoventa.getid_mesa());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.mesasForeignKey=new ArrayList<Mesa>();

						if(facturapuntoventa.getMesa()!=null) {
							this.mesasForeignKey.add(facturapuntoventa.getMesa());
						}

						this.addItemDefectoCombosForeignKeyMesa();
						this.cargarCombosFrameMesasForeignKey("Todos");
					}
					this.setActualMesaForeignKey(this.facturapuntoventa.getid_mesa(),false,"Formulario");

					//Formato
					if(!this.facturapuntoventaConstantesFunciones.cargarid_formatoFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_formatoFacturaPuntoVenta) {
						//this.cargarCombosFormatosForeignKeyLista(" where id="+this.facturapuntoventa.getid_formato());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.formatosForeignKey=new ArrayList<Formato>();

						if(facturapuntoventa.getFormato()!=null) {
							this.formatosForeignKey.add(facturapuntoventa.getFormato());
						}

						this.addItemDefectoCombosForeignKeyFormato();
						this.cargarCombosFrameFormatosForeignKey("Todos");
					}
					this.setActualFormatoForeignKey(this.facturapuntoventa.getid_formato(),false,"Formulario");

					//TipoFacturaPuntoVenta
					if(!this.facturapuntoventaConstantesFunciones.cargarid_tipo_factura_punto_ventaFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_tipo_factura_punto_ventaFacturaPuntoVenta) {
						//this.cargarCombosTipoFacturaPuntoVentasForeignKeyLista(" where id="+this.facturapuntoventa.getid_tipo_factura_punto_venta());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.tipofacturapuntoventasForeignKey=new ArrayList<TipoFacturaPuntoVenta>();

						if(facturapuntoventa.getTipoFacturaPuntoVenta()!=null) {
							this.tipofacturapuntoventasForeignKey.add(facturapuntoventa.getTipoFacturaPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyTipoFacturaPuntoVenta();
						this.cargarCombosFrameTipoFacturaPuntoVentasForeignKey("Todos");
					}
					this.setActualTipoFacturaPuntoVentaForeignKey(this.facturapuntoventa.getid_tipo_factura_punto_venta(),false,"Formulario");

					//EstadoFacturaPuntoVenta
					if(!this.facturapuntoventaConstantesFunciones.cargarid_estado_factura_punto_ventaFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_estado_factura_punto_ventaFacturaPuntoVenta) {
						//this.cargarCombosEstadoFacturaPuntoVentasForeignKeyLista(" where id="+this.facturapuntoventa.getid_estado_factura_punto_venta());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.estadofacturapuntoventasForeignKey=new ArrayList<EstadoFacturaPuntoVenta>();

						if(facturapuntoventa.getEstadoFacturaPuntoVenta()!=null) {
							this.estadofacturapuntoventasForeignKey.add(facturapuntoventa.getEstadoFacturaPuntoVenta());
						}

						this.addItemDefectoCombosForeignKeyEstadoFacturaPuntoVenta();
						this.cargarCombosFrameEstadoFacturaPuntoVentasForeignKey("Todos");
					}
					this.setActualEstadoFacturaPuntoVentaForeignKey(this.facturapuntoventa.getid_estado_factura_punto_venta(),false,"Formulario");

					//AsientoContable
					if(!this.facturapuntoventaConstantesFunciones.cargarid_asiento_contableFacturaPuntoVenta || this.facturapuntoventaConstantesFunciones.event_dependid_asiento_contableFacturaPuntoVenta) {
						//this.cargarCombosAsientoContablesForeignKeyLista(" where id="+this.facturapuntoventa.getid_asiento_contable());
									//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
						this.asientocontablesForeignKey=new ArrayList<AsientoContable>();

						if(facturapuntoventa.getAsientoContable()!=null) {
							this.asientocontablesForeignKey.add(facturapuntoventa.getAsientoContable());
						}

						this.addItemDefectoCombosForeignKeyAsientoContable();
						this.cargarCombosFrameAsientoContablesForeignKey("Todos");
					}
					this.setActualAsientoContableForeignKey(this.facturapuntoventa.getid_asiento_contable(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesFacturaPuntoVenta("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesFacturaPuntoVenta(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoFacturaPuntoVenta(facturapuntoventa,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioFacturaPuntoVenta(facturapuntoventa);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyFacturaPuntoVenta(facturapuntoventa,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyFacturaPuntoVenta(facturapuntoventa);
	}
	
	public void setVariablesObjetoActualToFormularioFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setText(facturapuntoventa.getId().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setText(facturapuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setText(facturapuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setText(facturapuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setText(facturapuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setText(facturapuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setText(facturapuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setDate(facturapuntoventa.getfecha());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setValue(facturapuntoventa.gethora());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setText(facturapuntoventa.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setText(facturapuntoventa.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setText(facturapuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setText(facturapuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setText(facturapuntoventa.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setText(facturapuntoventa.getflete().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setText(facturapuntoventa.getice().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setText(facturapuntoventa.getotros().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setText(facturapuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setText(facturapuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,FacturaPuntoVenta facturapuntoventaLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,facturapuntoventaLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,FacturaPuntoVenta facturapuntoventaLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				facturapuntoventaLocal=this.facturapuntoventa;
			} else {
				facturapuntoventaLocal=this.facturapuntoventaAnterior;
			}
		}
		
		if(this.permiteMantenimiento(facturapuntoventaLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoFacturaPuntoVenta(facturapuntoventaLocal,true);
					
					if(facturapuntoventaSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(facturapuntoventaLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(facturapuntoventaLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(facturapuntoventa,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(facturapuntoventa);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(facturapuntoventa,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.getText()==null || this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.getText()=="" || this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.getText()=="Id") {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setText("0");
			}

			if(conColumnasBase) {facturapuntoventa.setId(Long.parseLong(this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelIdFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setnumero_secuencial(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnumero_secuencialFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setcodigo_cliente(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelcodigo_clienteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setnombre_cliente(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelnombre_clienteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.settarjeta_cliente(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltarjeta_clienteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setdireccion_cliente(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldireccion_clienteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.settelefono_cliente(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.getText());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltelefono_clienteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setfecha(this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfechaFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.sethora(new Time(((Date)this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.getValue()).getTime()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_HORA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelhoraFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.settotal_iva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_ivaFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.settotal_sin_iva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotal_sin_ivaFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setiva(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_IVA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelivaFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setdescuento(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeldescuentoFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setfinanciamiento(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfinanciamientoFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setflete(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_FLETE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelfleteFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setice(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_ICE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeliceFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setotros(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_OTROS+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelotrosFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.setsub_total(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelsub_totalFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			facturapuntoventa.settotal(Double.parseDouble(this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabeltotalFacturaPuntoVenta,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventaBean,FacturaPuntoVenta facturapuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_vendedor()!=null && !facturapuntoventaBean.getid_vendedor().equals(-1L))) {facturapuntoventa.setid_vendedor(facturapuntoventaBean.getid_vendedor());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_cliente()!=null && !facturapuntoventaBean.getid_cliente().equals(-1L))) {facturapuntoventa.setid_cliente(facturapuntoventaBean.getid_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_caja()!=null && !facturapuntoventaBean.getid_caja().equals(-1L))) {facturapuntoventa.setid_caja(facturapuntoventaBean.getid_caja());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_tipo_precio()!=null && !facturapuntoventaBean.getid_tipo_precio().equals(-1L))) {facturapuntoventa.setid_tipo_precio(facturapuntoventaBean.getid_tipo_precio());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_mesa()!=null && !facturapuntoventaBean.getid_mesa().equals(-1L))) {facturapuntoventa.setid_mesa(facturapuntoventaBean.getid_mesa());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_formato()!=null && !facturapuntoventaBean.getid_formato().equals(-1L))) {facturapuntoventa.setid_formato(facturapuntoventaBean.getid_formato());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_tipo_factura_punto_venta()!=null && !facturapuntoventaBean.getid_tipo_factura_punto_venta().equals(-1L))) {facturapuntoventa.setid_tipo_factura_punto_venta(facturapuntoventaBean.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && facturapuntoventaBean.getid_estado_factura_punto_venta()!=null && !facturapuntoventaBean.getid_estado_factura_punto_venta().equals(-1L))) {facturapuntoventa.setid_estado_factura_punto_venta(facturapuntoventaBean.getid_estado_factura_punto_venta());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventaOrigen,FacturaPuntoVenta facturapuntoventa,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturapuntoventaOrigen.getId()!=null && !facturapuntoventaOrigen.getId().equals(0L))) {facturapuntoventa.setId(facturapuntoventaOrigen.getId());}}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_vendedor()!=null && !facturapuntoventaOrigen.getid_vendedor().equals(-1L))) {facturapuntoventa.setid_vendedor(facturapuntoventaOrigen.getid_vendedor());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_cliente()!=null && !facturapuntoventaOrigen.getid_cliente().equals(-1L))) {facturapuntoventa.setid_cliente(facturapuntoventaOrigen.getid_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_caja()!=null && !facturapuntoventaOrigen.getid_caja().equals(-1L))) {facturapuntoventa.setid_caja(facturapuntoventaOrigen.getid_caja());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_tipo_precio()!=null && !facturapuntoventaOrigen.getid_tipo_precio().equals(-1L))) {facturapuntoventa.setid_tipo_precio(facturapuntoventaOrigen.getid_tipo_precio());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_mesa()!=null && !facturapuntoventaOrigen.getid_mesa().equals(-1L))) {facturapuntoventa.setid_mesa(facturapuntoventaOrigen.getid_mesa());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_formato()!=null && !facturapuntoventaOrigen.getid_formato().equals(-1L))) {facturapuntoventa.setid_formato(facturapuntoventaOrigen.getid_formato());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_tipo_factura_punto_venta()!=null && !facturapuntoventaOrigen.getid_tipo_factura_punto_venta().equals(-1L))) {facturapuntoventa.setid_tipo_factura_punto_venta(facturapuntoventaOrigen.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_estado_factura_punto_venta()!=null && !facturapuntoventaOrigen.getid_estado_factura_punto_venta().equals(-1L))) {facturapuntoventa.setid_estado_factura_punto_venta(facturapuntoventaOrigen.getid_estado_factura_punto_venta());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getid_asiento_contable()!=null && !facturapuntoventaOrigen.getid_asiento_contable().equals(null))) {facturapuntoventa.setid_asiento_contable(facturapuntoventaOrigen.getid_asiento_contable());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getnumero_secuencial()!=null && !facturapuntoventaOrigen.getnumero_secuencial().equals(""))) {facturapuntoventa.setnumero_secuencial(facturapuntoventaOrigen.getnumero_secuencial());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getcodigo_cliente()!=null && !facturapuntoventaOrigen.getcodigo_cliente().equals(""))) {facturapuntoventa.setcodigo_cliente(facturapuntoventaOrigen.getcodigo_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getnombre_cliente()!=null && !facturapuntoventaOrigen.getnombre_cliente().equals(""))) {facturapuntoventa.setnombre_cliente(facturapuntoventaOrigen.getnombre_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gettarjeta_cliente()!=null && !facturapuntoventaOrigen.gettarjeta_cliente().equals(""))) {facturapuntoventa.settarjeta_cliente(facturapuntoventaOrigen.gettarjeta_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getdireccion_cliente()!=null && !facturapuntoventaOrigen.getdireccion_cliente().equals(""))) {facturapuntoventa.setdireccion_cliente(facturapuntoventaOrigen.getdireccion_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gettelefono_cliente()!=null && !facturapuntoventaOrigen.gettelefono_cliente().equals(""))) {facturapuntoventa.settelefono_cliente(facturapuntoventaOrigen.gettelefono_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getfecha()!=null && !facturapuntoventaOrigen.getfecha().equals(new Date()))) {facturapuntoventa.setfecha(facturapuntoventaOrigen.getfecha());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gethora()!=null && !facturapuntoventaOrigen.gethora().equals(new Time((new Date()).getTime())))) {facturapuntoventa.sethora(facturapuntoventaOrigen.gethora());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gettotal_iva()!=null && !facturapuntoventaOrigen.gettotal_iva().equals(0.0))) {facturapuntoventa.settotal_iva(facturapuntoventaOrigen.gettotal_iva());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gettotal_sin_iva()!=null && !facturapuntoventaOrigen.gettotal_sin_iva().equals(0.0))) {facturapuntoventa.settotal_sin_iva(facturapuntoventaOrigen.gettotal_sin_iva());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getiva()!=null && !facturapuntoventaOrigen.getiva().equals(0.0))) {facturapuntoventa.setiva(facturapuntoventaOrigen.getiva());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getdescuento()!=null && !facturapuntoventaOrigen.getdescuento().equals(0.0))) {facturapuntoventa.setdescuento(facturapuntoventaOrigen.getdescuento());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getfinanciamiento()!=null && !facturapuntoventaOrigen.getfinanciamiento().equals(0.0))) {facturapuntoventa.setfinanciamiento(facturapuntoventaOrigen.getfinanciamiento());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getflete()!=null && !facturapuntoventaOrigen.getflete().equals(0.0))) {facturapuntoventa.setflete(facturapuntoventaOrigen.getflete());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getice()!=null && !facturapuntoventaOrigen.getice().equals(0.0))) {facturapuntoventa.setice(facturapuntoventaOrigen.getice());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getotros()!=null && !facturapuntoventaOrigen.getotros().equals(0.0))) {facturapuntoventa.setotros(facturapuntoventaOrigen.getotros());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.getsub_total()!=null && !facturapuntoventaOrigen.getsub_total().equals(0.0))) {facturapuntoventa.setsub_total(facturapuntoventaOrigen.getsub_total());}
			if(conDefault || (!conDefault && facturapuntoventaOrigen.gettotal()!=null && !facturapuntoventaOrigen.gettotal().equals(0.0))) {facturapuntoventa.settotal(facturapuntoventaOrigen.gettotal());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setText(facturapuntoventa.getId().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setText(facturapuntoventa.getnumero_secuencial());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setText(facturapuntoventa.getcodigo_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setText(facturapuntoventa.getnombre_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setText(facturapuntoventa.gettarjeta_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setText(facturapuntoventa.getdireccion_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setText(facturapuntoventa.gettelefono_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setDate(facturapuntoventa.getfecha());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setValue(facturapuntoventa.gethora());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setText(facturapuntoventa.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setText(facturapuntoventa.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setText(facturapuntoventa.getiva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setText(facturapuntoventa.getdescuento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setText(facturapuntoventa.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setText(facturapuntoventa.getflete().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setText(facturapuntoventa.getice().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setText(facturapuntoventa.getotros().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setText(facturapuntoventa.getsub_total().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setText(facturapuntoventa.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioFacturaPuntoVenta(FacturaPuntoVentaBean facturapuntoventaBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setText(facturapuntoventaBean.getId().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setText(facturapuntoventaBean.getnumero_secuencial());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setText(facturapuntoventaBean.getcodigo_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setText(facturapuntoventaBean.getnombre_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setText(facturapuntoventaBean.gettarjeta_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setText(facturapuntoventaBean.getdireccion_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setText(facturapuntoventaBean.gettelefono_cliente());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setDate(facturapuntoventaBean.getfecha());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setValue(facturapuntoventaBean.gethora());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setText(facturapuntoventaBean.gettotal_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setText(facturapuntoventaBean.gettotal_sin_iva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setText(facturapuntoventaBean.getiva().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setText(facturapuntoventaBean.getdescuento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setText(facturapuntoventaBean.getfinanciamiento().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setText(facturapuntoventaBean.getflete().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setText(facturapuntoventaBean.getice().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setText(facturapuntoventaBean.getotros().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setText(facturapuntoventaBean.getsub_total().toString());
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setText(facturapuntoventaBean.gettotal().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanFacturaPuntoVenta(FacturaPuntoVentaParameterReturnGeneral facturapuntoventaReturnGeneral,FacturaPuntoVentaBean facturapuntoventaBean,Boolean conDefault) throws Exception { 
		try {
			FacturaPuntoVenta facturapuntoventaLocal=new FacturaPuntoVenta();
			
			facturapuntoventaLocal=facturapuntoventaReturnGeneral.getFacturaPuntoVenta();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && facturapuntoventaLocal.getId()!=null && !facturapuntoventaLocal.getId().equals(0L))) {facturapuntoventaBean.setId(facturapuntoventaLocal.getId());}}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_vendedor()!=null && !facturapuntoventaLocal.getid_vendedor().equals(-1L))) {facturapuntoventaBean.setid_vendedor(facturapuntoventaLocal.getid_vendedor());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_cliente()!=null && !facturapuntoventaLocal.getid_cliente().equals(-1L))) {facturapuntoventaBean.setid_cliente(facturapuntoventaLocal.getid_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_caja()!=null && !facturapuntoventaLocal.getid_caja().equals(-1L))) {facturapuntoventaBean.setid_caja(facturapuntoventaLocal.getid_caja());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_tipo_precio()!=null && !facturapuntoventaLocal.getid_tipo_precio().equals(-1L))) {facturapuntoventaBean.setid_tipo_precio(facturapuntoventaLocal.getid_tipo_precio());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_mesa()!=null && !facturapuntoventaLocal.getid_mesa().equals(-1L))) {facturapuntoventaBean.setid_mesa(facturapuntoventaLocal.getid_mesa());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_formato()!=null && !facturapuntoventaLocal.getid_formato().equals(-1L))) {facturapuntoventaBean.setid_formato(facturapuntoventaLocal.getid_formato());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_tipo_factura_punto_venta()!=null && !facturapuntoventaLocal.getid_tipo_factura_punto_venta().equals(-1L))) {facturapuntoventaBean.setid_tipo_factura_punto_venta(facturapuntoventaLocal.getid_tipo_factura_punto_venta());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getid_estado_factura_punto_venta()!=null && !facturapuntoventaLocal.getid_estado_factura_punto_venta().equals(-1L))) {facturapuntoventaBean.setid_estado_factura_punto_venta(facturapuntoventaLocal.getid_estado_factura_punto_venta());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getnumero_secuencial()!=null && !facturapuntoventaLocal.getnumero_secuencial().equals(""))) {facturapuntoventaBean.setnumero_secuencial(facturapuntoventaLocal.getnumero_secuencial());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getcodigo_cliente()!=null && !facturapuntoventaLocal.getcodigo_cliente().equals(""))) {facturapuntoventaBean.setcodigo_cliente(facturapuntoventaLocal.getcodigo_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getnombre_cliente()!=null && !facturapuntoventaLocal.getnombre_cliente().equals(""))) {facturapuntoventaBean.setnombre_cliente(facturapuntoventaLocal.getnombre_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gettarjeta_cliente()!=null && !facturapuntoventaLocal.gettarjeta_cliente().equals(""))) {facturapuntoventaBean.settarjeta_cliente(facturapuntoventaLocal.gettarjeta_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getdireccion_cliente()!=null && !facturapuntoventaLocal.getdireccion_cliente().equals(""))) {facturapuntoventaBean.setdireccion_cliente(facturapuntoventaLocal.getdireccion_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gettelefono_cliente()!=null && !facturapuntoventaLocal.gettelefono_cliente().equals(""))) {facturapuntoventaBean.settelefono_cliente(facturapuntoventaLocal.gettelefono_cliente());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getfecha()!=null && !facturapuntoventaLocal.getfecha().equals(new Date()))) {facturapuntoventaBean.setfecha(facturapuntoventaLocal.getfecha());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gethora()!=null && !facturapuntoventaLocal.gethora().equals(new Time((new Date()).getTime())))) {facturapuntoventaBean.sethora(facturapuntoventaLocal.gethora());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gettotal_iva()!=null && !facturapuntoventaLocal.gettotal_iva().equals(0.0))) {facturapuntoventaBean.settotal_iva(facturapuntoventaLocal.gettotal_iva());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gettotal_sin_iva()!=null && !facturapuntoventaLocal.gettotal_sin_iva().equals(0.0))) {facturapuntoventaBean.settotal_sin_iva(facturapuntoventaLocal.gettotal_sin_iva());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getiva()!=null && !facturapuntoventaLocal.getiva().equals(0.0))) {facturapuntoventaBean.setiva(facturapuntoventaLocal.getiva());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getdescuento()!=null && !facturapuntoventaLocal.getdescuento().equals(0.0))) {facturapuntoventaBean.setdescuento(facturapuntoventaLocal.getdescuento());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getfinanciamiento()!=null && !facturapuntoventaLocal.getfinanciamiento().equals(0.0))) {facturapuntoventaBean.setfinanciamiento(facturapuntoventaLocal.getfinanciamiento());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getflete()!=null && !facturapuntoventaLocal.getflete().equals(0.0))) {facturapuntoventaBean.setflete(facturapuntoventaLocal.getflete());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getice()!=null && !facturapuntoventaLocal.getice().equals(0.0))) {facturapuntoventaBean.setice(facturapuntoventaLocal.getice());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getotros()!=null && !facturapuntoventaLocal.getotros().equals(0.0))) {facturapuntoventaBean.setotros(facturapuntoventaLocal.getotros());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.getsub_total()!=null && !facturapuntoventaLocal.getsub_total().equals(0.0))) {facturapuntoventaBean.setsub_total(facturapuntoventaLocal.getsub_total());}
			if(conDefault || (!conDefault && facturapuntoventaLocal.gettotal()!=null && !facturapuntoventaLocal.gettotal().equals(0.0))) {facturapuntoventaBean.settotal(facturapuntoventaLocal.gettotal());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxFacturaPuntoVentaGenerico(Long idFacturaPuntoVentaSeleccionado,JComboBox jComboBoxFacturaPuntoVenta,List<FacturaPuntoVenta> facturapuntoventasLocal)throws Exception {
		try {
			FacturaPuntoVenta  facturapuntoventaTemp=null;

			for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasLocal) {
				if(facturapuntoventaAux.getId()!=null && facturapuntoventaAux.getId().equals(idFacturaPuntoVentaSeleccionado)) {
					facturapuntoventaTemp=facturapuntoventaAux;
					break;
				}
			}

			jComboBoxFacturaPuntoVenta.setSelectedItem(facturapuntoventaTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxFacturaPuntoVentaGenerico(JComboBox jComboBoxFacturaPuntoVenta,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxFacturaPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxFacturaPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxFacturaPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaPuntoVenta.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxFacturaPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxFacturaPuntoVenta.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxFacturaPuntoVenta.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxFacturaPuntoVenta.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxFacturaPuntoVenta.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		if(sTipo.equals("FormaPagoPuntoVenta")) {
			jButtonFormaPagoPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		 else if(sTipo.equals("DetalleFacturaPuntoVenta")) {
			jButtonDetalleFacturaPuntoVentaActionPerformed(evt,rowIndex,true,false,null);
		}
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturapuntoventa=(FacturaPuntoVenta) facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturapuntoventa =(FacturaPuntoVenta) facturapuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getusuario_descripcion();
			}
		}

		if(sTipo.equals("Vendedor")) {
			//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getvendedor_descripcion();
			} else {
				//sDescripcion=this.getActualVendedorForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getvendedor_descripcion();
			}
		}

		if(sTipo.equals("Cliente")) {
			//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getcliente_descripcion();
			} else {
				//sDescripcion=this.getActualClienteForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getcliente_descripcion();
			}
		}

		if(sTipo.equals("Caja")) {
			//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getcaja_descripcion();
			} else {
				//sDescripcion=this.getActualCajaForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getcaja_descripcion();
			}
		}

		if(sTipo.equals("TipoPrecio")) {
			//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.gettipoprecio_descripcion();
			} else {
				//sDescripcion=this.getActualTipoPrecioForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.gettipoprecio_descripcion();
			}
		}

		if(sTipo.equals("Mesa")) {
			//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getmesa_descripcion();
			} else {
				//sDescripcion=this.getActualMesaForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getmesa_descripcion();
			}
		}

		if(sTipo.equals("Formato")) {
			//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getformato_descripcion();
			} else {
				//sDescripcion=this.getActualFormatoForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getformato_descripcion();
			}
		}

		if(sTipo.equals("TipoFacturaPuntoVenta")) {
			//sDescripcion=this.getActualTipoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.gettipofacturapuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualTipoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.gettipofacturapuntoventa_descripcion();
			}
		}

		if(sTipo.equals("EstadoFacturaPuntoVenta")) {
			//sDescripcion=this.getActualEstadoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getestadofacturapuntoventa_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoFacturaPuntoVentaForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getestadofacturapuntoventa_descripcion();
			}
		}

		if(sTipo.equals("AsientoContable")) {
			//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
			if(!facturapuntoventa.getIsNew() && !facturapuntoventa.getIsChanged() && !facturapuntoventa.getIsDeleted()) {
				sDescripcion=facturapuntoventa.getasientocontable_descripcion();
			} else {
				//sDescripcion=this.getActualAsientoContableForeignKeyDescripcion((Long)value);
				sDescripcion=facturapuntoventa.getasientocontable_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		FacturaPuntoVenta facturapuntoventaRow=new FacturaPuntoVenta();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturapuntoventaRow=(FacturaPuntoVenta) facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			facturapuntoventaRow=(FacturaPuntoVenta) facturapuntoventas.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	public void jButtonFormaPagoPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,FacturaPuntoVenta facturapuntoventa) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa = (FacturaPuntoVenta)this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.facturapuntoventa = (FacturaPuntoVenta)this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(facturapuntoventa!=null) {
						this.facturapuntoventa = facturapuntoventa;
					} else {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}
				}

				if(this.isTienePermisosFormaPagoPuntoVenta && this.permiteMantenimiento(this.facturapuntoventa)) {
					FormaPagoPuntoVentaBeanSwingJInternalFrame formapagopuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup=new FormaPagoPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						formapagopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup;
					} else {
						formapagopuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame;
					}

					List<FacturaPuntoVenta> facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
					facturapuntoventas.add(this.facturapuntoventa);
					if(!esRelacionado) {
						//formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setConGuardarRelaciones(false);
						//formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					formapagopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormFacturaPuntoVenta.cargarFormaPagoPuntoVentaBeanSwingJInternalFrame(facturapuntoventas,this.facturapuntoventa,formapagopuntoventaBeanSwingJInternalFrame,/*conInicializar,*/formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getConGuardarRelaciones(),formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaSessionBean.getEsGuardarRelacionado());
					formapagopuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						formapagopuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsFormaPagoPuntoVenta("no_relacionado");

						formapagopuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(FormaPagoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (FormaPagoPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						formapagopuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
						TitledBorder titledBorderFormaPagoPuntoVenta=(TitledBorder)formapagopuntoventaBeanSwingJInternalFrame.jScrollPanelDatosFormaPagoPuntoVenta.getBorder();

						titledBorderFormaPagoPuntoVenta.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Forma Pago");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,formapagopuntoventaBeanSwingJInternalFrame);
						}

						formapagopuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(formapagopuntoventaBeanSwingJInternalFrame);

						formapagopuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Forma Pago",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonDetalleFacturaPuntoVentaActionPerformed(ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado,FacturaPuntoVenta facturapuntoventa) throws Exception {
			try {

				if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) {
					this.inicializarFormDetalle();
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				int intSelectedRow =rowIndex;

				if(intSelectedRow!=-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa = (FacturaPuntoVenta)this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE) {
						this.facturapuntoventa = (FacturaPuntoVenta)this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				} else {
					if(facturapuntoventa!=null) {
						this.facturapuntoventa = facturapuntoventa;
					} else {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}
				}

				if(this.isTienePermisosDetalleFacturaPuntoVenta && this.permiteMantenimiento(this.facturapuntoventa)) {
					DetalleFacturaPuntoVentaBeanSwingJInternalFrame detallefacturapuntoventaBeanSwingJInternalFrame=null;

					if(conInicializar) {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup=new DetalleFacturaPuntoVentaBeanSwingJInternalFrame(false,false,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.SECUNDARIO,false,false,true,false);
						this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup.setJInternalFrameParent(this);

						detallefacturapuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup;
					} else {
						detallefacturapuntoventaBeanSwingJInternalFrame=this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame;
					}

					List<FacturaPuntoVenta> facturapuntoventas=new ArrayList<FacturaPuntoVenta>();
					facturapuntoventas.add(this.facturapuntoventa);
					if(!esRelacionado) {
						//detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.setConGuardarRelaciones(false);
						//detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.setEsGuardarRelacionado(false);
					}

					//DESHABILITA TEMPORALMENTE EVENTOS CHANGE DE TEXTOS,COMBOS,ETC
					detallefacturapuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=true;
					this.jInternalFrameDetalleFormFacturaPuntoVenta.cargarDetalleFacturaPuntoVentaBeanSwingJInternalFrame(facturapuntoventas,this.facturapuntoventa,detallefacturapuntoventaBeanSwingJInternalFrame,/*conInicializar,*/detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.getConGuardarRelaciones(),detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaSessionBean.getEsGuardarRelacionado());
					detallefacturapuntoventaBeanSwingJInternalFrame.estaModoSeleccionar=false;


					if(!esRelacionado) {
						detallefacturapuntoventaBeanSwingJInternalFrame.actualizarEstadoPanelsDetalleFacturaPuntoVenta("no_relacionado");

						detallefacturapuntoventaBeanSwingJInternalFrame.redimensionarTablaDatosConTamanio(DetalleFacturaPuntoVentaConstantesFunciones.ITAMANIOFILATABLA + (DetalleFacturaPuntoVentaConstantesFunciones.ITAMANIOFILATABLA/2));

						detallefacturapuntoventaBeanSwingJInternalFrame.setLocation(xOffset*(openFrameCount + Constantes.INUM_MAX_VENTANAS_REL_X), yOffset*(openFrameCount+Constantes.INUM_MAX_VENTANAS_REL_Y));

						TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
						TitledBorder titledBorderDetalleFacturaPuntoVenta=(TitledBorder)detallefacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosDetalleFacturaPuntoVenta.getBorder();

						titledBorderDetalleFacturaPuntoVenta.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Detalle Factura");

						if(!Constantes.CON_VARIAS_VENTANAS) {
							MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,detallefacturapuntoventaBeanSwingJInternalFrame);
						}

						detallefacturapuntoventaBeanSwingJInternalFrame.setVisible(true);

						this.jDesktopPane.add(detallefacturapuntoventaBeanSwingJInternalFrame);

						detallefacturapuntoventaBeanSwingJInternalFrame.setSelected(true);
					}

				} else {
					if(!this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
						JOptionPane.showMessageDialog(this,"NO TIENE PERMISOS PARA USAR LA FUNCIONALIDAD DE Detalle Factura",Constantes.SERROR,JOptionPane.ERROR_MESSAGE);
					}
				}
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			}

			catch(Exception e) {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}


				FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			} finally { 
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualFacturaPuntoVenta(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));			
			this.jButtonDuplicarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarFacturaPuntoVenta && this.isPermisoDuplicarFacturaPuntoVenta));			
			this.jButtonCopiarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarFacturaPuntoVenta && this.isPermisoCopiarFacturaPuntoVenta));
			this.jButtonVerFormFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormFacturaPuntoVenta && this.isPermisoVerFormFacturaPuntoVenta));
			
			this.jButtonAbrirOrderByFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));			
			
			this.jButtonNuevoRelacionesFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));			
			this.jButtonNuevoGuardarCambiosFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaModificarFacturaPuntoVenta && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarFacturaPuntoVenta && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarFacturaPuntoVenta && this.isPermisoEliminarFacturaPuntoVenta));
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarFacturaPuntoVenta);							
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));			
			
			}
						
			this.jButtonGuardarCambiosTablaFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));						
			this.jButtonDuplicarToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarFacturaPuntoVenta && this.isPermisoDuplicarFacturaPuntoVenta));						
			this.jButtonCopiarToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarFacturaPuntoVenta && this.isPermisoCopiarFacturaPuntoVenta));			
			this.jButtonVerFormToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormFacturaPuntoVenta && this.isPermisoVerFormFacturaPuntoVenta));			
			this.jButtonAbrirOrderByToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));
			this.jButtonNuevoRelacionesToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));			
			this.jButtonNuevoGuardarCambiosToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));			
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaModificarFacturaPuntoVenta && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarFacturaPuntoVenta  && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarFacturaPuntoVenta && this.isPermisoEliminarFacturaPuntoVenta));
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarToolBarFacturaPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarFacturaPuntoVenta);				
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));			
			this.jMenuItemDuplicarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaDuplicarFacturaPuntoVenta && this.isPermisoDuplicarFacturaPuntoVenta));			
			this.jMenuItemCopiarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaCopiarFacturaPuntoVenta && this.isPermisoCopiarFacturaPuntoVenta));			
			this.jMenuItemVerFormFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaVerFormFacturaPuntoVenta && this.isPermisoVerFormFacturaPuntoVenta));			
			this.jMenuItemAbrirOrderByFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));			
			//this.jMenuItemMostrarOcultarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));
			this.jMenuItemDetalleAbrirOrderByFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));			
			//this.jMenuItemDetalleMostrarOcultarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaOrdenFacturaPuntoVenta && this.isPermisoOrdenFacturaPuntoVenta));			
			this.jMenuItemNuevoRelacionesFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta));			
			this.jMenuItemNuevoGuardarCambiosFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaNuevoFacturaPuntoVenta && this.isPermisoNuevoFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));									
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemModificarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaModificarFacturaPuntoVenta && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemActualizarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaActualizarFacturaPuntoVenta && this.isPermisoActualizarFacturaPuntoVenta));	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemEliminarFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaEliminarFacturaPuntoVenta && this.isPermisoEliminarFacturaPuntoVenta));
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemCancelarFacturaPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarFacturaPuntoVenta);				
			}
			
			this.jMenuItemGuardarCambiosFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));						
			this.jMenuItemGuardarCambiosTablaFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=this.jButtonNuevoFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaDuplicarFacturaPuntoVenta=this.jButtonDuplicarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaCopiarFacturaPuntoVenta=this.jButtonCopiarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaVerFormFacturaPuntoVenta=this.jButtonVerFormFacturaPuntoVenta.isVisible();
			
			this.isVisibilidadCeldaOrdenFacturaPuntoVenta=this.jButtonAbrirOrderByFacturaPuntoVenta.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=this.jButtonNuevoRelacionesFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=this.jButtonModificarFacturaPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=this.jButtonGuardarCambiosTablaFacturaPuntoVenta.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=this.jButtonNuevoToolBarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=this.jButtonNuevoRelacionesToolBarFacturaPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarToolBarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarToolBarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarToolBarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarToolBarFacturaPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaPuntoVenta=this.jButtonGuardarCambiosToolBarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=this.jButtonGuardarCambiosTablaToolBarFacturaPuntoVenta.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=this.jMenuItemNuevoFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=this.jMenuItemNuevoRelacionesFacturaPuntoVenta.isVisible();
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemModificarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemActualizarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemEliminarFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemCancelarFacturaPuntoVenta.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarFacturaPuntoVenta=this.jMenuItemGuardarCambiosFacturaPuntoVenta.isVisible();
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=this.jMenuItemGuardarCambiosTablaFacturaPuntoVenta.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesFacturaPuntoVenta(Boolean esInicializar) {
		if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {			
			if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
				//if(this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaPuntoVenta();
			}
			
			this.inicializarActualizarBindingBotonesManualFacturaPuntoVenta(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualFacturaPuntoVenta() {
		this.jButtonNuevoFacturaPuntoVenta.setVisible(this.isPermisoNuevoFacturaPuntoVenta);			
		this.jButtonDuplicarFacturaPuntoVenta.setVisible(this.isPermisoDuplicarFacturaPuntoVenta);			
		this.jButtonCopiarFacturaPuntoVenta.setVisible(this.isPermisoCopiarFacturaPuntoVenta);			
		this.jButtonVerFormFacturaPuntoVenta.setVisible(this.isPermisoVerFormFacturaPuntoVenta);			
		
		this.jButtonAbrirOrderByFacturaPuntoVenta.setVisible(this.isPermisoOrdenFacturaPuntoVenta);					
		
		this.jButtonNuevoRelacionesFacturaPuntoVenta.setVisible(this.isPermisoNuevoFacturaPuntoVenta);			
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarFacturaPuntoVenta.setVisible(this.isPermisoActualizarFacturaPuntoVenta);	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.setVisible(this.isPermisoActualizarFacturaPuntoVenta);	
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.setVisible(this.isPermisoEliminarFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarFacturaPuntoVenta);						
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.setVisible(this.isPermisoGuardarCambiosFacturaPuntoVenta);							
		}
		
		this.jButtonGuardarCambiosTablaFacturaPuntoVenta.setVisible(this.isPermisoActualizarFacturaPuntoVenta);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaPuntoVenta() {
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarFacturaPuntoVenta.setVisible(this.isPermisoActualizarFacturaPuntoVenta);	
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.setVisible(this.isPermisoActualizarFacturaPuntoVenta);	
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.setVisible(this.isPermisoEliminarFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.setVisible(this.isVisibilidadCeldaCancelarFacturaPuntoVenta);							
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.setVisible((this.isVisibilidadCeldaGuardarFacturaPuntoVenta && this.isPermisoGuardarCambiosFacturaPuntoVenta));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosFacturaPuntoVenta() {
		if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualFacturaPuntoVenta();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesFacturaPuntoVenta() {
	}
	
	public void jTableDatosFacturaPuntoVentaListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarFacturaPuntoVenta(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.facturapuntoventa.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.facturapuntoventa.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.facturapuntoventa.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.facturapuntoventa.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_vendedorFacturaPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="Vendedor";

			if(!this.sFinalQueryGeneral_vendedor.equals("")) {
				this.vendedorBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_vendedor);
				this.vendedorBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.vendedorBeanSwingJInternalFrame.procesarBusqueda(this.vendedorBeanSwingJInternalFrame.sAccionBusqueda);
				this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingVendedor(false);
			}

			if(!this.sFinalQueryComboVendedor.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaPuntoVenta=null;
			TitledBorder titledBordervendedor=null;

			if(!this.jScrollPanelDatosFacturaPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Vendedor");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_vendedorFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisovendedor=true;

			idTienePermisovendedor=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(VendedorConstantesFunciones.CLASSNAME);

			if(idTienePermisovendedor) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.vendedorBeanSwingJInternalFrame=new VendedorBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.vendedorBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.vendedorBeanSwingJInternalFrame.getVendedorLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_vendedor()!=null) {
					this.vendedorBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.vendedorBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_vendedor());
					this.vendedorBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.vendedorBeanSwingJInternalFrame.inicializarActualizarBindingTablaVendedor();
				}

				JInternalFrameBase jinternalFrame =this.vendedorBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordervendedor=(TitledBorder)this.vendedorBeanSwingJInternalFrame.jScrollPanelDatosVendedor.getBorder();

				titledBordervendedor.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Vendedor");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_vendedorFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_vendedor()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_vendedor = "+this.facturapuntoventa.getid_vendedor().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_clienteFacturaPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.clienteBeanSwingJInternalFrame.sTipoBusqueda="Cliente";

			if(!this.sFinalQueryGeneral_cliente.equals("")) {
				this.clienteBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_cliente);
				this.clienteBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.clienteBeanSwingJInternalFrame.procesarBusqueda(this.clienteBeanSwingJInternalFrame.sAccionBusqueda);
				this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingCliente(false);
			}

			if(!this.sFinalQueryComboCliente.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaPuntoVenta=null;
			TitledBorder titledBordercliente=null;

			if(!this.jScrollPanelDatosFacturaPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Cliente");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_clienteFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocliente=true;

			idTienePermisocliente=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(ClienteConstantesFunciones.CLASSNAME);

			if(idTienePermisocliente) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.clienteBeanSwingJInternalFrame=new ClienteBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.clienteBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.clienteBeanSwingJInternalFrame.getClienteLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_cliente()!=null) {
					this.clienteBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.clienteBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_cliente());
					this.clienteBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.clienteBeanSwingJInternalFrame.inicializarActualizarBindingTablaCliente();
				}

				JInternalFrameBase jinternalFrame =this.clienteBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordercliente=(TitledBorder)this.clienteBeanSwingJInternalFrame.jScrollPanelDatosCliente.getBorder();

				titledBordercliente.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Cliente");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_cliente = "+this.facturapuntoventa.getid_cliente().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_cajaFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisocaja=true;

			idTienePermisocaja=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(CajaConstantesFunciones.CLASSNAME);

			if(idTienePermisocaja) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.cajaBeanSwingJInternalFrame=new CajaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.cajaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.cajaBeanSwingJInternalFrame.getCajaLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_caja()!=null) {
					this.cajaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.cajaBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_caja());
					this.cajaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.cajaBeanSwingJInternalFrame.inicializarActualizarBindingTablaCaja();
				}

				JInternalFrameBase jinternalFrame =this.cajaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordercaja=(TitledBorder)this.cajaBeanSwingJInternalFrame.jScrollPanelDatosCaja.getBorder();

				titledBordercaja.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Caja");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_cajaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_caja()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_caja = "+this.facturapuntoventa.getid_caja().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_precioFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipoprecio=true;

			idTienePermisotipoprecio=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(TipoPrecioConstantesFunciones.CLASSNAME);

			if(idTienePermisotipoprecio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.tipoprecioBeanSwingJInternalFrame=new TipoPrecioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipoprecioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipoprecioBeanSwingJInternalFrame.getTipoPrecioLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_tipo_precio()!=null) {
					this.tipoprecioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipoprecioBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_tipo_precio());
					this.tipoprecioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipoprecioBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoPrecio();
				}

				JInternalFrameBase jinternalFrame =this.tipoprecioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordertipoprecio=(TitledBorder)this.tipoprecioBeanSwingJInternalFrame.jScrollPanelDatosTipoPrecio.getBorder();

				titledBordertipoprecio.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Tipo Precio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_precioFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_tipo_precio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_precio = "+this.facturapuntoventa.getid_tipo_precio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesaFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomesa=true;

			idTienePermisomesa=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(MesaConstantesFunciones.CLASSNAME);

			if(idTienePermisomesa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.mesaBeanSwingJInternalFrame=new MesaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesaBeanSwingJInternalFrame.getMesaLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_mesa()!=null) {
					this.mesaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesaBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_mesa());
					this.mesaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesaBeanSwingJInternalFrame.inicializarActualizarBindingTablaMesa();
				}

				JInternalFrameBase jinternalFrame =this.mesaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordermesa=(TitledBorder)this.mesaBeanSwingJInternalFrame.jScrollPanelDatosMesa.getBorder();

				titledBordermesa.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Mesa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_mesa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mesa = "+this.facturapuntoventa.getid_mesa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_formatoFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoformato=true;

			idTienePermisoformato=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(FormatoConstantesFunciones.CLASSNAME);

			if(idTienePermisoformato) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.formatoBeanSwingJInternalFrame=new FormatoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.formatoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.formatoBeanSwingJInternalFrame.getFormatoLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_formato()!=null) {
					this.formatoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.formatoBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_formato());
					this.formatoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.formatoBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormato();
				}

				JInternalFrameBase jinternalFrame =this.formatoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBorderformato=(TitledBorder)this.formatoBeanSwingJInternalFrame.jScrollPanelDatosFormato.getBorder();

				titledBorderformato.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Formato");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_formatoFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_formato()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_formato = "+this.facturapuntoventa.getid_formato().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisotipofacturapuntoventa=true;

			idTienePermisotipofacturapuntoventa=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(TipoFacturaPuntoVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisotipofacturapuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.tipofacturapuntoventaBeanSwingJInternalFrame=new TipoFacturaPuntoVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.tipofacturapuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.tipofacturapuntoventaBeanSwingJInternalFrame.getTipoFacturaPuntoVentaLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_tipo_factura_punto_venta()!=null) {
					this.tipofacturapuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.tipofacturapuntoventaBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_tipo_factura_punto_venta());
					this.tipofacturapuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.tipofacturapuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.tipofacturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaTipoFacturaPuntoVenta();
				}

				JInternalFrameBase jinternalFrame =this.tipofacturapuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBordertipofacturapuntoventa=(TitledBorder)this.tipofacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosTipoFacturaPuntoVenta.getBorder();

				titledBordertipofacturapuntoventa.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Tipo Factura Punto Venta");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_tipo_factura_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_tipo_factura_punto_venta = "+this.facturapuntoventa.getid_tipo_factura_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadofacturapuntoventa=true;

			idTienePermisoestadofacturapuntoventa=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(EstadoFacturaPuntoVentaConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadofacturapuntoventa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.estadofacturapuntoventaBeanSwingJInternalFrame=new EstadoFacturaPuntoVentaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadofacturapuntoventaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadofacturapuntoventaBeanSwingJInternalFrame.getEstadoFacturaPuntoVentaLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_estado_factura_punto_venta()!=null) {
					this.estadofacturapuntoventaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadofacturapuntoventaBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_estado_factura_punto_venta());
					this.estadofacturapuntoventaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadofacturapuntoventaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadofacturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoFacturaPuntoVenta();
				}

				JInternalFrameBase jinternalFrame =this.estadofacturapuntoventaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBorderestadofacturapuntoventa=(TitledBorder)this.estadofacturapuntoventaBeanSwingJInternalFrame.jScrollPanelDatosEstadoFacturaPuntoVenta.getBorder();

				titledBorderestadofacturapuntoventa.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Estado Factura");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_estado_factura_punto_venta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_factura_punto_venta = "+this.facturapuntoventa.getid_estado_factura_punto_venta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {
			this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.BUSQUEDA,false,false,false,true);
			this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);
			this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="AsientoContable";

			if(!this.sFinalQueryGeneral_asientocontable.equals("")) {
				this.asientocontableBeanSwingJInternalFrame.setsFinalQueryGeneral(this.sFinalQueryGeneral_asientocontable);
				this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda="Query";


				this.asientocontableBeanSwingJInternalFrame.procesarBusqueda(this.asientocontableBeanSwingJInternalFrame.sAccionBusqueda);
				this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingAsientoContable(false);
			}

			if(!this.sFinalQueryComboAsientoContable.equals("") && false) {
			}


			JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
			jinternalFrame.setAutoscrolls(true);
			//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
			jinternalFrame.setVisible(true); 


			TitledBorder titledBorderFacturaPuntoVenta=null;
			TitledBorder titledBorderasientocontable=null;

			if(!this.jScrollPanelDatosFacturaPuntoVenta.getBorder().getClass().equals(EmptyBorder.class)) {
				titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Asiento Contable");
			}

			if(!Constantes.CON_VARIAS_VENTANAS) {
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
			}

			this.jDesktopPane.add(jinternalFrame);

			jinternalFrame.setSelected(true);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}

	public void jButtonid_asiento_contableFacturaPuntoVentaUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoasientocontable=true;

			idTienePermisoasientocontable=this.tienePermisosUsuarioEnPaginaWebFacturaPuntoVenta(AsientoContableConstantesFunciones.CLASSNAME);

			if(idTienePermisoasientocontable) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosFacturaPuntoVenta.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosFacturaPuntoVenta.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);

				this.asientocontableBeanSwingJInternalFrame=new AsientoContableBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.asientocontableBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.asientocontableBeanSwingJInternalFrame.getAsientoContableLogic().setConnexion(this.facturapuntoventaLogic.getConnexion());

				if(this.facturapuntoventa.getid_asiento_contable()!=null) {
					this.asientocontableBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.asientocontableBeanSwingJInternalFrame.setIdActual(this.facturapuntoventa.getid_asiento_contable());
					this.asientocontableBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.asientocontableBeanSwingJInternalFrame.inicializarActualizarBindingTablaAsientoContable();
				}

				JInternalFrameBase jinternalFrame =this.asientocontableBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderFacturaPuntoVenta=(TitledBorder)this.jScrollPanelDatosFacturaPuntoVenta.getBorder();
				TitledBorder titledBorderasientocontable=(TitledBorder)this.asientocontableBeanSwingJInternalFrame.jScrollPanelDatosAsientoContable.getBorder();

				titledBorderasientocontable.setTitle(titledBorderFacturaPuntoVenta.getTitle() + " -> Asiento Contable");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_asiento_contableFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getid_asiento_contable()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_asiento_contable = "+this.facturapuntoventa.getid_asiento_contable().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnumero_secuencialFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getnumero_secuencial()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where numero_secuencial like '%"+this.facturapuntoventa.getnumero_secuencial()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoncodigo_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getcodigo_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where codigo_cliente like '%"+this.facturapuntoventa.getcodigo_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonnombre_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getnombre_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where nombre_cliente like '%"+this.facturapuntoventa.getnombre_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontarjeta_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gettarjeta_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where tarjeta_cliente like '%"+this.facturapuntoventa.gettarjeta_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondireccion_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getdireccion_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where direccion_cliente like '%"+this.facturapuntoventa.getdireccion_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontelefono_clienteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gettelefono_cliente()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where telefono_cliente like '%"+this.facturapuntoventa.gettelefono_cliente()+"%' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.facturapuntoventa.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonhoraFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gethora()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where hora = "+this.facturapuntoventa.gethora().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ivaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gettotal_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_iva = "+this.facturapuntoventa.gettotal_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_sin_ivaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gettotal_sin_iva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_sin_iva = "+this.facturapuntoventa.gettotal_sin_iva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonivaFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getiva()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where iva = "+this.facturapuntoventa.getiva().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondescuentoFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getdescuento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where descuento = "+this.facturapuntoventa.getdescuento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfinanciamientoFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getfinanciamiento()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where financiamiento = "+this.facturapuntoventa.getfinanciamiento().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfleteFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getflete()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where flete = "+this.facturapuntoventa.getflete().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtoniceFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getice()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where ice = "+this.facturapuntoventa.getice().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonotrosFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getotros()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where otros = "+this.facturapuntoventa.getotros().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonsub_totalFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.getsub_total()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where sub_total = "+this.facturapuntoventa.getsub_total().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotalFacturaPuntoVentaBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.getfacturapuntoventa(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.facturapuntoventa==null) {
						this.facturapuntoventa = new FacturaPuntoVenta();
					}

					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);
				}

				if(this.facturapuntoventa.gettotal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total = "+this.facturapuntoventa.gettotal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingFacturaPuntoVenta(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAsientoContableFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdAsientoContable();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCajaFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdCaja();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdClienteFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdCliente();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdEmpresa();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoFacturaPuntoVentaFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdEstadoFacturaPuntoVenta();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdFormatoFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdFormato();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesaFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdMesa();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdSucursal();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoFacturaPuntoVentaFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdTipoFacturaPuntoVenta();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdTipoPrecioFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdTipoPrecio();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdUsuario();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdVendedorFacturaPuntoVentaActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);

			this.getFacturaPuntoVentasFK_IdVendedor();

			this.inicializarActualizarBindingFacturaPuntoVenta(false);

			//if(FacturaPuntoVentaBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.facturapuntoventaLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameFacturaPuntoVenta() {
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
		

		if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFramePopup=null;
		}

		if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.setVisible(false);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.dispose();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame=null;
		}

		if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup.setVisible(false);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup.dispose();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFramePopup=null;
		}	
		
		
		}
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.setVisible(false);	    			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.dispose();
			this.jInternalFrameDetalleFormFacturaPuntoVenta=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
			this.jInternalFrameReporteDinamicoFacturaPuntoVenta.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoFacturaPuntoVenta.dispose();
			this.jInternalFrameReporteDinamicoFacturaPuntoVenta=null;
		}
		
		if(this.jInternalFrameImportacionFacturaPuntoVenta!=null) {
			this.jInternalFrameImportacionFacturaPuntoVenta.setVisible(false);	    			
			this.jInternalFrameImportacionFacturaPuntoVenta.dispose();
			this.jInternalFrameImportacionFacturaPuntoVenta=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessFacturaPuntoVenta();
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			
			if(sTipo.equals("NuevoFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarFacturaPuntoVenta")) {
				jButtonDuplicarFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarFacturaPuntoVenta")) {
				jButtonCopiarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormFacturaPuntoVenta")) {
				jButtonVerFormFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarFacturaPuntoVenta")) {
				jButtonDuplicarFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarFacturaPuntoVenta")) {
				jButtonDuplicarFacturaPuntoVentaActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarFacturaPuntoVenta")) {
				jButtonModificarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarFacturaPuntoVenta")) {
				jButtonModificarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarFacturaPuntoVenta")) {
				jButtonModificarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarFacturaPuntoVenta")) {
				jButtonActualizarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarFacturaPuntoVenta")) {
				jButtonActualizarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarFacturaPuntoVenta")) {
				jButtonActualizarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarFacturaPuntoVenta")) {
				jButtonEliminarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarFacturaPuntoVenta")) {
				jButtonEliminarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarFacturaPuntoVenta")) {
				jButtonEliminarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarFacturaPuntoVenta")) {
				jButtonCancelarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarFacturaPuntoVenta")) {
				jButtonCancelarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarFacturaPuntoVenta")) {
				jButtonCancelarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarFacturaPuntoVenta")) {
				jButtonCerrarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarFacturaPuntoVenta")) {
				jButtonCerrarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarFacturaPuntoVenta")) {
				jButtonCerrarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarFacturaPuntoVenta")) {
				jButtonMostrarOcultarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarFacturaPuntoVenta")) {
				jButtonCancelarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarFacturaPuntoVenta")) {
				jButtonCopiarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarFacturaPuntoVenta")) {
				jButtonVerFormFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarFacturaPuntoVenta")) {
				jButtonCopiarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormFacturaPuntoVenta")) {
				jButtonVerFormFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionFacturaPuntoVenta")) {
				jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarFacturaPuntoVenta")) {
				jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionFacturaPuntoVenta")) {
				jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresFacturaPuntoVenta")) {
				jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarFacturaPuntoVenta")) {
				jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreFacturaPuntoVenta")) {
				jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesFacturaPuntoVenta")) {
				jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarFacturaPuntoVenta")) {
				jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesFacturaPuntoVenta")) {
				jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByFacturaPuntoVenta") || sTipo.equals("MenuItemDetalleAbrirOrderByFacturaPuntoVenta")) {
				jButtonAbrirOrderByFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarFacturaPuntoVenta") || sTipo.equals("MenuItemDetalleMostrarOcultarFacturaPuntoVenta")) {
				jButtonMostrarOcultarFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaPuntoVenta")) {
				jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarFacturaPuntoVenta")) {
				jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosFacturaPuntoVenta")) {
				jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoFacturaPuntoVenta")) {
				jButtonCerrarReporteDinamicoFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoFacturaPuntoVenta")) {
				jButtonGenerarReporteDinamicoFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoFacturaPuntoVenta")) {
				
				jButtonGenerarExcelReporteDinamicoFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionFacturaPuntoVenta")) {
				jButtonCerrarImportacionFacturaPuntoVentaActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionFacturaPuntoVenta")) {
				
				jButtonGenerarImportacionFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionFacturaPuntoVenta")) {
				
				jButtonAbrirImportacionFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesFacturaPuntoVenta")) {
				jComboBoxTiposAccionesFacturaPuntoVentaActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesFacturaPuntoVenta")) {
				jComboBoxTiposRelacionesFacturaPuntoVentaActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioFacturaPuntoVenta")) {
				jComboBoxTiposAccionesFacturaPuntoVentaActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarFacturaPuntoVenta")) {
				
				jComboBoxTiposSeleccionarFacturaPuntoVentaActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralFacturaPuntoVenta")) {
				jTextFieldValorCampoGeneralFacturaPuntoVentaActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByFacturaPuntoVenta")) {
				jButtonAbrirOrderByFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarFacturaPuntoVenta")) {
				jButtonAbrirOrderByFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByFacturaPuntoVenta")) {
				jButtonCerrarOrderByFacturaPuntoVentaActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaPuntoVentaBusqueda")) {
				this.jButtonidFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaPuntoVentaUpdate")) {
				this.jButtonid_empresaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_empresaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaPuntoVentaUpdate")) {
				this.jButtonid_sucursalFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaPuntoVentaBusqueda")) {
				this.jButtonid_sucursalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioFacturaPuntoVentaUpdate")) {
				this.jButtonid_usuarioFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioFacturaPuntoVentaBusqueda")) {
				this.jButtonid_usuarioFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVenta")) {
				this.jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaUpdate")) {
				this.jButtonid_vendedorFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaBusqueda")) {
				this.jButtonid_vendedorFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				this.jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVentaUpdate")) {
				this.jButtonid_clienteFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtonid_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaFacturaPuntoVentaUpdate")) {
				this.jButtonid_cajaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_cajaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaFacturaPuntoVentaUpdate")) {
				this.jButtonid_mesaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_mesaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoFacturaPuntoVentaUpdate")) {
				this.jButtonid_formatoFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoFacturaPuntoVentaBusqueda")) {
				this.jButtonid_formatoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaFacturaPuntoVentaUpdate")) {
				this.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_factura_punto_ventaFacturaPuntoVentaUpdate")) {
				this.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_factura_punto_ventaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVenta")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVentaUpdate")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVentaBusqueda")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialFacturaPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtoncodigo_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtonnombre_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtontarjeta_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtondireccion_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtontelefono_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaFacturaPuntoVentaBusqueda")) {
				this.jButtonfechaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaFacturaPuntoVentaBusqueda")) {
				this.jButtonhoraFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaPuntoVentaBusqueda")) {
				this.jButtontotal_ivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaFacturaPuntoVentaBusqueda")) {
				this.jButtontotal_sin_ivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaFacturaPuntoVentaBusqueda")) {
				this.jButtonivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoFacturaPuntoVentaBusqueda")) {
				this.jButtondescuentoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoFacturaPuntoVentaBusqueda")) {
				this.jButtonfinanciamientoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteFacturaPuntoVentaBusqueda")) {
				this.jButtonfleteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceFacturaPuntoVentaBusqueda")) {
				this.jButtoniceFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otrosFacturaPuntoVentaBusqueda")) {
				this.jButtonotrosFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalFacturaPuntoVentaBusqueda")) {
				this.jButtonsub_totalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaPuntoVentaBusqueda")) {
				this.jButtontotalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVenta")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				this.jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("id_vendedorFacturaPuntoVenta")) {
				this.jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
			}
			
			
			else if(sTipo.equals("FK_IdAsientoContableFacturaPuntoVenta")) {
				this.jButtonFK_IdAsientoContableFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCajaFacturaPuntoVenta")) {
				this.jButtonFK_IdCajaFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdClienteFacturaPuntoVenta")) {
				this.jButtonFK_IdClienteFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta")) {
				this.jButtonFK_IdEstadoFacturaPuntoVentaFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdFormatoFacturaPuntoVenta")) {
				this.jButtonFK_IdFormatoFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMesaFacturaPuntoVenta")) {
				this.jButtonFK_IdMesaFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoFacturaPuntoVentaFacturaPuntoVenta")) {
				this.jButtonFK_IdTipoFacturaPuntoVentaFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdTipoPrecioFacturaPuntoVenta")) {
				this.jButtonFK_IdTipoPrecioFacturaPuntoVentaActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdVendedorFacturaPuntoVenta")) {
				this.jButtonFK_IdVendedorFacturaPuntoVentaActionPerformed(evt);
			}
			
			;
			
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessFacturaPuntoVenta();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			FacturaPuntoVenta facturapuntoventaLocal=null;
			
			if(!this.getEsControlTabla()) {
				facturapuntoventaLocal=this.facturapuntoventa;
			} else {
				facturapuntoventaLocal=this.facturapuntoventaAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
							
				
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
								
						
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
								
				
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
							
				
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
								
				
				


				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
			
			this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosFacturaPuntoVenta")) {
					jCheckBoxSeleccionarTodosFacturaPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosFacturaPuntoVenta")) {
					jCheckBoxSeleccionadosFacturaPuntoVentaItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarFacturaPuntoVenta")) {
					
				}
				
				


				
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
												
				
				


				
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta;
				}

				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
				//recargarFormFacturaPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta;
				}

				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
				//recargarFormFacturaPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
			}
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.facturapuntoventa);
				
				this.actualizarInformacion("INFO_PADRE",false,this.facturapuntoventa);
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


			if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				if(jComboBoxGenerico==null) {
					jComboBoxGenerico=this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta;
				}

				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					//classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
				}

				this.procesarActionsCombosForeignKeyCliente(jComboBoxGenerico,"Formulario");

				this.recargarFormFacturaPuntoVenta(sTipo,"Formulario",eventoGlobalTipo,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,"COMBOBOX",classes,false,esControlTabla);
			}
			 else if(sTipo.equals("jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta")) {
				this.procesarActionsCombosForeignKeyCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
				//recargarFormFacturaPuntoVentaCliente(jComboBoxid_clienteFK_IdClienteFacturaPuntoVenta,"FK_IdCliente");
			}
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(FacturaPuntoVenta.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",FacturaPuntoVenta.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaFacturaPuntoVentaActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.facturapuntoventaAnterior =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarFacturaPuntoVenta")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosFacturaPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosFacturaPuntoVenta.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.facturapuntoventa =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.facturapuntoventa);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarFacturaPuntoVenta")) {
				
				}
				
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarFacturaPuntoVenta")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosFacturaPuntoVenta.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarFacturaPuntoVenta")) {
			
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessFacturaPuntoVenta();
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			if(sTipo.equals("NuevoFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarFacturaPuntoVenta")) {
				jButtonDuplicarFacturaPuntoVentaActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarFacturaPuntoVenta")) {
				jButtonCopiarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormFacturaPuntoVenta")) {
				jButtonVerFormFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesFacturaPuntoVenta")) {
				jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarFacturaPuntoVenta")) {
				jButtonModificarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarFacturaPuntoVenta")) {
				jButtonActualizarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarFacturaPuntoVenta")) {
				jButtonEliminarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarFacturaPuntoVenta")) {
				jButtonCancelarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarFacturaPuntoVenta")) {
				jButtonCerrarFacturaPuntoVentaActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosFacturaPuntoVenta")) {
				jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosFacturaPuntoVenta")) {
				jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByFacturaPuntoVenta")) {
				jButtonAbrirOrderByFacturaPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionFacturaPuntoVenta")) {
				jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresFacturaPuntoVenta")) {
				jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesFacturaPuntoVenta")) {
				jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idFacturaPuntoVentaBusqueda")) {
				this.jButtonidFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaFacturaPuntoVentaUpdate")) {
				this.jButtonid_empresaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_empresaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalFacturaPuntoVentaUpdate")) {
				this.jButtonid_sucursalFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalFacturaPuntoVentaBusqueda")) {
				this.jButtonid_sucursalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioFacturaPuntoVentaUpdate")) {
				this.jButtonid_usuarioFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioFacturaPuntoVentaBusqueda")) {
				this.jButtonid_usuarioFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVenta")) {
				this.jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
			}
			//BUSQUEDA ARBOL CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaArbol")) {
				this.abrirFrameTreeVendedor("BUSQUEDA_FK");
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaUpdate")) {
				this.jButtonid_vendedorFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_vendedorFacturaPuntoVentaBusqueda")) {
				this.jButtonid_vendedorFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVenta")) {
				this.jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVentaUpdate")) {
				this.jButtonid_clienteFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtonid_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_cajaFacturaPuntoVentaUpdate")) {
				this.jButtonid_cajaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_cajaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_cajaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaPuntoVentaUpdate")) {
				this.jButtonid_tipo_precioFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_precioFacturaPuntoVentaBusqueda")) {
				this.jButtonid_tipo_precioFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesaFacturaPuntoVentaUpdate")) {
				this.jButtonid_mesaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_mesaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_formatoFacturaPuntoVentaUpdate")) {
				this.jButtonid_formatoFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_formatoFacturaPuntoVentaBusqueda")) {
				this.jButtonid_formatoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaFacturaPuntoVentaUpdate")) {
				this.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_factura_punto_ventaFacturaPuntoVentaUpdate")) {
				this.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_factura_punto_ventaFacturaPuntoVentaBusqueda")) {
				this.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVenta")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVentaUpdate")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_asiento_contableFacturaPuntoVentaBusqueda")) {
				this.jButtonid_asiento_contableFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("numero_secuencialFacturaPuntoVentaBusqueda")) {
				this.jButtonnumero_secuencialFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("codigo_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtoncodigo_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("nombre_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtonnombre_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("tarjeta_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtontarjeta_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("direccion_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtondireccion_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("telefono_clienteFacturaPuntoVentaBusqueda")) {
				this.jButtontelefono_clienteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaFacturaPuntoVentaBusqueda")) {
				this.jButtonfechaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("horaFacturaPuntoVentaBusqueda")) {
				this.jButtonhoraFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ivaFacturaPuntoVentaBusqueda")) {
				this.jButtontotal_ivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_sin_ivaFacturaPuntoVentaBusqueda")) {
				this.jButtontotal_sin_ivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("ivaFacturaPuntoVentaBusqueda")) {
				this.jButtonivaFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("descuentoFacturaPuntoVentaBusqueda")) {
				this.jButtondescuentoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("financiamientoFacturaPuntoVentaBusqueda")) {
				this.jButtonfinanciamientoFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fleteFacturaPuntoVentaBusqueda")) {
				this.jButtonfleteFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("iceFacturaPuntoVentaBusqueda")) {
				this.jButtoniceFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("otrosFacturaPuntoVentaBusqueda")) {
				this.jButtonotrosFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("sub_totalFacturaPuntoVentaBusqueda")) {
				this.jButtonsub_totalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("totalFacturaPuntoVentaBusqueda")) {
				this.jButtontotalFacturaPuntoVentaBusquedaActionPerformed(evt);
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessFacturaPuntoVenta();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameFacturaPuntoVenta")) {
				closingInternalFrameFacturaPuntoVenta();
				
			} else if(sTipo.equals("jButtonCancelarFacturaPuntoVenta")) {
				JInternalFrameBase jInternalFrameDetalleFormFacturaPuntoVenta = (JInternalFrameBase)evt.getSource();
	            	
	            FacturaPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(FacturaPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaPuntoVenta.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarFacturaPuntoVentaActionPerformed(null);
			}
			
			FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.facturapuntoventa,new Object(),this.facturapuntoventaParameterGeneral,this.facturapuntoventaReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormFacturaPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormFacturaPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormFacturaPuntoVenta(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.facturapuntoventa)) {
			if(!esControlTabla) {
				if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);			
				}
				
				if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturapuntoventaReturnGeneral=facturapuntoventaLogic.procesarEventosFacturaPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturapuntoventaLogic.getFacturaPuntoVentas(),this.facturapuntoventa,this.facturapuntoventaParameterGeneral,this.isEsNuevoFacturaPuntoVenta,classes);//this.facturapuntoventaLogic.getFacturaPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanFacturaPuntoVenta(this.facturapuntoventaReturnGeneral,this.facturapuntoventaBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanFacturaPuntoVenta(classes,this.facturapuntoventaReturnGeneral,this.facturapuntoventaBean,false);
					}
						
					if(this.facturapuntoventaReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta());	
					}
						
					if(this.facturapuntoventaReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta(),classes);//this.facturapuntoventaBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioFacturaPuntoVenta(this.facturapuntoventa,classes);//this.facturapuntoventaBean);									
				}
			
				if(FacturaPuntoVentaJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualFacturaPuntoVenta(this.facturapuntoventa,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysFacturaPuntoVenta(this.facturapuntoventa);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.facturapuntoventaAnterior!=null) {
						this.facturapuntoventa=this.facturapuntoventaAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.facturapuntoventaReturnGeneral=facturapuntoventaLogic.procesarEventosFacturaPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturapuntoventaLogic.getFacturaPuntoVentas(),this.facturapuntoventa,this.facturapuntoventaParameterGeneral,this.isEsNuevoFacturaPuntoVenta,classes);//this.facturapuntoventaLogic.getFacturaPuntoVenta()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.facturapuntoventaSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.facturapuntoventaSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta(),facturapuntoventaLogic.getFacturaPuntoVentas());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta(),this.facturapuntoventas);
				}
				//ARCHITECTURE
				
				//this.jTableDatosFacturaPuntoVenta.repaint();
				
				//((AbstractTableModel) this.jTableDatosFacturaPuntoVenta.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosFacturaPuntoVenta();
			}
		}
	}
	
	public void actualizarVisualTableDatosFacturaPuntoVenta() throws Exception {
		
		FacturaPuntoVentaModel facturapuntoventaModel=(FacturaPuntoVentaModel)this.jTableDatosFacturaPuntoVenta.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			facturapuntoventaModel.facturapuntoventas=this.facturapuntoventaLogic.getFacturaPuntoVentas();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			facturapuntoventaModel.facturapuntoventas=this.facturapuntoventas;
		}
		
		
		((FacturaPuntoVentaModel) this.jTableDatosFacturaPuntoVenta.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaFacturaPuntoVenta() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getfacturapuntoventaAnterior(),this.facturapuntoventaLogic.getFacturaPuntoVentas());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getfacturapuntoventaAnterior(),this.facturapuntoventas);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosFacturaPuntoVenta();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,ArrayList<Classe> classes) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(facturapuntoventa.getFormaPagoPuntoVentas());
					this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormaPagoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaPuntoVenta.class)) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.setDetalleFacturaPuntoVentas(facturapuntoventa.getDetalleFacturaPuntoVentas());
					this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFacturaPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturapuntoventa,new Object(),generalEntityParameterGeneral,this.facturapuntoventaReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.facturapuntoventaSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsOfFacturaPuntoVenta(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=FacturaPuntoVentaConstantesFunciones.getClassesRelationshipsFromStringsOfFacturaPuntoVenta(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormFacturaPuntoVenta(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				FacturaPuntoVentaBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.facturapuntoventa,new Object(),generalEntityParameterGeneral,this.facturapuntoventaReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioFacturaPuntoVenta(FacturaPuntoVentaBean facturapuntoventaBean) throws Exception { 
		try {
			
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.setFormaPagoPuntoVentas(facturapuntoventa.getFormaPagoPuntoVentas());
					this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaFormaPagoPuntoVenta(false);
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaPuntoVenta.class)) {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.setDetalleFacturaPuntoVentas(facturapuntoventa.getDetalleFacturaPuntoVentas());
					this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.inicializarActualizarBindingTablaDetalleFacturaPuntoVenta(false);
					break;
				}
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanFacturaPuntoVenta(ArrayList<Classe> classes,FacturaPuntoVentaReturnGeneral facturapuntoventaReturnGeneral,FacturaPuntoVentaBean facturapuntoventaBean,Boolean conDefault) throws Exception {
		
			this.facturapuntoventaBean.setFormaPagoPuntoVentas(facturapuntoventaReturnGeneral.getFacturaPuntoVenta().getFormaPagoPuntoVentas());
			this.facturapuntoventaBean.setDetalleFacturaPuntoVentas(facturapuntoventaReturnGeneral.getFacturaPuntoVenta().getDetalleFacturaPuntoVentas());
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,ArrayList<Classe> classes) throws Exception {
		
			for(Classe clas:classes) {
				if(clas.clas.equals(FormaPagoPuntoVenta.class)) {
					facturapuntoventa.setFormaPagoPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaBeanSwingJInternalFrame.formapagopuntoventaLogic.getFormaPagoPuntoVentas());
					break;
				}
			}
			for(Classe clas:classes) {
				if(clas.clas.equals(DetalleFacturaPuntoVenta.class)) {
					facturapuntoventa.setDetalleFacturaPuntoVentas(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaBeanSwingJInternalFrame.detallefacturapuntoventaLogic.getDetalleFacturaPuntoVentas());
					break;
				}
			}
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.facturapuntoventa)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta = new FacturaPuntoVentaDetalleFormJInternalFrame(jDesktopPane,this.facturapuntoventaSessionBean.getConGuardarRelaciones(),this.facturapuntoventaSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.setVisible(false);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.setSelected(false);						
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.facturapuntoventaLogic=this.facturapuntoventaLogic;
		
		this.cargarCombosFrameForeignKeyFacturaPuntoVenta("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleFacturaPuntoVenta();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleFacturaPuntoVenta();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyFacturaPuntoVenta("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyFacturaPuntoVenta();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaPuntoVenta"));
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarFacturaPuntoVenta"));

		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaPuntoVenta"));
					
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemModificarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarFacturaPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaPuntoVenta"));
						
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemActualizarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarFacturaPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaPuntoVenta"));
								
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemEliminarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarFacturaPuntoVenta"));
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaPuntoVenta"));
					
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemCancelarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaPuntoVenta"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemDetalleCerrarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaPuntoVenta"));		
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaPuntoVenta"));
		
		
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaPuntoVenta"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonidFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaBusqueda"));
		//jButtonid_vendedorFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVenta"));
		//jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaBusqueda"));
		//jButtonid_clienteFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//jButtonid_asiento_contableFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnumero_secuencialFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoncodigo_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnombre_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontarjeta_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondireccion_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontelefono_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfechaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonhoraFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_sin_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondescuentoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfinanciamientoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfleteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoniceFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonotrosFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonsub_totalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaPuntoVentaBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaPuntoVenta"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameFacturaPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarFacturaPuntoVenta"));
		}
		
		this.jTableDatosFacturaPuntoVenta.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarFacturaPuntoVenta"));
		
		this.jTableDatosFacturaPuntoVenta.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarFacturaPuntoVenta"));
		
		this.jButtonNuevoFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoFacturaPuntoVenta"));
		
		this.jButtonDuplicarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarFacturaPuntoVenta"));
		
		this.jButtonCopiarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"CopiarFacturaPuntoVenta"));
		
		this.jButtonVerFormFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"VerFormFacturaPuntoVenta"));
		
		
		this.jButtonNuevoToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoToolBarFacturaPuntoVenta"));
			
		this.jButtonDuplicarToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"DuplicarToolBarFacturaPuntoVenta"));
			
		this.jMenuItemNuevoFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoFacturaPuntoVenta"));
			
		this.jMenuItemDuplicarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarFacturaPuntoVenta"));		
		
		
		this.jButtonNuevoRelacionesFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoRelacionesFacturaPuntoVenta"));
		
		
		this.jButtonNuevoRelacionesToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarFacturaPuntoVenta"));
			
		this.jMenuItemNuevoRelacionesFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesFacturaPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarFacturaPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonModificarToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ModificarToolBarFacturaPuntoVenta"));
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemModificarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"MenuItemModificarFacturaPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"ActualizarFacturaPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonActualizarToolBarFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"ActualizarToolBarFacturaPuntoVenta"));
				
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemActualizarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemActualizarFacturaPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarFacturaPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonEliminarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"EliminarToolBarFacturaPuntoVenta"));
						
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemEliminarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemEliminarFacturaPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarFacturaPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonCancelarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CancelarToolBarFacturaPuntoVenta"));
			
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemCancelarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCancelarFacturaPuntoVenta"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarFacturaPuntoVenta"));		
		
		
		this.jButtonCerrarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarFacturaPuntoVenta"));
		
		
		this.jButtonCerrarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarToolBarFacturaPuntoVenta"));
			
		this.jMenuItemCerrarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCerrarFacturaPuntoVenta"));
			
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jMenuItemDetalleCerrarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarFacturaPuntoVenta"));		
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosFacturaPuntoVenta"));
		}
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarFacturaPuntoVenta"));
		}
		
		this.jButtonCopiarToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CopiarToolBarFacturaPuntoVenta"));
			
		this.jButtonVerFormToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"VerFormToolBarFacturaPuntoVenta"));
		
		this.jMenuItemGuardarCambiosFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosFacturaPuntoVenta"));
			
		this.jMenuItemCopiarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemCopiarFacturaPuntoVenta"));		
		
		this.jMenuItemVerFormFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemVerFormFacturaPuntoVenta"));		
		
		
		this.jButtonGuardarCambiosTablaFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaPuntoVenta"));
		
		
		this.jButtonGuardarCambiosTablaToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarFacturaPuntoVenta"));
			
		this.jMenuItemGuardarCambiosTablaFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaFacturaPuntoVenta"));		
		
		
		
		this.jButtonRecargarInformacionFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionFacturaPuntoVenta"));
					
		this.jButtonRecargarInformacionToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarFacturaPuntoVenta"));
		
		this.jMenuItemRecargarInformacionFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionFacturaPuntoVenta"));		
		
		
		
		this.jButtonAnterioresFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresFacturaPuntoVenta"));
		
		
		this.jButtonAnterioresToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"AnterioresToolBarFacturaPuntoVenta"));
		
		this.jMenuItemAnterioresFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresFacturaPuntoVenta"));		
		
		
		this.jButtonSiguientesFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesFacturaPuntoVenta"));
		
		
		this.jButtonSiguientesToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"SiguientesToolBarFacturaPuntoVenta"));
			
		this.jMenuItemSiguientesFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesFacturaPuntoVenta"));
			
		this.jMenuItemAbrirOrderByFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByFacturaPuntoVenta"));
			
		this.jMenuItemMostrarOcultarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarFacturaPuntoVenta"));
			
		this.jMenuItemDetalleAbrirOrderByFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByFacturaPuntoVenta"));
			
		this.jMenuItemDetalleMostarOcultarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarFacturaPuntoVenta"));		
		
		
		this.jButtonNuevoGuardarCambiosFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosFacturaPuntoVenta"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarFacturaPuntoVenta"));
			
		this.jMenuItemNuevoGuardarCambiosFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosFacturaPuntoVenta"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosFacturaPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosFacturaPuntoVenta"));

		this.jCheckBoxSeleccionadosFacturaPuntoVenta.addItemListener(new CheckBoxItemListener(this,"SeleccionadosFacturaPuntoVenta"));
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioFacturaPuntoVenta"));
		}
		
		
		this.jComboBoxTiposRelacionesFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposRelacionesFacturaPuntoVenta"));
			
		this.jComboBoxTiposAccionesFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposAccionesFacturaPuntoVenta"));
					
		this.jComboBoxTiposSeleccionarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"TiposSeleccionarFacturaPuntoVenta"));
			
		this.jTextFieldValorCampoGeneralFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralFacturaPuntoVenta"));		
		
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonidFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaBusqueda"));
		//jButtonid_vendedorFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVenta"));
		//jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaBusqueda"));
		//jButtonid_clienteFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//jButtonid_asiento_contableFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnumero_secuencialFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoncodigo_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnombre_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontarjeta_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondireccion_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontelefono_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfechaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonhoraFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_sin_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondescuentoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfinanciamientoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfleteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoniceFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonotrosFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonsub_totalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaPuntoVentaBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAsientoContableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableFacturaPuntoVenta"));

			this.jButtonBuscarFK_IdAsientoContableid_asiento_contableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVenta"));

			this.jButtonFK_IdCajaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaFacturaPuntoVenta"));

			this.jButtonFK_IdClienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaPuntoVenta"));

			this.jButtonBuscarFK_IdClienteid_clienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVenta"));

			this.jButtonFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta"));

			this.jButtonFK_IdFormatoFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdFormatoFacturaPuntoVenta"));

			this.jButtonFK_IdMesaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaFacturaPuntoVenta"));

			this.jButtonFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoFacturaPuntoVentaFacturaPuntoVenta"));

			this.jButtonFK_IdTipoPrecioFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioFacturaPuntoVenta"));

			this.jButtonFK_IdVendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorFacturaPuntoVenta"));

			this.jButtonBuscarFK_IdVendedorid_vendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVenta"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoFacturaPuntoVenta!=null) {
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaPuntoVenta"));
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaPuntoVenta"));
				this.jInternalFrameReporteDinamicoFacturaPuntoVenta.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaPuntoVenta"));
			}
			
			//this.jButtonCerrarReporteDinamicoFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoFacturaPuntoVenta"));				
			//this.jButtonGenerarReporteDinamicoFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoFacturaPuntoVenta"));
			//this.jButtonGenerarExcelReporteDinamicoFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoFacturaPuntoVenta"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionFacturaPuntoVenta!=null) {
				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionFacturaPuntoVenta"));
				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionFacturaPuntoVenta"));
				this.jInternalFrameImportacionFacturaPuntoVenta.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionFacturaPuntoVenta"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByFacturaPuntoVenta"));
			
			this.jButtonAbrirOrderByToolBarFacturaPuntoVenta.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarFacturaPuntoVenta"));			
			
			if(this.jInternalFrameOrderByFacturaPuntoVenta!=null) {
				this.jInternalFrameOrderByFacturaPuntoVenta.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByFacturaPuntoVenta"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jTabbedPaneRelacionesFacturaPuntoVenta.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesFacturaPuntoVenta"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameFacturaPuntoVenta();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormFacturaPuntoVenta = (JInternalFrameBase)event.getSource();
	            	
	            FacturaPuntoVentaBeanSwingJInternalFrame jInternalFrameParent=(FacturaPuntoVentaBeanSwingJInternalFrame)jInternalFrameDetalleFormFacturaPuntoVenta.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarFacturaPuntoVentaActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosFacturaPuntoVenta.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosFacturaPuntoVentaListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosFacturaPuntoVenta.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosFacturaPuntoVenta.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoFacturaPuntoVenta";
		inputMap = this.jButtonNuevoFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesFacturaPuntoVenta";
		inputMap = this.jButtonNuevoRelacionesFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoFacturaPuntoVentaActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarFacturaPuntoVenta";
		inputMap = this.jButtonModificarFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarFacturaPuntoVenta";
		inputMap = this.jButtonActualizarFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarFacturaPuntoVenta";
		inputMap = this.jButtonEliminarFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarFacturaPuntoVenta";
		inputMap = this.jButtonCancelarFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarFacturaPuntoVenta";
		inputMap = this.jButtonCerrarFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosFacturaPuntoVenta";
		inputMap = this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonGuardarCambiosFacturaPuntoVenta.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosFacturaPuntoVentaActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosFacturaPuntoVenta.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosFacturaPuntoVentaItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesFacturaPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesFacturaPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarFacturaPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarFacturaPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralFacturaPuntoVenta.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralFacturaPuntoVentaActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonidFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"idFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_empresaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_sucursalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_usuarioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioFacturaPuntoVentaBusqueda"));
		//jButtonid_vendedorFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_vendedorFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVenta"));
		//jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			abrirFrameTreeVendedor("BUSQUEDA_FK");
		//		}
		//	}
		//);

		//BUSQUEDA ARBOL CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaArbol.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaArbol"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVentaBusqueda"));
		//jButtonid_clienteFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_clienteFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_cajaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_cajaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_precioFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_precioFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_mesaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_mesaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_formatoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_formatoFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_tipo_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_estado_factura_punto_ventaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_factura_punto_ventaFacturaPuntoVentaBusqueda"));
		//jButtonid_asiento_contableFacturaPuntoVenta.addActionListener (
		//	new java.awt.event.ActionListener() {
		//		public void actionPerformed(java.awt.event.ActionEvent evt) {
		//			jButtonid_asiento_contableFacturaPuntoVentaActionPerformed(evt);
		//		}
		//	}
		//);

		//BUSQUEDA CAMPO
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVenta"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaUpdate.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnumero_secuencialFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"numero_secuencialFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoncodigo_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"codigo_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonnombre_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"nombre_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontarjeta_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"tarjeta_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondireccion_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"direccion_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontelefono_clienteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"telefono_clienteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfechaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fechaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonhoraFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"horaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotal_sin_ivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"total_sin_ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonivaFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"ivaFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtondescuentoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"descuentoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfinanciamientoFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"financiamientoFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonfleteFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"fleteFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtoniceFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"iceFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonotrosFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"otrosFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonsub_totalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"sub_totalFacturaPuntoVentaBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtontotalFacturaPuntoVentaBusqueda.addActionListener(new ButtonActionListener(this,"totalFacturaPuntoVentaBusqueda"));
		
		
		this.jButtonFK_IdAsientoContableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdAsientoContableFacturaPuntoVenta"));

		this.jButtonBuscarFK_IdAsientoContableid_asiento_contableFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_asiento_contableFacturaPuntoVenta"));

		this.jButtonFK_IdCajaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdCajaFacturaPuntoVenta"));

		this.jButtonFK_IdClienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdClienteFacturaPuntoVenta"));

		this.jButtonBuscarFK_IdClienteid_clienteFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_clienteFacturaPuntoVenta"));

		this.jButtonFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta"));

		this.jButtonFK_IdFormatoFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdFormatoFacturaPuntoVenta"));

		this.jButtonFK_IdMesaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdMesaFacturaPuntoVenta"));

		this.jButtonFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoFacturaPuntoVentaFacturaPuntoVenta"));

		this.jButtonFK_IdTipoPrecioFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdTipoPrecioFacturaPuntoVenta"));

		this.jButtonFK_IdVendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"FK_IdVendedorFacturaPuntoVenta"));

		this.jButtonBuscarFK_IdVendedorid_vendedorFacturaPuntoVenta.addActionListener(new ButtonActionListener(this,"id_vendedorFacturaPuntoVenta"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionFacturaPuntoVenta.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionFacturaPuntoVentaActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarFacturaPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarFacturaPuntoVenta.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosFacturaPuntoVenta(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
					facturapuntoventaAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventas) {
					facturapuntoventaAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosFacturaPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
						facturapuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventas) {
						facturapuntoventaAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventas) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosFacturaPuntoVentaItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosFacturaPuntoVenta.getSelectedRows();
			
			FacturaPuntoVenta facturapuntoventaLocal=new FacturaPuntoVenta();
			
			//this.seleccionarTodosFacturaPuntoVenta(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					facturapuntoventaLocal =(FacturaPuntoVenta) this.facturapuntoventaLogic.getFacturaPuntoVentas().toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					facturapuntoventaLocal =(FacturaPuntoVenta) this.facturapuntoventas.toArray()[this.jTableDatosFacturaPuntoVenta.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				facturapuntoventaLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
						facturapuntoventaAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventas) {
						facturapuntoventaAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosFacturaPuntoVenta.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosFacturaPuntoVenta.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosFacturaPuntoVenta,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualFacturaPuntoVentaItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarFacturaPuntoVentaParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralFacturaPuntoVentaActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralFacturaPuntoVenta.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventaLogic.getFacturaPuntoVentas()) {
				
						if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							facturapuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							facturapuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							facturapuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							facturapuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							facturapuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							facturapuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							facturapuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							facturapuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturapuntoventaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							facturapuntoventaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							facturapuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							facturapuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							facturapuntoventaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							facturapuntoventaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							facturapuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS)) {
							existe=true;
							facturapuntoventaAux.setotros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							facturapuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturapuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventas) {
					
						if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
							existe=true;
							facturapuntoventaAux.setnumero_secuencial(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
							existe=true;
							facturapuntoventaAux.setcodigo_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
							existe=true;
							facturapuntoventaAux.setnombre_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
							existe=true;
							facturapuntoventaAux.settarjeta_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
							existe=true;
							facturapuntoventaAux.setdireccion_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
							existe=true;
							facturapuntoventaAux.settelefono_cliente(this.sValorCampoGeneral);
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							facturapuntoventaAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_HORA)) {
							existe=true;
							facturapuntoventaAux.sethora(Time.valueOf(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA)) {
							existe=true;
							facturapuntoventaAux.settotal_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA)) {
							existe=true;
							facturapuntoventaAux.settotal_sin_iva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IVA)) {
							existe=true;
							facturapuntoventaAux.setiva(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO)) {
							existe=true;
							facturapuntoventaAux.setdescuento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO)) {
							existe=true;
							facturapuntoventaAux.setfinanciamiento(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE)) {
							existe=true;
							facturapuntoventaAux.setflete(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_ICE)) {
							existe=true;
							facturapuntoventaAux.setice(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS)) {
							existe=true;
							facturapuntoventaAux.setotros(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL)) {
							existe=true;
							facturapuntoventaAux.setsub_total(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL)) {
							existe=true;
							facturapuntoventaAux.settotal(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesFacturaPuntoVentaActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioFacturaPuntoVenta=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesFacturaPuntoVenta.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteFacturaPuntoVenta) {				
					conSplash=true;//false;										
					
					//this.startProcessFacturaPuntoVenta(conSplash);
				
					this.generarReporteFacturaPuntoVentasSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoFacturaPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaPuntoVentasSeleccionados(false);
				//this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoFacturaPuntoVentasSeleccionados(true);
				//this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaPuntoVenta();
				
				this.exportarFacturaPuntoVentasSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionFacturaPuntoVentas();
				//this.importarFacturaPuntoVentas();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessFacturaPuntoVenta();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelFacturaPuntoVentasSeleccionados();
				//this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Factura Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessFacturaPuntoVenta();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoFacturaPuntoVenta)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyFacturaPuntoVenta(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
				}	
			} 			
			else if(FacturaPuntoVentaBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteFacturaPuntoVenta) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessFacturaPuntoVenta(conSplash);
					
						//this.actualizarParametrosGeneralFacturaPuntoVenta();
						
						this.generarReporteProcesoAccionFacturaPuntoVentasSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(FacturaPuntoVentaBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Factura Punto VentaS SELECCIONADOS?", "MANTENIMIENTO DE Factura Punto Venta", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessFacturaPuntoVenta();
				
						this.actualizarParametrosGeneralFacturaPuntoVenta();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.facturapuntoventaReturnGeneral=facturapuntoventaLogic.procesarAccionFacturaPuntoVentasWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.facturapuntoventaLogic.getFacturaPuntoVentas(),this.facturapuntoventaParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarFacturaPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralFacturaPuntoVenta();
					
					FacturaPuntoVentaBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarFacturaPuntoVentaReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesFacturaPuntoVenta.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxTiposAccionesFormularioFacturaPuntoVenta.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessFacturaPuntoVenta(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesFacturaPuntoVentaActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessFacturaPuntoVenta();
			
			if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
			FacturaPuntoVenta facturapuntoventa=new FacturaPuntoVenta();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingFacturaPuntoVenta(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesFacturaPuntoVenta.getSelectedItem();
			
			
			
			
			facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
			//this.sTipoAccion;
			
			if(facturapuntoventasSeleccionados.size()==1) {
				for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
					facturapuntoventa=facturapuntoventaAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
				else if(this.sTipoRelacion.equals("Forma Pago")) {
					jButtonFormaPagoPuntoVentaActionPerformed(null,rowIndex,true,false,facturapuntoventa);
				}
				else if(this.sTipoRelacion.equals("Detalle Factura")) {
					jButtonDetalleFacturaPuntoVentaActionPerformed(null,rowIndex,true,false,facturapuntoventa);
				}
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessFacturaPuntoVenta();
			
      		//this.finishProcessFacturaPuntoVenta(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarFacturaPuntoVentaReturnGeneral() throws Exception {
		if(this.facturapuntoventaReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.facturapuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.facturapuntoventaReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.facturapuntoventaReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.facturapuntoventaReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.facturapuntoventaReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
		}
		
		if(this.facturapuntoventaReturnGeneral.getConRetornoLista() || this.facturapuntoventaReturnGeneral.getConRetornoObjeto()) {
			if(this.facturapuntoventaReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturapuntoventaLogic.setFacturaPuntoVentas(this.facturapuntoventaReturnGeneral.getFacturaPuntoVentas());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.facturapuntoventaReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.facturapuntoventaLogic.setFacturaPuntoVenta(this.facturapuntoventaReturnGeneral.getFacturaPuntoVenta());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingFacturaPuntoVenta(false);
		}
	}
	
	public void actualizarParametrosGeneralFacturaPuntoVenta() throws Exception {
		
		
	}
	
	public ArrayList<FacturaPuntoVenta> getFacturaPuntoVentasSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioFacturaPuntoVenta) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventaLogic.getFacturaPuntoVentas()) {
					if(facturapuntoventaAux.getIsSelected()) {
						facturapuntoventasSeleccionados.add(facturapuntoventaAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(FacturaPuntoVenta facturapuntoventaAux:this.facturapuntoventas) {
					if(facturapuntoventaAux.getIsSelected()) {
						facturapuntoventasSeleccionados.add(facturapuntoventaAux);				
					}
				}
			}
			
			if(facturapuntoventasSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						facturapuntoventasSeleccionados.addAll(this.facturapuntoventaLogic.getFacturaPuntoVentas());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						facturapuntoventasSeleccionados.addAll(this.facturapuntoventas);				
					}
				}
			}
		} else {
			facturapuntoventasSeleccionados.add(this.facturapuntoventa);
		}
		
		return facturapuntoventasSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteFacturaPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalFacturaPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoFacturaPuntoVentasSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaPuntoVentasSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoFacturaPuntoVentasSeleccionados(true);
		}
		else if(this.sTipoReporte.equals("RELACIONES")) {
			//SI SE GENERA REPORTE RELACIONES
			existe=true;
			this.generarReporteRelacionesFacturaPuntoVentasSeleccionados();
		}					
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Factura Punto Venta",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados);
		
	}	
	
	public void generarReporteNormalFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados);
	}		
	
	public void generarReporteProcesoAccionFacturaPuntoVentasSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		
		this.abrirInicializarFrameReporteDinamicoFacturaPuntoVenta();
		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoFacturaPuntoVenta();
		
		
		//this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados ,facturapuntoventaImplementable,facturapuntoventaImplementableHome);
	}
	
	public void mostrarImportacionFacturaPuntoVentas() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionFacturaPuntoVenta();
		
		this.abrirFrameImportacionFacturaPuntoVenta();		
		
			
		//this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados ,facturapuntoventaImplementable,facturapuntoventaImplementableHome);
	}
	
	public void importarFacturaPuntoVentas() throws Exception {		
	
	}
	
	public void exportarFacturaPuntoVentasSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelFacturaPuntoVentasSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoFacturaPuntoVentasSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlFacturaPuntoVentasSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Factura Punto Venta",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarFacturaPuntoVenta(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarFacturaPuntoVenta(facturapuntoventaAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//facturapuntoventaAux.setsDetalleGeneralEntityReporte(facturapuntoventaAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarFacturaPuntoVenta(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_HORA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_IVA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_FLETE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_ICE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_OTROS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=facturapuntoventa.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getvendedor_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getcliente_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getcaja_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettipoprecio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getmesa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getformato_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettipofacturapuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getestadofacturapuntoventa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getasientocontable_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getnumero_secuencial();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getcodigo_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getnombre_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettarjeta_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getdireccion_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettelefono_cliente();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gethora().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettotal_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettotal_sin_iva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getiva().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getdescuento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getfinanciamiento().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getflete().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getice().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getotros().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.getsub_total().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=facturapuntoventa.gettotal().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("FacturaPuntoVentas");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelFacturaPuntoVenta(row);				
				iRow++;
			}				
			
			for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelFacturaPuntoVenta(facturapuntoventaAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlFacturaPuntoVentasSeleccionados() throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();		
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"facturapuntoventa.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("facturapuntoventas");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("facturapuntoventa");
			//elementRoot.appendChild(element);
		
			for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
				element = document.createElement("facturapuntoventa");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlFacturaPuntoVenta(facturapuntoventaAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Factura Punto Venta",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelFacturaPuntoVenta(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_HORA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTALSINIVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_IVA);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_DESCUENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FINANCIAMIENTO);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_FLETE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_ICE);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_OTROS);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_SUBTOTAL);
		cell = row.createCell(iColumn++);cell.setCellValue(FacturaPuntoVentaConstantesFunciones.LABEL_TOTAL);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getvendedor_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getcliente_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getcaja_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettipoprecio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getmesa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getformato_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettipofacturapuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getestadofacturapuntoventa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getasientocontable_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getnumero_secuencial());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getcodigo_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getnombre_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettarjeta_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getdireccion_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettelefono_cliente());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gethora());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettotal_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettotal_sin_iva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getiva());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getdescuento());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getfinanciamiento());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getflete());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getice());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getotros());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.getsub_total());
		cell = row.createCell(iColumn++);cell.setCellValue(facturapuntoventa.gettotal());				
	}
	
	public void setFilaDatosExportarXmlFacturaPuntoVenta(FacturaPuntoVenta facturapuntoventa,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(FacturaPuntoVentaConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(facturapuntoventa.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(FacturaPuntoVentaConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(facturapuntoventa.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(facturapuntoventa.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(facturapuntoventa.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementusuario_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(facturapuntoventa.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementvendedor_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDVENDEDOR);
		elementvendedor_descripcion.appendChild(document.createTextNode(facturapuntoventa.getvendedor_descripcion()));
		element.appendChild(elementvendedor_descripcion);

		Element elementcliente_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDCLIENTE);
		elementcliente_descripcion.appendChild(document.createTextNode(facturapuntoventa.getcliente_descripcion()));
		element.appendChild(elementcliente_descripcion);

		Element elementcaja_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDCAJA);
		elementcaja_descripcion.appendChild(document.createTextNode(facturapuntoventa.getcaja_descripcion()));
		element.appendChild(elementcaja_descripcion);

		Element elementtipoprecio_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDTIPOPRECIO);
		elementtipoprecio_descripcion.appendChild(document.createTextNode(facturapuntoventa.gettipoprecio_descripcion()));
		element.appendChild(elementtipoprecio_descripcion);

		Element elementmesa_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDMESA);
		elementmesa_descripcion.appendChild(document.createTextNode(facturapuntoventa.getmesa_descripcion()));
		element.appendChild(elementmesa_descripcion);

		Element elementformato_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDFORMATO);
		elementformato_descripcion.appendChild(document.createTextNode(facturapuntoventa.getformato_descripcion()));
		element.appendChild(elementformato_descripcion);

		Element elementtipofacturapuntoventa_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDTIPOFACTURAPUNTOVENTA);
		elementtipofacturapuntoventa_descripcion.appendChild(document.createTextNode(facturapuntoventa.gettipofacturapuntoventa_descripcion()));
		element.appendChild(elementtipofacturapuntoventa_descripcion);

		Element elementestadofacturapuntoventa_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDESTADOFACTURAPUNTOVENTA);
		elementestadofacturapuntoventa_descripcion.appendChild(document.createTextNode(facturapuntoventa.getestadofacturapuntoventa_descripcion()));
		element.appendChild(elementestadofacturapuntoventa_descripcion);

		Element elementasientocontable_descripcion = document.createElement(FacturaPuntoVentaConstantesFunciones.IDASIENTOCONTABLE);
		elementasientocontable_descripcion.appendChild(document.createTextNode(facturapuntoventa.getasientocontable_descripcion()));
		element.appendChild(elementasientocontable_descripcion);

		Element elementnumero_secuencial = document.createElement(FacturaPuntoVentaConstantesFunciones.NUMEROSECUENCIAL);
		elementnumero_secuencial.appendChild(document.createTextNode(facturapuntoventa.getnumero_secuencial().trim()));
		element.appendChild(elementnumero_secuencial);

		Element elementcodigo_cliente = document.createElement(FacturaPuntoVentaConstantesFunciones.CODIGOCLIENTE);
		elementcodigo_cliente.appendChild(document.createTextNode(facturapuntoventa.getcodigo_cliente().trim()));
		element.appendChild(elementcodigo_cliente);

		Element elementnombre_cliente = document.createElement(FacturaPuntoVentaConstantesFunciones.NOMBRECLIENTE);
		elementnombre_cliente.appendChild(document.createTextNode(facturapuntoventa.getnombre_cliente().trim()));
		element.appendChild(elementnombre_cliente);

		Element elementtarjeta_cliente = document.createElement(FacturaPuntoVentaConstantesFunciones.TARJETACLIENTE);
		elementtarjeta_cliente.appendChild(document.createTextNode(facturapuntoventa.gettarjeta_cliente().trim()));
		element.appendChild(elementtarjeta_cliente);

		Element elementdireccion_cliente = document.createElement(FacturaPuntoVentaConstantesFunciones.DIRECCIONCLIENTE);
		elementdireccion_cliente.appendChild(document.createTextNode(facturapuntoventa.getdireccion_cliente().trim()));
		element.appendChild(elementdireccion_cliente);

		Element elementtelefono_cliente = document.createElement(FacturaPuntoVentaConstantesFunciones.TELEFONOCLIENTE);
		elementtelefono_cliente.appendChild(document.createTextNode(facturapuntoventa.gettelefono_cliente().trim()));
		element.appendChild(elementtelefono_cliente);

		Element elementfecha = document.createElement(FacturaPuntoVentaConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(facturapuntoventa.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementhora = document.createElement(FacturaPuntoVentaConstantesFunciones.HORA);
		elementhora.appendChild(document.createTextNode(facturapuntoventa.gethora().toString().trim()));
		element.appendChild(elementhora);

		Element elementtotal_iva = document.createElement(FacturaPuntoVentaConstantesFunciones.TOTALIVA);
		elementtotal_iva.appendChild(document.createTextNode(facturapuntoventa.gettotal_iva().toString().trim()));
		element.appendChild(elementtotal_iva);

		Element elementtotal_sin_iva = document.createElement(FacturaPuntoVentaConstantesFunciones.TOTALSINIVA);
		elementtotal_sin_iva.appendChild(document.createTextNode(facturapuntoventa.gettotal_sin_iva().toString().trim()));
		element.appendChild(elementtotal_sin_iva);

		Element elementiva = document.createElement(FacturaPuntoVentaConstantesFunciones.IVA);
		elementiva.appendChild(document.createTextNode(facturapuntoventa.getiva().toString().trim()));
		element.appendChild(elementiva);

		Element elementdescuento = document.createElement(FacturaPuntoVentaConstantesFunciones.DESCUENTO);
		elementdescuento.appendChild(document.createTextNode(facturapuntoventa.getdescuento().toString().trim()));
		element.appendChild(elementdescuento);

		Element elementfinanciamiento = document.createElement(FacturaPuntoVentaConstantesFunciones.FINANCIAMIENTO);
		elementfinanciamiento.appendChild(document.createTextNode(facturapuntoventa.getfinanciamiento().toString().trim()));
		element.appendChild(elementfinanciamiento);

		Element elementflete = document.createElement(FacturaPuntoVentaConstantesFunciones.FLETE);
		elementflete.appendChild(document.createTextNode(facturapuntoventa.getflete().toString().trim()));
		element.appendChild(elementflete);

		Element elementice = document.createElement(FacturaPuntoVentaConstantesFunciones.ICE);
		elementice.appendChild(document.createTextNode(facturapuntoventa.getice().toString().trim()));
		element.appendChild(elementice);

		Element elementotros = document.createElement(FacturaPuntoVentaConstantesFunciones.OTROS);
		elementotros.appendChild(document.createTextNode(facturapuntoventa.getotros().toString().trim()));
		element.appendChild(elementotros);

		Element elementsub_total = document.createElement(FacturaPuntoVentaConstantesFunciones.SUBTOTAL);
		elementsub_total.appendChild(document.createTextNode(facturapuntoventa.getsub_total().toString().trim()));
		element.appendChild(elementsub_total);

		Element elementtotal = document.createElement(FacturaPuntoVentaConstantesFunciones.TOTAL);
		elementtotal.appendChild(document.createTextNode(facturapuntoventa.gettotal().toString().trim()));
		element.appendChild(elementtotal);
	}
	
	public void generarReporteGroupGenericoFacturaPuntoVentasSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados=new ArrayList<FacturaPuntoVenta>();
		
		facturapuntoventasSeleccionados=this.getFacturaPuntoVentasSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoFacturaPuntoVenta(facturapuntoventasSeleccionados);
		
		this.generarReporteFacturaPuntoVentas("Todos",facturapuntoventasSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoFacturaPuntoVenta(ArrayList<FacturaPuntoVenta> facturapuntoventasSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(FacturaPuntoVenta facturapuntoventaAux:facturapuntoventasSeleccionados) {
				facturapuntoventaAux.setsDetalleGeneralEntityReporte(facturapuntoventaAux.toString());
			
				if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDVENDEDOR)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getvendedor_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDCLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getcliente_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDCAJA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getcaja_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOPRECIO)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.gettipoprecio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDMESA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getmesa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDFORMATO)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getformato_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDTIPOFACTURAPUNTOVENTA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.gettipofacturapuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDESTADOFACTURAPUNTOVENTA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getestadofacturapuntoventa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_IDASIENTOCONTABLE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getasientocontable_descripcion());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NUMEROSECUENCIAL)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getnumero_secuencial());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_CODIGOCLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getcodigo_cliente());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_NOMBRECLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getnombre_cliente());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TARJETACLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.gettarjeta_cliente());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_DIRECCIONCLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.getdireccion_cliente());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_TELEFONOCLIENTE)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.gettelefono_cliente());
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(facturapuntoventaAux.getfecha()));
				}
				 else if(sTipoSeleccionar.equals(FacturaPuntoVentaConstantesFunciones.LABEL_HORA)) {
					existe=true;
					facturapuntoventaAux.setsDescripcionGeneralEntityReporte1(facturapuntoventaAux.gethora().toString());
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,FacturaPuntoVentaConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesFacturaPuntoVenta(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoFacturaPuntoVenta=true;
				this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=true;
				this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=true;
			}
			
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=true;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=true;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
			this.isVisibilidadCeldaModificarFacturaPuntoVenta=true;
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaCancelarFacturaPuntoVenta=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				} else {
					this.isVisibilidadCeldaGuardarFacturaPuntoVenta=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(FacturaPuntoVentaJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=true;
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=true;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=true;
		} else {
			this.actualizarEstadoPanelsFacturaPuntoVenta(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarFacturaPuntoVenta=false;
			//this.isVisibilidadCeldaVerFormFacturaPuntoVenta=false;
			this.isVisibilidadCeldaDuplicarFacturaPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!facturapuntoventaSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
		} else {
			this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
			this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!facturapuntoventaSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;												
			}
			
			this.jButtonCerrarFacturaPuntoVenta.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesFacturaPuntoVenta=false;
		}
		
		if(!this.permiteMantenimiento(this.facturapuntoventa)) {
			this.isVisibilidadCeldaActualizarFacturaPuntoVenta=false;
			this.isVisibilidadCeldaEliminarFacturaPuntoVenta=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesFacturaPuntoVenta() {
		this.isVisibilidadCeldaNuevoFacturaPuntoVenta=false;
		this.isVisibilidadCeldaGuardarCambiosFacturaPuntoVenta=false;
	}
	
	public void actualizarEstadoPanelsFacturaPuntoVenta(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosEdicionFacturaPuntoVenta.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosFacturaPuntoVenta!=null) {
				this.jScrollPanelDatosFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelPaginacionFacturaPuntoVenta!=null) {
				this.jPanelPaginacionFacturaPuntoVenta.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
					this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.facturapuntoventaSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasFacturaPuntoVenta!=null) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesFacturaPuntoVenta!=null) {
				this.jPanelParametrosReportesFacturaPuntoVenta.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAsientoContable=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAsientoContable=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdAsientoContable=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaVendedor(Boolean isParaVendedor){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaVendedorNegation=!isParaVendedor;

			this.isVisibilidadFK_IdAsientoContable=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaVendedorNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaVendedor;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCliente(Boolean isParaCliente){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaClienteNegation=!isParaCliente;

			this.isVisibilidadFK_IdAsientoContable=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCliente;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaClienteNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaCaja(Boolean isParaCaja){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCajaNegation=!isParaCaja;

			this.isVisibilidadFK_IdAsientoContable=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaCaja;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaCajaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoPrecio(Boolean isParaTipoPrecio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoPrecioNegation=!isParaTipoPrecio;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoPrecio;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaTipoPrecioNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaMesa(Boolean isParaMesa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesaNegation=!isParaMesa;

			this.isVisibilidadFK_IdAsientoContable=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaMesa;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaMesaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaFormato(Boolean isParaFormato){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaFormatoNegation=!isParaFormato;

			this.isVisibilidadFK_IdAsientoContable=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaFormato;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaFormatoNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaTipoFacturaPuntoVenta(Boolean isParaTipoFacturaPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaTipoFacturaPuntoVentaNegation=!isParaTipoFacturaPuntoVenta;

			this.isVisibilidadFK_IdAsientoContable=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaTipoFacturaPuntoVenta;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaTipoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoFacturaPuntoVenta(Boolean isParaEstadoFacturaPuntoVenta){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoFacturaPuntoVentaNegation=!isParaEstadoFacturaPuntoVenta;

			this.isVisibilidadFK_IdAsientoContable=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaEstadoFacturaPuntoVenta;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaEstadoFacturaPuntoVentaNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}

	public void setVisibilidadBusquedasParaAsientoContable(Boolean isParaAsientoContable){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAsientoContableNegation=!isParaAsientoContable;

			this.isVisibilidadFK_IdAsientoContable=isParaAsientoContable;
			if(!this.isVisibilidadFK_IdAsientoContable) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdAsientoContableFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCaja=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCaja) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdCajaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdCliente=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdCliente) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdClienteFacturaPuntoVenta);}

			this.isVisibilidadFK_IdEstadoFacturaPuntoVenta=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdEstadoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdFormato=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdFormato) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdFormatoFacturaPuntoVenta);}

			this.isVisibilidadFK_IdMesa=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdMesa) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdMesaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoFacturaPuntoVenta=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoFacturaPuntoVenta) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);}

			this.isVisibilidadFK_IdTipoPrecio=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdTipoPrecio) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdTipoPrecioFacturaPuntoVenta);}

			this.isVisibilidadFK_IdVendedor=isParaAsientoContableNegation;
			if(!this.isVisibilidadFK_IdVendedor) {this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(jPanelFK_IdVendedorFacturaPuntoVenta);}
		}
		
	}
	
	

	public String registrarSesionFacturaPuntoVentaParaFormaPagoPuntoVentaes() throws Exception {
		Boolean isPaginaPopupFormaPagoPuntoVenta=false;

		try {

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean=new FormaPagoPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setsPathNavegacionActual(facturapuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+FormaPagoPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupFormaPagoPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeFormaPagoPuntoVenta(true);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeFormaPagoPuntoVenta(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionFacturaPuntoVenta(true);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setlidFacturaPuntoVentaActual(this.idFacturaPuntoVentaActual);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.formapagopuntoventaSessionBean.setNoMantenimiento(true);

			facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaPuntoVenta(true);
			facturapuntoventaSessionBean.setlIdFacturaPuntoVentaActualForeignKey(this.idFacturaPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}

	public String registrarSesionFacturaPuntoVentaParaDetalleFacturaPuntoVentas() throws Exception {
		Boolean isPaginaPopupDetalleFacturaPuntoVenta=false;

		try {

			if(this.facturapuntoventaSessionBean==null) {
				this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean==null) {
				this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean=new DetalleFacturaPuntoVentaSessionBean();
			}

			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setsPathNavegacionActual(facturapuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+DetalleFacturaPuntoVentaConstantesFunciones.SCLASSWEBTITULO);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setisPermiteRecargarInformacion(false);
			isPaginaPopupDetalleFacturaPuntoVenta=this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.getisPaginaPopup();
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeDetalleFacturaPuntoVenta(true);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeDetalleFacturaPuntoVenta(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionFacturaPuntoVenta(true);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setlidFacturaPuntoVentaActual(this.idFacturaPuntoVentaActual);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.detallefacturapuntoventaSessionBean.setNoMantenimiento(true);

			facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaPuntoVenta(true);
			facturapuntoventaSessionBean.setlIdFacturaPuntoVentaActualForeignKey(this.idFacturaPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}

		return "";
	}
	
	

	public String registrarSesionFacturaPuntoVentaParaBusquedaVendedores() throws Exception {
		Boolean isPaginaPopupVendedor=false;

		try {

			if(facturapuntoventaSessionBean==null) {
				facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(vendedorSessionBean==null) {
				vendedorSessionBean=new VendedorSessionBean();
			}

			vendedorSessionBean.setsPathNavegacionActual(facturapuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+VendedorConstantesFunciones.SCLASSWEBTITULO);
			vendedorSessionBean.setisPermiteRecargarInformacion(false);
			vendedorSessionBean.setisPaginaPopup(true);
			isPaginaPopupVendedor=vendedorSessionBean.getisPaginaPopup();
			vendedorSessionBean.setisPaginaPopup(false);
			vendedorSessionBean.setEstaModoBusqueda(true);
			vendedorSessionBean.setsFuncionBusquedaRapida("window.opener.facturapuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_vendedor(TO_REPLACE);");
			vendedorSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeVendedor(true);
			vendedorSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeVendedor(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//vendedorSessionBean.setisBusquedaDesdeForeignKeySesionFacturaPuntoVenta(true);
			//vendedorSessionBean.setlidFacturaPuntoVentaActual(this.idFacturaPuntoVentaActual);

			facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaPuntoVenta(true);
			facturapuntoventaSessionBean.setlIdFacturaPuntoVentaActualForeignKey(this.idFacturaPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaPuntoVentaParaBusquedaClientes() throws Exception {
		Boolean isPaginaPopupCliente=false;

		try {

			if(facturapuntoventaSessionBean==null) {
				facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(clienteSessionBean==null) {
				clienteSessionBean=new ClienteSessionBean();
			}

			clienteSessionBean.setsPathNavegacionActual(facturapuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+ClienteConstantesFunciones.SCLASSWEBTITULO);
			clienteSessionBean.setisPermiteRecargarInformacion(false);
			clienteSessionBean.setisPaginaPopup(true);
			isPaginaPopupCliente=clienteSessionBean.getisPaginaPopup();
			clienteSessionBean.setisPaginaPopup(false);
			clienteSessionBean.setEstaModoBusqueda(true);
			clienteSessionBean.setsFuncionBusquedaRapida("window.opener.facturapuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_cliente(TO_REPLACE);");
			clienteSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeCliente(true);
			clienteSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeCliente(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//clienteSessionBean.setisBusquedaDesdeForeignKeySesionFacturaPuntoVenta(true);
			//clienteSessionBean.setlidFacturaPuntoVentaActual(this.idFacturaPuntoVentaActual);

			facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaPuntoVenta(true);
			facturapuntoventaSessionBean.setlIdFacturaPuntoVentaActualForeignKey(this.idFacturaPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}

	public String registrarSesionFacturaPuntoVentaParaBusquedaAsientoContables() throws Exception {
		Boolean isPaginaPopupAsientoContable=false;

		try {

			if(facturapuntoventaSessionBean==null) {
				facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
			}

			if(asientocontableSessionBean==null) {
				asientocontableSessionBean=new AsientoContableSessionBean();
			}

			asientocontableSessionBean.setsPathNavegacionActual(facturapuntoventaSessionBean.getsPathNavegacionActual()+Constantes.SHTMLFLECHA+AsientoContableConstantesFunciones.SCLASSWEBTITULO);
			asientocontableSessionBean.setisPermiteRecargarInformacion(false);
			asientocontableSessionBean.setisPaginaPopup(true);
			isPaginaPopupAsientoContable=asientocontableSessionBean.getisPaginaPopup();
			asientocontableSessionBean.setisPaginaPopup(false);
			asientocontableSessionBean.setEstaModoBusqueda(true);
			asientocontableSessionBean.setsFuncionBusquedaRapida("window.opener.facturapuntoventaFuncionGeneral.setCombosCodigoDesdeBusquedaid_asiento_contable(TO_REPLACE);");
			asientocontableSessionBean.setisPermiteNavegacionHaciaForeignKeyDesdeAsientoContable(true);
			asientocontableSessionBean.setsNombrePaginaNavegacionHaciaForeignKeyDesdeAsientoContable(FacturaPuntoVentaConstantesFunciones.SNOMBREOPCION);
			//asientocontableSessionBean.setisBusquedaDesdeForeignKeySesionFacturaPuntoVenta(true);
			//asientocontableSessionBean.setlidFacturaPuntoVentaActual(this.idFacturaPuntoVentaActual);

			facturapuntoventaSessionBean.setisBusquedaDesdeForeignKeySesionForeignKeyFacturaPuntoVenta(true);
			facturapuntoventaSessionBean.setlIdFacturaPuntoVentaActualForeignKey(this.idFacturaPuntoVentaActual);

			String strPagina=Constantes.SNONE;
			SistemaLogicAdditional sistemaLogicAdditional=new SistemaLogicAdditional();

			guardarDatosBusquedaSession();

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
			return "";
	}
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//FacturaPuntoVentaSessionBean facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
		
		if(this.facturapuntoventaSessionBean==null) {
			this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
		}
		
		this.facturapuntoventaSessionBean.setsUltimaBusquedaFacturaPuntoVenta(this.getsAccionBusqueda());
		this.facturapuntoventaSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.facturapuntoventaSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
			facturapuntoventaSessionBean.setid_asiento_contable(this.getid_asiento_contableFK_IdAsientoContable());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
			facturapuntoventaSessionBean.setid_caja(this.getid_cajaFK_IdCaja());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
			facturapuntoventaSessionBean.setid_cliente(this.getid_clienteFK_IdCliente());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			facturapuntoventaSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoFacturaPuntoVenta")) {
			facturapuntoventaSessionBean.setid_estado_factura_punto_venta(this.getid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdFormato")) {
			facturapuntoventaSessionBean.setid_formato(this.getid_formatoFK_IdFormato());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
			facturapuntoventaSessionBean.setid_mesa(this.getid_mesaFK_IdMesa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			facturapuntoventaSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoFacturaPuntoVenta")) {
			facturapuntoventaSessionBean.setid_tipo_factura_punto_venta(this.getid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
			facturapuntoventaSessionBean.setid_tipo_precio(this.getid_tipo_precioFK_IdTipoPrecio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			facturapuntoventaSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
			facturapuntoventaSessionBean.setid_vendedor(this.getid_vendedorFK_IdVendedor());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//FacturaPuntoVentaSessionBean facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
		
		if(this.facturapuntoventaSessionBean==null) {
			this.facturapuntoventaSessionBean=new FacturaPuntoVentaSessionBean();
		}
		
		if(this.facturapuntoventaSessionBean.getsUltimaBusquedaFacturaPuntoVenta()!=null&&!this.facturapuntoventaSessionBean.getsUltimaBusquedaFacturaPuntoVenta().equals("")) {
			this.setsAccionBusqueda(facturapuntoventaSessionBean.getsUltimaBusquedaFacturaPuntoVenta());
			this.setiNumeroPaginacion(facturapuntoventaSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(facturapuntoventaSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAsientoContable")) {
				this.setid_asiento_contableFK_IdAsientoContable(facturapuntoventaSessionBean.getid_asiento_contable());
				facturapuntoventaSessionBean.setid_asiento_contable(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCaja")) {
				this.setid_cajaFK_IdCaja(facturapuntoventaSessionBean.getid_caja());
				facturapuntoventaSessionBean.setid_caja(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCliente")) {
				this.setid_clienteFK_IdCliente(facturapuntoventaSessionBean.getid_cliente());
				facturapuntoventaSessionBean.setid_cliente(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(facturapuntoventaSessionBean.getid_empresa());
				facturapuntoventaSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoFacturaPuntoVenta")) {
				this.setid_estado_factura_punto_ventaFK_IdEstadoFacturaPuntoVenta(facturapuntoventaSessionBean.getid_estado_factura_punto_venta());
				facturapuntoventaSessionBean.setid_estado_factura_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdFormato")) {
				this.setid_formatoFK_IdFormato(facturapuntoventaSessionBean.getid_formato());
				facturapuntoventaSessionBean.setid_formato(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMesa")) {
				this.setid_mesaFK_IdMesa(facturapuntoventaSessionBean.getid_mesa());
				facturapuntoventaSessionBean.setid_mesa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(facturapuntoventaSessionBean.getid_sucursal());
				facturapuntoventaSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoFacturaPuntoVenta")) {
				this.setid_tipo_factura_punto_ventaFK_IdTipoFacturaPuntoVenta(facturapuntoventaSessionBean.getid_tipo_factura_punto_venta());
				facturapuntoventaSessionBean.setid_tipo_factura_punto_venta(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdTipoPrecio")) {
				this.setid_tipo_precioFK_IdTipoPrecio(facturapuntoventaSessionBean.getid_tipo_precio());
				facturapuntoventaSessionBean.setid_tipo_precio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(facturapuntoventaSessionBean.getid_usuario());
				facturapuntoventaSessionBean.setid_usuario(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdVendedor")) {
				this.setid_vendedorFK_IdVendedor(facturapuntoventaSessionBean.getid_vendedor());
				facturapuntoventaSessionBean.setid_vendedor(-1L);
			}
		}
		
		this.facturapuntoventaSessionBean.setsUltimaBusquedaFacturaPuntoVenta("");
		this.facturapuntoventaSessionBean.setiNumeroPaginacion(FacturaPuntoVentaConstantesFunciones.INUMEROPAGINACION);
		this.facturapuntoventaSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaFacturaPuntoVenta(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioFacturaPuntoVenta() {
		this.updateBorderResaltarBusquedasFormularioFacturaPuntoVenta();
		this.updateVisibilidadBusquedasFormularioFacturaPuntoVenta();
		this.updateHabilitarBusquedasFormularioFacturaPuntoVenta();
	}
	
	public void updateBorderResaltarBusquedasFormularioFacturaPuntoVenta() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponents().length>0) {
	

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdAsientoContableFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdAsientoContableFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdCajaFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdCajaFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdClienteFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdClienteFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdFormatoFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdFormatoFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdMesaFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdMesaFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioFacturaPuntoVenta);
			}
		}

		if(this.facturapuntoventaConstantesFunciones.resaltarFK_IdVendedorFacturaPuntoVenta!=null) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorFacturaPuntoVenta);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdVendedorFacturaPuntoVenta);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioFacturaPuntoVenta() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdAsientoContableFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdAsientoContableFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdCajaFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdCajaFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdClienteFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdClienteFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdFormatoFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdFormatoFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdMesaFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdMesaFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdTipoPrecioFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorFacturaPuntoVenta);
			jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.facturapuntoventaConstantesFunciones.mostrarFK_IdVendedorFacturaPuntoVenta);
			if(!this.facturapuntoventaConstantesFunciones.mostrarFK_IdVendedorFacturaPuntoVenta && index>-1) {
				this.jTabbedPaneBusquedasFacturaPuntoVenta.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioFacturaPuntoVenta() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdAsientoContableFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdAsientoContableFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdCajaFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdCajaFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdClienteFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdClienteFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdFormatoFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdFormatoFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdMesaFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdMesaFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdTipoPrecioFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdTipoPrecioFacturaPuntoVenta);
			}

			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorFacturaPuntoVenta);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.facturapuntoventaConstantesFunciones.activarFK_IdVendedorFacturaPuntoVenta);
				this.jTabbedPaneBusquedasFacturaPuntoVenta.setEnabledAt(index,this.facturapuntoventaConstantesFunciones.activarFK_IdVendedorFacturaPuntoVenta);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaFacturaPuntoVenta(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAsientoContable")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdAsientoContableFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdAsientoContableFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdAsientoContableFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCaja")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdCajaFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdCajaFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdCajaFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCliente")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdClienteFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdClienteFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdClienteFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoFacturaPuntoVenta")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdEstadoFacturaPuntoVentaFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdFormato")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdFormatoFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdFormatoFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdFormatoFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMesa")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdMesaFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdMesaFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdMesaFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoFacturaPuntoVenta")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoFacturaPuntoVentaFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdTipoPrecio")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdTipoPrecioFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdTipoPrecioFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdTipoPrecioFacturaPuntoVenta);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdVendedor")) {
			index= this.jTabbedPaneBusquedasFacturaPuntoVenta.indexOfComponent(this.jPanelFK_IdVendedorFacturaPuntoVenta);

			this.jTabbedPaneBusquedasFacturaPuntoVenta.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasFacturaPuntoVenta.getComponent(index);

			this.facturapuntoventaConstantesFunciones.setResaltarFK_IdVendedorFacturaPuntoVenta(resaltar);

			jPanel.setBorder(this.facturapuntoventaConstantesFunciones.resaltarFK_IdVendedorFacturaPuntoVenta);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarFacturaPuntoVenta.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioFacturaPuntoVenta() throws Exception {

		if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioFacturaPuntoVenta();
		this.updateVisibilidadResaltarControlesFormularioFacturaPuntoVenta();
		this.updateHabilitarResaltarControlesFormularioFacturaPuntoVenta();
		
	}
	
	public void updateBorderResaltarControlesFormularioFacturaPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.facturapuntoventaConstantesFunciones.resaltaridFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltaridFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_empresaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_empresaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_sucursalFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_sucursalFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_usuarioFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_usuarioFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_vendedorFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_vendedorFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_cajaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_cajaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_tipo_precioFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_tipo_precioFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_mesaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_mesaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_formatoFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_formatoFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_tipo_factura_punto_ventaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_estado_factura_punto_ventaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_estado_factura_punto_ventaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarid_asiento_contableFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarid_asiento_contableFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarnumero_secuencialFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarnumero_secuencialFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarcodigo_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarcodigo_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarnombre_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarnombre_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltartarjeta_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltartarjeta_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltardireccion_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltardireccion_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltartelefono_clienteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltartelefono_clienteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarfechaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarfechaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarhoraFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarhoraFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltartotal_ivaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltartotal_ivaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltartotal_sin_ivaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltartotal_sin_ivaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarivaFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarivaFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltardescuentoFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltardescuentoFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarfinanciamientoFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarfinanciamientoFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarfleteFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarfleteFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltariceFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltariceFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarotrosFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarotrosFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltarsub_totalFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltarsub_totalFacturaPuntoVenta);}
		if(this.facturapuntoventaConstantesFunciones.resaltartotalFacturaPuntoVenta!=null && this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setBorder(this.facturapuntoventaConstantesFunciones.resaltartotalFacturaPuntoVenta);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioFacturaPuntoVenta() throws Exception {		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
	
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostraridFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelidFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostraridFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_empresaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_empresaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_empresaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_sucursalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_sucursalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_sucursalFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_usuarioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_usuarioFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_usuarioFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_vendedorFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_vendedorFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_vendedorFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_vendedorFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_clienteFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_cajaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_cajaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_cajaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_precioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_tipo_precioFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_precioFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_mesaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_mesaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_mesaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_formatoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_formatoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_formatoFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_tipo_factura_punto_ventaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_tipo_factura_punto_ventaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_estado_factura_punto_ventaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_estado_factura_punto_ventaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_estado_factura_punto_ventaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_asiento_contableFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelid_asiento_contableFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_asiento_contableFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarid_asiento_contableFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarnumero_secuencialFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelnumero_secuencialFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarnumero_secuencialFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarcodigo_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelcodigo_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarcodigo_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarnombre_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelnombre_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarnombre_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartarjeta_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneltarjeta_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartarjeta_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrardireccion_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneldireccion_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrardireccion_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartelefono_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneltelefono_clienteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartelefono_clienteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfechaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelfechaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfechaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarhoraFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelhoraFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarhoraFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotal_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneltotal_ivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotal_ivaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotal_sin_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneltotal_sin_ivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotal_sin_ivaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelivaFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarivaFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrardescuentoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneldescuentoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrardescuentoFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfinanciamientoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelfinanciamientoFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfinanciamientoFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfleteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelfleteFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarfleteFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrariceFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneliceFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrariceFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarotrosFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelotrosFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarotrosFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarsub_totalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPanelsub_totalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrarsub_totalFacturaPuntoVenta);
		//this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jPaneltotalFacturaPuntoVenta.setVisible(this.facturapuntoventaConstantesFunciones.mostrartotalFacturaPuntoVenta);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioFacturaPuntoVenta() throws Exception {
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormFacturaPuntoVenta!=null) {
	
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jLabelidFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activaridFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_empresaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_empresaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_sucursalFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_sucursalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_usuarioFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_usuarioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_vendedorFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_vendedorFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_vendedorFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_vendedorFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_clienteFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_cajaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_cajaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_precioFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_tipo_precioFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_mesaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_mesaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_formatoFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_formatoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_tipo_factura_punto_ventaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_tipo_factura_punto_ventaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_estado_factura_punto_ventaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_estado_factura_punto_ventaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jComboBoxid_asiento_contableFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_asiento_contableFacturaPuntoVenta);
			this.jInternalFrameDetalleFormFacturaPuntoVenta.jButtonid_asiento_contableFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarid_asiento_contableFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldnumero_secuencialFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarnumero_secuencialFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldcodigo_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarcodigo_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreanombre_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarnombre_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtarjeta_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activartarjeta_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreadireccion_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activardireccion_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextAreatelefono_clienteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activartelefono_clienteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jDateChooserfechaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarfechaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jSpinnerhoraFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarhoraFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_ivaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activartotal_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotal_sin_ivaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activartotal_sin_ivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldivaFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarivaFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFielddescuentoFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activardescuentoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfinanciamientoFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarfinanciamientoFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldfleteFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarfleteFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldiceFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activariceFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldotrosFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarotrosFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldsub_totalFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activarsub_totalFacturaPuntoVenta);
		this.jInternalFrameDetalleFormFacturaPuntoVenta.jTextFieldtotalFacturaPuntoVenta.setEnabled(this.facturapuntoventaConstantesFunciones.activartotalFacturaPuntoVenta);
		}
	}
	
		
}