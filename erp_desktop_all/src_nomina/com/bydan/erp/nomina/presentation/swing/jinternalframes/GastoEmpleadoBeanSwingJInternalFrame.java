/*
*AVISO LEGAL
Â© Copyright
*Este programa esta protegido por la ley de derechos de autor.
*La reproduccion o distribucion ilicita de este programa o de cualquiera de
*sus partes esta penado por la ley con severas sanciones civiles y penales,
*y seran objeto de todas las sanciones legales que correspondan.

*Su contenido no puede copiarse para fines comerciales o de otras,
*ni puede mostrarse, incluso en una version modificada, en otros sitios Web.
Solo esta permitido colocar hipervinculos al sitio web.
*/
package com.bydan.erp.nomina.presentation.swing.jinternalframes;




import com.bydan.erp.seguridad.business.entity.Usuario;
import com.bydan.erp.seguridad.business.entity.ResumenUsuario;
import com.bydan.erp.seguridad.business.entity.Opcion;
import com.bydan.erp.seguridad.business.entity.PerfilOpcion;
import com.bydan.erp.seguridad.business.entity.PerfilCampo;
import com.bydan.erp.seguridad.business.entity.PerfilAccion;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralSg;
import com.bydan.erp.seguridad.business.entity.ParametroGeneralUsuario;
import com.bydan.erp.seguridad.business.entity.Modulo;
import com.bydan.erp.seguridad.business.entity.Accion;

import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneralAdditional;
import com.bydan.erp.seguridad.util.SistemaParameterReturnGeneral;


//import com.bydan.erp.seguridad.business.entity.PerfilAccion;


import com.bydan.erp.seguridad.util.SistemaConstantesFunciones;
import com.bydan.erp.seguridad.util.SistemaConstantesFuncionesAdditional;
import com.bydan.erp.seguridad.business.logic.SistemaLogicAdditional;

import com.bydan.erp.nomina.util.GastoEmpleadoConstantesFunciones;
import com.bydan.erp.nomina.util.GastoEmpleadoParameterReturnGeneral;
//import com.bydan.erp.nomina.util.GastoEmpleadoParameterGeneral;
//import com.bydan.erp.nomina.presentation.report.source.GastoEmpleadoBean;
import com.bydan.framework.erp.business.dataaccess.ConstantesSql;
import com.bydan.framework.erp.business.entity.Classe;
import com.bydan.framework.erp.business.entity.DatoGeneral;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterGeneral;
import com.bydan.framework.erp.business.entity.OrderBy;
import com.bydan.framework.erp.business.entity.DatoGeneralMinimo;
import com.bydan.framework.erp.business.entity.GeneralEntity;
import com.bydan.framework.erp.business.entity.Mensajes;
import com.bydan.framework.erp.business.entity.GeneralEntityParameterReturnGeneral;
//import com.bydan.framework.erp.business.entity.MaintenanceType;
import com.bydan.framework.erp.util.MaintenanceType;
import com.bydan.framework.erp.util.FuncionesReporte;
import com.bydan.framework.erp.business.logic.DatosCliente;
import com.bydan.framework.erp.business.logic.Pagination;

import com.bydan.erp.nomina.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralTotalModel;
import com.bydan.framework.erp.presentation.desktop.swing.TablaGeneralOrderByModel;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverter;
import com.bydan.framework.erp.presentation.desktop.swing.DateConverterFromDate;
import com.bydan.framework.erp.presentation.desktop.swing.DateRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.DateEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.BooleanEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.TextFieldRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.RunnableProceso;
import com.bydan.framework.erp.presentation.desktop.swing.*;
//import com.bydan.framework.erp.presentation.desktop.swing.TextFieldEditorRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.HeaderRenderer;
import com.bydan.framework.erp.presentation.desktop.swing.JInternalFrameBase;
import com.bydan.framework.erp.presentation.desktop.swing.FuncionesSwing;
import com.bydan.framework.erp.presentation.desktop.swing.MainJFrame;
import com.bydan.framework.erp.resources.imagenes.AuxiliarImagenes;
import com.bydan.erp.nomina.resources.reportes.AuxiliarReportes;


import com.bydan.erp.nomina.util.*;
import com.bydan.erp.nomina.business.logic.*;

import com.bydan.erp.seguridad.business.logic.*;
import com.bydan.erp.contabilidad.business.logic.*;

//EJB

//PARAMETROS


//EJB PARAMETROS

import com.bydan.framework.erp.business.logic.*;
import com.bydan.framework.erp.util.*;

import com.bydan.erp.nomina.business.entity.*;
//import com.bydan.framework.erp.business.entity.ConexionBeanFace;
//import com.bydan.framework.erp.business.entity.Mensajes;


import com.bydan.erp.seguridad.presentation.swing.jinternalframes.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.*;

import com.bydan.erp.seguridad.presentation.swing.jinternalframes.auxiliar.*;
import com.bydan.erp.contabilidad.presentation.swing.jinternalframes.auxiliar.*;






import javax.imageio.ImageIO;
import java.net.NetworkInterface;
import java.net.InterfaceAddress;
import java.net.InetAddress;
import javax.naming.InitialContext;
import java.lang.Long;
import java.util.Date;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Set;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.Collections;
import java.io.File;
import java.io.FileInputStream;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.io.PrintWriter;
import java.sql.SQLException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.stream.StreamSource;

import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import org.w3c.dom.Document;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.util.CellRangeAddress;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;


import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRRuntimeException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.j2ee.servlets.BaseHttpServlet;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.data.JRBeanArrayDataSource;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

import org.apache.log4j.Logger;

import com.bydan.framework.erp.business.entity.Reporte;


//VALIDACION
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;

import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRCsvExporter;
import net.sf.jasperreports.engine.export.JRRtfExporter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.engine.util.JRSaver;
import net.sf.jasperreports.engine.xml.JRXmlWriter;


import com.bydan.erp.nomina.presentation.web.jsf.sessionbean.*;

import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.event.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.*;

import org.jdesktop.beansbinding.Binding.SyncFailure;
import org.jdesktop.beansbinding.BindingListener;
import org.jdesktop.beansbinding.Bindings;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.ELProperty;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.PropertyStateEvent;
import org.jdesktop.swingbinding.JComboBoxBinding;
import org.jdesktop.swingbinding.SwingBindings;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

import com.toedter.calendar.JDateChooser;


import com.bydan.erp.seguridad.business.entity.*;
import com.bydan.erp.contabilidad.business.entity.*;
import com.bydan.erp.seguridad.util.*;
import com.bydan.erp.contabilidad.util.*;
import com.bydan.erp.seguridad.presentation.web.jsf.sessionbean.*;
import com.bydan.erp.contabilidad.presentation.web.jsf.sessionbean.*;


@SuppressWarnings("unused")
public class GastoEmpleadoBeanSwingJInternalFrame extends GastoEmpleadoJInternalFrame implements WindowListener,WindowFocusListener
{				
	
	public static final long serialVersionUID = 1L;
	
	public static Logger logger = Logger.getLogger(GastoEmpleadoBeanSwingJInternalFrame.class);  
	
	public static ClassValidator<GastoEmpleado> gastoempleadoValidator = new ClassValidator<GastoEmpleado>(GastoEmpleado.class);
	
	public InvalidValue[] invalidValues=null;
		

	//Ejb Foreign Keys
	
	public GastoEmpleado gastoempleado;	
	public GastoEmpleado gastoempleadoAux;
	public GastoEmpleado gastoempleadoAnterior;//USADO PARA MANEJAR FOCUS GAINED,LOST
	public GastoEmpleado gastoempleadoTotales;
	public Long idGastoEmpleadoActual;
	public Long iIdNuevoGastoEmpleado=0L;
	public int rowIndexActual=0;
	
	
	
	
	public String sFinalQueryComboEmpresa="";

	public List<Empresa> empresasForeignKey;

	public List<Empresa> getempresasForeignKey() {
		return empresasForeignKey;
	}

	public void setempresasForeignKey(List<Empresa> empresasForeignKey) {
		this.empresasForeignKey = empresasForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empresa empresaForeignKey;

	public Empresa getempresaForeignKey() {
		return empresaForeignKey;
	}

	public void setempresaForeignKey(Empresa empresaForeignKey) {
		this.empresaForeignKey = empresaForeignKey;
	}

	public String sFinalQueryComboSucursal="";

	public List<Sucursal> sucursalsForeignKey;

	public List<Sucursal> getsucursalsForeignKey() {
		return sucursalsForeignKey;
	}

	public void setsucursalsForeignKey(List<Sucursal> sucursalsForeignKey) {
		this.sucursalsForeignKey = sucursalsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Sucursal sucursalForeignKey;

	public Sucursal getsucursalForeignKey() {
		return sucursalForeignKey;
	}

	public void setsucursalForeignKey(Sucursal sucursalForeignKey) {
		this.sucursalForeignKey = sucursalForeignKey;
	}

	public String sFinalQueryComboEmpleado="";

	public List<Empleado> empleadosForeignKey;

	public List<Empleado> getempleadosForeignKey() {
		return empleadosForeignKey;
	}

	public void setempleadosForeignKey(List<Empleado> empleadosForeignKey) {
		this.empleadosForeignKey = empleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Empleado empleadoForeignKey;

	public Empleado getempleadoForeignKey() {
		return empleadoForeignKey;
	}

	public void setempleadoForeignKey(Empleado empleadoForeignKey) {
		this.empleadoForeignKey = empleadoForeignKey;
	}

	public String sFinalQueryComboEjercicio="";

	public List<Ejercicio> ejerciciosForeignKey;

	public List<Ejercicio> getejerciciosForeignKey() {
		return ejerciciosForeignKey;
	}

	public void setejerciciosForeignKey(List<Ejercicio> ejerciciosForeignKey) {
		this.ejerciciosForeignKey = ejerciciosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ejercicio ejercicioForeignKey;

	public Ejercicio getejercicioForeignKey() {
		return ejercicioForeignKey;
	}

	public void setejercicioForeignKey(Ejercicio ejercicioForeignKey) {
		this.ejercicioForeignKey = ejercicioForeignKey;
	}

	public String sFinalQueryComboPais="";

	public List<Pais> paissForeignKey;

	public List<Pais> getpaissForeignKey() {
		return paissForeignKey;
	}

	public void setpaissForeignKey(List<Pais> paissForeignKey) {
		this.paissForeignKey = paissForeignKey;
	}

	//OBJETO FK ACTUAL
	public Pais paisForeignKey;

	public Pais getpaisForeignKey() {
		return paisForeignKey;
	}

	public void setpaisForeignKey(Pais paisForeignKey) {
		this.paisForeignKey = paisForeignKey;
	}

	public String sFinalQueryComboCiudad="";

	public List<Ciudad> ciudadsForeignKey;

	public List<Ciudad> getciudadsForeignKey() {
		return ciudadsForeignKey;
	}

	public void setciudadsForeignKey(List<Ciudad> ciudadsForeignKey) {
		this.ciudadsForeignKey = ciudadsForeignKey;
	}

	//OBJETO FK ACTUAL
	public Ciudad ciudadForeignKey;

	public Ciudad getciudadForeignKey() {
		return ciudadForeignKey;
	}

	public void setciudadForeignKey(Ciudad ciudadForeignKey) {
		this.ciudadForeignKey = ciudadForeignKey;
	}

	public String sFinalQueryComboAnio="";

	public List<Anio> aniosForeignKey;

	public List<Anio> getaniosForeignKey() {
		return aniosForeignKey;
	}

	public void setaniosForeignKey(List<Anio> aniosForeignKey) {
		this.aniosForeignKey = aniosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Anio anioForeignKey;

	public Anio getanioForeignKey() {
		return anioForeignKey;
	}

	public void setanioForeignKey(Anio anioForeignKey) {
		this.anioForeignKey = anioForeignKey;
	}

	public String sFinalQueryComboMes="";

	public List<Mes> messForeignKey;

	public List<Mes> getmessForeignKey() {
		return messForeignKey;
	}

	public void setmessForeignKey(List<Mes> messForeignKey) {
		this.messForeignKey = messForeignKey;
	}

	//OBJETO FK ACTUAL
	public Mes mesForeignKey;

	public Mes getmesForeignKey() {
		return mesForeignKey;
	}

	public void setmesForeignKey(Mes mesForeignKey) {
		this.mesForeignKey = mesForeignKey;
	}

	public String sFinalQueryComboUsuario="";

	public List<Usuario> usuariosForeignKey;

	public List<Usuario> getusuariosForeignKey() {
		return usuariosForeignKey;
	}

	public void setusuariosForeignKey(List<Usuario> usuariosForeignKey) {
		this.usuariosForeignKey = usuariosForeignKey;
	}

	//OBJETO FK ACTUAL
	public Usuario usuarioForeignKey;

	public Usuario getusuarioForeignKey() {
		return usuarioForeignKey;
	}

	public void setusuarioForeignKey(Usuario usuarioForeignKey) {
		this.usuarioForeignKey = usuarioForeignKey;
	}

	public String sFinalQueryComboEstadoGastoEmpleado="";

	public List<EstadoGastoEmpleado> estadogastoempleadosForeignKey;

	public List<EstadoGastoEmpleado> getestadogastoempleadosForeignKey() {
		return estadogastoempleadosForeignKey;
	}

	public void setestadogastoempleadosForeignKey(List<EstadoGastoEmpleado> estadogastoempleadosForeignKey) {
		this.estadogastoempleadosForeignKey = estadogastoempleadosForeignKey;
	}

	//OBJETO FK ACTUAL
	public EstadoGastoEmpleado estadogastoempleadoForeignKey;

	public EstadoGastoEmpleado getestadogastoempleadoForeignKey() {
		return estadogastoempleadoForeignKey;
	}

	public void setestadogastoempleadoForeignKey(EstadoGastoEmpleado estadogastoempleadoForeignKey) {
		this.estadogastoempleadoForeignKey = estadogastoempleadoForeignKey;
	}

		
	
	
	
	
	
	
	
	//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
	public String sFinalQueryGeneral="";
	public Boolean isEntroOnLoad=false;
	public Boolean isErrorGuardar=false;
	
	public Boolean isGuardarCambiosEnLote=false;
	public Boolean isCargarCombosDependencia=false;
	public Boolean isSeleccionarTodos=false;
	public Boolean isSeleccionados=false;
	public Boolean conGraficoReporte=false;
	
	public Boolean isPostAccionNuevo=false;
	public Boolean isPostAccionSinCerrar=false;
	public Boolean isPostAccionSinMensaje=false;
	
	
	public Boolean esControlTabla=false;
	
	public Boolean isPermisoTodoGastoEmpleado;
	public Boolean isPermisoNuevoGastoEmpleado;
	public Boolean isPermisoActualizarGastoEmpleado;
	public Boolean isPermisoActualizarOriginalGastoEmpleado;
	public Boolean isPermisoEliminarGastoEmpleado;
	public Boolean isPermisoGuardarCambiosGastoEmpleado;
	public Boolean isPermisoConsultaGastoEmpleado;
	public Boolean isPermisoBusquedaGastoEmpleado;
	public Boolean isPermisoReporteGastoEmpleado;
	public Boolean isPermisoPaginacionMedioGastoEmpleado;
	public Boolean isPermisoPaginacionAltoGastoEmpleado;
	public Boolean isPermisoPaginacionTodoGastoEmpleado;
	public Boolean isPermisoCopiarGastoEmpleado;
	public Boolean isPermisoVerFormGastoEmpleado;
	public Boolean isPermisoDuplicarGastoEmpleado;
	public Boolean isPermisoOrdenGastoEmpleado;
	
	
	public ArrayList<DatoGeneral> arrDatoGeneral;
	public ArrayList<String> arrDatoGeneralNo;
	ArrayList<Classe> classesActual=new ArrayList<Classe>();
	
	public List<Accion> accions;	
	public List<Accion> accionsFormulario;
	
	
	public ArrayList<DatoGeneralMinimo> arrDatoGeneralMinimos;
	
	public ArrayList<Reporte> tiposArchivosReportes;
	public ArrayList<Reporte> tiposArchivosReportesDinamico;
	public ArrayList<Reporte> tiposReportes;
	public ArrayList<Reporte> tiposReportesDinamico;
	public ArrayList<Reporte> tiposGraficosReportes;
	public ArrayList<Reporte> tiposPaginacion;
	public ArrayList<Reporte> tiposRelaciones;
	public ArrayList<Reporte> tiposAcciones;
	public ArrayList<Reporte> tiposAccionesFormulario;
	public ArrayList<Reporte> tiposSeleccionar;
	
	public ArrayList<Reporte> tiposColumnasSelect;
	public ArrayList<Reporte> tiposRelacionesSelect;
	
	
	public Integer iNumeroPaginacion;
	public Integer iNumeroPaginacionPagina;
	public Pagination pagination;
	public DatosCliente datosCliente;
	public DatosDeep datosDeep;
	public String sTipoArchivoReporte="";
	public String sTipoArchivoReporteDinamico="";
	public String sTipoReporte="";
	public String sTipoReporteDinamico="";
	public String sTipoGraficoReporte="";
	public String sTipoPaginacion="";
	public String sTipoRelacion="";
	public String sTipoAccion="";
	public String sTipoAccionFormulario="";
	public String sTipoSeleccionar="";	
	public String sDetalleReporte="";
	public Boolean isMostrarNumeroPaginacion;
	public String sTipoReporteExtra="";
	public String sValorCampoGeneral="";
	public Boolean esReporteDinamico=false;
	public Boolean esReporteAccionProceso=false;
	public Boolean esRecargarFks=false;
	public String sPathReporteDinamico="";
	
	public GastoEmpleadoParameterReturnGeneral gastoempleadoReturnGeneral;
	public GastoEmpleadoParameterReturnGeneral gastoempleadoParameterGeneral;
	
	 	
	public JasperPrint jasperPrint = null;
	
	public Long lIdUsuarioSesion=0L;				
	
	public Boolean isEsNuevoGastoEmpleado=false;
	public Boolean esParaAccionDesdeFormularioGastoEmpleado=false;
	public Boolean isEsMantenimientoRelacionesRelacionadoUnico=false;
	public Boolean isEsMantenimientoRelaciones=false;
	public Boolean isEsMantenimientoRelacionado=false;	
	public Boolean isContieneImagenes=false;
		
	//public Boolean conTotales=false; //Viene heredado de JInternalFrameBase
	//public Boolean esParaBusquedaForeignKey=false;
	
	
	protected GastoEmpleadoSessionBeanAdditional gastoempleadoSessionBeanAdditional=null;
	
	public GastoEmpleadoSessionBeanAdditional getGastoEmpleadoSessionBeanAdditional() {
		return this.gastoempleadoSessionBeanAdditional;
	}
	
	public void setGastoEmpleadoSessionBeanAdditional(GastoEmpleadoSessionBeanAdditional gastoempleadoSessionBeanAdditional) {
		try {
			this.gastoempleadoSessionBeanAdditional=gastoempleadoSessionBeanAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	protected GastoEmpleadoBeanSwingJInternalFrameAdditional gastoempleadoBeanSwingJInternalFrameAdditional=null;
	//public class GastoEmpleadoBeanSwingJInternalFrame
	
	public GastoEmpleadoBeanSwingJInternalFrameAdditional getGastoEmpleadoBeanSwingJInternalFrameAdditional() {
		return this.gastoempleadoBeanSwingJInternalFrameAdditional;
	}
	
	public void setGastoEmpleadoBeanSwingJInternalFrameAdditional(GastoEmpleadoBeanSwingJInternalFrameAdditional gastoempleadoBeanSwingJInternalFrameAdditional) {
		try {
			this.gastoempleadoBeanSwingJInternalFrameAdditional=gastoempleadoBeanSwingJInternalFrameAdditional;
		} catch(Exception e) {
			;
		}
	}
	
	
	
	
	//ESTA EN PADRE
	
	//public GastoEmpleadoLogic gastoempleadoLogic;
	public SistemaLogicAdditional sistemaLogicAdditional;
	
	
	public GastoEmpleado gastoempleadoBean;
	public GastoEmpleadoConstantesFunciones gastoempleadoConstantesFunciones;
	//public GastoEmpleadoParameterReturnGeneral gastoempleadoReturnGeneral;
	
	//FK
	
	public EmpresaLogic empresaLogic;
	public SucursalLogic sucursalLogic;
	public EmpleadoLogic empleadoLogic;
	public EjercicioLogic ejercicioLogic;
	public PaisLogic paisLogic;
	public CiudadLogic ciudadLogic;
	public AnioLogic anioLogic;
	public MesLogic mesLogic;
	public UsuarioLogic usuarioLogic;
	public EstadoGastoEmpleadoLogic estadogastoempleadoLogic;
	
	//PARAMETROS
	
	
	//public List<GastoEmpleado> gastoempleados;	
	//public List<GastoEmpleado> gastoempleadosEliminados;
	//public List<GastoEmpleado> gastoempleadosAux;
	
	public String sAccionMantenimiento="";
	public String sAccionBusqueda="";
	public String sAccionAdicional="";
	public String sUltimaBusqueda="";
	
	public Mensaje mensaje;
	
	
	public String sVisibilidadTablaBusquedas="";					
	public String sVisibilidadTablaElementos="";	
	public String sVisibilidadTablaAcciones="";			
	
	public Boolean isVisibilidadCeldaNuevoGastoEmpleado=false;
	public Boolean isVisibilidadCeldaDuplicarGastoEmpleado=true;
	public Boolean isVisibilidadCeldaCopiarGastoEmpleado=true;
	public Boolean isVisibilidadCeldaVerFormGastoEmpleado=true;
	public Boolean isVisibilidadCeldaOrdenGastoEmpleado=true;
	public Boolean isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
	public Boolean isVisibilidadCeldaModificarGastoEmpleado=false;
	public Boolean isVisibilidadCeldaActualizarGastoEmpleado=false;
	public Boolean isVisibilidadCeldaEliminarGastoEmpleado=false;
	public Boolean isVisibilidadCeldaCancelarGastoEmpleado=false;
	public Boolean isVisibilidadCeldaGuardarGastoEmpleado=false;	
	public Boolean isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;	
	
	
	public Boolean isVisibilidadFK_IdAnio=false;
	public Boolean isVisibilidadFK_IdCiudad=false;
	public Boolean isVisibilidadFK_IdEjercicio=false;
	public Boolean isVisibilidadFK_IdEmpleado=false;
	public Boolean isVisibilidadFK_IdEmpresa=false;
	public Boolean isVisibilidadFK_IdEstadoGastoEmpleado=false;
	public Boolean isVisibilidadFK_IdMes=false;
	public Boolean isVisibilidadFK_IdPais=false;
	public Boolean isVisibilidadFK_IdSucursal=false;
	public Boolean isVisibilidadFK_IdUsuario=false;
	
	public Long getiIdNuevoGastoEmpleado() {
		return this.iIdNuevoGastoEmpleado;
	}

	public void setiIdNuevoGastoEmpleado(Long iIdNuevoGastoEmpleado) {
		this.iIdNuevoGastoEmpleado = iIdNuevoGastoEmpleado;
	}
	
	public Long getidGastoEmpleadoActual() {
		return this.idGastoEmpleadoActual;
	}

	public void setidGastoEmpleadoActual(Long idGastoEmpleadoActual) {
		this.idGastoEmpleadoActual = idGastoEmpleadoActual;
	}
	
	public int getrowIndexActual() {
		return this.rowIndexActual;
	}

	public void setrowIndexActual(int rowIndexActual) {
		this.rowIndexActual=rowIndexActual;
	}
	
	
	public GastoEmpleado getgastoempleado() {
		return this.gastoempleado;
	}

	public void setgastoempleado(GastoEmpleado gastoempleado) {
		this.gastoempleado = gastoempleado;
	}
	
	public GastoEmpleado getgastoempleadoAux() {
		return this.gastoempleadoAux;
	}

	public void setgastoempleadoAux(GastoEmpleado gastoempleadoAux) {
		this.gastoempleadoAux = gastoempleadoAux;
	}				
	
	public GastoEmpleado getgastoempleadoAnterior() {
		return this.gastoempleadoAnterior;
	}

	public void setgastoempleadoAnterior(GastoEmpleado gastoempleadoAnterior) {
		this.gastoempleadoAnterior = gastoempleadoAnterior;
	}	
	
	public GastoEmpleado getgastoempleadoTotales() {
		return this.gastoempleadoTotales;
	}

	public void setgastoempleadoTotales(GastoEmpleado gastoempleadoTotales) {
		this.gastoempleadoTotales = gastoempleadoTotales;
	}	
	
	public GastoEmpleado getgastoempleadoBean() {
		return this.gastoempleadoBean;
	}

	public void setgastoempleadoBean(GastoEmpleado gastoempleadoBean) {
		this.gastoempleadoBean = gastoempleadoBean;
	}	
	
	public GastoEmpleadoParameterReturnGeneral getgastoempleadoReturnGeneral() {
		return this.gastoempleadoReturnGeneral;
	}

	public void setgastoempleadoReturnGeneral(GastoEmpleadoParameterReturnGeneral gastoempleadoReturnGeneral) {
		this.gastoempleadoReturnGeneral = gastoempleadoReturnGeneral;
	}	
	
	
	public Long id_anioFK_IdAnio=null;

	public Long getid_anioFK_IdAnio() {
		return this.id_anioFK_IdAnio;
	}

	public void setid_anioFK_IdAnio(Long id_anioFK_IdAnio) {
		this.id_anioFK_IdAnio = id_anioFK_IdAnio;
	}

	public Long id_ciudadFK_IdCiudad=-1L;

	public Long getid_ciudadFK_IdCiudad() {
		return this.id_ciudadFK_IdCiudad;
	}

	public void setid_ciudadFK_IdCiudad(Long id_ciudadFK_IdCiudad) {
		this.id_ciudadFK_IdCiudad = id_ciudadFK_IdCiudad;
	}

	public Long id_ejercicioFK_IdEjercicio=-1L;

	public Long getid_ejercicioFK_IdEjercicio() {
		return this.id_ejercicioFK_IdEjercicio;
	}

	public void setid_ejercicioFK_IdEjercicio(Long id_ejercicioFK_IdEjercicio) {
		this.id_ejercicioFK_IdEjercicio = id_ejercicioFK_IdEjercicio;
	}

	public Long id_empleadoFK_IdEmpleado=-1L;

	public Long getid_empleadoFK_IdEmpleado() {
		return this.id_empleadoFK_IdEmpleado;
	}

	public void setid_empleadoFK_IdEmpleado(Long id_empleadoFK_IdEmpleado) {
		this.id_empleadoFK_IdEmpleado = id_empleadoFK_IdEmpleado;
	}

	public Long id_empresaFK_IdEmpresa=-1L;

	public Long getid_empresaFK_IdEmpresa() {
		return this.id_empresaFK_IdEmpresa;
	}

	public void setid_empresaFK_IdEmpresa(Long id_empresaFK_IdEmpresa) {
		this.id_empresaFK_IdEmpresa = id_empresaFK_IdEmpresa;
	}

	public Long id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado=-1L;

	public Long getid_estado_gasto_empleadoFK_IdEstadoGastoEmpleado() {
		return this.id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado;
	}

	public void setid_estado_gasto_empleadoFK_IdEstadoGastoEmpleado(Long id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado) {
		this.id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado = id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado;
	}

	public Long id_mesFK_IdMes=null;

	public Long getid_mesFK_IdMes() {
		return this.id_mesFK_IdMes;
	}

	public void setid_mesFK_IdMes(Long id_mesFK_IdMes) {
		this.id_mesFK_IdMes = id_mesFK_IdMes;
	}

	public Long id_paisFK_IdPais=-1L;

	public Long getid_paisFK_IdPais() {
		return this.id_paisFK_IdPais;
	}

	public void setid_paisFK_IdPais(Long id_paisFK_IdPais) {
		this.id_paisFK_IdPais = id_paisFK_IdPais;
	}

	public Long id_sucursalFK_IdSucursal=-1L;

	public Long getid_sucursalFK_IdSucursal() {
		return this.id_sucursalFK_IdSucursal;
	}

	public void setid_sucursalFK_IdSucursal(Long id_sucursalFK_IdSucursal) {
		this.id_sucursalFK_IdSucursal = id_sucursalFK_IdSucursal;
	}

	public Long id_usuarioFK_IdUsuario=-1L;

	public Long getid_usuarioFK_IdUsuario() {
		return this.id_usuarioFK_IdUsuario;
	}

	public void setid_usuarioFK_IdUsuario(Long id_usuarioFK_IdUsuario) {
		this.id_usuarioFK_IdUsuario = id_usuarioFK_IdUsuario;
	}

		
	
	//ELEMENTOS TABLAS PARAMETOS
	
	
	
	
	
	
	//ELEMENTOS TABLAS PARAMETOS_FIN
	
	
	public GastoEmpleadoLogic getGastoEmpleadoLogic()	{		
		return gastoempleadoLogic;
	}

	public void setGastoEmpleadoLogic(GastoEmpleadoLogic gastoempleadoLogic) {
		this.gastoempleadoLogic = gastoempleadoLogic;
	}
	
	
	public void setsFinalQueryGeneral(String sFinalQueryGeneral) {
		this.sFinalQueryGeneral=sFinalQueryGeneral;
	}
	
	public String getsFinalQueryGeneral() {
		return this.sFinalQueryGeneral;
	}
		
	public Boolean getIsGuardarCambiosEnLote() {
		return isGuardarCambiosEnLote;
	}

	public void setIsGuardarCambiosEnLote(Boolean isGuardarCambiosEnLote) {
		this.isGuardarCambiosEnLote = isGuardarCambiosEnLote;
	}
	
	public Boolean getIsCargarCombosDependencia() {
		return isCargarCombosDependencia;
	}

	public void setIsCargarCombosDependencia(Boolean isCargarCombosDependencia) {
		this.isCargarCombosDependencia = isCargarCombosDependencia;
	}
	
	public Boolean getIsEsNuevoGastoEmpleado() {
		return isEsNuevoGastoEmpleado;
	}

	public void setIsEsNuevoGastoEmpleado(Boolean isEsNuevoGastoEmpleado) {
		this.isEsNuevoGastoEmpleado = isEsNuevoGastoEmpleado;
	}

	public Boolean getEsParaAccionDesdeFormularioGastoEmpleado() {
		return esParaAccionDesdeFormularioGastoEmpleado;
	}
	
	public void setEsParaAccionDesdeFormularioGastoEmpleado(Boolean esParaAccionDesdeFormularioGastoEmpleado) {
		this.esParaAccionDesdeFormularioGastoEmpleado = esParaAccionDesdeFormularioGastoEmpleado;
	}
	
	public Boolean getIsEsMantenimientoRelacionesRelacionadoUnico() {
		return isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public void setIsEsMantenimientoRelacionesRelacionadoUnico(Boolean isEsMantenimientoRelacionesRelacionadoUnico) {
		this.isEsMantenimientoRelacionesRelacionadoUnico = isEsMantenimientoRelacionesRelacionadoUnico;
	}

	public Boolean getIsEsMantenimientoRelaciones() {
		return isEsMantenimientoRelaciones;
	}

	public void setIsEsMantenimientoRelaciones(Boolean isEsMantenimientoRelaciones) {
		this.isEsMantenimientoRelaciones = isEsMantenimientoRelaciones;
	}

	public Boolean getIsEsMantenimientoRelacionado() {
		return isEsMantenimientoRelacionado;
	}

	public void setIsEsMantenimientoRelacionado(Boolean isEsMantenimientoRelacionado) {
		this.isEsMantenimientoRelacionado = isEsMantenimientoRelacionado;
	}

	public Boolean getesParaBusquedaForeignKey() {
		return esParaBusquedaForeignKey;
	}

	public void setesParaBusquedaForeignKey(Boolean esParaBusquedaForeignKey) {
		this.esParaBusquedaForeignKey = esParaBusquedaForeignKey;
	}

	public Boolean getIsContieneImagenes() {
		return isContieneImagenes;
	}

	public void setIsContieneImagenes(Boolean isContieneImagenes) {
		this.isContieneImagenes = isContieneImagenes;
	}		
	
	
	public void cargarCombosEmpresasForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empresasForeignKey=new ArrayList<Empresa>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpresaLogic empresaLogic=new EmpresaLogic();

			//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empresaLogic.getEmpresaDataAccess().setIsForForeingKeyData(true);

					empresaLogic.getTodosEmpresasWithConnection(sFinalQuery,new Pagination());

					this.empresasForeignKey=empresaLogic.getEmpresas();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpresa(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empresaLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidEmpresaActual());
					this.empresasForeignKey.add(empresaLogic.getEmpresa());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosSucursalsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.sucursalsForeignKey=new ArrayList<Sucursal>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			SucursalLogic sucursalLogic=new SucursalLogic();

			//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//sucursalLogic.getSucursalDataAccess().setIsForForeingKeyData(true);

					sucursalLogic.getTodosSucursalsWithConnection(sFinalQuery,new Pagination());

					this.sucursalsForeignKey=sucursalLogic.getSucursals();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaSucursal(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					sucursalLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidSucursalActual());
					this.sucursalsForeignKey.add(sucursalLogic.getSucursal());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.empleadosForeignKey=new ArrayList<Empleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EmpleadoLogic empleadoLogic=new EmpleadoLogic();

			//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//empleadoLogic.getEmpleadoDataAccess().setIsForForeingKeyData(true);

					empleadoLogic.getTodosEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.empleadosForeignKey=empleadoLogic.getEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					empleadoLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidEmpleadoActual());
					this.empleadosForeignKey.add(empleadoLogic.getEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEjerciciosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EjercicioLogic ejercicioLogic=new EjercicioLogic();

			//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ejercicioLogic.getEjercicioDataAccess().setIsForForeingKeyData(true);

					ejercicioLogic.getTodosEjerciciosWithConnection(sFinalQuery,new Pagination());

					this.ejerciciosForeignKey=ejercicioLogic.getEjercicios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEjercicio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ejercicioLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidEjercicioActual());
					this.ejerciciosForeignKey.add(ejercicioLogic.getEjercicio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosPaissForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.paissForeignKey=new ArrayList<Pais>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			PaisLogic paisLogic=new PaisLogic();

			//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//paisLogic.getPaisDataAccess().setIsForForeingKeyData(true);

					paisLogic.getTodosPaissWithConnection(sFinalQuery,new Pagination());

					this.paissForeignKey=paisLogic.getPaiss();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaPais(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					paisLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidPaisActual());
					this.paissForeignKey.add(paisLogic.getPais());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosCiudadsForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.ciudadsForeignKey=new ArrayList<Ciudad>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			CiudadLogic ciudadLogic=new CiudadLogic();

			//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//ciudadLogic.getCiudadDataAccess().setIsForForeingKeyData(true);

					ciudadLogic.getTodosCiudadsWithConnection(sFinalQuery,new Pagination());

					this.ciudadsForeignKey=ciudadLogic.getCiudads();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaCiudad(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					ciudadLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidCiudadActual());
					this.ciudadsForeignKey.add(ciudadLogic.getCiudad());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosAniosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.aniosForeignKey=new ArrayList<Anio>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			AnioLogic anioLogic=new AnioLogic();

			//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//anioLogic.getAnioDataAccess().setIsForForeingKeyData(true);

					anioLogic.getTodosAniosWithConnection(sFinalQuery,new Pagination());

					this.aniosForeignKey=anioLogic.getAnios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaAnio(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					anioLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidAnioActual());
					this.aniosForeignKey.add(anioLogic.getAnio());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosMessForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.messForeignKey=new ArrayList<Mes>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			MesLogic mesLogic=new MesLogic();

			//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//mesLogic.getMesDataAccess().setIsForForeingKeyData(true);

					mesLogic.getTodosMessWithConnection(sFinalQuery,new Pagination());

					this.messForeignKey=mesLogic.getMess();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaMes(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					mesLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidMesActual());
					this.messForeignKey.add(mesLogic.getMes());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosUsuariosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.usuariosForeignKey=new ArrayList<Usuario>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			UsuarioLogic usuarioLogic=new UsuarioLogic();

			//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//usuarioLogic.getUsuarioDataAccess().setIsForForeingKeyData(true);

					usuarioLogic.getTodosUsuariosWithConnection(sFinalQuery,new Pagination());

					this.usuariosForeignKey=usuarioLogic.getUsuarios();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaUsuario(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					usuarioLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidUsuarioActual());
					this.usuariosForeignKey.add(usuarioLogic.getUsuario());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public void cargarCombosEstadoGastoEmpleadosForeignKeyLista(String sFinalQuery)throws Exception
	{
		try
		{
			this.estadogastoempleadosForeignKey=new ArrayList<EstadoGastoEmpleado>();

			ArrayList<Classe> clases=new ArrayList<Classe>();
			ArrayList<String> arrClasses=new ArrayList<String>();
			Classe classe=new Classe();
			DatosDeep datosDeep=new DatosDeep(false,DeepLoadType.INCLUDE,clases,"");

			EstadoGastoEmpleadoLogic estadogastoempleadoLogic=new EstadoGastoEmpleadoLogic();

			//estadogastoempleadoLogic.getEstadoGastoEmpleadoDataAccess().setIsForForeingKeyData(true);

			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoGastoEmpleado()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//estadogastoempleadoLogic.getEstadoGastoEmpleadoDataAccess().setIsForForeingKeyData(true);

					estadogastoempleadoLogic.getTodosEstadoGastoEmpleadosWithConnection(sFinalQuery,new Pagination());

					this.estadogastoempleadosForeignKey=estadogastoempleadoLogic.getEstadoGastoEmpleados();

				} else if(Constantes.ISUSAEJBREMOTE) {

				} else if(Constantes.ISUSAEJBHOME) {
				}


				//ARCHITECTURE
			} else {
				if(!this.conCargarMinimo) {
					this.setVisibilidadBusquedasParaEstadoGastoEmpleado(true);
				}
				//ARCHITECTURE

				if(Constantes.ISUSAEJBLOGICLAYER) {
					estadogastoempleadoLogic.getEntityWithConnection(gastoempleadoSessionBean.getlidEstadoGastoEmpleadoActual());
					this.estadogastoempleadosForeignKey.add(estadogastoempleadoLogic.getEstadoGastoEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	
	public void setActualEmpresaForeignKey(Long idEmpresaSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empresaTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setEmpresa(empresaTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setSelectedItem(empresaTemp);
					}
				} else {
					//jComboBoxid_empresaGastoEmpleado.setSelectedItem(empresaTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpresaForeignKeyDescripcion(Long idEmpresaSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}


			sDescripcion=EmpresaConstantesFunciones.getEmpresaDescripcion(empresaTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpresaForeignKeyGenerico(Long idEmpresaSeleccionado,JComboBox jComboBoxid_empresaGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaTemp=null;

			for(Empresa empresaAux:empresasForeignKey) {
				if(empresaAux.getId()!=null && empresaAux.getId().equals(idEmpresaSeleccionado)) {
					empresaTemp=empresaAux;
					break;
				}
			}

			if(empresaTemp!=null) {
				jComboBoxid_empresaGastoEmpleadoGenerico.setSelectedItem(empresaTemp);
			} else {
				if(jComboBoxid_empresaGastoEmpleadoGenerico!=null && jComboBoxid_empresaGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_empresaGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualSucursalForeignKey(Long idSucursalSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(sucursalTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setSucursal(sucursalTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setSelectedItem(sucursalTemp);
					}
				} else {
					//jComboBoxid_sucursalGastoEmpleado.setSelectedItem(sucursalTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualSucursalForeignKeyDescripcion(Long idSucursalSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}


			sDescripcion=SucursalConstantesFunciones.getSucursalDescripcion(sucursalTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualSucursalForeignKeyGenerico(Long idSucursalSeleccionado,JComboBox jComboBoxid_sucursalGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalTemp=null;

			for(Sucursal sucursalAux:sucursalsForeignKey) {
				if(sucursalAux.getId()!=null && sucursalAux.getId().equals(idSucursalSeleccionado)) {
					sucursalTemp=sucursalAux;
					break;
				}
			}

			if(sucursalTemp!=null) {
				jComboBoxid_sucursalGastoEmpleadoGenerico.setSelectedItem(sucursalTemp);
			} else {
				if(jComboBoxid_sucursalGastoEmpleadoGenerico!=null && jComboBoxid_sucursalGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_sucursalGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEmpleadoForeignKey(Long idEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(empleadoTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setEmpleado(empleadoTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setSelectedItem(empleadoTemp);
					}
				} else {
					//jComboBoxid_empleadoGastoEmpleado.setSelectedItem(empleadoTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(empleadoTemp!=null && jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado!=null) {
						jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.setSelectedItem(empleadoTemp);
					} else {
						if(jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado!=null) {
							//jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.setSelectedItem(empleadoTemp);
							if(jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.getItemCount()>0) {
								jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEmpleadoForeignKeyDescripcion(Long idEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}


			sDescripcion=EmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEmpleadoForeignKeyGenerico(Long idEmpleadoSeleccionado,JComboBox jComboBoxid_empleadoGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoTemp=null;

			for(Empleado empleadoAux:empleadosForeignKey) {
				if(empleadoAux.getId()!=null && empleadoAux.getId().equals(idEmpleadoSeleccionado)) {
					empleadoTemp=empleadoAux;
					break;
				}
			}

			if(empleadoTemp!=null) {
				jComboBoxid_empleadoGastoEmpleadoGenerico.setSelectedItem(empleadoTemp);
			} else {
				if(jComboBoxid_empleadoGastoEmpleadoGenerico!=null && jComboBoxid_empleadoGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_empleadoGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEjercicioForeignKey(Long idEjercicioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ejercicioTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setEjercicio(ejercicioTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setSelectedItem(ejercicioTemp);
					}
				} else {
					//jComboBoxid_ejercicioGastoEmpleado.setSelectedItem(ejercicioTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEjercicioForeignKeyDescripcion(Long idEjercicioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}


			sDescripcion=EjercicioConstantesFunciones.getEjercicioDescripcion(ejercicioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEjercicioForeignKeyGenerico(Long idEjercicioSeleccionado,JComboBox jComboBoxid_ejercicioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioTemp=null;

			for(Ejercicio ejercicioAux:ejerciciosForeignKey) {
				if(ejercicioAux.getId()!=null && ejercicioAux.getId().equals(idEjercicioSeleccionado)) {
					ejercicioTemp=ejercicioAux;
					break;
				}
			}

			if(ejercicioTemp!=null) {
				jComboBoxid_ejercicioGastoEmpleadoGenerico.setSelectedItem(ejercicioTemp);
			} else {
				if(jComboBoxid_ejercicioGastoEmpleadoGenerico!=null && jComboBoxid_ejercicioGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_ejercicioGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualPaisForeignKey(Long idPaisSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(paisTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setPais(paisTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setSelectedItem(paisTemp);
					}
				} else {
					//jComboBoxid_paisGastoEmpleado.setSelectedItem(paisTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){
					if(paisTemp!=null && jComboBoxid_paisFK_IdPaisGastoEmpleado!=null) {
						jComboBoxid_paisFK_IdPaisGastoEmpleado.setSelectedItem(paisTemp);
					} else {
						if(jComboBoxid_paisFK_IdPaisGastoEmpleado!=null) {
							//jComboBoxid_paisFK_IdPaisGastoEmpleado.setSelectedItem(paisTemp);
							if(jComboBoxid_paisFK_IdPaisGastoEmpleado.getItemCount()>0) {
								jComboBoxid_paisFK_IdPaisGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualPaisForeignKeyDescripcion(Long idPaisSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}


			sDescripcion=PaisConstantesFunciones.getPaisDescripcion(paisTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualPaisForeignKeyGenerico(Long idPaisSeleccionado,JComboBox jComboBoxid_paisGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Pais  paisTemp=null;

			for(Pais paisAux:paissForeignKey) {
				if(paisAux.getId()!=null && paisAux.getId().equals(idPaisSeleccionado)) {
					paisTemp=paisAux;
					break;
				}
			}

			if(paisTemp!=null) {
				jComboBoxid_paisGastoEmpleadoGenerico.setSelectedItem(paisTemp);
			} else {
				if(jComboBoxid_paisGastoEmpleadoGenerico!=null && jComboBoxid_paisGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_paisGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualCiudadForeignKey(Long idCiudadSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(ciudadTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setCiudad(ciudadTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setSelectedItem(ciudadTemp);
					}
				} else {
					//jComboBoxid_ciudadGastoEmpleado.setSelectedItem(ciudadTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){
					if(ciudadTemp!=null && jComboBoxid_ciudadFK_IdCiudadGastoEmpleado!=null) {
						jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.setSelectedItem(ciudadTemp);
					} else {
						if(jComboBoxid_ciudadFK_IdCiudadGastoEmpleado!=null) {
							//jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.setSelectedItem(ciudadTemp);
							if(jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.getItemCount()>0) {
								jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualCiudadForeignKeyDescripcion(Long idCiudadSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}


			sDescripcion=CiudadConstantesFunciones.getCiudadDescripcion(ciudadTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualCiudadForeignKeyGenerico(Long idCiudadSeleccionado,JComboBox jComboBoxid_ciudadGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadTemp=null;

			for(Ciudad ciudadAux:ciudadsForeignKey) {
				if(ciudadAux.getId()!=null && ciudadAux.getId().equals(idCiudadSeleccionado)) {
					ciudadTemp=ciudadAux;
					break;
				}
			}

			if(ciudadTemp!=null) {
				jComboBoxid_ciudadGastoEmpleadoGenerico.setSelectedItem(ciudadTemp);
			} else {
				if(jComboBoxid_ciudadGastoEmpleadoGenerico!=null && jComboBoxid_ciudadGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_ciudadGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualAnioForeignKey(Long idAnioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(anioTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setAnio(anioTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setSelectedItem(anioTemp);
					}
				} else {
					//jComboBoxid_anioGastoEmpleado.setSelectedItem(anioTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdAnio") || sFormularioTipoBusqueda.equals("Todos")){
					if(anioTemp!=null && jComboBoxid_anioFK_IdAnioGastoEmpleado!=null) {
						jComboBoxid_anioFK_IdAnioGastoEmpleado.setSelectedItem(anioTemp);
					} else {
						if(jComboBoxid_anioFK_IdAnioGastoEmpleado!=null) {
							//jComboBoxid_anioFK_IdAnioGastoEmpleado.setSelectedItem(anioTemp);
							if(jComboBoxid_anioFK_IdAnioGastoEmpleado.getItemCount()>0) {
								jComboBoxid_anioFK_IdAnioGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualAnioForeignKeyDescripcion(Long idAnioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}


			sDescripcion=AnioConstantesFunciones.getAnioDescripcion(anioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualAnioForeignKeyGenerico(Long idAnioSeleccionado,JComboBox jComboBoxid_anioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Anio  anioTemp=null;

			for(Anio anioAux:aniosForeignKey) {
				if(anioAux.getId()!=null && anioAux.getId().equals(idAnioSeleccionado)) {
					anioTemp=anioAux;
					break;
				}
			}

			if(anioTemp!=null) {
				jComboBoxid_anioGastoEmpleadoGenerico.setSelectedItem(anioTemp);
			} else {
				if(jComboBoxid_anioGastoEmpleadoGenerico!=null && jComboBoxid_anioGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_anioGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualMesForeignKey(Long idMesSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(mesTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setMes(mesTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setSelectedItem(mesTemp);
					}
				} else {
					//jComboBoxid_mesGastoEmpleado.setSelectedItem(mesTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdMes") || sFormularioTipoBusqueda.equals("Todos")){
					if(mesTemp!=null && jComboBoxid_mesFK_IdMesGastoEmpleado!=null) {
						jComboBoxid_mesFK_IdMesGastoEmpleado.setSelectedItem(mesTemp);
					} else {
						if(jComboBoxid_mesFK_IdMesGastoEmpleado!=null) {
							//jComboBoxid_mesFK_IdMesGastoEmpleado.setSelectedItem(mesTemp);
							if(jComboBoxid_mesFK_IdMesGastoEmpleado.getItemCount()>0) {
								jComboBoxid_mesFK_IdMesGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualMesForeignKeyDescripcion(Long idMesSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}


			sDescripcion=MesConstantesFunciones.getMesDescripcion(mesTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualMesForeignKeyGenerico(Long idMesSeleccionado,JComboBox jComboBoxid_mesGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Mes  mesTemp=null;

			for(Mes mesAux:messForeignKey) {
				if(mesAux.getId()!=null && mesAux.getId().equals(idMesSeleccionado)) {
					mesTemp=mesAux;
					break;
				}
			}

			if(mesTemp!=null) {
				jComboBoxid_mesGastoEmpleadoGenerico.setSelectedItem(mesTemp);
			} else {
				if(jComboBoxid_mesGastoEmpleadoGenerico!=null && jComboBoxid_mesGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_mesGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualUsuarioForeignKey(Long idUsuarioSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(usuarioTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setUsuario(usuarioTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setSelectedItem(usuarioTemp);
					}
				} else {
					//jComboBoxid_usuarioGastoEmpleado.setSelectedItem(usuarioTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualUsuarioForeignKeyDescripcion(Long idUsuarioSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}


			sDescripcion=UsuarioConstantesFunciones.getUsuarioDescripcion(usuarioTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualUsuarioForeignKeyGenerico(Long idUsuarioSeleccionado,JComboBox jComboBoxid_usuarioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioTemp=null;

			for(Usuario usuarioAux:usuariosForeignKey) {
				if(usuarioAux.getId()!=null && usuarioAux.getId().equals(idUsuarioSeleccionado)) {
					usuarioTemp=usuarioAux;
					break;
				}
			}

			if(usuarioTemp!=null) {
				jComboBoxid_usuarioGastoEmpleadoGenerico.setSelectedItem(usuarioTemp);
			} else {
				if(jComboBoxid_usuarioGastoEmpleadoGenerico!=null && jComboBoxid_usuarioGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_usuarioGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	public void setActualEstadoGastoEmpleadoForeignKey(Long idEstadoGastoEmpleadoSeleccionado,Boolean conCombosBusquedas,String sFormularioTipoBusqueda)throws Exception
	{
		try
		{
			EstadoGastoEmpleado  estadogastoempleadoTemp=null;

			for(EstadoGastoEmpleado estadogastoempleadoAux:estadogastoempleadosForeignKey) {
				if(estadogastoempleadoAux.getId()!=null && estadogastoempleadoAux.getId().equals(idEstadoGastoEmpleadoSeleccionado)) {
					estadogastoempleadoTemp=estadogastoempleadoAux;
					break;
				}
			}

			if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){
				if(estadogastoempleadoTemp!=null) {

					if(this.gastoempleado!=null) {
						this.gastoempleado.setEstadoGastoEmpleado(estadogastoempleadoTemp);
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedItem(estadogastoempleadoTemp);
					}
				} else {
					//jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedItem(estadogastoempleadoTemp);
					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
						if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.getItemCount()>0) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedIndex(0);
						}
					}
				}
			}

			if(conCombosBusquedas) {

		//BYDAN_BUSQUEDAS
						
				if(sFormularioTipoBusqueda.equals("FK_IdEstadoGastoEmpleado") || sFormularioTipoBusqueda.equals("Todos")){
					if(estadogastoempleadoTemp!=null && jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado!=null) {
						jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.setSelectedItem(estadogastoempleadoTemp);
					} else {
						if(jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado!=null) {
							//jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.setSelectedItem(estadogastoempleadoTemp);
							if(jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.getItemCount()>0) {
								jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.setSelectedIndex(0);
							}
						}
					}
				}

					}

		}
		catch(Exception e)
		{
			throw e;
		}
	}

	public String getActualEstadoGastoEmpleadoForeignKeyDescripcion(Long idEstadoGastoEmpleadoSeleccionado)throws Exception
	{
		String sDescripcion="";

		try
		{
			EstadoGastoEmpleado  estadogastoempleadoTemp=null;

			for(EstadoGastoEmpleado estadogastoempleadoAux:estadogastoempleadosForeignKey) {
				if(estadogastoempleadoAux.getId()!=null && estadogastoempleadoAux.getId().equals(idEstadoGastoEmpleadoSeleccionado)) {
					estadogastoempleadoTemp=estadogastoempleadoAux;
					break;
				}
			}


			sDescripcion=EstadoGastoEmpleadoConstantesFunciones.getEstadoGastoEmpleadoDescripcion(estadogastoempleadoTemp);
		}
		catch(Exception e)
		{
			throw e;
		}

		return sDescripcion;
	}

	@SuppressWarnings("rawtypes")
	public void setActualEstadoGastoEmpleadoForeignKeyGenerico(Long idEstadoGastoEmpleadoSeleccionado,JComboBox jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			EstadoGastoEmpleado  estadogastoempleadoTemp=null;

			for(EstadoGastoEmpleado estadogastoempleadoAux:estadogastoempleadosForeignKey) {
				if(estadogastoempleadoAux.getId()!=null && estadogastoempleadoAux.getId().equals(idEstadoGastoEmpleadoSeleccionado)) {
					estadogastoempleadoTemp=estadogastoempleadoAux;
					break;
				}
			}

			if(estadogastoempleadoTemp!=null) {
				jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico.setSelectedItem(estadogastoempleadoTemp);
			} else {
				if(jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico!=null && jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico.getItemCount()>0) {
					jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico.setSelectedIndex(0);
				}
			}

		}
		catch(Exception e)
		{
			throw e;
		}

	}

	
	
	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpresaForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_empresaGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Empresa  empresaAux=new Empresa();

			if(jComboBoxid_empresaGastoEmpleadoGenerico==null) {
				empresaAux=(Empresa)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.getSelectedItem();
			} else {
				empresaAux=(Empresa)jComboBoxid_empresaGastoEmpleadoGenerico.getSelectedItem();
			}

			if(empresaAux!=null && empresaAux.getId()!=null) {
				gastoempleado.setid_empresa(empresaAux.getId());
				gastoempleado.setempresa_descripcion(GastoEmpleadoConstantesFunciones.getEmpresaDescripcion(empresaAux));
				gastoempleado.setEmpresa(empresaAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarSucursalForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_sucursalGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Sucursal  sucursalAux=new Sucursal();

			if(jComboBoxid_sucursalGastoEmpleadoGenerico==null) {
				sucursalAux=(Sucursal)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.getSelectedItem();
			} else {
				sucursalAux=(Sucursal)jComboBoxid_sucursalGastoEmpleadoGenerico.getSelectedItem();
			}

			if(sucursalAux!=null && sucursalAux.getId()!=null) {
				gastoempleado.setid_sucursal(sucursalAux.getId());
				gastoempleado.setsucursal_descripcion(GastoEmpleadoConstantesFunciones.getSucursalDescripcion(sucursalAux));
				gastoempleado.setSucursal(sucursalAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEmpleadoForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_empleadoGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Empleado  empleadoAux=new Empleado();

			if(jComboBoxid_empleadoGastoEmpleadoGenerico==null) {
				empleadoAux=(Empleado)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.getSelectedItem();
			} else {
				empleadoAux=(Empleado)jComboBoxid_empleadoGastoEmpleadoGenerico.getSelectedItem();
			}

			if(empleadoAux!=null && empleadoAux.getId()!=null) {
				gastoempleado.setid_empleado(empleadoAux.getId());
				gastoempleado.setempleado_descripcion(GastoEmpleadoConstantesFunciones.getEmpleadoDescripcion(empleadoAux));
				gastoempleado.setEmpleado(empleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEjercicioForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_ejercicioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Ejercicio  ejercicioAux=new Ejercicio();

			if(jComboBoxid_ejercicioGastoEmpleadoGenerico==null) {
				ejercicioAux=(Ejercicio)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.getSelectedItem();
			} else {
				ejercicioAux=(Ejercicio)jComboBoxid_ejercicioGastoEmpleadoGenerico.getSelectedItem();
			}

			if(ejercicioAux!=null && ejercicioAux.getId()!=null) {
				gastoempleado.setid_ejercicio(ejercicioAux.getId());
				gastoempleado.setejercicio_descripcion(GastoEmpleadoConstantesFunciones.getEjercicioDescripcion(ejercicioAux));
				gastoempleado.setEjercicio(ejercicioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarPaisForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_paisGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Pais  paisAux=new Pais();

			if(jComboBoxid_paisGastoEmpleadoGenerico==null) {
				paisAux=(Pais)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.getSelectedItem();
			} else {
				paisAux=(Pais)jComboBoxid_paisGastoEmpleadoGenerico.getSelectedItem();
			}

			if(paisAux!=null && paisAux.getId()!=null) {
				gastoempleado.setid_pais(paisAux.getId());
				gastoempleado.setpais_descripcion(GastoEmpleadoConstantesFunciones.getPaisDescripcion(paisAux));
				gastoempleado.setPais(paisAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarCiudadForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_ciudadGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Ciudad  ciudadAux=new Ciudad();

			if(jComboBoxid_ciudadGastoEmpleadoGenerico==null) {
				ciudadAux=(Ciudad)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.getSelectedItem();
			} else {
				ciudadAux=(Ciudad)jComboBoxid_ciudadGastoEmpleadoGenerico.getSelectedItem();
			}

			if(ciudadAux!=null && ciudadAux.getId()!=null) {
				gastoempleado.setid_ciudad(ciudadAux.getId());
				gastoempleado.setciudad_descripcion(GastoEmpleadoConstantesFunciones.getCiudadDescripcion(ciudadAux));
				gastoempleado.setCiudad(ciudadAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarAnioForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_anioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Anio  anioAux=new Anio();

			if(jComboBoxid_anioGastoEmpleadoGenerico==null) {
				anioAux=(Anio)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.getSelectedItem();
			} else {
				anioAux=(Anio)jComboBoxid_anioGastoEmpleadoGenerico.getSelectedItem();
			}

			if(anioAux!=null) {
				gastoempleado.setid_anio(anioAux.getId());
				gastoempleado.setanio_descripcion(GastoEmpleadoConstantesFunciones.getAnioDescripcion(anioAux));
				gastoempleado.setAnio(anioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarMesForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_mesGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Mes  mesAux=new Mes();

			if(jComboBoxid_mesGastoEmpleadoGenerico==null) {
				mesAux=(Mes)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.getSelectedItem();
			} else {
				mesAux=(Mes)jComboBoxid_mesGastoEmpleadoGenerico.getSelectedItem();
			}

			if(mesAux!=null) {
				gastoempleado.setid_mes(mesAux.getId());
				gastoempleado.setmes_descripcion(GastoEmpleadoConstantesFunciones.getMesDescripcion(mesAux));
				gastoempleado.setMes(mesAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarUsuarioForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_usuarioGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			Usuario  usuarioAux=new Usuario();

			if(jComboBoxid_usuarioGastoEmpleadoGenerico==null) {
				usuarioAux=(Usuario)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.getSelectedItem();
			} else {
				usuarioAux=(Usuario)jComboBoxid_usuarioGastoEmpleadoGenerico.getSelectedItem();
			}

			if(usuarioAux!=null && usuarioAux.getId()!=null) {
				gastoempleado.setid_usuario(usuarioAux.getId());
				gastoempleado.setusuario_descripcion(GastoEmpleadoConstantesFunciones.getUsuarioDescripcion(usuarioAux));
				gastoempleado.setUsuario(usuarioAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	@SuppressWarnings("rawtypes")
	public void setActualParaGuardarEstadoGastoEmpleadoForeignKey(GastoEmpleado gastoempleado,JComboBox jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico)throws Exception
	{
		try
		{
			EstadoGastoEmpleado  estadogastoempleadoAux=new EstadoGastoEmpleado();

			if(jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico==null) {
				estadogastoempleadoAux=(EstadoGastoEmpleado)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.getSelectedItem();
			} else {
				estadogastoempleadoAux=(EstadoGastoEmpleado)jComboBoxid_estado_gasto_empleadoGastoEmpleadoGenerico.getSelectedItem();
			}

			if(estadogastoempleadoAux!=null && estadogastoempleadoAux.getId()!=null) {
				gastoempleado.setid_estado_gasto_empleado(estadogastoempleadoAux.getId());
				gastoempleado.setestadogastoempleado_descripcion(GastoEmpleadoConstantesFunciones.getEstadoGastoEmpleadoDescripcion(estadogastoempleadoAux));
				gastoempleado.setEstadoGastoEmpleado(estadogastoempleadoAux);			}
		}
		catch(Exception e)
		{
			throw e;
		}
	}

	
	


		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpresasForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpresa=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.removeAllItems();

							for(Empresa empresa:this.empresasForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.addItem(empresa);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameSucursalsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingSucursal=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.removeAllItems();

							for(Sucursal sucursal:this.sucursalsForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.addItem(sucursal);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.addItem(empleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.removeAllItems();

							for(Empleado empleado:this.empleadosForeignKey) {
								this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.addItem(empleado);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEjerciciosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEjercicio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.removeAllItems();

							for(Ejercicio ejercicio:this.ejerciciosForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.addItem(ejercicio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFramePaissForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingPais=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.addItem(pais);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdPais") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_paisFK_IdPaisGastoEmpleado.removeAllItems();

							for(Pais pais:this.paissForeignKey) {
								this.jComboBoxid_paisFK_IdPaisGastoEmpleado.addItem(pais);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameCiudadsForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingCiudad=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.addItem(ciudad);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdCiudad") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.removeAllItems();

							for(Ciudad ciudad:this.ciudadsForeignKey) {
								this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.addItem(ciudad);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameAniosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingAnio=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.addItem(anio);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdAnio") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_anioFK_IdAnioGastoEmpleado.removeAllItems();

							for(Anio anio:this.aniosForeignKey) {
								this.jComboBoxid_anioFK_IdAnioGastoEmpleado.addItem(anio);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameMessForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingMes=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.addItem(mes);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdMes") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_mesFK_IdMesGastoEmpleado.removeAllItems();

							for(Mes mes:this.messForeignKey) {
								this.jComboBoxid_mesFK_IdMesGastoEmpleado.addItem(mes);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameUsuariosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingUsuario=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.removeAllItems();

							for(Usuario usuario:this.usuariosForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.addItem(usuario);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {


				}

			}  catch(Exception e) {
				throw e;
			}
		}

		@SuppressWarnings({ "unchecked", "rawtypes" })
		public void cargarCombosFrameEstadoGastoEmpleadosForeignKey(String sFormularioTipoBusqueda)throws Exception {
			try {

				JComboBoxBinding jComboBoxBindingEstadoGastoEmpleado=null;

				if(sFormularioTipoBusqueda.equals("Formulario") || sFormularioTipoBusqueda.equals("Todos")){

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.removeAllItems();

							for(EstadoGastoEmpleado estadogastoempleado:this.estadogastoempleadosForeignKey) {
								this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.addItem(estadogastoempleado);
							}
						}
					}

					if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { 
					}

					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
					}
				}


				if(!this.conCargarMinimo) {

					if(sFormularioTipoBusqueda.equals("FK_IdEstadoGastoEmpleado") || sFormularioTipoBusqueda.equals("Todos")){

						//BYDAN_BUSQUEDAS
						
						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						} else {
							this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.removeAllItems();

							for(EstadoGastoEmpleado estadogastoempleado:this.estadogastoempleadosForeignKey) {
								this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.addItem(estadogastoempleado);
							}
						}

						if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
						}

						
					}

				}

			}  catch(Exception e) {
				throw e;
			}
		}

	


		public void setSelectedItemCombosFrameEmpresaForeignKey(Empresa empresa,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setSelectedItem(empresa);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameSucursalForeignKey(Sucursal sucursal,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setSelectedItem(sucursal);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEmpleadoForeignKey(Empleado empleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setSelectedItem(empleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.setSelectedItem(empleado);
						} else {
							this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEjercicioForeignKey(Ejercicio ejercicio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setSelectedItem(ejercicio);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFramePaisForeignKey(Pais pais,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setSelectedItem(pais);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_paisFK_IdPaisGastoEmpleado.setSelectedItem(pais);
						} else {
							this.jComboBoxid_paisFK_IdPaisGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameCiudadForeignKey(Ciudad ciudad,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setSelectedItem(ciudad);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.setSelectedItem(ciudad);
						} else {
							this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameAnioForeignKey(Anio anio,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setSelectedItem(anio);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_anioFK_IdAnioGastoEmpleado.setSelectedItem(anio);
						} else {
							this.jComboBoxid_anioFK_IdAnioGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameMesForeignKey(Mes mes,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setSelectedItem(mes);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_mesFK_IdMesGastoEmpleado.setSelectedItem(mes);
						} else {
							this.jComboBoxid_mesFK_IdMesGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameUsuarioForeignKey(Usuario usuario,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setSelectedItem(usuario);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

		public void setSelectedItemCombosFrameEstadoGastoEmpleadoForeignKey(EstadoGastoEmpleado estadogastoempleado,int iIndexSelected,Boolean conSelectedIndex,Boolean conFormulario,Boolean conBusqueda)throws Exception {
			try {

				if(conFormulario) {
					if(!conSelectedIndex) {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedItem(estadogastoempleado);
						}
					} else {
						if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedIndex(iIndexSelected);
						}
					}
				}


				if(!this.conCargarMinimo) {
					if(conBusqueda) {

					//BYDAN_BUSQUEDAS
					
						if(!conSelectedIndex) {
							this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.setSelectedItem(estadogastoempleado);
						} else {
							this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.setSelectedIndex(iIndexSelected);
						}

										}
				}
			} catch(Exception e) {
				throw e;
			}
		}

	


	
	public void refrescarForeignKeysDescripcionesGastoEmpleado() throws Exception {
		//SI FUNCIONA DEEPLOAD ESTO VA AL ULTIMO
		if(Constantes.ISUSAEJBLOGICLAYER) {
			GastoEmpleadoConstantesFunciones.refrescarForeignKeysDescripcionesGastoEmpleado(this.gastoempleadoLogic.getGastoEmpleados());
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			GastoEmpleadoConstantesFunciones.refrescarForeignKeysDescripcionesGastoEmpleado(this.gastoempleados);
		}
		
		/*
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		classes.add(new Classe(Empresa.class));
		classes.add(new Classe(Sucursal.class));
		classes.add(new Classe(Empleado.class));
		classes.add(new Classe(Ejercicio.class));
		classes.add(new Classe(Pais.class));
		classes.add(new Classe(Ciudad.class));
		classes.add(new Classe(Anio.class));
		classes.add(new Classe(Mes.class));
		classes.add(new Classe(Usuario.class));
		classes.add(new Classe(EstadoGastoEmpleado.class));
			
		if(Constantes.ISUSAEJBLOGICLAYER) {
			//USA LOS OBJETOS DE LOGIC DIRECTAMENTE
			//gastoempleadoLogic.setGastoEmpleados(this.gastoempleados);
			gastoempleadoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
	
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		*/				
	}	
	
	
	
	public Integer getiNumeroPaginacion() {
		return iNumeroPaginacion;
	}

	public void setiNumeroPaginacion(Integer iNumeroPaginacion) {
		this.iNumeroPaginacion= iNumeroPaginacion;
	}
	
	public Integer getiNumeroPaginacionPagina() {
		return iNumeroPaginacionPagina;
	}

	public void setiNumeroPaginacionPagina(Integer iNumeroPaginacionPagina) {
		this.iNumeroPaginacionPagina= iNumeroPaginacionPagina;
	}
	
	
	public Boolean getIsSeleccionarTodos() {
		return this.isSeleccionarTodos;
	}

	public void setIsSeleccionarTodos(Boolean isSeleccionarTodos) {
		this.isSeleccionarTodos= isSeleccionarTodos;
	}
	
	public Boolean getEsControlTabla() {
		return this.esControlTabla;
	}

	public void setEsControlTabla(Boolean esControlTabla) {
		this.esControlTabla= esControlTabla;
	}
	
	public Boolean getIsSeleccionados() {
		return this.isSeleccionados;
	}

	public void setIsSeleccionados(Boolean isSeleccionados) {
		this.isSeleccionados= isSeleccionados;
	}
	
	public Boolean getIsPostAccionNuevo() {
		return this.isPostAccionNuevo;
	}

	public void setIsPostAccionNuevo(Boolean isPostAccionNuevo) {
		this.isPostAccionNuevo= isPostAccionNuevo;
	}
	
	public Boolean getIsPostAccionSinCerrar() {
		return this.isPostAccionSinCerrar;
	}

	public void setIsPostAccionSinCerrar(Boolean isPostAccionSinCerrar) {
		this.isPostAccionSinCerrar= isPostAccionSinCerrar;
	}
	
	public Boolean getIsPostAccionSinMensaje() {
		return this.isPostAccionSinMensaje;
	}

	public void setIsPostAccionSinMensaje(Boolean isPostAccionSinMensaje) {
		this.isPostAccionSinMensaje= isPostAccionSinMensaje;
	}
	
	public Boolean getConGraficoReporte() {
		return this.conGraficoReporte;
	}

	public void setConGraficoReporte(Boolean conGraficoReporte) {
		this.conGraficoReporte= conGraficoReporte;
	}
	
	
	public ArrayList<Reporte> gettiposArchivosReportes() {
		return this.tiposArchivosReportes;
	}
	
	public void settiposArchivosReportes(ArrayList<Reporte> tiposArchivosReportes) {
		this.tiposArchivosReportes = tiposArchivosReportes;
	}
	
	//TIPOS ARCHIVOS DINAMICOS
	public ArrayList<Reporte> gettiposArchivosReportesDinamico() {
		return this.tiposArchivosReportesDinamico;
	}
	
	public void settiposArchivosReportesDinamico(ArrayList<Reporte> tiposArchivosReportesDinamico) {
		this.tiposArchivosReportesDinamico = tiposArchivosReportesDinamico;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportes() {
		return this.tiposReportes;
	}
	
	public void settiposReportes(ArrayList<Reporte> tiposReportes) {
		this.tiposReportes = tiposReportes;
	}
	
	//TIPOS REPORTES
	public ArrayList<Reporte> gettiposReportesDinamico() {
		return this.tiposReportesDinamico;
	}
	
	public void settiposReportesDinamico(ArrayList<Reporte> tiposReportesDinamico) {
		this.tiposReportesDinamico = tiposReportesDinamico;
	}
	
	//TIPOS GRAFICOS REPORTES
	public ArrayList<Reporte> gettiposGraficosReportes() {
		return this.tiposGraficosReportes;
	}
	
	public void settiposGraficosReportes(ArrayList<Reporte> tiposGraficosReportes) {
		this.tiposGraficosReportes = tiposGraficosReportes;
	}
	
	public ArrayList<Reporte> gettiposPaginacion() {
		return this.tiposPaginacion;
	}
	
	public void settiposPaginacion(ArrayList<Reporte> tiposPaginacion) {
		this.tiposPaginacion = tiposPaginacion;
	}
	
	public ArrayList<Reporte> gettiposRelaciones() {
		return this.tiposRelaciones;
	}
	
	public void settiposRelaciones(ArrayList<Reporte> tiposRelaciones) {
		this.tiposRelaciones= tiposRelaciones;
	}
	
	public ArrayList<Reporte> gettiposAcciones() {
		return this.tiposAcciones;
	}
	
	public void settiposAcciones(ArrayList<Reporte> tiposAcciones) {
		this.tiposAcciones = tiposAcciones;
	}
	
	public ArrayList<Reporte> gettiposAccionesFormulario() {
		return this.tiposAccionesFormulario;
	}
	
	public void settiposAccionesFormulario(ArrayList<Reporte> tiposAccionesFormulario) {
		this.tiposAccionesFormulario = tiposAccionesFormulario;
	}
	
	public ArrayList<Reporte> gettiposSeleccionar() {
		return this.tiposSeleccionar;
	}
	
	public void settiposSeleccionar(ArrayList<Reporte> tiposSeleccionar) {
		this.tiposSeleccionar = tiposSeleccionar;
	}
	
	public ArrayList<Reporte> gettiposColumnasSelect() {
		return this.tiposColumnasSelect;
	}
	
	public void settiposColumnasSelect(ArrayList<Reporte> tiposColumnasSelect) {
		this.tiposColumnasSelect = tiposColumnasSelect;
	}
		
	public ArrayList<Reporte> gettiposRelacionesSelect() {
		return this.tiposRelacionesSelect;
	}
	
	public void settiposRelacionesSelect(ArrayList<Reporte> tiposRelacionesSelect) {
		this.tiposRelacionesSelect = tiposRelacionesSelect;
	}
	
	public Long getIIdUsuarioSesion() {
		return lIdUsuarioSesion;
	}

	public void setIIdUsuarioSesion(Long lIdUsuarioSesion) {
		this.lIdUsuarioSesion = lIdUsuarioSesion;
	}
	
	
	public List<Accion> getAccions() {
		return this.accions;
	}

	public void setAccions(List<Accion> accions) {
		this.accions = accions;
	}
	
	public List<Accion> getAccionsFormulario() {
		return this.accionsFormulario;
	}

	public void setAccionsFormulario(List<Accion> accionsFormulario) {
		this.accionsFormulario = accionsFormulario;
	}
	
	public String getsAccionMantenimiento() {
		return sAccionMantenimiento;
	}

	public void setsAccionMantenimiento(String sAccionMantenimiento) {
		this.sAccionMantenimiento = sAccionMantenimiento;
	}

	public String getsAccionBusqueda() {
		return sAccionBusqueda;
	}

	public void setsAccionBusqueda(String sAccionBusqueda) {
		this.sAccionBusqueda = sAccionBusqueda;
	}

	public String getsAccionAdicional() {
		return sAccionAdicional;
	}

	public void setsAccionAdicional(String sAccionAdicional) {
		this.sAccionAdicional = sAccionAdicional;
	}

	public String getsUltimaBusqueda() {
		return sUltimaBusqueda;
	}

	public void setsUltimaBusqueda(String sUltimaBusqueda) {
		this.sUltimaBusqueda = sUltimaBusqueda;
	}
	
	public String getsTipoArchivoReporte() {
		return sTipoArchivoReporte;
	}

	public void setsTipoArchivoReporte(String sTipoArchivoReporte) {
		this.sTipoArchivoReporte = sTipoArchivoReporte;
	}
	
	public String getsTipoArchivoReporteDinamico() {
		return sTipoArchivoReporteDinamico;
	}

	public void setsTipoArchivoReporteDinamico(String sTipoArchivoReporteDinamico) {
		this.sTipoArchivoReporteDinamico = sTipoArchivoReporteDinamico;
	}
	
	public String getsTipoReporte() {
		return sTipoReporte;
	}

	public void setsTipoReporte(String sTipoReporte) {
		this.sTipoReporte = sTipoReporte;
	}
	
	public String getsTipoReporteDinamico() {
		return sTipoReporteDinamico;
	}

	public void setsTipoReporteDinamico(String sTipoReporteDinamico) {
		this.sTipoReporteDinamico = sTipoReporteDinamico;
	}
	
	public String getsTipoGraficoReporte() {
		return sTipoGraficoReporte;
	}

	public void setsTipoGraficoReporte(String sTipoGraficoReporte) {
		this.sTipoGraficoReporte = sTipoGraficoReporte;
	}
	
	public String getsTipoPaginacion() {
		return sTipoPaginacion;
	}

	public void setsTipoPaginacion(String sTipoPaginacion) {
		this.sTipoPaginacion = sTipoPaginacion;
	}
	
	public String getsTipoRelacion() {
		return sTipoRelacion;
	}

	public void setsTipoRelacion(String sTipoRelacion) {
		this.sTipoRelacion = sTipoRelacion;
	}
	
	public String getsTipoAccion() {
		return sTipoAccion;
	}

	public void setsTipoAccion(String sTipoAccion) {
		this.sTipoAccion = sTipoAccion;
	}
	
	public String getsTipoAccionFormulario() {
		return sTipoAccionFormulario;
	}

	public void setsTipoAccionFormulario(String sTipoAccionFormulario) {
		this.sTipoAccionFormulario = sTipoAccionFormulario;
	}
	
	public String getsTipoSeleccionar() {
		return sTipoSeleccionar;
	}

	public void setsTipoSeleccionar(String sTipoSeleccionar) {
		this.sTipoSeleccionar = sTipoSeleccionar;
	}
	
	public String getsValorCampoGeneral() {
		return sValorCampoGeneral;
	}

	public void setsValorCampoGeneral(String sValorCampoGeneral) {
		this.sValorCampoGeneral = sValorCampoGeneral;
	}			

	public String getsDetalleReporte() {
		return sDetalleReporte;
	}

	public void setsDetalleReporte(String sDetalleReporte) {
		this.sDetalleReporte = sDetalleReporte;
	}
	
	
	public String getsTipoReporteExtra() {
		return sTipoReporteExtra;
	}

	public void setsTipoReporteExtra(String sTipoReporteExtra) {
		this.sTipoReporteExtra = sTipoReporteExtra;
	}
	
	public Boolean getesReporteDinamico() {
		return esReporteDinamico;
	}	
	
	public void setesReporteDinamico(Boolean esReporteDinamico) {
		this.esReporteDinamico = esReporteDinamico;
	}
	
	public Boolean getesRecargarFks() {
		return esRecargarFks;
	}	
	
	public void setesRecargarFks(Boolean esRecargarFks) {
		this.esRecargarFks = esRecargarFks;
	}
	
	public Boolean getesReporteAccionProceso() {
		return esReporteAccionProceso;
	}	
	
	public void setesReporteAccionProceso(Boolean esReporteAccionProceso) {
		this.esReporteAccionProceso= esReporteAccionProceso;
	}
		
	public GastoEmpleadoParameterReturnGeneral getGastoEmpleadoParameterGeneral() {
		return this.gastoempleadoParameterGeneral;
	}
	
	public void setGastoEmpleadoParameterGeneral(GastoEmpleadoParameterReturnGeneral gastoempleadoParameterGeneral) {
		this.gastoempleadoParameterGeneral = gastoempleadoParameterGeneral;
	}
	
	public String getsPathReporteDinamico() {
		return sPathReporteDinamico;
	}

	public void setsPathReporteDinamico(String sPathReporteDinamico) {
		this.sPathReporteDinamico = sPathReporteDinamico;
	}
		
	public Boolean getisMostrarNumeroPaginacion() {
		return isMostrarNumeroPaginacion;
	}

	public void setisMostrarNumeroPaginacion(Boolean isMostrarNumeroPaginacion) {
		this.isMostrarNumeroPaginacion = isMostrarNumeroPaginacion;
	}
	
	public Mensaje getMensaje() {
		return mensaje;
	}

	public void setMensaje(Mensaje mensaje) {
		this.mensaje = mensaje;
	}
	
	public Boolean getIsPermisoTodoGastoEmpleado() {
		return isPermisoTodoGastoEmpleado;
	}

	public void setIsPermisoTodoGastoEmpleado(Boolean isPermisoTodoGastoEmpleado) {
		this.isPermisoTodoGastoEmpleado = isPermisoTodoGastoEmpleado;
	}

	public Boolean getIsPermisoNuevoGastoEmpleado() {
		return isPermisoNuevoGastoEmpleado;
	}

	public void setIsPermisoNuevoGastoEmpleado(Boolean isPermisoNuevoGastoEmpleado) {
		this.isPermisoNuevoGastoEmpleado = isPermisoNuevoGastoEmpleado;
	}

	public Boolean getIsPermisoActualizarGastoEmpleado() {
		return isPermisoActualizarGastoEmpleado;
	}

	public void setIsPermisoActualizarGastoEmpleado(Boolean isPermisoActualizarGastoEmpleado) {
		this.isPermisoActualizarGastoEmpleado = isPermisoActualizarGastoEmpleado;
	}

	public Boolean getIsPermisoEliminarGastoEmpleado() {
		return isPermisoEliminarGastoEmpleado;
	}

	public void setIsPermisoEliminarGastoEmpleado(Boolean isPermisoEliminarGastoEmpleado) {
		this.isPermisoEliminarGastoEmpleado = isPermisoEliminarGastoEmpleado;
	}

	public Boolean getIsPermisoGuardarCambiosGastoEmpleado() {
		return isPermisoGuardarCambiosGastoEmpleado;
	}

	public void setIsPermisoGuardarCambiosGastoEmpleado(Boolean isPermisoGuardarCambiosGastoEmpleado) {
		this.isPermisoGuardarCambiosGastoEmpleado = isPermisoGuardarCambiosGastoEmpleado;
	}
	
	public Boolean getIsPermisoConsultaGastoEmpleado() {
		return isPermisoConsultaGastoEmpleado;
	}

	public void setIsPermisoConsultaGastoEmpleado(Boolean isPermisoConsultaGastoEmpleado) {
		this.isPermisoConsultaGastoEmpleado = isPermisoConsultaGastoEmpleado;
	}

	public Boolean getIsPermisoBusquedaGastoEmpleado() {
		return isPermisoBusquedaGastoEmpleado;
	}

	public void setIsPermisoBusquedaGastoEmpleado(Boolean isPermisoBusquedaGastoEmpleado) {
		this.isPermisoBusquedaGastoEmpleado = isPermisoBusquedaGastoEmpleado;
	}

	public Boolean getIsPermisoReporteGastoEmpleado() {
		return isPermisoReporteGastoEmpleado;
	}

	public void setIsPermisoReporteGastoEmpleado(Boolean isPermisoReporteGastoEmpleado) {
		this.isPermisoReporteGastoEmpleado = isPermisoReporteGastoEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionMedioGastoEmpleado() {
		return isPermisoPaginacionMedioGastoEmpleado;
	}

	public void setIsPermisoPaginacionMedioGastoEmpleado(Boolean isPermisoPaginacionMedioGastoEmpleado) {
		this.isPermisoPaginacionMedioGastoEmpleado = isPermisoPaginacionMedioGastoEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionTodoGastoEmpleado() {
		return isPermisoPaginacionTodoGastoEmpleado;
	}

	public void setIsPermisoPaginacionTodoGastoEmpleado(Boolean isPermisoPaginacionTodoGastoEmpleado) {
		this.isPermisoPaginacionTodoGastoEmpleado = isPermisoPaginacionTodoGastoEmpleado;
	}
	
	public Boolean getIsPermisoPaginacionAltoGastoEmpleado() {
		return isPermisoPaginacionAltoGastoEmpleado;
	}

	public void setIsPermisoPaginacionAltoGastoEmpleado(Boolean isPermisoPaginacionAltoGastoEmpleado) {
		this.isPermisoPaginacionAltoGastoEmpleado = isPermisoPaginacionAltoGastoEmpleado;
	}
	
	public Boolean getIsPermisoCopiarGastoEmpleado() {
		return isPermisoCopiarGastoEmpleado;
	}

	public void setIsPermisoCopiarGastoEmpleado(Boolean isPermisoCopiarGastoEmpleado) {
		this.isPermisoCopiarGastoEmpleado = isPermisoCopiarGastoEmpleado;
	}
	
	public Boolean getIsPermisoVerFormGastoEmpleado() {
		return isPermisoVerFormGastoEmpleado;
	}

	public void setIsPermisoVerFormGastoEmpleado(Boolean isPermisoVerFormGastoEmpleado) {
		this.isPermisoVerFormGastoEmpleado = isPermisoVerFormGastoEmpleado;
	}
	
	public Boolean getIsPermisoDuplicarGastoEmpleado() {
		return isPermisoDuplicarGastoEmpleado;
	}

	public void setIsPermisoDuplicarGastoEmpleado(Boolean isPermisoDuplicarGastoEmpleado) {
		this.isPermisoDuplicarGastoEmpleado = isPermisoDuplicarGastoEmpleado;
	}
	
	public Boolean getIsPermisoOrdenGastoEmpleado() {
		return isPermisoOrdenGastoEmpleado;
	}

	public void setIsPermisoOrdenGastoEmpleado(Boolean isPermisoOrdenGastoEmpleado) {
		this.isPermisoOrdenGastoEmpleado = isPermisoOrdenGastoEmpleado;
	}
	
	public String getsVisibilidadTablaBusquedas() {
		return sVisibilidadTablaBusquedas;
	}

	public void setsVisibilidadTablaBusquedas(String sVisibilidadTablaBusquedas) {
		this.sVisibilidadTablaBusquedas = sVisibilidadTablaBusquedas;
	}
	
	public String getsVisibilidadTablaElementos() {
		return sVisibilidadTablaElementos;
	}

	public void setsVisibilidadTablaElementos(String sVisibilidadTablaElementos) {
		this.sVisibilidadTablaElementos = sVisibilidadTablaElementos;
	}

	public String getsVisibilidadTablaAcciones() {
		return sVisibilidadTablaAcciones;
	}

	public void setsVisibilidadTablaAcciones(String sVisibilidadTablaAcciones) {
		this.sVisibilidadTablaAcciones = sVisibilidadTablaAcciones;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoGastoEmpleado() {
		return isVisibilidadCeldaNuevoGastoEmpleado;
	}

	public void setIsVisibilidadCeldaNuevoGastoEmpleado(Boolean isVisibilidadCeldaNuevoGastoEmpleado) {
		this.isVisibilidadCeldaNuevoGastoEmpleado = isVisibilidadCeldaNuevoGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaDuplicarGastoEmpleado() {
		return isVisibilidadCeldaDuplicarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaDuplicarGastoEmpleado(Boolean isVisibilidadCeldaDuplicarGastoEmpleado) {
		this.isVisibilidadCeldaDuplicarGastoEmpleado = isVisibilidadCeldaDuplicarGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaCopiarGastoEmpleado() {
		return isVisibilidadCeldaCopiarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaCopiarGastoEmpleado(Boolean isVisibilidadCeldaCopiarGastoEmpleado) {
		this.isVisibilidadCeldaCopiarGastoEmpleado = isVisibilidadCeldaCopiarGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaVerFormGastoEmpleado() {
		return isVisibilidadCeldaVerFormGastoEmpleado;
	}

	public void setIsVisibilidadCeldaVerFormGastoEmpleado(Boolean isVisibilidadCeldaVerFormGastoEmpleado) {
		this.isVisibilidadCeldaVerFormGastoEmpleado = isVisibilidadCeldaVerFormGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaOrdenGastoEmpleado() {
		return isVisibilidadCeldaOrdenGastoEmpleado;
	}

	public void setIsVisibilidadCeldaOrdenGastoEmpleado(Boolean isVisibilidadCeldaOrdenGastoEmpleado) {
		this.isVisibilidadCeldaOrdenGastoEmpleado = isVisibilidadCeldaOrdenGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaNuevoRelacionesGastoEmpleado() {
		return isVisibilidadCeldaNuevoRelacionesGastoEmpleado;
	}

	public void setIsVisibilidadCeldaNuevoRelacionesGastoEmpleado(Boolean isVisibilidadCeldaNuevoRelacionesGastoEmpleado) {
		this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado = isVisibilidadCeldaNuevoRelacionesGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaModificarGastoEmpleado() {
		return isVisibilidadCeldaModificarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaModificarGastoEmpleado(Boolean isVisibilidadCeldaModificarGastoEmpleado) {
		this.isVisibilidadCeldaModificarGastoEmpleado = isVisibilidadCeldaModificarGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaActualizarGastoEmpleado() {
		return isVisibilidadCeldaActualizarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaActualizarGastoEmpleado(Boolean isVisibilidadCeldaActualizarGastoEmpleado) {
		this.isVisibilidadCeldaActualizarGastoEmpleado = isVisibilidadCeldaActualizarGastoEmpleado;
	}

	public Boolean getIsVisibilidadCeldaEliminarGastoEmpleado() {
		return isVisibilidadCeldaEliminarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaEliminarGastoEmpleado(Boolean isVisibilidadCeldaEliminarGastoEmpleado) {
		this.isVisibilidadCeldaEliminarGastoEmpleado = isVisibilidadCeldaEliminarGastoEmpleado;
	}

	public Boolean getIsVisibilidadCeldaCancelarGastoEmpleado() {
		return isVisibilidadCeldaCancelarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaCancelarGastoEmpleado(Boolean isVisibilidadCeldaCancelarGastoEmpleado) {
		this.isVisibilidadCeldaCancelarGastoEmpleado = isVisibilidadCeldaCancelarGastoEmpleado;
	}

	public Boolean getIsVisibilidadCeldaGuardarGastoEmpleado() {
		return isVisibilidadCeldaGuardarGastoEmpleado;
	}

	public void setIsVisibilidadCeldaGuardarGastoEmpleado(Boolean isVisibilidadCeldaGuardarGastoEmpleado) {
		this.isVisibilidadCeldaGuardarGastoEmpleado = isVisibilidadCeldaGuardarGastoEmpleado;
	}
	
	public Boolean getIsVisibilidadCeldaGuardarCambiosGastoEmpleado() {
		return isVisibilidadCeldaGuardarCambiosGastoEmpleado;
	}

	public void setIsVisibilidadCeldaGuardarCambiosGastoEmpleado(Boolean isVisibilidadCeldaGuardarCambiosGastoEmpleado) {
		this.isVisibilidadCeldaGuardarCambiosGastoEmpleado = isVisibilidadCeldaGuardarCambiosGastoEmpleado;
	}
		
	public GastoEmpleadoSessionBean getgastoempleadoSessionBean() {
		return this.gastoempleadoSessionBean;
	}
	
	public void setgastoempleadoSessionBean(GastoEmpleadoSessionBean gastoempleadoSessionBean) {
		this.gastoempleadoSessionBean=gastoempleadoSessionBean;
	}
	
	
	public Boolean getisVisibilidadFK_IdAnio() {
		return this.isVisibilidadFK_IdAnio;
	}

	public void setisVisibilidadFK_IdAnio(Boolean isVisibilidadFK_IdAnio) {
		this.isVisibilidadFK_IdAnio=isVisibilidadFK_IdAnio;
	}

	public Boolean getisVisibilidadFK_IdCiudad() {
		return this.isVisibilidadFK_IdCiudad;
	}

	public void setisVisibilidadFK_IdCiudad(Boolean isVisibilidadFK_IdCiudad) {
		this.isVisibilidadFK_IdCiudad=isVisibilidadFK_IdCiudad;
	}

	public Boolean getisVisibilidadFK_IdEjercicio() {
		return this.isVisibilidadFK_IdEjercicio;
	}

	public void setisVisibilidadFK_IdEjercicio(Boolean isVisibilidadFK_IdEjercicio) {
		this.isVisibilidadFK_IdEjercicio=isVisibilidadFK_IdEjercicio;
	}

	public Boolean getisVisibilidadFK_IdEmpleado() {
		return this.isVisibilidadFK_IdEmpleado;
	}

	public void setisVisibilidadFK_IdEmpleado(Boolean isVisibilidadFK_IdEmpleado) {
		this.isVisibilidadFK_IdEmpleado=isVisibilidadFK_IdEmpleado;
	}

	public Boolean getisVisibilidadFK_IdEmpresa() {
		return this.isVisibilidadFK_IdEmpresa;
	}

	public void setisVisibilidadFK_IdEmpresa(Boolean isVisibilidadFK_IdEmpresa) {
		this.isVisibilidadFK_IdEmpresa=isVisibilidadFK_IdEmpresa;
	}

	public Boolean getisVisibilidadFK_IdEstadoGastoEmpleado() {
		return this.isVisibilidadFK_IdEstadoGastoEmpleado;
	}

	public void setisVisibilidadFK_IdEstadoGastoEmpleado(Boolean isVisibilidadFK_IdEstadoGastoEmpleado) {
		this.isVisibilidadFK_IdEstadoGastoEmpleado=isVisibilidadFK_IdEstadoGastoEmpleado;
	}

	public Boolean getisVisibilidadFK_IdMes() {
		return this.isVisibilidadFK_IdMes;
	}

	public void setisVisibilidadFK_IdMes(Boolean isVisibilidadFK_IdMes) {
		this.isVisibilidadFK_IdMes=isVisibilidadFK_IdMes;
	}

	public Boolean getisVisibilidadFK_IdPais() {
		return this.isVisibilidadFK_IdPais;
	}

	public void setisVisibilidadFK_IdPais(Boolean isVisibilidadFK_IdPais) {
		this.isVisibilidadFK_IdPais=isVisibilidadFK_IdPais;
	}

	public Boolean getisVisibilidadFK_IdSucursal() {
		return this.isVisibilidadFK_IdSucursal;
	}

	public void setisVisibilidadFK_IdSucursal(Boolean isVisibilidadFK_IdSucursal) {
		this.isVisibilidadFK_IdSucursal=isVisibilidadFK_IdSucursal;
	}

	public Boolean getisVisibilidadFK_IdUsuario() {
		return this.isVisibilidadFK_IdUsuario;
	}

	public void setisVisibilidadFK_IdUsuario(Boolean isVisibilidadFK_IdUsuario) {
		this.isVisibilidadFK_IdUsuario=isVisibilidadFK_IdUsuario;
	}

	
	
	public void setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(GastoEmpleado gastoempleado)throws Exception {
		try {
			
				this.setActualParaGuardarEmpresaForeignKey(gastoempleado,null);
				this.setActualParaGuardarSucursalForeignKey(gastoempleado,null);
				this.setActualParaGuardarEmpleadoForeignKey(gastoempleado,null);
				this.setActualParaGuardarEjercicioForeignKey(gastoempleado,null);
				this.setActualParaGuardarPaisForeignKey(gastoempleado,null);
				this.setActualParaGuardarCiudadForeignKey(gastoempleado,null);
				this.setActualParaGuardarAnioForeignKey(gastoempleado,null);
				this.setActualParaGuardarMesForeignKey(gastoempleado,null);
				this.setActualParaGuardarUsuarioForeignKey(gastoempleado,null);
				this.setActualParaGuardarEstadoGastoEmpleadoForeignKey(gastoempleado,null);
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarLicenciaCliente(DatosCliente datosCliente) throws Exception {
		Boolean existe=false;
			
		try {
				InputStream reportFile=null;
				
				String sPath=this.parametroGeneralUsuario.getpath_exportar()+"erp_bydan/license/license.xml";
				
				reportFile = new FileInputStream(sPath);
				
				Document documentBuilder=null;
				
				if(this.constantes2.DOCUMENT_BUILDER==null) {
					documentBuilder=Funciones2.parseXml(reportFile);
				} else {
					documentBuilder=this.constantes2.DOCUMENT_BUILDER;
				}
				
				//GlobalSeguridad.readXml(documentBuilder);
				
				String sNamePCServerLicencia="";
				String sClaveSistemaLicencia="";
				Date dFechaServerLicencia=null;
				
				//CARGAR ELEMENTOS DE LICENCIA
				NodeList nodeList = documentBuilder.getElementsByTagName("Licencia");
				
				for (int iIndice = 0; iIndice < nodeList.getLength(); iIndice++) {
					Node node = nodeList.item(iIndice);
				
					if (node.getNodeType() == Node.ELEMENT_NODE) {
						Element element = (Element) node;
						 
						sNamePCServerLicencia=element.getElementsByTagName("NombrePc").item(0).getTextContent();
						sClaveSistemaLicencia=element.getElementsByTagName("ClaveSistema").item(0).getTextContent();
						
						existe=true;
						break;
					}
				}														
			
				
			if(existe) {
				datosCliente.setsClaveSistema(sClaveSistemaLicencia);
				
				if(!datosCliente.getsNamePCServer().equals(sNamePCServerLicencia)
					&& !datosCliente.getsNamePCServer().equals("")) {
					
					datosCliente.setsNamePCServer(sNamePCServerLicencia);
				}
			} else {
				throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
			}
		} catch(Exception e) {
			throw new Exception("NO EXISTE LICENCIA O NO ESTA BIEN FORMADO");
		}						
	}
	
	public void cargarDatosCliente() throws Exception {
		String sPrimerMacAddress="";		
		String sHostName="";		 
		String sHostIp="";		  
		String sHostUser="";
		
		
		sPrimerMacAddress=FuncionesNetwork.getPrimerMacAddress();		
		sHostName=FuncionesNetwork.getHostName();		 
		sHostIp=FuncionesNetwork.getHostIp();		  
		sHostUser=FuncionesNetwork.getHostUser();
		
		
		this.datosCliente=new DatosCliente();
		if(lIdUsuarioSesion!=null){datosCliente.setIdUsuario(this.lIdUsuarioSesion);}
		
		//SERVIDOR WEB Y TALVEZ SERVIDOR SWING WINDOWS
		this.datosCliente.setsUsuarioPCServer(sHostUser);
		this.datosCliente.setsNamePCServer(sHostName);
		this.datosCliente.setsIPPCServer(sHostIp);
		this.datosCliente.setsMacAddressPCServer(sPrimerMacAddress);
			
			//CLIENTE SWING WINDOWS
			this.datosCliente.setIsClienteWeb(false);
			
			this.datosCliente.setsUsuarioPC(sHostUser);
			this.datosCliente.setsNamePC(sHostName);
			this.datosCliente.setsIPPC(sHostIp);
			this.datosCliente.setsMacAddressPC(sPrimerMacAddress);	
			
			
			//this.cargarLicenciaCliente(this.datosCliente);
			
	}
	
	public void bugActualizarReferenciaActual(GastoEmpleado gastoempleado,GastoEmpleado gastoempleadoAux) throws Exception {
		//ARCHITECTURE		
		//EL ID NEGATIVO GUARDADO EN ORIGINAL SIRVE PARA VERIFICAR Y ACTUALIZAR EL REGISTRO NUEVO (ID,VERSIONROW)
		this.setCamposBaseDesdeOriginalGastoEmpleado(gastoempleado);
					
		//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
		gastoempleadoAux.setId(gastoempleado.getId());
		gastoempleadoAux.setVersionRow(gastoempleado.getVersionRow());					
	}
	
	public void ejecutarMantenimiento(MaintenanceType maintenanceType)throws Exception {	
		try	{								
			
			//this.startProcessGastoEmpleado();
		
			int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();	       
			
			//PUEDE SER -1 CUANDO SE ELIMINA EN GUARDAR CAMBIOS
			if(intSelectedRow>=0 && maintenanceType!=MaintenanceType.GUARDARCAMBIOS) {
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
					
				//ARCHITECTURE
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				
				//ARCHITECTURE
				
				if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					//this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
				}
				
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
			}
			
			//LUEGO DE TRAER DATOS CORRESPONDIENTES QUE COINCIDA LISTA TABLA QUITO FILA TOTALES
			if(this.conTotales) {
				//MEJOR LO DEJO, SI EXISTE EXCEPCION SE PIEDE FILA TOTALES Y ORDEN INDICE FILA ACTUAL
				//this.quitarFilaTotales();
			}
			
			this.cargarDatosCliente();
			
			this.datosDeep=new DatosDeep();
			
			//SE CAMBIA ESTADOS CON ERROR, ENTONCES SE EJECUTA ANTES
			//this.invalidValues = gastoempleadoValidator.getInvalidValues(this.gastoempleado);
			
			//if(this.invalidValues==null || this.invalidValues.length<=0) {
			
			gastoempleadoLogic.setDatosCliente(datosCliente);
			gastoempleadoLogic.setIsConDeep(false);
			
			if(maintenanceType==MaintenanceType.NUEVO) {
				gastoempleadoAux=new  GastoEmpleado();
				
				gastoempleadoAux.setIsNew(true);
				gastoempleadoAux.setIsChanged(true);
				
				gastoempleadoAux.setGastoEmpleadoOriginal(this.gastoempleado);
				
				gastoempleadoAux.setId(this.gastoempleado.getId());	
				gastoempleadoAux.setVersionRow(this.gastoempleado.getVersionRow());	
				gastoempleadoAux.setid_empresa(this.gastoempleado.getid_empresa());	
				gastoempleadoAux.setid_sucursal(this.gastoempleado.getid_sucursal());	
				gastoempleadoAux.setid_empleado(this.gastoempleado.getid_empleado());	
				gastoempleadoAux.setid_ejercicio(this.gastoempleado.getid_ejercicio());	
				gastoempleadoAux.setid_pais(this.gastoempleado.getid_pais());	
				gastoempleadoAux.setid_ciudad(this.gastoempleado.getid_ciudad());	
				gastoempleadoAux.setid_anio(this.gastoempleado.getid_anio());	
				gastoempleadoAux.setid_mes(this.gastoempleado.getid_mes());	
				gastoempleadoAux.setdia(this.gastoempleado.getdia());	
				gastoempleadoAux.setid_usuario(this.gastoempleado.getid_usuario());	
				gastoempleadoAux.setid_estado_gasto_empleado(this.gastoempleado.getid_estado_gasto_empleado());	
				gastoempleadoAux.settotal_ingreso_actual(this.gastoempleado.gettotal_ingreso_actual());	
				gastoempleadoAux.settotal_ingreso_otro(this.gastoempleado.gettotal_ingreso_otro());	
				gastoempleadoAux.settotal_ingreso(this.gastoempleado.gettotal_ingreso());	
				gastoempleadoAux.setgasto_vivienda(this.gastoempleado.getgasto_vivienda());	
				gastoempleadoAux.setgasto_educacion(this.gastoempleado.getgasto_educacion());	
				gastoempleadoAux.setgasto_salud(this.gastoempleado.getgasto_salud());	
				gastoempleadoAux.setgasto_vestimenta(this.gastoempleado.getgasto_vestimenta());	
				gastoempleadoAux.setgasto_alimentacion(this.gastoempleado.getgasto_alimentacion());	
				gastoempleadoAux.settotal_gasto_actual(this.gastoempleado.gettotal_gasto_actual());	
				gastoempleadoAux.settotal_gasto(this.gastoempleado.gettotal_gasto());	
				gastoempleadoAux.setfecha(this.gastoempleado.getfecha());	
				gastoempleadoAux.setporcentaje(this.gastoempleado.getporcentaje());	
				gastoempleadoAux.setvalor_maximo(this.gastoempleado.getvalor_maximo());	
				gastoempleadoAux.setvalor_maximo_porcentaje(this.gastoempleado.getvalor_maximo_porcentaje());	
								
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(gastoempleadoAux,gastoempleados);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote  && !this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.saveGastoEmpleados();//WithConnection
						//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE		
					
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);
					
					this.refrescarForeignKeysDescripcionesGastoEmpleado();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE	
						
						if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
												
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								gastoempleadoLogic.saveGastoEmpleadoRelaciones(gastoempleadoAux);//WithConnection
								//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);
					
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE	
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(gastoempleadoAux,gastoempleados);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);												
						}
					}
				}
			} else if(maintenanceType==MaintenanceType.ACTUALIZAR) {
				gastoempleadoAux=new  GastoEmpleado();
				
				//PUEDE QUE SE ACTUALIZE ALGUN REGISTRO NUEVO
				if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado() 
					|| (this.gastoempleadoSessionBean.getEsGuardarRelacionado() && this.gastoempleado.getId()>=0)) {
						
					gastoempleadoAux.setIsNew(false);
				}
				
				gastoempleadoAux.setIsDeleted(false);
			
				gastoempleadoAux.setId(this.gastoempleado.getId());	
				gastoempleadoAux.setVersionRow(this.gastoempleado.getVersionRow());	
				gastoempleadoAux.setid_empresa(this.gastoempleado.getid_empresa());	
				gastoempleadoAux.setid_sucursal(this.gastoempleado.getid_sucursal());	
				gastoempleadoAux.setid_empleado(this.gastoempleado.getid_empleado());	
				gastoempleadoAux.setid_ejercicio(this.gastoempleado.getid_ejercicio());	
				gastoempleadoAux.setid_pais(this.gastoempleado.getid_pais());	
				gastoempleadoAux.setid_ciudad(this.gastoempleado.getid_ciudad());	
				gastoempleadoAux.setid_anio(this.gastoempleado.getid_anio());	
				gastoempleadoAux.setid_mes(this.gastoempleado.getid_mes());	
				gastoempleadoAux.setdia(this.gastoempleado.getdia());	
				gastoempleadoAux.setid_usuario(this.gastoempleado.getid_usuario());	
				gastoempleadoAux.setid_estado_gasto_empleado(this.gastoempleado.getid_estado_gasto_empleado());	
				gastoempleadoAux.settotal_ingreso_actual(this.gastoempleado.gettotal_ingreso_actual());	
				gastoempleadoAux.settotal_ingreso_otro(this.gastoempleado.gettotal_ingreso_otro());	
				gastoempleadoAux.settotal_ingreso(this.gastoempleado.gettotal_ingreso());	
				gastoempleadoAux.setgasto_vivienda(this.gastoempleado.getgasto_vivienda());	
				gastoempleadoAux.setgasto_educacion(this.gastoempleado.getgasto_educacion());	
				gastoempleadoAux.setgasto_salud(this.gastoempleado.getgasto_salud());	
				gastoempleadoAux.setgasto_vestimenta(this.gastoempleado.getgasto_vestimenta());	
				gastoempleadoAux.setgasto_alimentacion(this.gastoempleado.getgasto_alimentacion());	
				gastoempleadoAux.settotal_gasto_actual(this.gastoempleado.gettotal_gasto_actual());	
				gastoempleadoAux.settotal_gasto(this.gastoempleado.gettotal_gasto());	
				gastoempleadoAux.setfecha(this.gastoempleado.getfecha());	
				gastoempleadoAux.setporcentaje(this.gastoempleado.getporcentaje());	
				gastoempleadoAux.setvalor_maximo(this.gastoempleado.getvalor_maximo());	
				gastoempleadoAux.setvalor_maximo_porcentaje(this.gastoempleado.getvalor_maximo_porcentaje());	
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(gastoempleadoAux,gastoempleados);
				}
				//ARCHITECTURE
				
				if(!isGuardarCambiosEnLote && !this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.saveGastoEmpleados();//WithConnection
						//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
					
					//TALVEZ ESTA DEMAS POR SER UPDATE
					//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
					this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);
					
					this.refrescarForeignKeysDescripcionesGastoEmpleado();
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								gastoempleadoLogic.saveGastoEmpleadoRelaciones(gastoempleadoAux);//WithConnection
								//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);
					
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						} else {
							
							
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
									|| this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
									actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
								}
							} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
								actualizarLista(gastoempleadoAux,gastoempleados);
							}
							//ARCHITECTURE
							
							//AQUI EL ID NEGATIVO ES EL ID BUSCADO, YA QUE NO SE GENERA OTRO EN LA DB POR INGRESAR UNO NUEVO							
							//TALVEZ ESTA DEMAS POR SER UPDATE
							//POR BUG: EL OBJETO ACTUAL SE PERDIA, POR LO QUE SE GUARDA TAMBIEN VALORES EN AUX Y LUEGO DESPUES DEL MENSAJE SE HACE REFERENCIA EL OBJETO ACTUAL AL AUX
							//this.bugActualizarReferenciaActual(this.gastoempleado,gastoempleadoAux);
					
						}
					}
				}				
			} else if(maintenanceType==MaintenanceType.ELIMINAR) {
				gastoempleadoAux=new  GastoEmpleado();
				
				gastoempleadoAux.setIsNew(false);
				gastoempleadoAux.setIsChanged(false);
				
				gastoempleadoAux.setIsDeleted(true);
				
				gastoempleadoAux.setId(this.gastoempleado.getId());	
				gastoempleadoAux.setVersionRow(this.gastoempleado.getVersionRow());	
				gastoempleadoAux.setid_empresa(this.gastoempleado.getid_empresa());	
				gastoempleadoAux.setid_sucursal(this.gastoempleado.getid_sucursal());	
				gastoempleadoAux.setid_empleado(this.gastoempleado.getid_empleado());	
				gastoempleadoAux.setid_ejercicio(this.gastoempleado.getid_ejercicio());	
				gastoempleadoAux.setid_pais(this.gastoempleado.getid_pais());	
				gastoempleadoAux.setid_ciudad(this.gastoempleado.getid_ciudad());	
				gastoempleadoAux.setid_anio(this.gastoempleado.getid_anio());	
				gastoempleadoAux.setid_mes(this.gastoempleado.getid_mes());	
				gastoempleadoAux.setdia(this.gastoempleado.getdia());	
				gastoempleadoAux.setid_usuario(this.gastoempleado.getid_usuario());	
				gastoempleadoAux.setid_estado_gasto_empleado(this.gastoempleado.getid_estado_gasto_empleado());	
				gastoempleadoAux.settotal_ingreso_actual(this.gastoempleado.gettotal_ingreso_actual());	
				gastoempleadoAux.settotal_ingreso_otro(this.gastoempleado.gettotal_ingreso_otro());	
				gastoempleadoAux.settotal_ingreso(this.gastoempleado.gettotal_ingreso());	
				gastoempleadoAux.setgasto_vivienda(this.gastoempleado.getgasto_vivienda());	
				gastoempleadoAux.setgasto_educacion(this.gastoempleado.getgasto_educacion());	
				gastoempleadoAux.setgasto_salud(this.gastoempleado.getgasto_salud());	
				gastoempleadoAux.setgasto_vestimenta(this.gastoempleado.getgasto_vestimenta());	
				gastoempleadoAux.setgasto_alimentacion(this.gastoempleado.getgasto_alimentacion());	
				gastoempleadoAux.settotal_gasto_actual(this.gastoempleado.gettotal_gasto_actual());	
				gastoempleadoAux.settotal_gasto(this.gastoempleado.gettotal_gasto());	
				gastoempleadoAux.setfecha(this.gastoempleado.getfecha());	
				gastoempleadoAux.setporcentaje(this.gastoempleado.getporcentaje());	
				gastoempleadoAux.setvalor_maximo(this.gastoempleado.getvalor_maximo());	
				gastoempleadoAux.setvalor_maximo_porcentaje(this.gastoempleado.getvalor_maximo_porcentaje());	
				
				if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					//ELEMENTO ACTUAL NO SE HA INGRESADO AL SISTEMA, NO SE PUEDE ELIMINAR ALGO QUE NO EXISTE
					if(this.gastoempleadoAux.getId()>=0) {	
						this.gastoempleadosEliminados.add(gastoempleadoAux);											
					}
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(gastoempleadoAux,gastoempleados);
				}
				//ARCHITECTURE
				
				
				if(!isGuardarCambiosEnLote && !this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
						&& !this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.saveGastoEmpleados();//WithConnection
						//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
					} else if(Constantes.ISUSAEJBREMOTE) {
					} else if(Constantes.ISUSAEJBHOME) {
					}	
					//ARCHITECTURE
				} else {
					//CUANDO ES MANTENIMIENTO MAESTRO DETALLE
					if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//GUARDAR RELACIONES
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							
						} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
							
						}
						//ARCHITECTURE
						
						
						if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
							//QUITAR FILA TOTAL
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
							
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								gastoempleadoLogic.saveGastoEmpleadoRelaciones(gastoempleadoAux);//WithConnection
								//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
							} else if(Constantes.ISUSAEJBREMOTE) {
							} else if(Constantes.ISUSAEJBHOME) {
							}
							//ARCHITECTURE
							
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								
							} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
								
							}
							//ARCHITECTURE
						}
					}  else {
							
						
								
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
								|| this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
								actualizarLista(gastoempleadoAux,gastoempleadoLogic.getGastoEmpleados());
							}
						} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
							actualizarLista(gastoempleadoAux,gastoempleados);
						}
						//ARCHITECTURE
					}
				}				
			} else if(maintenanceType==MaintenanceType.GUARDARCAMBIOS) {		
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getGastoEmpleados().addAll(this.gastoempleadosEliminados);
					
					gastoempleadoLogic.saveGastoEmpleados();//WithConnection
					//gastoempleadoLogic.getSetVersionRowGastoEmpleados();//WithConnection
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}	
				//ARCHITECTURE
				this.refrescarForeignKeysDescripcionesGastoEmpleado();
				
				this.gastoempleadosEliminados= new ArrayList<GastoEmpleado>();		
			}
			
			if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				 this.crearFilaTotales();
			}
			
			
									
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				if(!this.isPostAccionSinMensaje) {
					JOptionPane.showMessageDialog(this,"Gasto Empleado GUARDADO CORRECTAMENTE","MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
					if(maintenanceType==MaintenanceType.NUEVO || maintenanceType==MaintenanceType.ACTUALIZAR) {
						//CUANDO ES NUEVO SE PIERDE REFERENCIA NO SE PORQUE
						this.gastoempleado=gastoempleadoAux;
					}
				}
			}
			
			this.isErrorGuardar=false;
			
			this.inicializarInvalidValues();
		/*
		} else {
			this.mostrarInvalidValues();	
		}
		*/
			
		} catch(Exception e) {
			this.isErrorGuardar=true;
			
			this.crearFilaTotales();
			
			throw e;
		} finally {
      		//this.finishProcessGastoEmpleado();
      	}
		
	}	
	
	public void actualizarRelaciones(GastoEmpleado gastoempleadoLocal) throws Exception {
		
		if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
			
			
			} else {
				
			}
		}
	}
	
	public void actualizarRelacionFkPadreActual(GastoEmpleado gastoempleadoLocal) throws Exception {	
		if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {			
			
		
			if(this.jInternalFrameParent.getClass().equals(EmpresaDetalleFormJInternalFrame.class)) {
				EmpresaBeanSwingJInternalFrame empresaBeanSwingJInternalFrameLocal=(EmpresaBeanSwingJInternalFrame) ((EmpresaDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empresaBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpresa(empresaBeanSwingJInternalFrameLocal.getempresa(),true);
				empresaBeanSwingJInternalFrameLocal.actualizarLista(empresaBeanSwingJInternalFrameLocal.empresa,this.empresasForeignKey);

				empresaBeanSwingJInternalFrameLocal.actualizarRelaciones(empresaBeanSwingJInternalFrameLocal.empresa);

				gastoempleadoLocal.setEmpresa(empresaBeanSwingJInternalFrameLocal.empresa);

				this.addItemDefectoCombosForeignKeyEmpresa();
				this.cargarCombosFrameEmpresasForeignKey("Formulario");
				this.setActualEmpresaForeignKey(empresaBeanSwingJInternalFrameLocal.empresa.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(SucursalDetalleFormJInternalFrame.class)) {
				SucursalBeanSwingJInternalFrame sucursalBeanSwingJInternalFrameLocal=(SucursalBeanSwingJInternalFrame) ((SucursalDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				sucursalBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoSucursal(sucursalBeanSwingJInternalFrameLocal.getsucursal(),true);
				sucursalBeanSwingJInternalFrameLocal.actualizarLista(sucursalBeanSwingJInternalFrameLocal.sucursal,this.sucursalsForeignKey);

				sucursalBeanSwingJInternalFrameLocal.actualizarRelaciones(sucursalBeanSwingJInternalFrameLocal.sucursal);

				gastoempleadoLocal.setSucursal(sucursalBeanSwingJInternalFrameLocal.sucursal);

				this.addItemDefectoCombosForeignKeySucursal();
				this.cargarCombosFrameSucursalsForeignKey("Formulario");
				this.setActualSucursalForeignKey(sucursalBeanSwingJInternalFrameLocal.sucursal.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EmpleadoDetalleFormJInternalFrame.class)) {
				EmpleadoBeanSwingJInternalFrame empleadoBeanSwingJInternalFrameLocal=(EmpleadoBeanSwingJInternalFrame) ((EmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				empleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEmpleado(empleadoBeanSwingJInternalFrameLocal.getempleado(),true);
				empleadoBeanSwingJInternalFrameLocal.actualizarLista(empleadoBeanSwingJInternalFrameLocal.empleado,this.empleadosForeignKey);

				empleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(empleadoBeanSwingJInternalFrameLocal.empleado);

				gastoempleadoLocal.setEmpleado(empleadoBeanSwingJInternalFrameLocal.empleado);

				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey("Formulario");
				this.setActualEmpleadoForeignKey(empleadoBeanSwingJInternalFrameLocal.empleado.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EjercicioDetalleFormJInternalFrame.class)) {
				EjercicioBeanSwingJInternalFrame ejercicioBeanSwingJInternalFrameLocal=(EjercicioBeanSwingJInternalFrame) ((EjercicioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ejercicioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEjercicio(ejercicioBeanSwingJInternalFrameLocal.getejercicio(),true);
				ejercicioBeanSwingJInternalFrameLocal.actualizarLista(ejercicioBeanSwingJInternalFrameLocal.ejercicio,this.ejerciciosForeignKey);

				ejercicioBeanSwingJInternalFrameLocal.actualizarRelaciones(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				gastoempleadoLocal.setEjercicio(ejercicioBeanSwingJInternalFrameLocal.ejercicio);

				this.addItemDefectoCombosForeignKeyEjercicio();
				this.cargarCombosFrameEjerciciosForeignKey("Formulario");
				this.setActualEjercicioForeignKey(ejercicioBeanSwingJInternalFrameLocal.ejercicio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(PaisDetalleFormJInternalFrame.class)) {
				PaisBeanSwingJInternalFrame paisBeanSwingJInternalFrameLocal=(PaisBeanSwingJInternalFrame) ((PaisDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				paisBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoPais(paisBeanSwingJInternalFrameLocal.getpais(),true);
				paisBeanSwingJInternalFrameLocal.actualizarLista(paisBeanSwingJInternalFrameLocal.pais,this.paissForeignKey);

				paisBeanSwingJInternalFrameLocal.actualizarRelaciones(paisBeanSwingJInternalFrameLocal.pais);

				gastoempleadoLocal.setPais(paisBeanSwingJInternalFrameLocal.pais);

				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey("Formulario");
				this.setActualPaisForeignKey(paisBeanSwingJInternalFrameLocal.pais.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(CiudadDetalleFormJInternalFrame.class)) {
				CiudadBeanSwingJInternalFrame ciudadBeanSwingJInternalFrameLocal=(CiudadBeanSwingJInternalFrame) ((CiudadDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				ciudadBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoCiudad(ciudadBeanSwingJInternalFrameLocal.getciudad(),true);
				ciudadBeanSwingJInternalFrameLocal.actualizarLista(ciudadBeanSwingJInternalFrameLocal.ciudad,this.ciudadsForeignKey);

				ciudadBeanSwingJInternalFrameLocal.actualizarRelaciones(ciudadBeanSwingJInternalFrameLocal.ciudad);

				gastoempleadoLocal.setCiudad(ciudadBeanSwingJInternalFrameLocal.ciudad);

				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey("Formulario");
				this.setActualCiudadForeignKey(ciudadBeanSwingJInternalFrameLocal.ciudad.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(AnioDetalleFormJInternalFrame.class)) {
				AnioBeanSwingJInternalFrame anioBeanSwingJInternalFrameLocal=(AnioBeanSwingJInternalFrame) ((AnioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				anioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoAnio(anioBeanSwingJInternalFrameLocal.getanio(),true);
				anioBeanSwingJInternalFrameLocal.actualizarLista(anioBeanSwingJInternalFrameLocal.anio,this.aniosForeignKey);

				anioBeanSwingJInternalFrameLocal.actualizarRelaciones(anioBeanSwingJInternalFrameLocal.anio);

				gastoempleadoLocal.setAnio(anioBeanSwingJInternalFrameLocal.anio);

				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey("Formulario");
				this.setActualAnioForeignKey(anioBeanSwingJInternalFrameLocal.anio.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(MesDetalleFormJInternalFrame.class)) {
				MesBeanSwingJInternalFrame mesBeanSwingJInternalFrameLocal=(MesBeanSwingJInternalFrame) ((MesDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				mesBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoMes(mesBeanSwingJInternalFrameLocal.getmes(),true);
				mesBeanSwingJInternalFrameLocal.actualizarLista(mesBeanSwingJInternalFrameLocal.mes,this.messForeignKey);

				mesBeanSwingJInternalFrameLocal.actualizarRelaciones(mesBeanSwingJInternalFrameLocal.mes);

				gastoempleadoLocal.setMes(mesBeanSwingJInternalFrameLocal.mes);

				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey("Formulario");
				this.setActualMesForeignKey(mesBeanSwingJInternalFrameLocal.mes.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(UsuarioDetalleFormJInternalFrame.class)) {
				UsuarioBeanSwingJInternalFrame usuarioBeanSwingJInternalFrameLocal=(UsuarioBeanSwingJInternalFrame) ((UsuarioDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				usuarioBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoUsuario(usuarioBeanSwingJInternalFrameLocal.getusuario(),true);
				usuarioBeanSwingJInternalFrameLocal.actualizarLista(usuarioBeanSwingJInternalFrameLocal.usuario,this.usuariosForeignKey);

				usuarioBeanSwingJInternalFrameLocal.actualizarRelaciones(usuarioBeanSwingJInternalFrameLocal.usuario);

				gastoempleadoLocal.setUsuario(usuarioBeanSwingJInternalFrameLocal.usuario);

				this.addItemDefectoCombosForeignKeyUsuario();
				this.cargarCombosFrameUsuariosForeignKey("Formulario");
				this.setActualUsuarioForeignKey(usuarioBeanSwingJInternalFrameLocal.usuario.getId(),false,"Formulario");
			}
			 else if(this.jInternalFrameParent.getClass().equals(EstadoGastoEmpleadoDetalleFormJInternalFrame.class)) {
				EstadoGastoEmpleadoBeanSwingJInternalFrame estadogastoempleadoBeanSwingJInternalFrameLocal=(EstadoGastoEmpleadoBeanSwingJInternalFrame) ((EstadoGastoEmpleadoDetalleFormJInternalFrame) this.jInternalFrameParent).jInternalFrameParent;

				estadogastoempleadoBeanSwingJInternalFrameLocal.setVariablesFormularioToObjetoActualTodoEstadoGastoEmpleado(estadogastoempleadoBeanSwingJInternalFrameLocal.getestadogastoempleado(),true);
				estadogastoempleadoBeanSwingJInternalFrameLocal.actualizarLista(estadogastoempleadoBeanSwingJInternalFrameLocal.estadogastoempleado,this.estadogastoempleadosForeignKey);

				estadogastoempleadoBeanSwingJInternalFrameLocal.actualizarRelaciones(estadogastoempleadoBeanSwingJInternalFrameLocal.estadogastoempleado);

				gastoempleadoLocal.setEstadoGastoEmpleado(estadogastoempleadoBeanSwingJInternalFrameLocal.estadogastoempleado);

				this.addItemDefectoCombosForeignKeyEstadoGastoEmpleado();
				this.cargarCombosFrameEstadoGastoEmpleadosForeignKey("Formulario");
				this.setActualEstadoGastoEmpleadoForeignKey(estadogastoempleadoBeanSwingJInternalFrameLocal.estadogastoempleado.getId(),false,"Formulario");
			}
		
		}
	}
	
	public Boolean validarGastoEmpleadoActual() throws Exception {
		Boolean estaValidado=false;
		this.inicializarInvalidValues();
		
		/*
		int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE ||Constantes.ISUSAEJBHOME) {
			this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
		}
		//ARCHITECTURE
		*/
		
		this.invalidValues = gastoempleadoValidator.getInvalidValues(this.gastoempleado);
					
		if(this.invalidValues==null || this.invalidValues.length<=0) {
			estaValidado=true;
		} else {
			this.mostrarInvalidValues();	
		}
		
		return estaValidado;
	}
	
	public void actualizarLista(GastoEmpleado gastoempleado,List<GastoEmpleado> gastoempleados) throws Exception {
		try	{		
			GastoEmpleadoConstantesFunciones.actualizarLista(gastoempleado,gastoempleados,this.gastoempleadoSessionBean.getEsGuardarRelacionado());		
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void actualizarSelectedLista(GastoEmpleado gastoempleado,List<GastoEmpleado> gastoempleados) throws Exception {
		try	{			
			GastoEmpleadoConstantesFunciones.actualizarSelectedLista(gastoempleado,gastoempleados);
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public Boolean tieneElementosSeleccionados() throws Exception {
		Boolean tiene=false;
		
		List<GastoEmpleado> gastoempleadosLocal=null;
		
		try	{			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				gastoempleadosLocal=this.gastoempleadoLogic.getGastoEmpleados();
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				gastoempleadosLocal=this.gastoempleados;
			}
			//ARCHITECTURE
		
			for(GastoEmpleado gastoempleadoLocal:gastoempleadosLocal) {
				if(this.permiteMantenimiento(gastoempleadoLocal) && gastoempleadoLocal.getIsSelected()) {
					tiene=true;
					break;
				}
			}
		} catch(Exception e) {
			throw e;
		}
		
		return tiene;
	}			
	
	public void mostrarInvalidValues() throws Exception {
		String sMensaje="";
				
		for (InvalidValue invalidValue : this.invalidValues) {
			sMensaje+="\r\n"+GastoEmpleadoConstantesFunciones.getGastoEmpleadoLabelDesdeNombre(invalidValue.getPropertyName())+"->"+invalidValue.getMessage();
			
			//MOSTRAR CAMPOS INVALIDOS
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDEMPRESA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_empresaGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDSUCURSAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_sucursalGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_empleadoGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDEJERCICIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_ejercicioGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDPAIS)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_paisGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDCIUDAD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_ciudadGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDANIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_anioGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDMES)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_mesGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.DIA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeldiaGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDUSUARIO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_usuarioGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.IDESTADOGASTOEMPLEADO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_estado_gasto_empleadoGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.TOTALINGRESOACTUAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_actualGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.TOTALINGRESOOTRO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_otroGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.TOTALINGRESO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingresoGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.GASTOVIVIENDA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_viviendaGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.GASTOEDUCACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_educacionGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.GASTOSALUD)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_saludGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.GASTOVESTIMENTA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_vestimentaGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.GASTOALIMENTACION)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_alimentacionGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.TOTALGASTOACTUAL)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gasto_actualGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.TOTALGASTO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gastoGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.FECHA)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelfechaGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.PORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelporcentajeGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.VALORMAXIMO)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximoGastoEmpleado,invalidValue.getMessage());}
			if(invalidValue.getPropertyName().equals(GastoEmpleadoConstantesFunciones.VALORMAXIMOPORCENTAJE)) {FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximo_porcentajeGastoEmpleado,invalidValue.getMessage());}
        }
		
		
		if(!sMensaje.equals("")) {
			//JOptionPane.showMessageDialog(this,sMensaje,"VALIDACION ",JOptionPane.ERROR_MESSAGE);
			throw new Exception(sMensaje);			
		}
		
		/*
		System.out.println(invalidValue);
        System.out.println("message=" + invalidValue.getMessage());
        System.out.println("propertyName=" + invalidValue.getPropertyName());
        System.out.println("propertyPath=" + invalidValue.getPropertyPath());
        System.out.println("value=" + invalidValue.getValue());
        */
	}		
	
	public void inicializarInvalidValues() throws Exception {
		String sMensaje="";	
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
		
		//MOSTRAR CAMPOS INVALIDOS
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_empresaGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_sucursalGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_empleadoGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_ejercicioGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_paisGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_ciudadGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_anioGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_mesGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeldiaGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_usuarioGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelid_estado_gasto_empleadoGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_actualGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_otroGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingresoGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_viviendaGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_educacionGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_saludGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_vestimentaGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_alimentacionGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gasto_actualGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gastoGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelfechaGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelporcentajeGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximoGastoEmpleado,"");
		FuncionesSwing.mostrarCampoMensajeInvalido(true,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximo_porcentajeGastoEmpleado,"");
		
		}
	}
	
	
	
	public void actualizarObjetoPadreFk(String sTipo)  throws Exception {
		if(sTipo.equals("XXXAuxiliar")) {
		
		}
		
	}
	
	public void nuevoPreparar() throws Exception {
		this.nuevoPreparar(false);
	}
	
	public void nuevoPreparar(Boolean esNuevoGuardarCambios) throws Exception {
		this.iIdNuevoGastoEmpleado--;	
		
		
		this.gastoempleadoAux=new GastoEmpleado();
		
		this.gastoempleadoAux.setId(this.iIdNuevoGastoEmpleado);
		this.gastoempleadoAux.setIsChanged(true);
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.gastoempleadoLogic.getGastoEmpleados().add(this.gastoempleadoAux);
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.gastoempleados.add(this.gastoempleadoAux);
		}
		//ARCHITECTURE
		
		this.gastoempleado=this.gastoempleadoAux;
		
		if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			this.setVariablesObjetoActualToFormularioGastoEmpleado(this.gastoempleado);
			this.setVariablesObjetoActualToFormularioForeignKeyGastoEmpleado(this.gastoempleado);
		}
				
		//this.setDefaultControlesGastoEmpleado();
		
		this.inicializarInvalidValues();
				
		//SELECCIONA ITEM DEFECTO-->SET O SELECTED INDEX
		this.setItemDefectoCombosForeignKeyGastoEmpleado();
		
		
		//INICIALIZA VARIABLES COMBOS GLOBALES A FORMULARIO(ParametroGeneralUsuario)
		this.setVariablesGlobalesCombosForeignKeyGastoEmpleado();
		
		//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
		//this.setVariablesGlobalesAuxiliaresCombosForeignKeyGastoEmpleado();
		
		//SI TIENE FOREIGN KEY CON CAMPO esDefecto=true, SE ACTUALIZA A OBJETO ACTUAL
		this.setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualGastoEmpleado(this.gastoempleadoBean,this.gastoempleado,false,false);
		
		//ACTUALIZA VALORES PARA EL OBJETO ACTUAL ANTES DE ENVIARLO A ACTUALIZAR
		this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				
		ArrayList<Classe> classes=new ArrayList<Classe>();
		
		if(this.jInternalFrameParent!=null) {
			this.jInternalFrameParent.actualizarObjetoPadreFk(GastoEmpleadoConstantesFunciones.CLASSNAME);
		}	
		
		
		if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
			classes=GastoEmpleadoConstantesFunciones.getClassesRelationshipsOfGastoEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
		}
		
		this.classesActual=new ArrayList<Classe>();
		this.classesActual.addAll(classes);
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {						
			this.gastoempleadoReturnGeneral=gastoempleadoLogic.procesarEventosGastoEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,EventoGlobalTipo.FORM_RECARGAR,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.gastoempleadoLogic.getGastoEmpleados(),this.gastoempleado,this.gastoempleadoParameterGeneral,this.isEsNuevoGastoEmpleado,classes);//this.gastoempleadoLogic.getGastoEmpleado()
						
		} else if(Constantes.ISUSAEJBREMOTE) {
						
		} else if(Constantes.ISUSAEJBHOME) {
		}
		//ARCHITECTURE
		
		//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
		//this.setVariablesObjetoReturnGeneralToBeanGastoEmpleado(this.gastoempleadoReturnGeneral,this.gastoempleadoBean,false);
		
		if(this.gastoempleadoReturnGeneral.getConRecargarPropiedades()) {
			//INICIALIZA VARIABLES COMBOS NORMALES (FK)
			this.setVariablesObjetoActualToFormularioForeignKeyGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado());
			
			//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
			this.setVariablesObjetoActualToFormularioGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado());
		}
		
		if(this.gastoempleadoReturnGeneral.getConRecargarRelaciones()) {
			//INICIALIZA VARIABLES RELACIONES A FORMULARIO
			this.setVariablesRelacionesObjetoActualToFormularioGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado(),classes);//this.gastoempleadoBean);	
		}
			
		//ACTUALIZA VARIABLES FORMULARIO A OBJETO ACTUAL (PARA NUEVO TABLA O GUARDAR CAMBIOS
		if(esNuevoGuardarCambios) {
			this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,false);
		}
		
		//INICIALIZA VARIABLES COMBOS DEFAULT DEL PROYECTO(|DEFAULT para FK)
		//this.setVariablesDefaultCombosForeignKeyGastoEmpleado();
		
		//INICIALIZA VARIABLES COMBOS PARAMETRO DEL PROYECTO(|VALORPARAM Era para ParametroModulo, ahora en logic)
		//this.setVariablesParametroCombosForeignKeyGastoEmpleado();						
		
		if(!esNuevoGuardarCambios) {
			//INICIALIZA VARIABLES POR OPCION MENU
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.RecargarFormGastoEmpleado(this,"NUEVO_PREPARAR","",this.arrDatoGeneral);
		
			//NO FUNCIONA BINDINGS			
			this.inicializarActualizarBindingGastoEmpleado(false);
						
			if(gastoempleadoSessionBean.getConGuardarRelaciones()) {
				//DEBERIA YA ESTAR CARGADO LOS COMBOS Y SI SE NECESITA ALGO MAS SE DEBE CREAR FUNCION LIMITADA
				//SI DEBE TRAER Y RESETEAR TABLA
								
			}
				
			//SI ES MANUAL
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualGastoEmpleado();
			}
			
			this.actualizarVisualTableDatosGastoEmpleado();
			
			this.jTableDatosGastoEmpleado.setRowSelectionInterval(this.getIndiceNuevoGastoEmpleado(), this.getIndiceNuevoGastoEmpleado());
			
			this.seleccionarFilaTablaGastoEmpleadoActual();
						
			this.actualizarEstadoCeldasBotonesGastoEmpleado("a", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		}		
	}
	
	public void habilitarDeshabilitarControlesGastoEmpleado(Boolean isHabilitar) throws Exception {
		
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activardiaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activartotal_ingreso_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activartotal_ingreso_otroGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activartotal_ingresoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activargasto_viviendaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activargasto_educacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activargasto_saludGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activargasto_vestimentaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activargasto_alimentacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activartotal_gasto_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activartotal_gastoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarfechaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarporcentajeGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarvalor_maximoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarvalor_maximo_porcentajeGastoEmpleado);	
		//
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_empresaGastoEmpleado);//
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_sucursalGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_empleadoGastoEmpleado);//
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_ejercicioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_paisGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_ciudadGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_anioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_mesGastoEmpleado);//
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_usuarioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setEnabled(isHabilitar && this.gastoempleadoConstantesFunciones.activarid_estado_gasto_empleadoGastoEmpleado);
	};
	
	public void setDefaultControlesGastoEmpleado() throws Exception {
			
	};
	
	
	public void habilitarDeshabilitarTipoMantenimientoGastoEmpleado(Boolean esRelaciones) throws Exception {
		if(esRelaciones) {
			//this.gastoempleadoSessionBean.setConGuardarRelaciones(true);			
			this.gastoempleadoSessionBean.setEstaModoGuardarRelaciones(true);				
			this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.setVisible(true);
			
					
		} else {
			//this.gastoempleadoSessionBean.setConGuardarRelaciones(false);			
			this.gastoempleadoSessionBean.setEstaModoGuardarRelaciones(false);						
			this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.setVisible(false);
			
			
		}
	};
	
	public int getIndiceNuevoGastoEmpleado() throws Exception {
		int iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
				if(gastoempleadoAux.getId().equals(this.iIdNuevoGastoEmpleado)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleados) {
				if(gastoempleadoAux.getId().equals(this.iIdNuevoGastoEmpleado)) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndice-1;
		}
		
		return iIndice;
	}
	
	public int getIndiceActualGastoEmpleado(GastoEmpleado gastoempleado,Integer iIndiceActual) throws Exception {
		Integer iIndice=0;
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
				if(gastoempleadoAux.getId().equals(gastoempleado.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleados) {
				if(gastoempleadoAux.getId().equals(gastoempleado.getId())) {
					existe=true;
					break;
				}
				
				iIndice++;
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
			iIndice=iIndiceActual;
		}
		
		return iIndice;
	}
	
	public void setCamposBaseDesdeOriginalGastoEmpleado(GastoEmpleado gastoempleadoOriginal) throws Exception {
		Boolean existe=false;
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
				if(gastoempleadoAux.getGastoEmpleadoOriginal().getId().equals(gastoempleadoOriginal.getId())) {
					existe=true;
					gastoempleadoOriginal.setId(gastoempleadoAux.getId());
					gastoempleadoOriginal.setVersionRow(gastoempleadoAux.getVersionRow());
					break;
				}
				
			}
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(GastoEmpleado gastoempleadoAux:this.gastoempleados) {
				if(gastoempleadoAux.getGastoEmpleadoOriginal().getId().equals(gastoempleadoOriginal.getId())) {
					existe=true;
					gastoempleadoOriginal.setId(gastoempleadoAux.getId());
					gastoempleadoOriginal.setVersionRow(gastoempleadoAux.getVersionRow());
					break;
				}				
			}
		}
		//ARCHITECTURE
		
		if(!existe) {
			//SI NO EXISTE TOMA LA ULTIMA FILA
		}
	}
	
	public void cancelarNuevosGastoEmpleado(Boolean esParaCancelar) throws Exception {
		gastoempleadosAux=new ArrayList<GastoEmpleado>();
		gastoempleadoAux=new GastoEmpleado();
		
		if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
					if(gastoempleadoAux.getId()<0) {
						gastoempleadosAux.add(gastoempleadoAux);
					}		
				}
				this.iIdNuevoGastoEmpleado=0L;
				this.gastoempleadoLogic.getGastoEmpleados().removeAll(gastoempleadosAux);
					
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(GastoEmpleado gastoempleadoAux:this.gastoempleados) {
					if(gastoempleadoAux.getId()<0) {
						gastoempleadosAux.add(gastoempleadoAux);
					}		
				}
				this.iIdNuevoGastoEmpleado=0L;
				this.gastoempleados.removeAll(gastoempleadosAux);
			}	
		} else {			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				if(esParaCancelar && this.isEsNuevoGastoEmpleado 
					&& this.gastoempleadoLogic.getGastoEmpleados().size()>0
					) {
					gastoempleadoAux=this.gastoempleadoLogic.getGastoEmpleados().get(this.gastoempleadoLogic.getGastoEmpleados().size() - 1);
				
					if(gastoempleadoAux.getId()<0) {
						this.gastoempleadoLogic.getGastoEmpleados().remove(gastoempleadoAux);
					}
				}
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				if(esParaCancelar && this.isEsNuevoGastoEmpleado && this.gastoempleados.size()>0) {
					gastoempleadoAux=this.gastoempleados.get(this.gastoempleados.size() - 1);
				
					if(gastoempleadoAux.getId()<0) {
						this.gastoempleados.remove(gastoempleadoAux);
					}
				}
			}	
		}
	}
	
	public void cancelarNuevoGastoEmpleado(Boolean esParaCancelar) throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			if(gastoempleado.getId()<0) {
				this.gastoempleadoLogic.getGastoEmpleados().remove(this.gastoempleado);
			}					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			if(gastoempleado.getId()<0) {
				this.gastoempleados.remove(this.gastoempleado);
			}
		}			
	}
	
	public void setEstadosInicialesGastoEmpleado(List<GastoEmpleado> gastoempleadosAux) throws Exception {
		GastoEmpleadoConstantesFunciones.setEstadosInicialesGastoEmpleado(gastoempleadosAux);
	}
	
	public void setEstadosInicialesGastoEmpleado(GastoEmpleado gastoempleadoAux) throws Exception {
		GastoEmpleadoConstantesFunciones.setEstadosInicialesGastoEmpleado(gastoempleadoAux);		
	}
	
	public void nuevo() throws Exception {
		try	{
			//ESTA VALIDADO EN FUNCION ACTUALIZAR
			//if(this.validarGastoEmpleadoActual()) {
				this.ejecutarMantenimiento(MaintenanceType.NUEVO);
				
				this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
				
			//}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void actualizar() throws Exception {
		try	{
			if(this.validarGastoEmpleadoActual()) {
				if(!this.isEsNuevoGastoEmpleado) {
					this.ejecutarMantenimiento(MaintenanceType.ACTUALIZAR);
					
					this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
					
				} else {					
					this.nuevo();
					this.isEsNuevoGastoEmpleado=false;
				}
				
				//SE CANCELA AL FINAL DEL PROCESO JBUTTONACTUALIZAR
				//this.cancelar(false);
			}		
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void eliminar() throws Exception {
		try	{	
			if(this.validarGastoEmpleadoActual()) {
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE ELIMINAR EL/LA Gasto Empleado ?", "MANTENIMIENTO DE Gasto Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
					this.ejecutarMantenimiento(MaintenanceType.ELIMINAR);			
					this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
				}
			
			}
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void guardarCambios() throws Exception {
		try	{
			this.ejecutarMantenimiento(MaintenanceType.GUARDARCAMBIOS);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarAsignar(GastoEmpleado gastoempleado) throws Exception {
		GastoEmpleadoConstantesFunciones.seleccionarAsignar(this.gastoempleado,gastoempleado);
	}
	
	public void seleccionar() throws Exception {
		try	{
			//ACTUALIZO EL PERMISO ACTUALIZAR CON EL PERMISO ACTUALIZAR ORIGINAL ESTE PERMISO SE UTILIZA PARA EL NUEVO TAMBIEN
			this.isPermisoActualizarGastoEmpleado=this.isPermisoActualizarOriginalGastoEmpleado;
			
			
			this.seleccionarAsignar(gastoempleado);
			
			
			
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			GastoEmpleadoConstantesFunciones.quitarEspaciosGastoEmpleado(this.gastoempleado,this.arrDatoGeneral);
			
			
			this.actualizarEstadoCeldasBotonesGastoEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarBusqueda(Long id) throws Exception {
		try	{
			this.gastoempleadoSessionBean.setsFuncionBusquedaRapida(this.gastoempleadoSessionBean.getsFuncionBusquedaRapida().replace("TO_REPLACE", id.toString()));
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	
	public void cancelar() throws Exception {
		this.cancelar(true);
	}
	
	public void cancelar(Boolean esParaCancelar) throws Exception {
		try {
														
			
			//SE UTILIZA COLUMNA ELIMINAR EN TABLA
			if(this.isEsNuevoGastoEmpleado) {
				//NO CANCELA TODOS NUEVOS POR FUNCIONALIDAD GUARDAR CAMBIOS
				//this.cancelarNuevosGastoEmpleado(esParaCancelar);				
				this.cancelarNuevoGastoEmpleado(esParaCancelar);								
			}
			
			this.gastoempleado=new GastoEmpleado();
			
			this.inicializarGastoEmpleado();
			
			this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);			
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void inicializarGastoEmpleado() throws Exception {
		try {
			GastoEmpleadoConstantesFunciones.inicializarGastoEmpleado(this.gastoempleado);
			
			} catch(Exception e) {
			throw e;
		}
	}
	
	public void anteriores()throws Exception {
		try	{
			//this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			
			if(this.iNumeroPaginacionPagina-this.iNumeroPaginacion<this.iNumeroPaginacion) {
				this.iNumeroPaginacionPagina=0;		
			} else {
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina-this.iNumeroPaginacion;
			}
			
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void siguientes()throws Exception {
		try	{			
			if(this.gastoempleadoLogic.getGastoEmpleados().size()>0) {
					
				this.iNumeroPaginacionPagina=this.iNumeroPaginacionPagina+this.iNumeroPaginacion;
			}
				
			this.procesarBusqueda(this.sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void generarReporteGastoEmpleados(String sAccionBusqueda,List<GastoEmpleado> gastoempleadosParaReportes) throws Exception {
		//HttpSession httpSession = httpServletRequest.getSession();
		Long iIdUsuarioSesion=0L;	
		
		
		if(usuarioActual==null) {
			this.usuarioActual=new Usuario();
		}
		
		iIdUsuarioSesion=usuarioActual.getId();
		
		String sPathReportes="";
		
		InputStream reportFile=null;
		InputStream imageFile=null;
			
		imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		String sPathReporteFinal="";
		
		if(!esReporteAccionProceso) {
			if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
				if(!this.esReporteDinamico) {
					sPathReporteFinal="GastoEmpleado"+this.sTipoReporteExtra+"Design.jasper";
					reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
				} else {
					sPathReporteFinal=this.sPathReporteDinamico;
					reportFile = new FileInputStream(sPathReporteFinal);
				}
			} else {
				sPathReporteFinal="GastoEmpleadoMasterRelaciones"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);
				//sPathReportes=reportFile.getPath().replace("GastoEmpleadoMasterRelacionesDesign.jasper", "");
			}
		} else {
				sPathReporteFinal="GastoEmpleado"+this.sTipoReporteExtra+"Design.jasper";
				reportFile = AuxiliarReportes.class.getResourceAsStream(sPathReporteFinal);	
		}
		
		if(reportFile==null) {
			throw new JRRuntimeException(sPathReporteFinal+" no existe");
		}
		
		String sUsuario="";
		
		if(usuarioActual!=null) {
			sUsuario=usuarioActual.getuser_name();
		}
		
		Map<String, Object> parameters = new HashMap<String, Object>();
		parameters.put("usuario", sUsuario);
		
		parameters.put("titulo", Funciones.GetTituloSistemaReporte(this.parametroGeneralSg,this.moduloActual,this.usuarioActual));
		parameters.put("subtitulo", "Reporte De  Gasto Empleados");		
		parameters.put("busquedapor", GastoEmpleadoConstantesFunciones.getNombreIndice(sAccionBusqueda)+sDetalleReporte);
		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			parameters.put("SUBREPORT_DIR", sPathReportes);
		}
		
		parameters.put("con_grafico", this.conGraficoReporte);
		
		JasperReport jasperReport = (JasperReport)JRLoader.loadObject(reportFile);
				
		this.cargarDatosCliente();
		
		ArrayList<Classe> classes=new ArrayList<Classe>();		
		
		if(this.sTipoReporte.equals("RELACIONES")) {//isEsReporteRelaciones
			
			
		} else {
			//FK DEBERIA TRAERSE DE ANTEMANO
			
		}
								
		
		//CLASSES PARA REPORTES OBJETOS RELACIONADOS
		if(!this.sTipoReporte.equals("RELACIONES")) {//!isEsReporteRelaciones
			classes=new ArrayList<Classe>();
		}
		
		JRBeanArrayDataSource jrbeanArrayDataSourceGastoEmpleado=null;
		
		if(this.sTipoReporteExtra!=null && !this.sTipoReporteExtra.equals("")) {
			GastoEmpleadoConstantesFunciones.S_TIPOREPORTE_EXTRA=this.sTipoReporteExtra;
		} else {
			GastoEmpleadoConstantesFunciones.S_TIPOREPORTE_EXTRA="";
		}
		
		jrbeanArrayDataSourceGastoEmpleado=new JRBeanArrayDataSource(GastoEmpleadoJInternalFrame.TraerGastoEmpleadoBeans(gastoempleadosParaReportes,classes).toArray());
		
		jasperPrint = JasperFillManager.fillReport(jasperReport,parameters,jrbeanArrayDataSourceGastoEmpleado);
				
		
		String sPathDest=Constantes.SUNIDAD_ARCHIVOS+":/"+Constantes.SCONTEXTSERVER+"/"+GastoEmpleadoConstantesFunciones.SCHEMA+"/reportes";
		
		File filePathDest = new File(sPathDest);
		
		if(!filePathDest.exists()) {
			filePathDest.mkdirs();				
		}
				
		String sDestFileName=sPathDest+"/"+GastoEmpleadoConstantesFunciones.CLASSNAME;
				
		if(this.sTipoArchivoReporte=="VISUALIZAR") {
			JasperViewer jasperViewer = new JasperViewer(jasperPrint,false) ;
			jasperViewer.setVisible(true) ; 

		} else if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML") {	
			//JasperFillManager.fillReportToFile(reportFile.getAbsolutePath(),parameters, new JRBeanArrayDataSource(GastoEmpleadoBean.TraerGastoEmpleadoBeans(gastoempleadosParaReportes).toArray()));
							
			if(this.sTipoArchivoReporte=="HTML") {
				sDestFileName+=".html";
				JasperExportManager.exportReportToHtmlFile(jasperPrint,sDestFileName);
					
			} else if(this.sTipoArchivoReporte=="PDF") {
				sDestFileName+=".pdf";
				JasperExportManager.exportReportToPdfFile(jasperPrint,sDestFileName);
			} else {
				sDestFileName+=".xml";
				JasperExportManager.exportReportToXmlFile(jasperPrint,sDestFileName, false);
			}	
			
		} else if(this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {
				
			if(this.sTipoArchivoReporte=="WORD") {
				sDestFileName+=".rtf";
					
				JRRtfExporter exporter = new JRRtfExporter();
		
				exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
		
				exporter.exportReport();
				
			} else	{
				sDestFileName+=".xls";
					
				JRXlsExporter exporterXls = new JRXlsExporter();
		
				exporterXls.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
				exporterXls.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, sDestFileName);
				exporterXls.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);
		
				exporterXls.exportReport();
			}
			
		} else if(this.sTipoArchivoReporte=="EXCEL2"||this.sTipoArchivoReporte=="EXCEL2_2") {
			//sDestFileName+=".xlsx";
			
			if(this.sTipoReporte.equals("NORMAL")) {
				this.generarExcelReporteGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes);
			
			} else if(this.sTipoReporte.equals("FORMULARIO")){
				this.generarExcelReporteVerticalGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes,false);
			
			} else if(this.sTipoReporte.equals("DINAMICO")){
				
				if(this.sTipoReporteDinamico.equals("NORMAL")) {
					
					this.jButtonGenerarExcelReporteDinamicoGastoEmpleadoActionPerformed(null);
					//this.generarExcelReporteGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes);
					
				
				} else if(this.sTipoReporteDinamico.equals("FORMULARIO")){
					this.generarExcelReporteVerticalGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes,true);
				
				} else if(this.sTipoReporteDinamico.equals("RELACIONES")){
					this.generarExcelReporteRelacionesGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes,true);
				}
				
			} else if(this.sTipoReporte.equals("RELACIONES")){
				this.generarExcelReporteRelacionesGastoEmpleados(sAccionBusqueda,sTipoArchivoReporte,gastoempleadosParaReportes,false);
			}
		}
		
		if(this.sTipoArchivoReporte=="HTML"||this.sTipoArchivoReporte=="PDF"||this.sTipoArchivoReporte=="XML"||this.sTipoArchivoReporte=="WORD"||this.sTipoArchivoReporte=="EXCEL") {				
			JOptionPane.showMessageDialog(this,"REPORTE "+sDestFileName+" GENERADO SATISFACTORIAMENTE","REPORTES ",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteGastoEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<GastoEmpleado> gastoempleadosParaReportes) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("GastoEmpleados");
         
        int iRow = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderGastoEmpleado("NORMAL",row,workbook);
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux=null;
		
		int i=0;
		
      	for(GastoEmpleado gastoempleado : gastoempleadosParaReportes) {            
			row = sheet.createRow(iRow++);
			iCell = 0;
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				cellStyleDataAux=cellStyleData;
			}
			
			GastoEmpleadoConstantesFunciones.generarExcelReporteDataGastoEmpleado("NORMAL",row,workbook,gastoempleado,cellStyleDataAux);
		
			
			/*
            Cell cell0 = row.createCell(0);
            cell0.setCellValue(country.getName());
            Cell cell1 = row.createCell(1);
            cell1.setCellValue(country.getShortCode());
			*/
			
			i++;
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteHeaderGastoEmpleado(String sTipo,Row row,Workbook workbook) {
		
		GastoEmpleadoConstantesFunciones.generarExcelReporteHeaderGastoEmpleado(sTipo,row,workbook);
		
		/*
		Cell cell=null;
		int iCell=0;
		
		CellStyle cellStyle = workbook.createCellStyle();
		cellStyle.setFillBackgroundColor(IndexedColors.GREEN.getIndex());
		cellStyle.setFillPattern(CellStyle.ALIGN_FILL);
		*/
		
	}
	
	public void generarExcelReporteVerticalGastoEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<GastoEmpleado> gastoempleadosParaReportes,Boolean paraDinamico) throws Exception {
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado_vertical";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("GastoEmpleados");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		CellStyle cellStyle = Funciones2.getStyleTitulo(workbook,"ZEBRA");;
		
		CellStyle cellStyleTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL_VERTICAL");
		
		
		for(GastoEmpleado gastoempleado : gastoempleadosParaReportes) {
			row = sheet.createRow(iRow++);
			iRowLast=iRow - 1;
			
			cell = row.createCell(0);
			cell.setCellValue(GastoEmpleadoConstantesFunciones.getGastoEmpleadoDescripcion(gastoempleado));
			cell.setCellStyle(cellStyleTitulo);
			
			sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
	
			


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getempresa_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getsucursal_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getejercicio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDPAIS))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDPAIS);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getpais_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getciudad_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDANIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDANIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getanio_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDMES))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDMES);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getmes_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_DIA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_DIA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getdia());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getusuario_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getestadogastoempleado_descripcion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.gettotal_ingreso_actual());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.gettotal_ingreso_otro());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.gettotal_ingreso());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getgasto_vivienda());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getgasto_educacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getgasto_salud());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getgasto_vestimenta());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getgasto_alimentacion());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.gettotal_gasto_actual());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.gettotal_gasto());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_FECHA))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_FECHA);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getfecha());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getporcentaje());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getvalor_maximo());


			}


			if(!paraDinamico || (paraDinamico && this.existeColumnaReporteDinamico(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE))) {
				row = sheet.createRow(iRow++);

				cell = row.createCell(0);
				cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE);
				cell.setCellStyle(cellStyle);

				cell = row.createCell(1);
				cell.setCellValue(gastoempleado.getvalor_maximo_porcentaje());


			}						
        }
        
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	public void generarExcelReporteRelacionesGastoEmpleados(String sAccionBusqueda,String sTipoArchivoReporte,List<GastoEmpleado> gastoempleadosParaReportes,Boolean paraDinamico) throws Exception {
		
		ArrayList<Classe> classes=new ArrayList<Classe>();
		List<GastoEmpleado> gastoempleadosRespaldo=null;
		
		classes=GastoEmpleadoConstantesFunciones.getClassesRelationshipsOfGastoEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE,false);
					
		this.datosDeep=new DatosDeep();
		
		this.datosDeep.setIsDeep(false);
		this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
		this.datosDeep.setClases(classes);
			
		this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
		this.datosCliente.setIsConDeep(true);	
		this.datosCliente.setIsConExportar(false);
		
						
		this.gastoempleadoLogic.setDatosCliente(this.datosCliente);
		this.gastoempleadoLogic.setDatosDeep(this.datosDeep);
		this.gastoempleadoLogic.setIsConDeep(true);
		
		gastoempleadosRespaldo=this.gastoempleadoLogic.getGastoEmpleados();
		
		this.gastoempleadoLogic.setGastoEmpleados(gastoempleadosParaReportes);	
		this.gastoempleadoLogic.deepLoadsWithConnection(false, DeepLoadType.INCLUDE, classes,"");
		
		gastoempleadosParaReportes=this.gastoempleadoLogic.getGastoEmpleados();
		this.gastoempleadoLogic.setGastoEmpleados(gastoempleadosRespaldo);
		
		
	 	Workbook workbook = null;
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado_relacion";
		
		if(sTipoArchivoReporte=="EXCEL2") {
			workbook = new HSSFWorkbook();
			sPath+=".xls";
		
		} else if(sTipoArchivoReporte=="EXCEL2_2") {
			workbook = new XSSFWorkbook();
			sPath+=".xlsx";			
		}
		
		
		
		Sheet sheet = workbook.createSheet("GastoEmpleados");
         
        int iRow = 0;
		int iRowLast = 0;
		int iCell = 0;
		Row row =null;
		Cell cell=null;
		
		row = sheet.createRow(iRow++);
		
		this.generarExcelReporteHeaderGastoEmpleado("NORMAL",row,workbook);
		
		int i=0;
		int i2=0;
		
		CellStyle cellStyleData = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataTitulo = Funciones2.getStyleTitulo(workbook,"PRINCIPAL");
		CellStyle cellStyleDataZebra = Funciones2.getStyleTitulo(workbook,"ZEBRA");
		CellStyle cellStyleDataAux =null;
		CellStyle cellStyleDataAuxHijo =null;
		
		for(GastoEmpleado gastoempleado : gastoempleadosParaReportes) {			
			if(i!=0) {
				row = sheet.createRow(iRow++);				
				this.generarExcelReporteHeaderGastoEmpleado("NORMAL",row,workbook);
			}
			
			cellStyleDataAux=null;
			
			if(i%2==0) {
				//cellStyleDataAux=cellStyleData;
			}
			
			row = sheet.createRow(iRow++);						
			GastoEmpleadoConstantesFunciones.generarExcelReporteDataGastoEmpleado("NORMAL",row,workbook,gastoempleado,cellStyleDataAux);
		
			
			
			
			i++;
        }
        
		/*
		row = sheet.createRow(iRow++);
		iRowLast=iRow - 1;
			
		cell = row.createCell(0);
		cell.setCellValue(GastoEmpleadoConstantesFunciones.getGastoEmpleadoDescripcion(gastoempleado));
		cell.setCellStyle(cellStyleTitulo);
			
		sheet.addMergedRegion(new CellRangeAddress(iRowLast,iRowLast,0,2));			
		*/
		
			
		
        FileOutputStream fileOutputStream = new FileOutputStream(sPath);
		
        workbook.write(fileOutputStream);
		
        fileOutputStream.close();
		
		Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
		if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
			JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
		}
	}
	
	
	public Boolean existeColumnaReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public Boolean existeRelacionReporteDinamico(String sColumna) {
		Boolean existe=false;
		
		Reporte reporte=new Reporte();
		
		
		for(int index:this.jInternalFrameReporteDinamicoGastoEmpleado.getjListRelacionesSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjListRelacionesSelectReporte().getModel().getElementAt(index);
			
			if(sColumna.equals(reporte.getsCodigo())) {
				existe=true;
				break;
			}
		
		}
		
		
		return existe;
	}
	
	public void startProcessGastoEmpleado() throws Exception {		
		this.startProcessGastoEmpleado(true);
	}
	
	public void startProcessGastoEmpleado(Boolean conSplash) throws Exception {		
		//FuncionesSwing.enableDisablePanels(false,this.jTabbedPaneBusquedasGastoEmpleado ,this.jPanelParametrosReportesGastoEmpleado, this.jScrollPanelDatosGastoEmpleado,this.jPanelPaginacionGastoEmpleado, this.jScrollPanelDatosEdicionGastoEmpleado, this.jPanelAccionesGastoEmpleado,this.jPanelAccionesFormularioGastoEmpleado,this.jmenuBarGastoEmpleado,this.jmenuBarDetalleGastoEmpleado,this.jTtoolBarGastoEmpleado,this.jTtoolBarDetalleGastoEmpleado);		
		
		final JTabbedPane jTabbedPaneBusquedasGastoEmpleado=this.jTabbedPaneBusquedasGastoEmpleado; 
		
		final JPanel jPanelParametrosReportesGastoEmpleado=this.jPanelParametrosReportesGastoEmpleado;
		//final JScrollPane jScrollPanelDatosGastoEmpleado=this.jScrollPanelDatosGastoEmpleado;
		final JTable jTableDatosGastoEmpleado=this.jTableDatosGastoEmpleado;		
		final JPanel jPanelPaginacionGastoEmpleado=this.jPanelPaginacionGastoEmpleado;
		//final JScrollPane jScrollPanelDatosEdicionGastoEmpleado=this.jScrollPanelDatosEdicionGastoEmpleado;
		final JPanel jPanelAccionesGastoEmpleado=this.jPanelAccionesGastoEmpleado;
		
		JPanel jPanelCamposAuxiliarGastoEmpleado=new JPanelMe();
		JPanel jPanelAccionesFormularioAuxiliarGastoEmpleado=new JPanelMe();
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			jPanelCamposAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jPanelCamposGastoEmpleado;
			jPanelAccionesFormularioAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jPanelAccionesFormularioGastoEmpleado;
		}
		
		final JPanel jPanelCamposGastoEmpleado=jPanelCamposAuxiliarGastoEmpleado;
		final JPanel jPanelAccionesFormularioGastoEmpleado=jPanelAccionesFormularioAuxiliarGastoEmpleado;
		
		
		final JMenuBar jmenuBarGastoEmpleado=this.jmenuBarGastoEmpleado;
		final JToolBar jTtoolBarGastoEmpleado=this.jTtoolBarGastoEmpleado;		
		
		
		JMenuBar jmenuBarDetalleAuxiliarGastoEmpleado=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarGastoEmpleado=new JToolBar();		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			jmenuBarDetalleAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jmenuBarDetalleGastoEmpleado;
			jTtoolBarDetalleAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jTtoolBarDetalleGastoEmpleado;
		}
		
		final JMenuBar jmenuBarDetalleGastoEmpleado=jmenuBarDetalleAuxiliarGastoEmpleado;
		final JToolBar jTtoolBarDetalleGastoEmpleado=jTtoolBarDetalleAuxiliarGastoEmpleado;		
		
		
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("START");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasGastoEmpleado;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesGastoEmpleado;
			processRunnable.jTableDatos=jTableDatosGastoEmpleado;
			processRunnable.jPanelCampos=jPanelCamposGastoEmpleado;
			processRunnable.jPanelPaginacion=jPanelPaginacionGastoEmpleado;
			processRunnable.jPanelAcciones=jPanelAccionesGastoEmpleado;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioGastoEmpleado;
			
			
			processRunnable.jmenuBar=jmenuBarGastoEmpleado;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleGastoEmpleado;
			processRunnable.jTtoolBar=jTtoolBarGastoEmpleado;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleGastoEmpleado;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasGastoEmpleado ,jPanelParametrosReportesGastoEmpleado,jTableDatosGastoEmpleado, /*jScrollPanelDatosGastoEmpleado,*/jPanelCamposGastoEmpleado,jPanelPaginacionGastoEmpleado, /*jScrollPanelDatosEdicionGastoEmpleado,*/ jPanelAccionesGastoEmpleado,jPanelAccionesFormularioGastoEmpleado,jmenuBarGastoEmpleado,jmenuBarDetalleGastoEmpleado,jTtoolBarGastoEmpleado,jTtoolBarDetalleGastoEmpleado);
		
			startProcess();//this.
		}
						
		/*
		if(conSplash) {
			SwingUtilities.invokeLater(new Runnable() {
			      public void run() {
			    	  try {
							FuncionesSwing.enableDisablePanels(false,jTabbedPaneBusquedasGastoEmpleado ,jPanelParametrosReportesGastoEmpleado, jScrollPanelDatosGastoEmpleado,jPanelPaginacionGastoEmpleado, jScrollPanelDatosEdicionGastoEmpleado, jPanelAccionesGastoEmpleado,jPanelAccionesFormularioGastoEmpleado,jmenuBarGastoEmpleado,jmenuBarDetalleGastoEmpleado,jTtoolBarGastoEmpleado,jTtoolBarDetalleGastoEmpleado);
						
							startProcess();//this.
							
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
			      }
			});
		}
		*/
	}
	
	public void finishProcessGastoEmpleado() {// throws Exception 
		this.finishProcessGastoEmpleado(true);
	}
	
	public void finishProcessGastoEmpleado(Boolean conSplash) {// throws Exception 
		//FuncionesSwing.enableDisablePanels(true,this.jTabbedPaneBusquedasGastoEmpleado ,this.jPanelParametrosReportesGastoEmpleado, this.jScrollPanelDatosGastoEmpleado,this.jPanelPaginacionGastoEmpleado, this.jScrollPanelDatosEdicionGastoEmpleado, this.jPanelAccionesGastoEmpleado,this.jPanelAccionesFormularioGastoEmpleado,this.jmenuBarGastoEmpleado,this.jmenuBarDetalleGastoEmpleado,this.jTtoolBarGastoEmpleado,this.jTtoolBarDetalleGastoEmpleado);		
		
		final JTabbedPane jTabbedPaneBusquedasGastoEmpleado=this.jTabbedPaneBusquedasGastoEmpleado; 
		
		final JPanel jPanelParametrosReportesGastoEmpleado=this.jPanelParametrosReportesGastoEmpleado;
		//final JScrollPane jScrollPanelDatosGastoEmpleado=this.jScrollPanelDatosGastoEmpleado;
		final JTable jTableDatosGastoEmpleado=this.jTableDatosGastoEmpleado;		
		final JPanel jPanelPaginacionGastoEmpleado=this.jPanelPaginacionGastoEmpleado;
		//final JScrollPane jScrollPanelDatosEdicionGastoEmpleado=this.jScrollPanelDatosEdicionGastoEmpleado;
		final JPanel jPanelAccionesGastoEmpleado=this.jPanelAccionesGastoEmpleado;
		
		JPanel jPanelCamposAuxiliarGastoEmpleado=new JPanel();
		JPanel jPanelAccionesFormularioAuxiliarGastoEmpleado=new JPanel();
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			jPanelCamposAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jPanelCamposGastoEmpleado;
			jPanelAccionesFormularioAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jPanelAccionesFormularioGastoEmpleado;
		}
		
		final JPanel jPanelCamposGastoEmpleado=jPanelCamposAuxiliarGastoEmpleado;
		final JPanel jPanelAccionesFormularioGastoEmpleado=jPanelAccionesFormularioAuxiliarGastoEmpleado;
		
		
		final JMenuBar jmenuBarGastoEmpleado=this.jmenuBarGastoEmpleado;		
		final JToolBar jTtoolBarGastoEmpleado=this.jTtoolBarGastoEmpleado;
				
		JMenuBar jmenuBarDetalleAuxiliarGastoEmpleado=new JMenuBar();
		JToolBar jTtoolBarDetalleAuxiliarGastoEmpleado=new JToolBar();
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			jmenuBarDetalleAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jmenuBarDetalleGastoEmpleado;
			jTtoolBarDetalleAuxiliarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jTtoolBarDetalleGastoEmpleado;		
		}
		
		final JMenuBar jmenuBarDetalleGastoEmpleado=jmenuBarDetalleAuxiliarGastoEmpleado;
		final JToolBar jTtoolBarDetalleGastoEmpleado=jTtoolBarDetalleAuxiliarGastoEmpleado;
		
		
		
		if(Constantes2.CON_PROCESO_HILO) {
			Thread threadRunnableProcess;
			ProcessRunnable processRunnable;
			
			processRunnable=new ProcessRunnable();
			
			processRunnable.setsTipo("END");
			processRunnable.setDesktop(jDesktopPane);
			processRunnable.setModuloActual(moduloActual);
			processRunnable.setModuloUsuarioSeleccionado(moduloActual);
			processRunnable.setOpcionActual(opcionActual);
			processRunnable.setParametroGeneralSg(parametroGeneralSg);
			processRunnable.setParametroGeneralUsuario(parametroGeneralUsuario);
			processRunnable.setResumenUsuarioActual(resumenUsuarioActual);
			processRunnable.setUsuarioActual(usuarioActual);
			
			processRunnable.jTabbedPaneBusquedas=jTabbedPaneBusquedasGastoEmpleado;
			processRunnable.jPanelParametrosReportes=jPanelParametrosReportesGastoEmpleado;
			processRunnable.jTableDatos=jTableDatosGastoEmpleado;
			processRunnable.jPanelCampos=jPanelCamposGastoEmpleado;
			processRunnable.jPanelPaginacion=jPanelPaginacionGastoEmpleado;
			processRunnable.jPanelAcciones=jPanelAccionesGastoEmpleado;
			processRunnable.jPanelAccionesFormulario=jPanelAccionesFormularioGastoEmpleado;
			
			
			processRunnable.jmenuBar=jmenuBarGastoEmpleado;
			processRunnable.jmenuBarDetalle=jmenuBarDetalleGastoEmpleado;
			processRunnable.jTtoolBar=jTtoolBarGastoEmpleado;
			processRunnable.jTtoolBarDetalle=jTtoolBarDetalleGastoEmpleado;
			processRunnable.jInternalFrameBase=this;
			
			//processRunnable.CargarObjetosRendimientoCriticoModuloInventario();
			
			
			threadRunnableProcess=new Thread(processRunnable);//.start();
					
			threadRunnableProcess.start();
			
		} else {
			if(conSplash) {
				SwingUtilities.invokeLater(new RunnableProceso(true,this,jTabbedPaneBusquedasGastoEmpleado ,jPanelParametrosReportesGastoEmpleado, jTableDatosGastoEmpleado,/*jScrollPanelDatosGastoEmpleado,*/jPanelCamposGastoEmpleado,jPanelPaginacionGastoEmpleado, /*jScrollPanelDatosEdicionGastoEmpleado,*/ jPanelAccionesGastoEmpleado,jPanelAccionesFormularioGastoEmpleado,jmenuBarGastoEmpleado,jmenuBarDetalleGastoEmpleado,jTtoolBarGastoEmpleado,jTtoolBarDetalleGastoEmpleado));
			}
		}						
	}
	
	/*
	public void habilitarDeshabilitarControlesGastoEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		this.habilitarDeshabilitarToolBarGastoEmpleado(esHabilitar,conDetalle);
		this.habilitarDeshabilitarMenuGastoEmpleado(esHabilitar,conDetalle);
	}
	
	public void habilitarDeshabilitarToolBarGastoEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jTtoolBarGastoEmpleado,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jTtoolBarDetalleGastoEmpleado,esHabilitar,1,1);
		}
	}
	
	public void habilitarDeshabilitarMenuGastoEmpleado(Boolean esHabilitar,Boolean conDetalle) {
		FuncionesSwing.enableDisableComponents(this.jmenuBarGastoEmpleado,esHabilitar,1,1);
		
		if(conDetalle) {
			FuncionesSwing.enableDisableComponents(this.jmenuBarDetalleGastoEmpleado,esHabilitar,1,1);
		}
	}
	*/
	
	
	
	public void procesarBusqueda(String sAccionBusqueda) throws Exception {		
		String  finalQueryPaginacion=this.gastoempleadoConstantesFunciones.getsFinalQueryGastoEmpleado();
		String  finalQueryPaginacionTodos=this.gastoempleadoConstantesFunciones.getsFinalQueryGastoEmpleado();
		
		Boolean esBusqueda=false;
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!sAccionBusqueda.equals("Todos"))	{
			esBusqueda=true;
		}
		
		this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
		this.arrDatoGeneralNo= new  ArrayList<String>();
		
		ArrayList<String> arrColumnasGlobalesNo=GastoEmpleadoConstantesFunciones.getArrayColumnasGlobalesNoGastoEmpleado(this.arrDatoGeneral);
		ArrayList<String> arrColumnasGlobales=GastoEmpleadoConstantesFunciones.getArrayColumnasGlobalesGastoEmpleado(this.arrDatoGeneral,arrColumnasGlobalesNo);
		
			
		String  finalQueryGlobal="";
		
		finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,!esBusqueda,esBusqueda,arrColumnasGlobales,GastoEmpleadoConstantesFunciones.TABLENAME);
		
		String sOrderBy="";
		
		
		sOrderBy=Funciones2.getFinalQueryOrderBy(this.arrOrderBy);
		
		
		if(!sOrderBy.equals("")) {			
			finalQueryPaginacion=sOrderBy;
			finalQueryPaginacionTodos=sOrderBy;
		}
		
		
		//INICIALIZA ELIMINADOS
		this.gastoempleadosEliminados= new ArrayList<GastoEmpleado>();
		
		if(!this.isEntroOnLoad) {
			this.onLoad();
		}/* else {
			this.isEntroOnLoad=false;
		}*/
		
		
		
				
		try	{		
			
			//this.startProcessGastoEmpleado();
		
				///*GastoEmpleadoSessionBean*/this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			
			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}
			
			//ACTUALIZA EL TAMANIO DE PAGINACION DESDE EL COMBO
			if(this.sTipoPaginacion!=null && !this.sTipoPaginacion.equals("")) {
				if(!this.sTipoPaginacion.equals("TODOS")) {
					this.iNumeroPaginacion=Integer.parseInt(this.sTipoPaginacion);
				} else {
					this.iNumeroPaginacion=-1;
					this.iNumeroPaginacionPagina=-1;
				}
			} else {
				if(this.iNumeroPaginacion==null || (this.iNumeroPaginacion!=null && this.iNumeroPaginacion<=0)) {
					this.iNumeroPaginacion=GastoEmpleadoConstantesFunciones.INUMEROPAGINACION;
				}
			}
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);
			
			this.cargarDatosCliente();
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			classes=GastoEmpleadoConstantesFunciones.getClassesForeignKeysOfGastoEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
			
		
			this.datosDeep=new DatosDeep();
			this.datosDeep.setIsDeep(false);
			this.datosDeep.setDeepLoadType(DeepLoadType.INCLUDE);
			this.datosDeep.setClases(classes);
			
			this.datosCliente.setDatosDeepParametros(false, DeepLoadType.INCLUDE, classes, "");
			this.datosCliente.setIsConDeep(true);
			
			if(false) {//this.conExportar
				this.datosCliente.setIsConExportar(true);
				this.datosCliente.setDatosExportarParametros(Funciones2.getTipoExportar(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getcon_exportar_cabecera(),Funciones2.getTipoDelimiter(this.parametroGeneralUsuario),this.parametroGeneralUsuario.getpath_exportar()+"/gastoempleado."+Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario));
			} else {
				this.datosCliente.setIsConExportar(false);
			}
			
			gastoempleadosAux= new ArrayList<GastoEmpleado>();
			
				
			gastoempleadoLogic.setDatosCliente(this.datosCliente);
			gastoempleadoLogic.setDatosDeep(this.datosDeep);
			gastoempleadoLogic.setIsConDeep(true);
			
			
			gastoempleadoLogic.getGastoEmpleadoDataAccess().setIsForForeingsKeysDataRelationships(true);
			
			if(sAccionBusqueda.equals("Todos") || sAccionBusqueda.equals("Query"))	{	
				if(sAccionBusqueda.equals("Todos")) {
					//FALTA:PARA BUSQUEDAS POR CAMPO EN FORMULARIO
					//this.sFinalQueryGeneral="";
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacionTodos );
					
					gastoempleadoLogic.getTodosGastoEmpleados(finalQueryGlobal,pagination);
					
					//gastoempleadoLogic.getTodosGastoEmpleadosWithConnection(finalQueryGlobal,pagination);										
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
				
				if(gastoempleadoLogic.getGastoEmpleados()==null|| gastoempleadoLogic.getGastoEmpleados().size()==0)	{
					
				
				}
				
				if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(-1);
						this.pagination.setiMaxResults(-1);
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							gastoempleadosAux= new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());						
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux= new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
						}
						//ARCHITECTURE
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							gastoempleadoLogic.getTodosGastoEmpleados(finalQueryGlobal+"",this.pagination);												
							
							//gastoempleadoLogic.getTodosGastoEmpleadosWithConnection(finalQueryGlobal+"",this.pagination);												
						} else if(Constantes.ISUSAEJBREMOTE) {
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
					}
					
					this.generarReporteGastoEmpleados("Todos",gastoempleadoLogic.getGastoEmpleados() );
					
					if(false) {//isMostrarTodosResultadosReporte						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {	
							gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());					
							gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
						
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);														
					}
				}
			}
			else if(sAccionBusqueda.equals("PorId")) {
				Long idGastoEmpleado=0L;
				
				if(this.idActual!=null && this.idActual!=0L) {
					idGastoEmpleado=this.idActual;
				
				} else if(this.idGastoEmpleadoActual!=null && this.idGastoEmpleadoActual!=0L) {
					idGastoEmpleado=idGastoEmpleadoActual;
				}
				
					
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndicePorId(idGastoEmpleado);
				
				this.gastoempleados=new ArrayList<GastoEmpleado>();
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {					
					gastoempleadoLogic.getEntity(idGastoEmpleado);
					
					//gastoempleadoLogic.getEntityWithConnection(idGastoEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
								
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
					gastoempleadoLogic.getGastoEmpleados().add(gastoempleadoLogic.getGastoEmpleado());
				
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleados=new ArrayList<GastoEmpleado>();
					this.gastoempleados.add(gastoempleado);
				}
				
				if(gastoempleadoLogic.getGastoEmpleado()==null)	{
					
				
				}			
			}
			
		
			else if(sAccionBusqueda.equals("FK_IdAnio")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdAnio(finalQueryGlobal,pagination,id_anioFK_IdAnio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdAnio(finalQueryGlobal,pagination,id_anioFK_IdAnio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdAnio(id_anioFK_IdAnio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdAnio",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdAnio",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdCiudad")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdCiudad(finalQueryGlobal,pagination,id_ciudadFK_IdCiudad);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdCiudad(id_ciudadFK_IdCiudad);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdCiudad",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdCiudad",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEjercicio")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdEjercicio(finalQueryGlobal,pagination,id_ejercicioFK_IdEjercicio);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEjercicio(id_ejercicioFK_IdEjercicio);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdEjercicio",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdEjercicio",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpleado")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdEmpleado(finalQueryGlobal,pagination,id_empleadoFK_IdEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpleado(id_empleadoFK_IdEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdEmpleado",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdEmpleado",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEmpresa")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdEmpresa(finalQueryGlobal,pagination,id_empresaFK_IdEmpresa);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEmpresa(id_empresaFK_IdEmpresa);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdEmpresa",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdEmpresa",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdEstadoGastoEmpleado")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEstadoGastoEmpleado(id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdEstadoGastoEmpleado(finalQueryGlobal,pagination,id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEstadoGastoEmpleado(id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEstadoGastoEmpleado(id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdEstadoGastoEmpleado(finalQueryGlobal,pagination,id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEstadoGastoEmpleado(id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdEstadoGastoEmpleado(id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdEstadoGastoEmpleado",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdEstadoGastoEmpleado",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdMes")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdMes(finalQueryGlobal,pagination,id_mesFK_IdMes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdMes(finalQueryGlobal,pagination,id_mesFK_IdMes);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdMes(id_mesFK_IdMes);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdMes",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdMes",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdPais")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdPais(finalQueryGlobal,pagination,id_paisFK_IdPais);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdPais(id_paisFK_IdPais);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdPais",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdPais",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdSucursal")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdSucursal(finalQueryGlobal,pagination,id_sucursalFK_IdSucursal);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdSucursal(id_sucursalFK_IdSucursal);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdSucursal",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdSucursal",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			}
			else if(sAccionBusqueda.equals("FK_IdUsuario")) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {

					finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,finalQueryPaginacion);

					gastoempleadoLogic.getGastoEmpleadosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);

				
				}
				//ARCHITECTURE

				Boolean isNoExiste=false;
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					isNoExiste=gastoempleadoLogic.getGastoEmpleados()==null||gastoempleadoLogic.getGastoEmpleados().size()==0;
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					isNoExiste=gastoempleados==null|| gastoempleados.size()==0;
				}
				//ARCHITECTURE

		if(false && sTipoArchivoReporte!=""&&sTipoArchivoReporte!=null) {//this.isTipoArchivoReporte
			if(false) {//isMostrarTodosResultadosReporte
				this.pagination.setiFirstResult(-1);
				this.pagination.setiMaxResults(-1);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadosAux=new ArrayList<GastoEmpleado>();
						gastoempleadosAux.addAll(gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadosAux=new ArrayList<GastoEmpleado>();
							gastoempleadosAux.addAll(gastoempleados);
				}
				//ARCHITECTURE
								
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
							finalQueryGlobal=Funciones.GetFinalQueryAppendBusqueda(finalQueryGlobal, this.sFinalQueryGeneral,"");
							gastoempleadoLogic.getGastoEmpleadosFK_IdUsuario(finalQueryGlobal,pagination,id_usuarioFK_IdUsuario);
				} else if(Constantes.ISUSAEJBREMOTE) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				} else if(Constantes.ISUSAEJBHOME) {
				this.sDetalleReporte=GastoEmpleadoConstantesFunciones.getDetalleIndiceFK_IdUsuario(id_usuarioFK_IdUsuario);
						
				}
				//ARCHITECTURE
					}
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					generarReporteGastoEmpleados("FK_IdUsuario",gastoempleadoLogic.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					generarReporteGastoEmpleados("FK_IdUsuario",gastoempleados);
				}
				//ARCHITECTURE

					if(false) {//isMostrarTodosResultadosReporte
						this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
						this.pagination.setiMaxResults(this.iNumeroPaginacion);

						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoLogic.setGastoEmpleados(new ArrayList<GastoEmpleado>());
						gastoempleadoLogic.getGastoEmpleados().addAll(gastoempleadosAux);
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleados=new ArrayList<GastoEmpleado>();
							gastoempleados.addAll(gastoempleadosAux);
						}
						//ARCHITECTURE
					}
				}

			} 
		
		
		
		this.redimensionarTablaDatos();
		//this.refrescarForeignKeysDescripcionesGastoEmpleado();
		
		
		if(this.conTotales) {
			this.crearFilaTotales();
		}		
		} catch (JRException e) {
			throw e;
		} catch(Exception e) {
			throw e;
      	} finally {
      		//this.finishProcessGastoEmpleado();
      	}
		
	}				
	
	public void redimensionarTablaDatos() throws Exception {
		int iSizeTabla=0;
				
		iSizeTabla=this.getSizeTablaDatos();
		
		//ARCHITECTURE
		/*
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=gastoempleadoLogic.getGastoEmpleados().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=gastoempleados.size();
		}
		*/
		//ARCHITECTURE
											
		this.redimensionarTablaDatos(iSizeTabla);		
	}
	
	public Integer getSizeTablaDatos() throws Exception {
		Integer iSizeTabla=0;
				
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {	
			iSizeTabla=gastoempleadoLogic.getGastoEmpleados().size();
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			iSizeTabla=gastoempleados.size();
		}
		//ARCHITECTURE
											
		return iSizeTabla;		
	}
	
			
	public Boolean permiteMantenimiento(GastoEmpleado gastoempleado) {
		Boolean permite=true;
		
		if(this.gastoempleado.getsType().equals(Constantes2.S_TOTALES)) {
			permite=false;
		}
		
		return permite;
	}
	
	public void traerValoresTablaTotales() throws Exception {
	}
	
	
	public void traerValoresTablaOrderBy() throws Exception {
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.arrOrderBy=GastoEmpleadoConstantesFunciones.getOrderByListaGastoEmpleado();							
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			this.arrOrderBy=GastoEmpleadoConstantesFunciones.getOrderByListaGastoEmpleado();
		}		
	}
	
	
	public Boolean existeFilaTotales() throws Exception {
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(GastoEmpleado gastoempleado:gastoempleadoLogic.getGastoEmpleados()) {
				if(gastoempleado.getsType().equals(Constantes2.S_TOTALES)) {
					gastoempleadoTotales=gastoempleado;
					existe=true;
					break;
				}
			}
								
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(GastoEmpleado gastoempleado:this.gastoempleados) {
				if(gastoempleado.getsType().equals(Constantes2.S_TOTALES)) {
					gastoempleadoTotales=gastoempleado;
					existe=true;
					break;
				}
			}
		}
		
		return existe;
	}
	
	public void crearFilaTotales() throws Exception {
		Boolean existe=false;
		
		existe=this.existeFilaTotales();
		
		if(!existe) {
			//SI NO ES UNO A UNO SE CREA FILA TOTALES
			this.gastoempleadoAux=new GastoEmpleado();
			this.gastoempleadoAux.setsType(Constantes2.S_TOTALES);
			this.gastoempleadoAux.setIsNew(false);
			this.gastoempleadoAux.setIsChanged(false);
			this.gastoempleadoAux.setIsDeleted(false);
				
			if(Constantes.ISUSAEJBLOGICLAYER) {
				GastoEmpleadoConstantesFunciones.TotalizarValoresFilaGastoEmpleado(this.gastoempleadoLogic.getGastoEmpleados(),this.gastoempleadoAux);
				
				this.gastoempleadoLogic.getGastoEmpleados().add(this.gastoempleadoAux);
				
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
				GastoEmpleadoConstantesFunciones.TotalizarValoresFilaGastoEmpleado(this.gastoempleados,this.gastoempleadoAux);
				
				this.gastoempleados.add(this.gastoempleadoAux);
			}
		}
	}
	
	public void quitarFilaTotales() throws Exception {
		gastoempleadoTotales=new GastoEmpleado();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.gastoempleadoLogic.getGastoEmpleados().remove(gastoempleadoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			existe=this.existeFilaTotales();
			
			if(existe) {
				this.gastoempleados.remove(gastoempleadoTotales);
			}
		}
	}
	
	public void actualizarFilaTotales() throws Exception {
		gastoempleadoTotales=new GastoEmpleado();
		Boolean existe=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			for(GastoEmpleado gastoempleado:gastoempleadoLogic.getGastoEmpleados()) {
				if(gastoempleado.getsType().equals(Constantes2.S_TOTALES)) {
					gastoempleadoTotales=gastoempleado;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				GastoEmpleadoConstantesFunciones.TotalizarValoresFilaGastoEmpleado(this.gastoempleadoLogic.getGastoEmpleados(),gastoempleadoTotales);
			}			
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			for(GastoEmpleado gastoempleado:this.gastoempleados) {
				if(gastoempleado.getsType().equals(Constantes2.S_TOTALES)) {
					gastoempleadoTotales=gastoempleado;
					existe=true;
					break;
				}
			}
			
			if(existe) {
				GastoEmpleadoConstantesFunciones.TotalizarValoresFilaGastoEmpleado(this.gastoempleados,gastoempleadoTotales);
			}
		}
	}		
	
	public void recargarInformacion()throws Exception {
		try {
			sAccionBusqueda="Todos";
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}	
	}		
	
	
	public void getGastoEmpleadosFK_IdAnio()throws Exception {
		try {
			sAccionBusqueda="FK_IdAnio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdCiudad()throws Exception {
		try {
			sAccionBusqueda="FK_IdCiudad";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdEjercicio()throws Exception {
		try {
			sAccionBusqueda="FK_IdEjercicio";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdEmpresa()throws Exception {
		try {
			sAccionBusqueda="FK_IdEmpresa";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdEstadoGastoEmpleado()throws Exception {
		try {
			sAccionBusqueda="FK_IdEstadoGastoEmpleado";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdMes()throws Exception {
		try {
			sAccionBusqueda="FK_IdMes";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdPais()throws Exception {
		try {
			sAccionBusqueda="FK_IdPais";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdSucursal()throws Exception {
		try {
			sAccionBusqueda="FK_IdSucursal";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	public void getGastoEmpleadosFK_IdUsuario()throws Exception {
		try {
			sAccionBusqueda="FK_IdUsuario";
			this.iNumeroPaginacionPagina=0;
			this.procesarBusqueda(sAccionBusqueda);

		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger);
		}
	}

	
	
	public void getGastoEmpleadosFK_IdAnio(String sFinalQuery,Long id_anio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdAnio(sFinalQuery,this.pagination,id_anio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdCiudad(String sFinalQuery,Long id_ciudad)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdCiudad(sFinalQuery,this.pagination,id_ciudad);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdEjercicio(String sFinalQuery,Long id_ejercicio)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdEjercicio(sFinalQuery,this.pagination,id_ejercicio);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdEmpleado(String sFinalQuery,Long id_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdEmpleado(sFinalQuery,this.pagination,id_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdEmpresa(String sFinalQuery,Long id_empresa)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdEmpresa(sFinalQuery,this.pagination,id_empresa);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdEstadoGastoEmpleado(String sFinalQuery,Long id_estado_gasto_empleado)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdEstadoGastoEmpleado(sFinalQuery,this.pagination,id_estado_gasto_empleado);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdMes(String sFinalQuery,Long id_mes)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdMes(sFinalQuery,this.pagination,id_mes);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdPais(String sFinalQuery,Long id_pais)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdPais(sFinalQuery,this.pagination,id_pais);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdSucursal(String sFinalQuery,Long id_sucursal)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdSucursal(sFinalQuery,this.pagination,id_sucursal);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	public void getGastoEmpleadosFK_IdUsuario(String sFinalQuery,Long id_usuario)throws Exception {
		try {
			
			this.pagination=new Pagination();
			this.pagination.setiFirstResult(this.iNumeroPaginacionPagina);
			this.pagination.setiMaxResults(this.iNumeroPaginacion);

				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLogic.getGastoEmpleadosFK_IdUsuario(sFinalQuery,this.pagination,id_usuario);
				
				} else if(Constantes.ISUSAEJBREMOTE) {
				
				} else if(Constantes.ISUSAEJBHOME) {
				
				}
				//ARCHITECTURE
		} catch(Exception e) {
			throw e;
		}
	}

	
	public void onLoad()throws Exception {		
		try {		
			isEntroOnLoad=true;
			//INTENTA TRAER DATOS DE BUSQUEDA ANTERIOR
			this.traerDatosBusquedaDesdeSession();
					
			//SINO SE CUMPLE VIENE DE PADRE FOREIGN O BUSQUEDA ANTIGUA
			if(this.sAccionBusqueda.equals("")) {
				this.sAccionBusqueda="Todos";
			}
								
			this.procesarBusqueda(sAccionBusqueda);
			
		} catch (Exception e) {
			throw e;
		}
	}		
	
	public void inicializarPermisosGastoEmpleado() {
		this.isPermisoTodoGastoEmpleado=false;
		this.isPermisoNuevoGastoEmpleado=false;
		this.isPermisoActualizarGastoEmpleado=false;
		this.isPermisoActualizarOriginalGastoEmpleado=false;
		this.isPermisoEliminarGastoEmpleado=false;
		this.isPermisoGuardarCambiosGastoEmpleado=false;
		this.isPermisoConsultaGastoEmpleado=false;
		this.isPermisoBusquedaGastoEmpleado=false;
		this.isPermisoReporteGastoEmpleado=false;		
		this.isPermisoOrdenGastoEmpleado=false;		
		this.isPermisoPaginacionMedioGastoEmpleado=false;		
		this.isPermisoPaginacionAltoGastoEmpleado=false;
		this.isPermisoPaginacionTodoGastoEmpleado=false;
		this.isPermisoCopiarGastoEmpleado=false;		
		this.isPermisoVerFormGastoEmpleado=false;		
		this.isPermisoDuplicarGastoEmpleado=false;		
		this.isPermisoOrdenGastoEmpleado=false;		
	}
	
	public void setPermisosUsuarioGastoEmpleado(Boolean isPermiso) {
		this.isPermisoTodoGastoEmpleado=isPermiso;
		this.isPermisoNuevoGastoEmpleado=isPermiso;
		this.isPermisoActualizarGastoEmpleado=isPermiso;
		this.isPermisoActualizarOriginalGastoEmpleado=isPermiso;
		this.isPermisoEliminarGastoEmpleado=isPermiso;
		this.isPermisoGuardarCambiosGastoEmpleado=isPermiso;
		this.isPermisoConsultaGastoEmpleado=isPermiso;
		this.isPermisoBusquedaGastoEmpleado=isPermiso;
		this.isPermisoReporteGastoEmpleado=isPermiso;
		this.isPermisoOrdenGastoEmpleado=isPermiso;		
		this.isPermisoPaginacionMedioGastoEmpleado=isPermiso;		
		this.isPermisoPaginacionAltoGastoEmpleado=isPermiso;		
		this.isPermisoPaginacionTodoGastoEmpleado=isPermiso;		
		this.isPermisoCopiarGastoEmpleado=isPermiso;		
		this.isPermisoVerFormGastoEmpleado=isPermiso;		
		this.isPermisoDuplicarGastoEmpleado=isPermiso;
		this.isPermisoOrdenGastoEmpleado=isPermiso;
	}
	
	public void setPermisosMantenimientoUsuarioGastoEmpleado(Boolean isPermiso) {
		//this.isPermisoTodoGastoEmpleado=isPermiso;
		this.isPermisoNuevoGastoEmpleado=isPermiso;
		this.isPermisoActualizarGastoEmpleado=isPermiso;
		this.isPermisoActualizarOriginalGastoEmpleado=isPermiso;
		this.isPermisoEliminarGastoEmpleado=isPermiso;
		this.isPermisoGuardarCambiosGastoEmpleado=isPermiso;
		//this.isPermisoConsultaGastoEmpleado=isPermiso;
		//this.isPermisoBusquedaGastoEmpleado=isPermiso;
		//this.isPermisoReporteGastoEmpleado=isPermiso;
		//this.isPermisoOrdenGastoEmpleado=isPermiso;		
		//this.isPermisoPaginacionMedioGastoEmpleado=isPermiso;		
		//this.isPermisoPaginacionAltoGastoEmpleado=isPermiso;		
		//this.isPermisoPaginacionTodoGastoEmpleado=isPermiso;		
		//this.isPermisoCopiarGastoEmpleado=isPermiso;		
		//this.isPermisoDuplicarGastoEmpleado=isPermiso;
		//this.isPermisoOrdenGastoEmpleado=isPermiso;
	}
	
	public void inicializarSetPermisosUsuarioGastoEmpleadoClasesRelacionadas() throws Exception {
		ArrayList<String> arrPaginas=new ArrayList<String>();		
		ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
		
		
		if(GastoEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
			this.opcionsRelacionadas.addAll(this.sistemaReturnGeneral.getOpcionsRelacionadas());
			
		} else {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				opcionsFinal=sistemaLogicAdditional.tienePermisosOpcionesEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, arrPaginas);
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
			
			this.opcionsRelacionadas.addAll(opcionsFinal);
		}
		
		
		
	}
	
	public Boolean tienePermisosUsuarioEnPaginaWebGastoEmpleado(String sPagina) throws Exception {
		Boolean tienePermisos=false;
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			tienePermisos=sistemaLogicAdditional.tienePermisosEnPaginaWeb(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, sPagina);
		} else if(Constantes.ISUSAEJBREMOTE) {
		} else if(Constantes.ISUSAEJBHOME) {
		}
		
		return tienePermisos;
	}
	
	public void inicializarSetPermisosUsuarioGastoEmpleadoClasesRelacionadas(Boolean conPermiso) throws Exception {
		
	}
	
	public Boolean verificarGetPermisosUsuarioGastoEmpleadoClaseRelacionada(ArrayList<String> arrPaginasFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioClaseRelacionada(arrPaginasFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public Boolean verificarGetPermisosUsuarioOpcionGastoEmpleadoClaseRelacionada(List<Opcion> opcionsFinal,String sPaginaActual) throws Exception {
		Boolean verificado=false;
		
		verificado=Funciones2.verificarGetPermisosUsuarioOpcionClaseRelacionada(opcionsFinal,sPaginaActual);				
		
		return verificado;
	}
	
	public void actualizarTabsSetPermisosUsuarioGastoEmpleadoClasesRelacionadas() throws Exception {
		
	}
	
	public void setPermisosUsuarioGastoEmpleado() throws Exception {
		
		PerfilOpcion perfilOpcionUsuario=new PerfilOpcion();		
		Long idOpcion=this.opcionActual.getId();
		
		if(GastoEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
			perfilOpcionUsuario=this.sistemaReturnGeneral.getPerfilOpcion();
			
		} else {
			if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				idOpcion=0L;
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				perfilOpcionUsuario=sistemaLogicAdditional.traerPermisosPaginaWebPerfilOpcion(this.usuarioActual, Constantes.LIDSISTEMAACTUAL, GastoEmpleadoConstantesFunciones.SNOMBREOPCION,idOpcion);				
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}
		}
		
		if(perfilOpcionUsuario!=null && perfilOpcionUsuario.getId()>0) {
			this.isPermisoNuevoGastoEmpleado=perfilOpcionUsuario.getingreso()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarGastoEmpleado=perfilOpcionUsuario.getmodificacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoActualizarOriginalGastoEmpleado=this.isPermisoActualizarGastoEmpleado;
			this.isPermisoEliminarGastoEmpleado=perfilOpcionUsuario.geteliminacion()||perfilOpcionUsuario.gettodo();
			this.isPermisoGuardarCambiosGastoEmpleado=perfilOpcionUsuario.getguardar_cambios()||perfilOpcionUsuario.gettodo();
			this.isPermisoConsultaGastoEmpleado=perfilOpcionUsuario.getconsulta()||perfilOpcionUsuario.gettodo();
			this.isPermisoBusquedaGastoEmpleado=perfilOpcionUsuario.getbusqueda()||perfilOpcionUsuario.gettodo();
			this.isPermisoTodoGastoEmpleado=perfilOpcionUsuario.gettodo()||perfilOpcionUsuario.gettodo();
			this.isPermisoReporteGastoEmpleado=perfilOpcionUsuario.getreporte()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenGastoEmpleado=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionMedioGastoEmpleado=perfilOpcionUsuario.getpaginacion_medio()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionAltoGastoEmpleado=perfilOpcionUsuario.getpaginacion_alto()||perfilOpcionUsuario.gettodo();
			this.isPermisoPaginacionTodoGastoEmpleado=perfilOpcionUsuario.getpaginacion_todo()||perfilOpcionUsuario.gettodo();
			this.isPermisoCopiarGastoEmpleado=perfilOpcionUsuario.getcopiar()||perfilOpcionUsuario.gettodo();
			this.isPermisoVerFormGastoEmpleado=true;//perfilOpcionUsuario.getver_form()||perfilOpcionUsuario.gettodo();
			this.isPermisoDuplicarGastoEmpleado=perfilOpcionUsuario.getduplicar()||perfilOpcionUsuario.gettodo();
			this.isPermisoOrdenGastoEmpleado=perfilOpcionUsuario.getorden()||perfilOpcionUsuario.gettodo();
			
			if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				this.opcionActual.setId(perfilOpcionUsuario.getid_opcion());
				
				this.jTableDatosGastoEmpleado.setToolTipText(this.jTableDatosGastoEmpleado.getToolTipText()+"_"+perfilOpcionUsuario.getid_opcion());		
			}
		} else {
			this.setPermisosUsuarioGastoEmpleado(false);
		}
		
		//SI SE NECESITA PONER TODOS LOS PERMISOS POR DEFECTO
		//
		
	}
	
	public void setAccionesUsuarioGastoEmpleado(Boolean esParaAccionesFormulario) throws Exception {		
		Reporte reporte=null;
		
		if(!esParaAccionesFormulario) {
			this.accions=new ArrayList<Accion>();
			
			if(GastoEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accions=this.sistemaReturnGeneral.getAccions();
				
				
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accions=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,false);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accions.size()>0) {			
				for(Accion accion:this.accions) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
		
		
					this.tiposAcciones.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAcciones.add(reporte);
			
		} else {
			//ACCIONES FORMULARIO
			this.accionsFormulario=new ArrayList<Accion>();
			
			if(GastoEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				this.accionsFormulario=this.sistemaReturnGeneral.getAccionsFormulario();
			
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.accionsFormulario=sistemaLogicAdditional.getAccionesUsuario(this.usuarioActual,this.opcionActual,true);				
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}
			
			if(this.accionsFormulario.size()>0) {			
				for(Accion accion:this.accionsFormulario) {
					reporte=new Reporte();
					reporte.setsCodigo(accion.getcodigo());
					reporte.setsDescripcion(accion.getnombre());
					
					this.tiposAccionesFormulario.add(reporte);
				}
			}	
			
			

			reporte=new Reporte();
			reporte.setsCodigo("");
			reporte.setsDescripcion("");

			this.tiposAccionesFormulario.add(reporte);
		}				
	}	 	
	
	public void setRelacionesUsuarioGastoEmpleado() throws Exception {
		Reporte reporte=null;
		
		
		
		
		//ORDENAR ALFABETICAMENTE
		Collections.sort(this.tiposRelaciones, new ReporteComparator());
		/*
		reporte=new Reporte();
		reporte.setsCodigo(accion.getcodigo());
		reporte.setsDescripcion(accion.getnombre());
			
		this.tiposRelaciones.add(reporte);
		*/
	}	
	
		
	@SuppressWarnings({ "unchecked", "rawtypes" } )
	public void inicializarCombosForeignKeyGastoEmpleadoListas()throws Exception {
		try	{						
			
				this.empresasForeignKey=new ArrayList();
				this.sucursalsForeignKey=new ArrayList();
				this.empleadosForeignKey=new ArrayList();
				this.ejerciciosForeignKey=new ArrayList();
				this.paissForeignKey=new ArrayList();
				this.ciudadsForeignKey=new ArrayList();
				this.aniosForeignKey=new ArrayList();
				this.messForeignKey=new ArrayList();
				this.usuariosForeignKey=new ArrayList();
				this.estadogastoempleadosForeignKey=new ArrayList();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void cargarCombosTodosForeignKeyGastoEmpleadoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			String sFinalQueryCombo="";
			
			Modulo  moduloActualAux=new Modulo();
			
			if(GastoEmpleadoJInternalFrame.ISLOAD_FKLOTE) {
				this.cargarCombosLoteForeignKeyGastoEmpleadoListas(false);
			} else {
			
				this.cargarCombosForeignKeyEmpresaListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeySucursalListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEjercicioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyUsuarioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.cargarCombosForeignKeyEstadoGastoEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	

	public void cargarCombosForeignKeyEmpresaListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpresaConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeySucursalListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=SucursalConstantesFunciones.SFINALQUERY;

				this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEjercicioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EjercicioConstantesFunciones.SFINALQUERY;

				this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPaisListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.paissForeignKey==null||this.paissForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=PaisConstantesFunciones.SFINALQUERY;

				this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudadListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=CiudadConstantesFunciones.SFINALQUERY;

				this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=AnioConstantesFunciones.SFINALQUERY;

				this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMesListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.messForeignKey==null||this.messForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=MesConstantesFunciones.SFINALQUERY;

				this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyUsuarioListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=UsuarioConstantesFunciones.SFINALQUERY;

				this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoGastoEmpleadoListas(Boolean cargarCombosDependencia,String sFinalQuery)throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();

			String  finalQueryGlobal="";

			Modulo  moduloActualAux=new Modulo();

			if((this.estadogastoempleadosForeignKey==null||this.estadogastoempleadosForeignKey.size()<=0)) {
				this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
				this.arrDatoGeneralNo= new  ArrayList<String>();

				arrColumnasGlobales=EstadoGastoEmpleadoConstantesFunciones.getArrayColumnasGlobalesEstadoGastoEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
				finalQueryGlobal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoGastoEmpleadoConstantesFunciones.TABLENAME);

				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, sFinalQuery);
				finalQueryGlobal=Funciones.GetFinalQueryAppend(finalQueryGlobal, "");

				finalQueryGlobal+=EstadoGastoEmpleadoConstantesFunciones.SFINALQUERY;

				this.cargarCombosEstadoGastoEmpleadosForeignKeyLista(finalQueryGlobal);
			}

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void cargarCombosLoteForeignKeyGastoEmpleadoListas(Boolean cargarCombosDependencia)throws Exception {
		try	{
			
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			Modulo  moduloActualAux=new Modulo();
			
			
			GastoEmpleadoParameterReturnGeneral gastoempleadoReturnGeneral=new GastoEmpleadoParameterReturnGeneral();
						
			


				String finalQueryGlobalEmpresa="";

				if(((this.empresasForeignKey==null||this.empresasForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_empresaGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_empresaGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpresaConstantesFunciones.getArrayColumnasGlobalesEmpresa(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpresa=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpresaConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpresa=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpresa, "");
						finalQueryGlobalEmpresa+=EmpresaConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpresasForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpresa=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidEmpresaActual();
					}
				} else {
					finalQueryGlobalEmpresa="NONE";
				}


				String finalQueryGlobalSucursal="";

				if(((this.sucursalsForeignKey==null||this.sucursalsForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_sucursalGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_sucursalGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=SucursalConstantesFunciones.getArrayColumnasGlobalesSucursal(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalSucursal=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,SucursalConstantesFunciones.TABLENAME);

						finalQueryGlobalSucursal=Funciones.GetFinalQueryAppend(finalQueryGlobalSucursal, "");
						finalQueryGlobalSucursal+=SucursalConstantesFunciones.SFINALQUERY;

						//this.cargarCombosSucursalsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalSucursal=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidSucursalActual();
					}
				} else {
					finalQueryGlobalSucursal="NONE";
				}


				String finalQueryGlobalEmpleado="";

				if(((this.empleadosForeignKey==null||this.empleadosForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_empleadoGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_empleadoGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EmpleadoConstantesFunciones.getArrayColumnasGlobalesEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEmpleado, "");
						finalQueryGlobalEmpleado+=EmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEmpleado=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidEmpleadoActual();
					}
				} else {
					finalQueryGlobalEmpleado="NONE";
				}


				String finalQueryGlobalEjercicio="";

				if(((this.ejerciciosForeignKey==null||this.ejerciciosForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_ejercicioGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_ejercicioGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EjercicioConstantesFunciones.getArrayColumnasGlobalesEjercicio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEjercicio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EjercicioConstantesFunciones.TABLENAME);

						finalQueryGlobalEjercicio=Funciones.GetFinalQueryAppend(finalQueryGlobalEjercicio, "");
						finalQueryGlobalEjercicio+=EjercicioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEjerciciosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEjercicio=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidEjercicioActual();
					}
				} else {
					finalQueryGlobalEjercicio="NONE";
				}


				String finalQueryGlobalPais="";

				if(((this.paissForeignKey==null||this.paissForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_paisGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_paisGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=PaisConstantesFunciones.getArrayColumnasGlobalesPais(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalPais=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,PaisConstantesFunciones.TABLENAME);

						finalQueryGlobalPais=Funciones.GetFinalQueryAppend(finalQueryGlobalPais, "");
						finalQueryGlobalPais+=PaisConstantesFunciones.SFINALQUERY;

						//this.cargarCombosPaissForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalPais=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidPaisActual();
					}
				} else {
					finalQueryGlobalPais="NONE";
				}


				String finalQueryGlobalCiudad="";

				if(((this.ciudadsForeignKey==null||this.ciudadsForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_ciudadGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_ciudadGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=CiudadConstantesFunciones.getArrayColumnasGlobalesCiudad(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalCiudad=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,CiudadConstantesFunciones.TABLENAME);

						finalQueryGlobalCiudad=Funciones.GetFinalQueryAppend(finalQueryGlobalCiudad, "");
						finalQueryGlobalCiudad+=CiudadConstantesFunciones.SFINALQUERY;

						//this.cargarCombosCiudadsForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalCiudad=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidCiudadActual();
					}
				} else {
					finalQueryGlobalCiudad="NONE";
				}


				String finalQueryGlobalAnio="";

				if(((this.aniosForeignKey==null||this.aniosForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_anioGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_anioGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=AnioConstantesFunciones.getArrayColumnasGlobalesAnio(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalAnio=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,AnioConstantesFunciones.TABLENAME);

						finalQueryGlobalAnio=Funciones.GetFinalQueryAppend(finalQueryGlobalAnio, "");
						finalQueryGlobalAnio+=AnioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosAniosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalAnio=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidAnioActual();
					}
				} else {
					finalQueryGlobalAnio="NONE";
				}


				String finalQueryGlobalMes="";

				if(((this.messForeignKey==null||this.messForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_mesGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_mesGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=MesConstantesFunciones.getArrayColumnasGlobalesMes(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalMes=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,MesConstantesFunciones.TABLENAME);

						finalQueryGlobalMes=Funciones.GetFinalQueryAppend(finalQueryGlobalMes, "");
						finalQueryGlobalMes+=MesConstantesFunciones.SFINALQUERY;

						//this.cargarCombosMessForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalMes=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidMesActual();
					}
				} else {
					finalQueryGlobalMes="NONE";
				}


				String finalQueryGlobalUsuario="";

				if(((this.usuariosForeignKey==null||this.usuariosForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_usuarioGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_usuarioGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=UsuarioConstantesFunciones.getArrayColumnasGlobalesUsuario(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalUsuario=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,UsuarioConstantesFunciones.TABLENAME);

						finalQueryGlobalUsuario=Funciones.GetFinalQueryAppend(finalQueryGlobalUsuario, "");
						finalQueryGlobalUsuario+=UsuarioConstantesFunciones.SFINALQUERY;

						//this.cargarCombosUsuariosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalUsuario=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidUsuarioActual();
					}
				} else {
					finalQueryGlobalUsuario="NONE";
				}


				String finalQueryGlobalEstadoGastoEmpleado="";

				if(((this.estadogastoempleadosForeignKey==null||this.estadogastoempleadosForeignKey.size()<=0) && this.gastoempleadoConstantesFunciones.cargarid_estado_gasto_empleadoGastoEmpleado)
					 || (this.esRecargarFks && this.gastoempleadoConstantesFunciones.cargarid_estado_gasto_empleadoGastoEmpleado)) {

					if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoGastoEmpleado()) {

						this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
						this.arrDatoGeneralNo= new  ArrayList<String>();


						arrColumnasGlobales=EstadoGastoEmpleadoConstantesFunciones.getArrayColumnasGlobalesEstadoGastoEmpleado(this.arrDatoGeneral,this.arrDatoGeneralNo);
						finalQueryGlobalEstadoGastoEmpleado=Funciones.GetWhereGlobalConstants(this.parametroGeneralUsuario,this.moduloActual,true,false,arrColumnasGlobales,EstadoGastoEmpleadoConstantesFunciones.TABLENAME);

						finalQueryGlobalEstadoGastoEmpleado=Funciones.GetFinalQueryAppend(finalQueryGlobalEstadoGastoEmpleado, "");
						finalQueryGlobalEstadoGastoEmpleado+=EstadoGastoEmpleadoConstantesFunciones.SFINALQUERY;

						//this.cargarCombosEstadoGastoEmpleadosForeignKeyLista(finalQueryGlobal);
					} else {
						finalQueryGlobalEstadoGastoEmpleado=" WHERE " + ConstantesSql.ID + "="+gastoempleadoSessionBean.getlidEstadoGastoEmpleadoActual();
					}
				} else {
					finalQueryGlobalEstadoGastoEmpleado="NONE";
				}
			
			//ARCHITECTURE			
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				gastoempleadoReturnGeneral=gastoempleadoLogic.cargarCombosLoteForeignKeyGastoEmpleado(finalQueryGlobalEmpresa,finalQueryGlobalSucursal,finalQueryGlobalEmpleado,finalQueryGlobalEjercicio,finalQueryGlobalPais,finalQueryGlobalCiudad,finalQueryGlobalAnio,finalQueryGlobalMes,finalQueryGlobalUsuario,finalQueryGlobalEstadoGastoEmpleado);//WithConnection
			} else if(Constantes.ISUSAEJBREMOTE) {
			} else if(Constantes.ISUSAEJBHOME) {
			}			
			//ARCHITECTURE
			
			

			if(!finalQueryGlobalEmpresa.equals("NONE")) {
				this.empresasForeignKey=gastoempleadoReturnGeneral.getempresasForeignKey();
			}

			if(!finalQueryGlobalSucursal.equals("NONE")) {
				this.sucursalsForeignKey=gastoempleadoReturnGeneral.getsucursalsForeignKey();
			}

			if(!finalQueryGlobalEmpleado.equals("NONE")) {
				this.empleadosForeignKey=gastoempleadoReturnGeneral.getempleadosForeignKey();
			}

			if(!finalQueryGlobalEjercicio.equals("NONE")) {
				this.ejerciciosForeignKey=gastoempleadoReturnGeneral.getejerciciosForeignKey();
			}

			if(!finalQueryGlobalPais.equals("NONE")) {
				this.paissForeignKey=gastoempleadoReturnGeneral.getpaissForeignKey();
			}

			if(!finalQueryGlobalCiudad.equals("NONE")) {
				this.ciudadsForeignKey=gastoempleadoReturnGeneral.getciudadsForeignKey();
			}

			if(!finalQueryGlobalAnio.equals("NONE")) {
				this.aniosForeignKey=gastoempleadoReturnGeneral.getaniosForeignKey();
			}

			if(!finalQueryGlobalMes.equals("NONE")) {
				this.messForeignKey=gastoempleadoReturnGeneral.getmessForeignKey();
			}

			if(!finalQueryGlobalUsuario.equals("NONE")) {
				this.usuariosForeignKey=gastoempleadoReturnGeneral.getusuariosForeignKey();
			}

			if(!finalQueryGlobalEstadoGastoEmpleado.equals("NONE")) {
				this.estadogastoempleadosForeignKey=gastoempleadoReturnGeneral.getestadogastoempleadosForeignKey();
			}
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void addItemDefectoCombosTodosForeignKeyGastoEmpleado()throws Exception {
		try {
			
			this.addItemDefectoCombosForeignKeyEmpresa();
			this.addItemDefectoCombosForeignKeySucursal();
			this.addItemDefectoCombosForeignKeyEmpleado();
			this.addItemDefectoCombosForeignKeyEjercicio();
			this.addItemDefectoCombosForeignKeyPais();
			this.addItemDefectoCombosForeignKeyCiudad();
			this.addItemDefectoCombosForeignKeyAnio();
			this.addItemDefectoCombosForeignKeyMes();
			this.addItemDefectoCombosForeignKeyUsuario();
			this.addItemDefectoCombosForeignKeyEstadoGastoEmpleado();
		} catch(Exception e) {
			throw e;
		}		
	}
	
	



	public void addItemDefectoCombosForeignKeyEmpresa()throws Exception {
		try {
			if(this.gastoempleadoSessionBean==null) {
				this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
			}

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpresa()) {
				Empresa empresa=new Empresa();
				EmpresaConstantesFunciones.setEmpresaDescripcion(empresa,Constantes.SMENSAJE_ESCOJA_OPCION);
				empresa.setId(null);

				if(!EmpresaConstantesFunciones.ExisteEnLista(this.empresasForeignKey,empresa,true)) {

					this.empresasForeignKey.add(0,empresa);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeySucursal()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionSucursal()) {
				Sucursal sucursal=new Sucursal();
				SucursalConstantesFunciones.setSucursalDescripcion(sucursal,Constantes.SMENSAJE_ESCOJA_OPCION);
				sucursal.setId(null);

				if(!SucursalConstantesFunciones.ExisteEnLista(this.sucursalsForeignKey,sucursal,true)) {

					this.sucursalsForeignKey.add(0,sucursal);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEmpleado()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEmpleado()) {
				Empleado empleado=new Empleado();
				EmpleadoConstantesFunciones.setEmpleadoDescripcion(empleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				empleado.setId(null);

				if(!EmpleadoConstantesFunciones.ExisteEnLista(this.empleadosForeignKey,empleado,true)) {

					this.empleadosForeignKey.add(0,empleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEjercicio()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEjercicio()) {
				Ejercicio ejercicio=new Ejercicio();
				EjercicioConstantesFunciones.setEjercicioDescripcion(ejercicio,Constantes.SMENSAJE_ESCOJA_OPCION);
				ejercicio.setId(null);

				if(!EjercicioConstantesFunciones.ExisteEnLista(this.ejerciciosForeignKey,ejercicio,true)) {

					this.ejerciciosForeignKey.add(0,ejercicio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyPais()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionPais()) {
				Pais pais=new Pais();
				PaisConstantesFunciones.setPaisDescripcion(pais,Constantes.SMENSAJE_ESCOJA_OPCION);
				pais.setId(null);

				if(!PaisConstantesFunciones.ExisteEnLista(this.paissForeignKey,pais,true)) {

					this.paissForeignKey.add(0,pais);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyCiudad()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionCiudad()) {
				Ciudad ciudad=new Ciudad();
				CiudadConstantesFunciones.setCiudadDescripcion(ciudad,Constantes.SMENSAJE_ESCOJA_OPCION);
				ciudad.setId(null);

				if(!CiudadConstantesFunciones.ExisteEnLista(this.ciudadsForeignKey,ciudad,true)) {

					this.ciudadsForeignKey.add(0,ciudad);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyAnio()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionAnio()) {
				Anio anio=new Anio();
				AnioConstantesFunciones.setAnioDescripcion(anio,Constantes.SMENSAJE_ESCOJA_OPCION);
				anio.setId(null);

				if(!AnioConstantesFunciones.ExisteEnLista(this.aniosForeignKey,anio,true)) {

					this.aniosForeignKey.add(0,anio);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyMes()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionMes()) {
				Mes mes=new Mes();
				MesConstantesFunciones.setMesDescripcion(mes,Constantes.SMENSAJE_ESCOJA_OPCION);
				mes.setId(null);

				if(!MesConstantesFunciones.ExisteEnLista(this.messForeignKey,mes,true)) {

					this.messForeignKey.add(0,mes);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyUsuario()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionUsuario()) {
				Usuario usuario=new Usuario();
				UsuarioConstantesFunciones.setUsuarioDescripcion(usuario,Constantes.SMENSAJE_ESCOJA_OPCION);
				usuario.setId(null);

				if(!UsuarioConstantesFunciones.ExisteEnLista(this.usuariosForeignKey,usuario,true)) {

					this.usuariosForeignKey.add(0,usuario);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}

	public void addItemDefectoCombosForeignKeyEstadoGastoEmpleado()throws Exception {
		try {

			if(!this.gastoempleadoSessionBean.getisBusquedaDesdeForeignKeySesionEstadoGastoEmpleado()) {
				EstadoGastoEmpleado estadogastoempleado=new EstadoGastoEmpleado();
				EstadoGastoEmpleadoConstantesFunciones.setEstadoGastoEmpleadoDescripcion(estadogastoempleado,Constantes.SMENSAJE_ESCOJA_OPCION);
				estadogastoempleado.setId(null);

				if(!EstadoGastoEmpleadoConstantesFunciones.ExisteEnLista(this.estadogastoempleadosForeignKey,estadogastoempleado,true)) {

					this.estadogastoempleadosForeignKey.add(0,estadogastoempleado);
				}
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void initActionsCombosTodosForeignKeyGastoEmpleado()throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	public void initActionsCombosTodosForeignKeyGastoEmpleado(String sFormularioTipoBusqueda)throws Exception {
		try {
			
		} catch(Exception e) {
			throw e;
		}		
	}
	
	


	
	


	
	public void setVariablesGlobalesCombosForeignKeyGastoEmpleado()throws Exception {	
		try {
			if(this.parametroGeneralUsuario!=null && this.parametroGeneralUsuario.getId()>0) {
			
				this.setActualEmpresaForeignKey(this.parametroGeneralUsuario.getid_empresa(),false,"Formulario");
				this.setActualSucursalForeignKey(this.parametroGeneralUsuario.getid_sucursal(),false,"Formulario");
				this.setActualEjercicioForeignKey(this.parametroGeneralUsuario.getid_ejercicio(),false,"Formulario");
				this.setActualUsuarioForeignKey(this.parametroGeneralUsuario.getid_usuario(),false,"Formulario");
			
			
				this.gastoempleado.setfecha(this.parametroGeneralUsuario.getfecha_sistema());
			}
			
			//INICIALIZA VARIABLES COMBOS GLOBALES AUXILIARES A FORMULARIO(Anio,Mes)
			this.setVariablesGlobalesAuxiliaresCombosForeignKeyGastoEmpleado();
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToFormularioForeignKeyGastoEmpleado(GastoEmpleado gastoempleado)throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(gastoempleado.getid_empleado(),false,"Formulario");
			this.setActualPaisForeignKey(gastoempleado.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(gastoempleado.getid_ciudad(),false,"Formulario");
			this.setActualEstadoGastoEmpleadoForeignKey(gastoempleado.getid_estado_gasto_empleado(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesObjetoActualToListasForeignKeyGastoEmpleado(GastoEmpleado gastoempleado,String sTipoEvento)throws Exception {	
		try {
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	/*
	public void setVariablesCombosFromBeanForeignKeyGastoEmpleado()throws Exception {	
		try {
			
			this.setActualEmpleadoForeignKey(this.gastoempleadoConstantesFunciones.getid_empleado(),false,"Formulario");
			this.setActualPaisForeignKey(this.gastoempleadoConstantesFunciones.getid_pais(),false,"Formulario");
			this.setActualCiudadForeignKey(this.gastoempleadoConstantesFunciones.getid_ciudad(),false,"Formulario");
			this.setActualEstadoGastoEmpleadoForeignKey(this.gastoempleadoConstantesFunciones.getid_estado_gasto_empleado(),false,"Formulario");			
		} catch(Exception e) {
			throw e;
		}
	}
	*/
	
	public void setVariablesGlobalesAuxiliaresCombosForeignKeyGastoEmpleado()throws Exception {	
		try {
			

				if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
					Ejercicio ejercicioActual=(Ejercicio)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.getSelectedItem();
					this.setActualAnioForeignKey(ejercicioActual.getid_anio(),false,"Formulario");
				}

				this.setActualUsuarioForeignKey(this.usuarioActual.getId(),false,"Formulario");
		
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesDefaultCombosForeignKeyGastoEmpleado()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void setVariablesParametroCombosForeignKeyGastoEmpleado()throws Exception {	
		try {
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	public void cargarCombosParametroGastoEmpleado()throws Exception {
		try	{
			ArrayList<String> arrColumnasGlobales=new ArrayList<String>();
			String  finalQueryGlobal="";
			
			//this.cargarDatosCliente();
			
			
			
		} catch(Exception e) {
			throw e;
		}		
	}
		
	public void cargarCombosFrameForeignKeyGastoEmpleado()throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey("Todos");
			this.cargarCombosFrameSucursalsForeignKey("Todos");
			this.cargarCombosFrameEmpleadosForeignKey("Todos");
			this.cargarCombosFrameEjerciciosForeignKey("Todos");
			this.cargarCombosFramePaissForeignKey("Todos");
			this.cargarCombosFrameCiudadsForeignKey("Todos");
			this.cargarCombosFrameAniosForeignKey("Todos");
			this.cargarCombosFrameMessForeignKey("Todos");
			this.cargarCombosFrameUsuariosForeignKey("Todos");
			this.cargarCombosFrameEstadoGastoEmpleadosForeignKey("Todos");

		} catch(Exception e) {
			throw e;
		}		
	}		
	
	public void cargarCombosFrameForeignKeyGastoEmpleado(String sFormularioTipoBusqueda)throws Exception {
		try {
			

			this.cargarCombosFrameEmpresasForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameSucursalsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEjerciciosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameUsuariosForeignKey(sFormularioTipoBusqueda);
			this.cargarCombosFrameEstadoGastoEmpleadosForeignKey(sFormularioTipoBusqueda);

		} catch(Exception e) {
			throw e;
		}		
	}	
	
	public void setItemDefectoCombosForeignKeyGastoEmpleado()throws Exception {
		try {
			



			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setSelectedIndex(0);
			}

			if(this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.getItemCount()>0) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setSelectedIndex(0);
			}
		} catch(Exception e) {
			throw e;
		}		
	}		
	
	




















	
	

	public GastoEmpleadoBeanSwingJInternalFrame() throws Exception {
		super(false,PaginaTipo.PRINCIPAL);
	}
	
	public GastoEmpleadoBeanSwingJInternalFrame(Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
	}
	
	public GastoEmpleadoBeanSwingJInternalFrame(Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,PaginaTipo paginaTipo) throws Exception {
		super(cargarRelaciones,paginaTipo);
		
		this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean(); 
		this.gastoempleadoConstantesFunciones=new GastoEmpleadoConstantesFunciones(); 
		this.gastoempleadoBean=new GastoEmpleado();//(this.gastoempleadoConstantesFunciones); 		
		this.gastoempleadoReturnGeneral=new GastoEmpleadoParameterReturnGeneral(); 
		
		this.gastoempleadoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
		this.gastoempleadoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
				
	}
	
	public GastoEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,cargarTodosDatos);
	}
		
	public GastoEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,Boolean cargarRelaciones,Boolean cargarTodosDatos,PaginaTipo paginaTipo) throws Exception {
		this(blncargarCombostrForeignKey,blnCargarInformacionInicial,jdesktopPane,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo,false,false,cargarRelaciones,cargarTodosDatos);
	}	
	
	public GastoEmpleadoBeanSwingJInternalFrame(Boolean blncargarCombostrForeignKey,Boolean blnCargarInformacionInicial,JDesktopPane jdesktopPane,Usuario usuarioActual,ResumenUsuario resumenUsuarioActual,Modulo moduloActual,Opcion opcionActual,ParametroGeneralSg parametroGeneralSg,ParametroGeneralUsuario parametroGeneralUsuario,PaginaTipo paginaTipo,Boolean conGuardarRelaciones,Boolean esGuardarRelacionado,Boolean cargarRelaciones,Boolean cargarTodosDatos) throws Exception //Boolean esParaBusquedaForeignKey
    {
		super(jdesktopPane,conGuardarRelaciones,esGuardarRelacionado,cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		try {
			
			this.permiteRecargarForm=false;
			
			this.startProcessGastoEmpleado(true);
			
			Boolean esParaBusquedaForeignKey=false;//ANTES USADO COMO PARAMETRO DEL CONSTRUCTOR
			
			if(paginaTipo.equals(PaginaTipo.BUSQUEDA)) {
				esParaBusquedaForeignKey=true;
			}
			
			
			
			//SE ASIGNA EN CLASE PADRE
			/*
			this.parametroGeneralSg=parametroGeneralSg;		
			this.parametroGeneralUsuario=parametroGeneralUsuario;	
			this.usuarioActual=usuarioActual;
			this.moduloActual=moduloActual;
			*/						
			
			long start_time=0;
			long end_time=0;
			
			if(Constantes2.ISDEVELOPING2) {
				start_time = System.currentTimeMillis();
			}
			
			if(!cargarTodosDatos) {
				this.sAccionBusqueda="NINGUNO";
			}
			
			this.gastoempleadoConstantesFunciones=new GastoEmpleadoConstantesFunciones(); 
			this.gastoempleadoBean=new GastoEmpleado();//this.gastoempleadoConstantesFunciones); 			
			this.gastoempleadoReturnGeneral=new GastoEmpleadoParameterReturnGeneral(); 
		
			GastoEmpleadoBeanSwingJInternalFrameAdditional.CargaInicialInicio(this, "NORMAL", null);
			
			this.setTitle(Funciones.GetTituloSistema(this.parametroGeneralSg,this.moduloActual,this.usuarioActual,"Gasto Empleado Mantenimiento",paginaTipo));			
			
			this.conTotales=false;
			
			this.conTotales=true;
			
			
			this.gastoempleado=new GastoEmpleado();
			this.gastoempleados = new ArrayList<GastoEmpleado>();
			this.gastoempleadosAux = new ArrayList<GastoEmpleado>();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic=new GastoEmpleadoLogic();
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			//this.gastoempleadoSessionBean.setConGuardarRelaciones(conGuardarRelaciones);
			//this.gastoempleadoSessionBean.setEsGuardarRelacionado(esGuardarRelacionado);
			
			this.jDesktopPane=jdesktopPane;
			
			if(this.jDesktopPane.getClass().equals(JDesktopPaneMe.class)) {
				this.constantes2=((JDesktopPaneMe)this.jDesktopPane).constantes2;
			}
			
			if(!Constantes.CON_VARIAS_VENTANAS) {
    			MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameDetalleFormGastoEmpleado);
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoGastoEmpleado);	
					}
					
					if(this.jInternalFrameImportacionGastoEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionGastoEmpleado);							
					}
					
				}
				
				
				if(!this.conCargarMinimo) {
					
					if(this.jInternalFrameOrderByGastoEmpleado!=null) {
						MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameOrderByGastoEmpleado);					
					}
					
				}
			}
			
			//DETALLE DATOS
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //this.conCargarFormDetalle) {
				this.jDesktopPane.add(this.jInternalFrameDetalleFormGastoEmpleado);
				this.jInternalFrameDetalleFormGastoEmpleado.setVisible(false);
				this.jInternalFrameDetalleFormGastoEmpleado.setSelected(false);						
			}
			
			if(!this.conCargarMinimo) {
				
				//REPORTE DINAMICO
				if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameReporteDinamicoGastoEmpleado);
					this.jInternalFrameReporteDinamicoGastoEmpleado.setVisible(false);
					this.jInternalFrameReporteDinamicoGastoEmpleado.setSelected(false);
				}
				
				//IMPORTACION
				if(this.jInternalFrameImportacionGastoEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameImportacionGastoEmpleado);
					this.jInternalFrameImportacionGastoEmpleado.setVisible(false);
					this.jInternalFrameImportacionGastoEmpleado.setSelected(false);
				}
				
				
			}
			
			
			if(!this.conCargarMinimo) {
				
				if(this.jInternalFrameOrderByGastoEmpleado!=null) {
					this.jDesktopPane.add(this.jInternalFrameOrderByGastoEmpleado);
					this.jInternalFrameOrderByGastoEmpleado.setVisible(false);
					this.jInternalFrameOrderByGastoEmpleado.setSelected(false);				
				}
				
			}
			
			
			//this.esParaBusquedaForeignKey=false;
			this.esParaBusquedaForeignKey=esParaBusquedaForeignKey;
			
			this.invalidValues=new InvalidValue[0];
			
			
			
			this.idGastoEmpleadoActual=0L;
			this.rowIndexActual=0;
			
			
			this.iNumeroPaginacionPagina=0;
			this.iNumeroPaginacion=GastoEmpleadoConstantesFunciones.INUMEROPAGINACION;
			this.pagination=new Pagination();
			this.datosCliente=new DatosCliente();
			this.lIdUsuarioSesion=0L;	
			this.sTipoArchivoReporte="";
			this.sTipoArchivoReporteDinamico="";
			this.sTipoReporte="";
			this.sTipoReporteDinamico="";
			this.sTipoPaginacion="";
			this.sTipoRelacion="";
			this.sTipoAccion="";
			this.sTipoAccionFormulario="";
			this.sTipoSeleccionar="";			
			this.sDetalleReporte="";
			this.sTipoReporteExtra="";
			this.sValorCampoGeneral="";
			this.sPathReporteDinamico="";			
			
			this.isMostrarNumeroPaginacion=false;
			this.isSeleccionarTodos=false;
			this.isSeleccionados=false;
			this.conGraficoReporte=false;
			this.isPostAccionNuevo=false;
			this.isPostAccionSinCerrar=false;
			this.isPostAccionSinMensaje=false;
			this.esReporteDinamico=false;
			this.esRecargarFks=false;
			this.esReporteAccionProceso=false;
			
			this.gastoempleadoReturnGeneral=new GastoEmpleadoParameterReturnGeneral();
			
			this.gastoempleadoParameterGeneral=new GastoEmpleadoParameterReturnGeneral();
			
			
			
			this.sistemaLogicAdditional=new SistemaLogicAdditional();
			
			this.sistemaLogicAdditional.setConnexion(this.gastoempleadoLogic.getConnexion());			
			
			
			
			
			
			
			
			//VERIFICAR GLOBAL
			this.cargarDatosCliente();			
			
			
			if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarLicenciaCliente(this.datosCliente,this.moduloActual,this.usuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_CONTROLGLOBAL);
					}
					
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			}			
			
			//VERIFICAR GLOBAL
			
			//VERIFICAR SESSION ACTUAL
			//this.cargarDatosCliente();
			
			this.sistemaReturnGeneral=new SistemaParameterReturnGeneral();
			
			SistemaParameterReturnGeneralAdditional.inicializarSinSeguridad(this.sistemaReturnGeneral);
			
			if(GastoEmpleadoJInternalFrame.CON_LLAMADA_SIMPLE) {
				if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					this.opcionActual.setId(0L);
					
					//idOpcion=0L;					
				}
				
				ArrayList<String> arrPaginas=new ArrayList<String>();		
				ArrayList<Opcion> opcionsFinal=new ArrayList<Opcion>();	
				
		
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					//this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActualWithConnection(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,GastoEmpleadoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),this.gastoempleadoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					this.sistemaReturnGeneral=sistemaLogicAdditional.validarCargarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual,Constantes.LIDSISTEMAACTUAL,GastoEmpleadoConstantesFunciones.SNOMBREOPCION,this.opcionActual,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),this.gastoempleadoSessionBean.getConGuardarRelaciones(),arrPaginas);
					
					if(!this.sistemaReturnGeneral.getEsValidado()) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
					//FALTA
				}
			} else { 
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					if(!sistemaLogicAdditional.validarSesionUsuarioActual(this.usuarioActual,this.datosCliente,this.resumenUsuarioActual)) {
					 	this.setVisible(false);
						throw new Exception(Mensajes.SERROR_SESIONACTUAL);
					}
				
				} else if(Constantes.ISUSAEJBREMOTE) {
					
				} else if(Constantes.ISUSAEJBHOME) {
				}
			} 
			//VERIFICAR SESSION ACTUAL
			
			
			this.sVisibilidadTablaBusquedas="table-row";
			this.sVisibilidadTablaElementos="none";
			this.sVisibilidadTablaAcciones="none";
			
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaDuplicarGastoEmpleado=true;
			this.isVisibilidadCeldaCopiarGastoEmpleado=true;
			this.isVisibilidadCeldaVerFormGastoEmpleado=true;
			this.isVisibilidadCeldaOrdenGastoEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			
			
			this.isVisibilidadFK_IdAnio=true;
			this.isVisibilidadFK_IdCiudad=true;
			this.isVisibilidadFK_IdEjercicio=true;
			this.isVisibilidadFK_IdEmpleado=true;
			this.isVisibilidadFK_IdEmpresa=true;
			this.isVisibilidadFK_IdEstadoGastoEmpleado=true;
			this.isVisibilidadFK_IdMes=true;
			this.isVisibilidadFK_IdPais=true;
			this.isVisibilidadFK_IdSucursal=true;
			this.isVisibilidadFK_IdUsuario=true;
			
			//ELEMENTOS TABLAS PARAMETOS
			
			
			
			//ELEMENTOS TABLAS PARAMETOS_FIN
			
			//this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
						
			
			
			this.inicializarPermisosGastoEmpleado();
			
			//INICIALIZAR FALSE, TALVEZ COMENTAR
			this.setPermisosUsuarioGastoEmpleado(false);
			
			this.setPermisosUsuarioGastoEmpleado();
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado() 
				|| (this.gastoempleadoSessionBean.getEsGuardarRelacionado() && this.gastoempleadoSessionBean.getConGuardarRelaciones())) {
				
				this.inicializarSetPermisosUsuarioGastoEmpleadoClasesRelacionadas();
			}
			
			if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
				this.actualizarTabsSetPermisosUsuarioGastoEmpleadoClasesRelacionadas();
			}
			
			
			
			//SOLO SE EJECUTA LA PRIMERA VEZ, BINDINGS SI FUNCIONA
			if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingBotonesPermisosGastoEmpleado();
			} else {
				this.inicializarActualizarBindingBotonesPermisosManualGastoEmpleado();
			}
			
			if(!this.isPermisoBusquedaGastoEmpleado) {
				//BYDAN_BUSQUEDAS
				
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(false);				
				
			}
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {				
				this.tiposArchivosReportes=Funciones.getListTiposArchivosReportes();
				this.tiposArchivosReportesDinamico=Funciones.getListTiposArchivosReportes();
				this.tiposReportes=Funciones.getListTiposReportes(true);
				this.tiposReportesDinamico=Funciones.getListTiposReportesDinamico(true);
				
				
				
				this.tiposGraficosReportes=Funciones2.getListTiposGraficosReportes();
				this.tiposPaginacion=Funciones2.getListTiposPaginacion(this.isPermisoPaginacionMedioGastoEmpleado,this.isPermisoPaginacionMedioGastoEmpleado,this.isPermisoPaginacionTodoGastoEmpleado);
				this.tiposSeleccionar=Funciones2.getListTiposSeleccionar();
				this.tiposSeleccionar.addAll(GastoEmpleadoConstantesFunciones.getTiposSeleccionarGastoEmpleado());
				
				this.tiposColumnasSelect=GastoEmpleadoConstantesFunciones.getTiposSeleccionarGastoEmpleado(true);
				
				this.tiposRelacionesSelect=new ArrayList<Reporte>();								
				
				
			} else {
				this.tiposArchivosReportes=new ArrayList<Reporte>();
				this.tiposArchivosReportesDinamico=new ArrayList<Reporte>();
				this.tiposReportes=new ArrayList<Reporte>();
				this.tiposReportesDinamico=new ArrayList<Reporte>();
				this.tiposGraficosReportes=new ArrayList<Reporte>();
				this.tiposPaginacion=new ArrayList<Reporte>();
				this.tiposSeleccionar=new ArrayList<Reporte>();			
				this.tiposColumnasSelect=new ArrayList<Reporte>();	
				this.tiposRelacionesSelect=new ArrayList<Reporte>();	
			}
						
			
			//FUNCIONALIDAD_RELACIONADO
			//if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				//SE ENCUENTRA MAS ADELANTE CON ACCIONES POR USUARIO
				//ACCIONES GENERALES Y POR USUARIO
				this.tiposRelaciones=Funciones2.getListTiposRelaciones();
				this.setRelacionesUsuarioGastoEmpleado();
				
				this.tiposAcciones=Funciones2.getListTiposAcciones(true,false,true);
				this.setAccionesUsuarioGastoEmpleado(false);	
				
				this.tiposAccionesFormulario=Funciones2.getListTiposAccionesFormulario(true,false,true);							
				this.setAccionesUsuarioGastoEmpleado(true);	
				
				this.inicializarActualizarBindingtiposArchivosReportesAccionesGastoEmpleado() ;
			
			/*
			} else {
				this.tiposAcciones=new ArrayList<Reporte>();
				this.tiposAccionesFormulario=new ArrayList<Reporte>();
			}
			*/						
			
			this.inicializarInvalidValues();
						
			this.arrDatoGeneral= new  ArrayList<DatoGeneral>();
			this.arrDatoGeneralNo= new  ArrayList<String>();
			
			
			
			this.arrOrderBy= new  ArrayList<OrderBy>();
			
			
			this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
			
			
			this.traerValoresTablaOrderBy();			
			
			
			this.isGuardarCambiosEnLote=false;
			this.isCargarCombosDependencia=false;
			
			 
			jasperPrint = null;												
			
			//FK
			
			this.empresaLogic=new EmpresaLogic();
			this.sucursalLogic=new SucursalLogic();
			this.empleadoLogic=new EmpleadoLogic();
			this.ejercicioLogic=new EjercicioLogic();
			this.paisLogic=new PaisLogic();
			this.ciudadLogic=new CiudadLogic();
			this.anioLogic=new AnioLogic();
			this.mesLogic=new MesLogic();
			this.usuarioLogic=new UsuarioLogic();
			this.estadogastoempleadoLogic=new EstadoGastoEmpleadoLogic();
			
			//PARAMETROS
			
			
			/*
			if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {		
				hashtableEnv =  Funciones.getHashtableEnv();		
				initialContext = new InitialContext(hashtableEnv);	
			}
			*/
			/*
			if(Constantes.ISUSAEJBREMOTE) {
				gastoempleadoImplementable= (GastoEmpleadoImplementable) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+GastoEmpleadoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBREMOTE);
			} else if(Constantes.ISUSAEJBHOME) {
				gastoempleadoImplementableHome= (GastoEmpleadoImplementableHome) initialContext.lookup(Constantes.SEJBPACKAGE+Constantes.SEJBSEPARATOR+GastoEmpleadoConstantesFunciones.SEJBNAME+Constantes.SEJBSEPARATOR+Constantes.SEJBLOCAL);
			}			
			*/
			
			
			this.gastoempleados= new ArrayList<GastoEmpleado>();
			this.gastoempleadosEliminados= new ArrayList<GastoEmpleado>();
						
			this.isEsNuevoGastoEmpleado=false;
			this.esParaAccionDesdeFormularioGastoEmpleado=false;
			this.isEsMantenimientoRelacionesRelacionadoUnico=false;
			this.isEsMantenimientoRelaciones=false;
			this.isEsMantenimientoRelacionado=false;
			this.isContieneImagenes=false;
			
			
			
			
			
			//INICIALIZAR LISTAS FK
			
			this.empresasForeignKey=new ArrayList<Empresa>() ;
			this.sucursalsForeignKey=new ArrayList<Sucursal>() ;
			this.empleadosForeignKey=new ArrayList<Empleado>() ;
			this.ejerciciosForeignKey=new ArrayList<Ejercicio>() ;
			this.paissForeignKey=new ArrayList<Pais>() ;
			this.ciudadsForeignKey=new ArrayList<Ciudad>() ;
			this.aniosForeignKey=new ArrayList<Anio>() ;
			this.messForeignKey=new ArrayList<Mes>() ;
			this.usuariosForeignKey=new ArrayList<Usuario>() ;
			this.estadogastoempleadosForeignKey=new ArrayList<EstadoGastoEmpleado>() ;
			
			
			
			
			if(blncargarCombostrForeignKey) {
				this.cargarCombosForeignKeyGastoEmpleado(this.isCargarCombosDependencia);
			}
			
			this.cargarCombosParametroGastoEmpleado();
			
			
			
			
			
			//FUNCIONALIDAD_RELACIONADO
			if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				this.onLoad();
			}
						
			GastoEmpleadoBeanSwingJInternalFrameAdditional.RecargarVentanaSegunOpcion(this,opcionActual);
			
			/*
			if(blnCargarInformacionInicial) {
				this.recargarInformacion();
			}
			*/
			//this.iNumeroPaginacionPagina=0;
			//this.iNumeroPaginacion=GastoEmpleadoConstantesFunciones.INUMEROPAGINACION;
			
			this.actualizarEstadoCeldasBotonesGastoEmpleado("n", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			//SOLO LA PRIMERA VEZ HACE LOS BINDINGS, SOLO AHI FUNCIONA
			this.inicializarActualizarBindingGastoEmpleado(true); 
			
			//SE REDIMENSIONA SINO NO SE ACTUALIZA
			this.redimensionarTablaDatos();
			
			
			this.initActions();
			
			;
						
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {//if(this.conCargarFormDetalle) {
				this.cargarMenuRelaciones();
			}
			
			//OBLIGA CARGAR DETALLE, MEJOR DESHABILITAR, FALTA TALVEZ PONER EN SELECCIONAR
			//MAYBE
			//this.updateControlesFormularioGastoEmpleado();
			
			if(!this.conCargarMinimo) {
				this.updateBusquedasFormularioGastoEmpleado();
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.CargaInicial(this, "NORMAL", null);
			
			
			//SE REALIZA ESTO PARA QUE SE PUEDA RECORRER TAB SIN IMPORTAR ORDEN
			Boolean existeTabBusqueda=false;
			
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				
				for(int i=0; i<this.jTabbedPaneBusquedasGastoEmpleado.getTabCount(); i++) {
					this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(i);
						
					if(!existeTabBusqueda) {
						existeTabBusqueda=true;
					}
				}
					
				if(existeTabBusqueda) {
					this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(0);
				}	
				
				
			}
			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
			
			if(Constantes2.ISDEVELOPING2) {
				end_time = System.currentTimeMillis();			
				String sTipo="Load Ventana";
				Funciones2.getMensajeTiempoEjecucion(start_time, end_time, sTipo,false);
			}  
			
			this.finishProcessGastoEmpleado(true);
			
			this.dEnd=(double)System.currentTimeMillis();
			
			this.dDif=this.dEnd - this.dStart;
			
			if(Constantes.ISDEVELOPING) {
				System.out.println("Tiempo(ms) Carga GastoEmpleado: " + this.dDif); 
			}
			
			this.permiteRecargarForm=true;
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}	 
    }
	
	public void cargarTiposRelacionesSelectGastoEmpleado() {
		Reporte reporte=new Reporte();
		
	
	}
	
	
	
	public void jTabbedPaneChangeListenerGeneral(String sTipo,ChangeEvent evt) { 	  
		Boolean procesaCargarParteTab=false;
			
		try {
			int iIndex=0;		    			
			String sTitle="";
			
			//TABBED PANE RELACIONES
			if(sTipo.equals("RelacionesGastoEmpleado")) {
				iIndex=this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.getSelectedIndex();		    
			
				sTitle=this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.getTitleAt(iIndex);
				
				Integer intSelectedRow = 0;	
			
				intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();	
				
				
				
			}
			
			//TABBED PANE RELACIONES FIN(EXTRA TAB)
			;
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		} finally {
			if(procesaCargarParteTab) {				
				this.finishProcessGastoEmpleado();	
			}
		}
    }
	
	
	
	public void jButtonRelacionActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
  		} catch(Exception e) {
  			e.printStackTrace();
  		}
    }
	
	public void cargarMenuRelaciones() {	
		JMenuItem jmenuItem= new JMenuItem("General");
		String sLabelMenu="";
		
	}		
	
	public void cargarCombosForeignKeyGastoEmpleado(Boolean cargarCombosDependencia) throws Exception {   
		this.cargarCombosForeignKeyGastoEmpleado(cargarCombosDependencia,true,true);
	}
	
	//CARGAR COMBOS EN LOTE
	public void cargarCombosForeignKeyGastoEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales) throws Exception {   
		this.cargarCombosTodosForeignKeyGastoEmpleadoListas(cargarCombosDependencia);
				
		this.addItemDefectoCombosTodosForeignKeyGastoEmpleado();
		
		this.cargarCombosFrameForeignKeyGastoEmpleado();						
		
		if(conInitActions) {
			this.initActionsCombosTodosForeignKeyGastoEmpleado();
		}
		
		if(conSetVariablesGlobales) {
			this.setVariablesGlobalesCombosForeignKeyGastoEmpleado();
		}
	}
	
	

	public void cargarCombosForeignKeyEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEmpleado();
				this.cargarCombosFrameEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEmpleado(this.empleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyPais(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyPaisListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyPais();
				this.cargarCombosFramePaissForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaPais(this.paissForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyCiudad(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyCiudadListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyCiudad();
				this.cargarCombosFrameCiudadsForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaCiudad(this.ciudadsForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyAnio(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyAnioListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyAnio();
				this.cargarCombosFrameAniosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaAnio(this.aniosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyMes(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyMesListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyMes();
				this.cargarCombosFrameMessForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaMes(this.messForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}

	public void cargarCombosForeignKeyEstadoGastoEmpleado(Boolean cargarCombosDependencia,Boolean conInitActions,Boolean conSetVariablesGlobales,String sFinalQueryCombo,String sFormularioTipoBusqueda) throws Exception {
		try {
				this.cargarCombosForeignKeyEstadoGastoEmpleadoListas(cargarCombosDependencia,sFinalQueryCombo);
				this.addItemDefectoCombosForeignKeyEstadoGastoEmpleado();
				this.cargarCombosFrameEstadoGastoEmpleadosForeignKey(sFormularioTipoBusqueda);

				if(conInitActions) {
				}

			this.recargarComboTablaEstadoGastoEmpleado(this.estadogastoempleadosForeignKey);

		} catch(Exception e) {
			throw e;
		}
	}
	
	public void jButtonNuevoGastoEmpleadoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.FORM_RECARGAR;
			String sTipo="NUEVO_NORMAL";
			
			this.estaModoNuevo=true;
			
			if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
				this.dStart=(double)System.currentTimeMillis();
			}
				
			//if(this.esUsoDesdeHijo) {
			//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			//}
											
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}			
				
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			
			if(jTableDatosGastoEmpleado.getRowCount()>=1) {
				jTableDatosGastoEmpleado.removeRowSelectionInterval(0, jTableDatosGastoEmpleado.getRowCount()-1);						
			}
			
			this.isEsNuevoGastoEmpleado=true;
			
			//ESTABLECE SI ES RELACIONADO O NO 
			this.habilitarDeshabilitarTipoMantenimientoGastoEmpleado(esRelaciones);
			
			this.nuevoPreparar(false); 
			this.habilitarDeshabilitarControlesGastoEmpleado(true);			
			//this.gastoempleado=new GastoEmpleado();
			//this.gastoempleado.setIsChanged(true);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesGastoEmpleado(false) ;						
			 
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualGastoEmpleado() ;
			
			if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleGastoEmpleado(esRelaciones);
			}
					
			//Se Duplica, sin sentido
			//this.actualizarInformacion("EVENTO_NUEVO",false,this.gastoempleado);	
			this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);				
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.NEW,"FORM",this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
				this.dEnd=(double)System.currentTimeMillis();					
				this.dDif=this.dEnd - this.dStart;
					
				if(Constantes.ISDEVELOPING) {
					System.out.println("Tiempo(ms) Nuevo Preparar GastoEmpleado: " + this.dDif); 
				}
			}
			
			//false para que pueda generar eventos
			this.estaModoNuevo=false;
							
			//Con this.estaModoNuevo=false;, se permite actualizar y usar eventos control al mismo tiempo (FuncionTipo.LAST)			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.LAST,ControlTipo.FORM,EventoTipo.CLIC,EventoSubTipo.NEW,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;			
		}
	}
	
	public void jButtonDuplicarGastoEmpleadoActionPerformed(ActionEvent evt,Boolean esRelaciones) throws Exception {   
		try {
			Boolean soloDuplicarUno=false;
			Boolean conSeleccionarFilaTabla=false;
			
			this.estaModoNuevo=true;
			this.estaModoDuplicar=true;
			
			ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();
			int intSelectedRow =-1;
			Integer iNumRowsSeleccionados=0;
			int[] arrNumRowsSeleccionados=null;
			
			//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
			if(conSeleccionarFilaTabla) {
				arrNumRowsSeleccionados=this.jTableDatosGastoEmpleado.getSelectedRows();
				iNumRowsSeleccionados=this.jTableDatosGastoEmpleado.getSelectedRows().length;			
			}
			
			gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(false);
				
			if((soloDuplicarUno && iNumRowsSeleccionados.equals(1)) || !soloDuplicarUno) {
				//LO HACE NUEVOPREPARAR
				//this.iIdNuevoGastoEmpleado--;			
				//GastoEmpleado gastoempleadoAux= new GastoEmpleado();			
				//gastoempleadoAux.setId(this.iIdNuevoGastoEmpleado);																
				
				//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
				//GastoEmpleado gastoempleadoOrigen=new GastoEmpleado();
				//for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {				
				
				for(GastoEmpleado gastoempleadoOrigen : gastoempleadosSeleccionados) {
					if(conSeleccionarFilaTabla) {
						if(!soloDuplicarUno) {
							//NO SE TOMA EN CUENTA, SI LOS SELECCIONADOS
							//intSelectedRow =iNumRowSeleccionado;
						} else {
							intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
						}
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {
							gastoempleadoOrigen =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							gastoempleadoOrigen =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
						}
					}
					
					this.aumentarTamanioFilaNuevaTablaGastoEmpleado();
					
					if(this.conTotales) {
						this.quitarFilaTotales();
					}
					
					this.nuevoPreparar(true);
					
					this.gastoempleado.setsType("DUPLICADO");
					
					this.setCopiarVariablesObjetosGastoEmpleado(gastoempleadoOrigen,this.gastoempleado,true,true);
					
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					
					//LO HACE NUEVOPREPARAR
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.gastoempleadoLogic.getGastoEmpleados().add(this.gastoempleadoAux);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.gastoempleados.add(this.gastoempleadoAux);				
					}
					*/
				}
				
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
				
				this.jTableDatosGastoEmpleado.setRowSelectionInterval(this.getIndiceNuevoGastoEmpleado(), this.getIndiceNuevoGastoEmpleado());
				
				int iLastRow =  this.jTableDatosGastoEmpleado.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosGastoEmpleado.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosGastoEmpleado.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaGastoEmpleado(false);
				}
			} else {
				throw new Exception("DEBE ESTAR SELECCIONADO 1 REGISTRO");
			}
			
		} catch(Exception e) {			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			this.estaModoNuevo=false;
			this.estaModoDuplicar=false;
		}
	}
	
	public void jButtonCopiarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			Boolean conSeleccionarFilaTabla=false;
			Integer iNumRowsSeleccionados=0;
			int[] intSelectedRows =null;
			int intSelectedRow =0;
			
			this.estaModoCopiar=true;
			
			ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();									
		
			GastoEmpleado gastoempleadoOrigen=new GastoEmpleado();
			GastoEmpleado gastoempleadoDestino=new GastoEmpleado();
				
			gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(false);
			
			if(conSeleccionarFilaTabla) {
				iNumRowsSeleccionados=this.jTableDatosGastoEmpleado.getSelectedRows().length;	
			}
			
			if(iNumRowsSeleccionados.equals(2) || gastoempleadosSeleccionados.size()==2) {
				if(conSeleccionarFilaTabla) {
					intSelectedRows =this.jTableDatosGastoEmpleado.getSelectedRows();
					intSelectedRow = intSelectedRows[0];	
									
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoOrigen =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						gastoempleadoOrigen =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					intSelectedRow = intSelectedRows[1];
					
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						gastoempleadoDestino =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						gastoempleadoDestino =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
				}
				
				gastoempleadoOrigen =gastoempleadosSeleccionados.get(0);
				gastoempleadoDestino =gastoempleadosSeleccionados.get(1);
				
				this.setCopiarVariablesObjetosGastoEmpleado(gastoempleadoOrigen,gastoempleadoDestino,true,false);
				
				gastoempleadoDestino.setsType("DUPLICADO");
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					actualizarLista(gastoempleadoDestino,gastoempleadoLogic.getGastoEmpleados());					
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(gastoempleadoDestino,gastoempleados);
				}
				//ARCHITECTURE
				
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
				
				//this.jTableDatosGastoEmpleado.setRowSelectionInterval(this.getIndiceNuevoGastoEmpleado(), this.getIndiceNuevoGastoEmpleado());
				
				int iLastRow =  this.jTableDatosGastoEmpleado.getRowCount () - 1;
				Rectangle rectangle = this.jTableDatosGastoEmpleado.getCellRect(iLastRow, 0, true);
				
				this.jTableDatosGastoEmpleado.scrollRectToVisible(rectangle);
				
				//FILA TOTALES
				if(this.conTotales) {
					//this.crearFilaTotales();
					
					this.inicializarActualizarBindingTablaGastoEmpleado(false);
				}
			} else {
				throw new Exception("DEBEN ESTAR SELECCIONADOS 2 REGISTROS");
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.estaModoCopiar=false;
		}
	}
	
	public void jButtonVerFormGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.jInternalFrameDetalleFormGastoEmpleado.setSelected(true);
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonMostrarOcultarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			Boolean isVisible=this.jPanelParametrosReportesGastoEmpleado.isVisible();
			
			//BYDAN_BUSQUEDAS
			
			this.jTabbedPaneBusquedasGastoEmpleado.setVisible(!isVisible);			
			
			
			this.jPanelParametrosReportesGastoEmpleado.setVisible(!isVisible);
			this.jPanelPaginacionGastoEmpleado.setVisible(!isVisible);
			this.jPanelAccionesGastoEmpleado.setVisible(!isVisible);
							
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.closingInternalFrameGastoEmpleado();
			
			//if(this.jInternalFrameParent==null) {
				//this.dispose();
			/*} else {
				this.setVisible(false);
	        	this.setSelected(false);	
			}*/			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarReporteDinamicoGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameReporteDinamicoGastoEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarImportacionGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameImportacionGastoEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonAbrirOrderByGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			
			this.abrirInicializarFrameOrderByGastoEmpleado();
			
			this.abrirFrameOrderByGastoEmpleado();
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonCerrarOrderByGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			
			this.cerrarFrameOrderByGastoEmpleado();
			
						
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void abrirFrameDetalleGastoEmpleado(Boolean esRelaciones) throws Exception {	    	        
	    try {
			//CAUSA PROBLEMAS, SE ADICIONA EN CONSTRUCTOR, LUEGO SOLO VISIBLE true y false
			//this.jDesktopPane.add(jInternalFrameDetalleFormGastoEmpleado);
			
			if(!esRelaciones) {
				if(this.jInternalFrameDetalleFormGastoEmpleado.isMaximum()) {
					this.jInternalFrameDetalleFormGastoEmpleado.setMaximum(false);
				}								
				
	    		this.jInternalFrameDetalleFormGastoEmpleado.setSize(this.jInternalFrameDetalleFormGastoEmpleado.iWidthFormulario,this.jInternalFrameDetalleFormGastoEmpleado.iHeightFormulario);
	    	} else {
				if(this.iWidthScroll<this.jInternalFrameDetalleFormGastoEmpleado.iWidthFormularioMaximo) {
	    			this.jInternalFrameDetalleFormGastoEmpleado.setSize(this.iWidthScroll,this.iHeightScroll);
				} else {
					if(!this.jInternalFrameDetalleFormGastoEmpleado.isMaximum()) {
						this.jInternalFrameDetalleFormGastoEmpleado.setMaximum(true);
					}
				}
				
				if(this.jInternalFrameDetalleFormGastoEmpleado.jContentPaneDetalleGastoEmpleado.getWidth() > this.getWidth()) {
					this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.setMinimumSize(new Dimension(this.jInternalFrameDetalleFormGastoEmpleado.jContentPaneDetalleGastoEmpleado.getWidth(),GastoEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.setMaximumSize(new Dimension(this.jInternalFrameDetalleFormGastoEmpleado.jContentPaneDetalleGastoEmpleado.getWidth(),GastoEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.setPreferredSize(new Dimension(this.jInternalFrameDetalleFormGastoEmpleado.jContentPaneDetalleGastoEmpleado.getWidth(),GastoEmpleadoConstantesFunciones.ALTO_TABPANE_RELACIONES));
					
					Dimension dimension=new Dimension(); 
					
					
					
				}
	    	}
			
		
	       	this.jInternalFrameDetalleFormGastoEmpleado.setVisible(true);
	        this.jInternalFrameDetalleFormGastoEmpleado.setSelected(true);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirInicializarFrameOrderByGastoEmpleado() throws Exception {	    	        
	    try {
			if(this.jInternalFrameOrderByGastoEmpleado==null) {
				
				if(!this.conCargarMinimo) {
					this.jInternalFrameOrderByGastoEmpleado=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByGastoEmpleado,false,this);
				} else {
					this.jInternalFrameOrderByGastoEmpleado=new OrderByJInternalFrame(STIPO_TAMANIO_GENERAL,this.jButtonAbrirOrderByGastoEmpleado,true,this);
				}
				
				this.jDesktopPane.add(this.jInternalFrameOrderByGastoEmpleado);
				this.jInternalFrameOrderByGastoEmpleado.setVisible(false);
				this.jInternalFrameOrderByGastoEmpleado.setSelected(false);
				
				this.jInternalFrameOrderByGastoEmpleado.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByGastoEmpleado"));
				
				this.inicializarActualizarBindingTablaOrderByGastoEmpleado();
			}
		} catch (final Exception e) {
			
		}
	}
	
	
	
	public void abrirInicializarFrameImportacionGastoEmpleado() throws Exception {	    	        
	    try {
			if(this.jInternalFrameImportacionGastoEmpleado==null) {
				
				this.jInternalFrameImportacionGastoEmpleado=new ImportacionJInternalFrame(GastoEmpleadoConstantesFunciones.SCLASSWEBTITULO,this);			
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameImportacionGastoEmpleado);							
				
				this.jDesktopPane.add(this.jInternalFrameImportacionGastoEmpleado);
				this.jInternalFrameImportacionGastoEmpleado.setVisible(false);
				this.jInternalFrameImportacionGastoEmpleado.setSelected(false);


				this.jInternalFrameImportacionGastoEmpleado.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionGastoEmpleado"));
				this.jInternalFrameImportacionGastoEmpleado.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionGastoEmpleado"));
				this.jInternalFrameImportacionGastoEmpleado.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionGastoEmpleado"));


			}
		} catch (final Exception e) {
			
		}
	}		
	
	
	
	public void abrirInicializarFrameReporteDinamicoGastoEmpleado() throws Exception {	    	        
	    try {
			
			if(this.jInternalFrameReporteDinamicoGastoEmpleado==null) {
				this.jInternalFrameReporteDinamicoGastoEmpleado=new ReporteDinamicoJInternalFrame(GastoEmpleadoConstantesFunciones.SCLASSWEBTITULO,this);	
				
				MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,this.jInternalFrameReporteDinamicoGastoEmpleado);	
	
	
				this.jDesktopPane.add(this.jInternalFrameReporteDinamicoGastoEmpleado);
				this.jInternalFrameReporteDinamicoGastoEmpleado.setVisible(false);
				this.jInternalFrameReporteDinamicoGastoEmpleado.setSelected(false);
	
	
	
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoGastoEmpleado"));
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoGastoEmpleado"));
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoGastoEmpleado"));
	
				this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualGastoEmpleado();
			}

		} catch (final Exception e) {
			
		}
	}	
	
	
	
		
					
	public void cerrarFrameDetalleGastoEmpleado() throws Exception {	    	        
	    try {
			//this.jDesktopPane.add(jInternalFrameDetalleFormGastoEmpleado);
			
	       	this.jInternalFrameDetalleFormGastoEmpleado.setVisible(false);
	        this.jInternalFrameDetalleFormGastoEmpleado.setSelected(false);
			
			//this.jInternalFrameDetalleFormGastoEmpleado.dispose();
			//this.jInternalFrameDetalleFormGastoEmpleado=null;
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }
	}
	
	
	public void abrirFrameReporteDinamicoGastoEmpleado() throws Exception {	    	        
	    try {
			
			this.jInternalFrameReporteDinamicoGastoEmpleado.setVisible(true);
	        this.jInternalFrameReporteDinamicoGastoEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void abrirFrameImportacionGastoEmpleado() throws Exception {	    	        		
	    try {			
			this.jInternalFrameImportacionGastoEmpleado.setVisible(true);
	        this.jInternalFrameImportacionGastoEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}	
	
	
	
	
	
	public void abrirFrameOrderByGastoEmpleado() throws Exception {	    	        		
	    try {
			this.jInternalFrameOrderByGastoEmpleado.setVisible(true);
	        this.jInternalFrameOrderByGastoEmpleado.setSelected(true);			
			
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameOrderByGastoEmpleado() throws Exception {	    	        		
	    try {			
			this.jInternalFrameOrderByGastoEmpleado.setVisible(false);
	        this.jInternalFrameOrderByGastoEmpleado.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameReporteDinamicoGastoEmpleado() throws Exception {			
	    try {
			this.jInternalFrameReporteDinamicoGastoEmpleado.setVisible(false);
	        this.jInternalFrameReporteDinamicoGastoEmpleado.setSelected(false);			
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	public void cerrarFrameImportacionGastoEmpleado() throws Exception {	    	        		
	    try {
			this.jInternalFrameImportacionGastoEmpleado.setVisible(false);
	        this.jInternalFrameImportacionGastoEmpleado.setSelected(false);
		
	    } catch (final java.beans.PropertyVetoException e) {
		
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
	    }		
	}
	
	
	
	
	public void jButtonModificarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try {
			this.modificarGastoEmpleado(evt,-1,false);
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void modificarGastoEmpleado(ActionEvent evt,int rowIndex,Boolean esRelaciones) throws Exception {   
		try {
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
			}
			
			this.habilitarDeshabilitarControlesGastoEmpleado(true);
			//this.isEsNuevoGastoEmpleado=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.actualizarEstadoCeldasBotonesGastoEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesGastoEmpleado(false) ;
			
			if(gastoempleadoSessionBean.getConGuardarRelaciones()) {
			
			}
			
			if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleGastoEmpleado(esRelaciones);
			}
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualGastoEmpleado(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void seleccionarFilaTablaGastoEmpleadoActual() { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void seleccionarGastoEmpleado(ActionEvent evt,int rowIndex) throws Exception {   
		try {
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			int intSelectedRow = 0;	
			
			if(rowIndex>=0) {
				intSelectedRow=rowIndex;
			} else {
				intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
			}
			
			//this.habilitarDeshabilitarControlesGastoEmpleado(true);
			//this.isEsNuevoGastoEmpleado=false;
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
			}
			//ARCHITECTURE
			
			this.jInternalFrameParent.setIdCombosCodigoDesdeBusquedaForeignKey(this.gastoempleado.getId(),this.sTipoBusqueda);
			
			this.dispose();
			
			//this.actualizarEstadoCeldasBotonesGastoEmpleado("ae", isGuardarCambiosEnLote, isEsMantenimientoRelacionado);
			
			//NO FUNCIONA BINDINGS
			/*
			this.inicializarActualizarBindingBotonesGastoEmpleado(false) ;
			
			if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.abrirFrameDetalleGastoEmpleado(esRelaciones);
			}
			*/
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualGastoEmpleado(false) ;
		
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}		
	
	public void setIdCombosCodigoDesdeBusquedaForeignKey(Long id,String sType)throws Exception{
		
		try {
		} catch(Exception e) {
			throw e;
		}
	}
	
			
	
	public void recargarComboTablaEmpleado(List<Empleado> empleadosForeignKey)throws Exception{
		TableColumn tableColumnEmpleado=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO));
		TableCellEditor tableCellEditorEmpleado =tableColumnEmpleado.getCellEditor();

		EmpleadoTableCell empleadoTableCellFk=(EmpleadoTableCell)tableCellEditorEmpleado;

		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.setempleadosForeignKey(empleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//empleadoTableCellFk.setRowActual(intSelectedRow);
			//empleadoTableCellFk.setempleadosForeignKeyActual(empleadosForeignKey);
		//}


		if(empleadoTableCellFk!=null) {
			empleadoTableCellFk.RecargarEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaPais(List<Pais> paissForeignKey)throws Exception{
		TableColumn tableColumnPais=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDPAIS));
		TableCellEditor tableCellEditorPais =tableColumnPais.getCellEditor();

		PaisTableCell paisTableCellFk=(PaisTableCell)tableCellEditorPais;

		if(paisTableCellFk!=null) {
			paisTableCellFk.setpaissForeignKey(paissForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//paisTableCellFk.setRowActual(intSelectedRow);
			//paisTableCellFk.setpaissForeignKeyActual(paissForeignKey);
		//}


		if(paisTableCellFk!=null) {
			paisTableCellFk.RecargarPaissForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaCiudad(List<Ciudad> ciudadsForeignKey)throws Exception{
		TableColumn tableColumnCiudad=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD));
		TableCellEditor tableCellEditorCiudad =tableColumnCiudad.getCellEditor();

		CiudadTableCell ciudadTableCellFk=(CiudadTableCell)tableCellEditorCiudad;

		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.setciudadsForeignKey(ciudadsForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//ciudadTableCellFk.setRowActual(intSelectedRow);
			//ciudadTableCellFk.setciudadsForeignKeyActual(ciudadsForeignKey);
		//}


		if(ciudadTableCellFk!=null) {
			ciudadTableCellFk.RecargarCiudadsForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaAnio(List<Anio> aniosForeignKey)throws Exception{
		TableColumn tableColumnAnio=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDANIO));
		TableCellEditor tableCellEditorAnio =tableColumnAnio.getCellEditor();

		AnioTableCell anioTableCellFk=(AnioTableCell)tableCellEditorAnio;

		if(anioTableCellFk!=null) {
			anioTableCellFk.setaniosForeignKey(aniosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//anioTableCellFk.setRowActual(intSelectedRow);
			//anioTableCellFk.setaniosForeignKeyActual(aniosForeignKey);
		//}


		if(anioTableCellFk!=null) {
			anioTableCellFk.RecargarAniosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	public void recargarComboTablaMes(List<Mes> messForeignKey)throws Exception{
		TableColumn tableColumnMes=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDMES));
		TableCellEditor tableCellEditorMes =tableColumnMes.getCellEditor();

		MesTableCell mesTableCellFk=(MesTableCell)tableCellEditorMes;

		if(mesTableCellFk!=null) {
			mesTableCellFk.setmessForeignKey(messForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//mesTableCellFk.setRowActual(intSelectedRow);
			//mesTableCellFk.setmessForeignKeyActual(messForeignKey);
		//}


		if(mesTableCellFk!=null) {
			mesTableCellFk.RecargarMessForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
		
	
	public void recargarComboTablaEstadoGastoEmpleado(List<EstadoGastoEmpleado> estadogastoempleadosForeignKey)throws Exception{
		TableColumn tableColumnEstadoGastoEmpleado=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO));
		TableCellEditor tableCellEditorEstadoGastoEmpleado =tableColumnEstadoGastoEmpleado.getCellEditor();

		EstadoGastoEmpleadoTableCell estadogastoempleadoTableCellFk=(EstadoGastoEmpleadoTableCell)tableCellEditorEstadoGastoEmpleado;

		if(estadogastoempleadoTableCellFk!=null) {
			estadogastoempleadoTableCellFk.setestadogastoempleadosForeignKey(estadogastoempleadosForeignKey);
		}


		//SIEMPRE rowActual<0 , NO USADO POR EL MOMENTO
		//COMBO DE FILA ACTUAL SE ACTUALIZA, LOS DEMAS USAN EL ANTERIOR COMBO
		//int intSelectedRow = -1;
		//intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();

		//if(intSelectedRow<=0) {
			//estadogastoempleadoTableCellFk.setRowActual(intSelectedRow);
			//estadogastoempleadoTableCellFk.setestadogastoempleadosForeignKeyActual(estadogastoempleadosForeignKey);
		//}


		if(estadogastoempleadoTableCellFk!=null) {
			estadogastoempleadoTableCellFk.RecargarEstadoGastoEmpleadosForeignKey();
			//ACTUALIZA COMBOS DE TABLA-FIN
		}

	}	
	
	
	
	public void jButtonActualizarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingParametrosReportesGastoEmpleado(false);
			
			//if(!this.isEsNuevoGastoEmpleado) {								
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();	
				
				//SE PIEDE INDICE SELECTED CON FILA TOTALES, ASEGURARSE QUE OBJETO ACTUAL ESTE EN FORMULARIO
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
			//}
				
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				
			}
			
			if(this.permiteMantenimiento(this.gastoempleado)) {	
				this.actualizar();
				
				if(!this.isGuardarCambiosEnLote && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
					
					this.isEsNuevoGastoEmpleado=true;
					this.inicializarActualizarBindingTablaGastoEmpleado(false);
					this.isEsNuevoGastoEmpleado=false;
				
				} else {					
					
					//PARA RELACIONADO ACTUALIZAR FILA TOTALES
					this.isEsNuevoGastoEmpleado=true;
					this.procesoActualizarFilaTotales(false,"MANTENIMIENTO");
					this.isEsNuevoGastoEmpleado=false;
				}
						
								
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesGastoEmpleado(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualGastoEmpleado(false);
				
				this.habilitarDeshabilitarControlesGastoEmpleado(false);
			
												
				
				if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
					if(!this.isPostAccionSinCerrar) {
						this.cerrarFrameDetalleGastoEmpleado();
					}
				}
				
				if(this.isPostAccionNuevo) {
					this.jButtonNuevoGastoEmpleadoActionPerformed(evt,gastoempleadoSessionBean.getConGuardarRelaciones());
				} else {
					if(this.isPostAccionSinCerrar) {
						Integer intSelectedRowActual=this.getIndiceActualGastoEmpleado(this.gastoempleado,intSelectedRow);
						
						if(intSelectedRow>-1) {
							this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRowActual, intSelectedRowActual);
							this.jButtonIdActionPerformed(evt,intSelectedRowActual,gastoempleadoSessionBean.getConGuardarRelaciones(),false);
						}
					}
				}
				
				this.cancelar(false);
				
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
			
			if(this.jInternalFrameParent!=null) { //&& this.isEsMantenimientoRelacionado) {
				Boolean esUsoDesdeHijoLocal=true;
				String sTipo="Formulario";
				Boolean conIrServidorAplicacionParent=false;
				Long id=this.gastoempleado.getId();
				ArrayList<String> arrClasses=new ArrayList<String>();
				
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();
				
				generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
				generalEntityParameterGeneral.setsDominio("Formulario");
				generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
				
				this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"FORMULARIO",esControlTabla,conIrServidorAplicacionParent,
					id,this, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.FORM,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
					evt,generalEntityParameterGeneral,this);
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonEliminarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {   
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();	       
							
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				this.gastoempleado.setIsDeleted(true);
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				this.gastoempleado.setIsDeleted(true);
			}
			//ARCHITECTURE
			
			if(this.permiteMantenimiento(this.gastoempleado)) {
				this.eliminar();
				
				if(!this.isGuardarCambiosEnLote && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					this.procesarBusqueda(sAccionBusqueda);
				}
				
				((GastoEmpleadoModel) this.jTableDatosGastoEmpleado.getModel()).fireTableRowsDeleted(intSelectedRow,intSelectedRow);
				
				this.isEsNuevoGastoEmpleado=true;
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
				this.isEsNuevoGastoEmpleado=false;									
					
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingBotonesGastoEmpleado(false);
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualGastoEmpleado(false);
				
				this.habilitarDeshabilitarControlesGastoEmpleado(false);
				
				
				
				if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
					this.cerrarFrameDetalleGastoEmpleado();
				}
			} else {
				JOptionPane.showMessageDialog(this,"ESTE REGISTRO NO PUEDE ACTUALIZARSE","EDITAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}		
	}
		
	public void jButtonCancelarGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {                                         	   	       
	  	try {
			if(jTableDatosGastoEmpleado.getRowCount()>=1) {
				jTableDatosGastoEmpleado.removeRowSelectionInterval(0, jTableDatosGastoEmpleado.getRowCount()-1);						
			}
						
			this.invalidValues=new InvalidValue[0];
			this.habilitarDeshabilitarControlesGastoEmpleado(false);
			this.cancelar(true);			
			this.inicializarActualizarBindingTablaGastoEmpleado(false);
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingBotonesGastoEmpleado(false) ;
			
			//SI ES MANUAL
			//this.inicializarActualizarBindingBotonesManualGastoEmpleado(false) ;
			
			this.isEsNuevoGastoEmpleado=false;
			
			if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME) {
				this.cerrarFrameDetalleGastoEmpleado();
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jButtonGuardarCambiosGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			//this.estaModoGuardarCambios=true;
			
	    	this.guardarCambios();
			
			if(!this.isErrorGuardar) {
				this.procesarBusqueda(this.sAccionBusqueda);
				
				//NO FUNCIONA BINDINGS
				this.inicializarActualizarBindingGastoEmpleado(false);
				
				//SI ES MANUAL
				if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {				
					//this.inicializarActualizarBindingManualGastoEmpleado();				
				}
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
			
			//this.estaModoGuardarCambios=false;
		}
	}
	
	public void jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			
			this.estaModoNuevo=true;
			this.estaModoNuevoGuardarCambios=true;
			
			//LO HACE NUEVOPREPARAR
			//this.iIdNuevoGastoEmpleado--;			
			//GastoEmpleado gastoempleadoAux= new GastoEmpleado();			
			//gastoempleadoAux.setId(this.iIdNuevoGastoEmpleado);
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			this.aumentarTamanioFilaNuevaTablaGastoEmpleado();
			
			if(this.conTotales) {
				this.quitarFilaTotales();
			}
			
			this.nuevoPreparar(true);
			
			this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
			
			this.gastoempleado.setsType("NUEVO_GUARDAR_CAMBIOS");
			
			//LO HACE NUEVOPREPARAR
			/*
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				this.gastoempleadoLogic.getGastoEmpleados().add(this.gastoempleadoAux);
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				this.gastoempleados.add(this.gastoempleadoAux);				
			}
			*/
			
			this.inicializarActualizarBindingTablaGastoEmpleado(false);
			
			this.jTableDatosGastoEmpleado.setRowSelectionInterval(this.getIndiceNuevoGastoEmpleado(), this.getIndiceNuevoGastoEmpleado());
			
			int iLastRow =  this.jTableDatosGastoEmpleado.getRowCount () - 1;
			Rectangle rectangle = this.jTableDatosGastoEmpleado.getCellRect(iLastRow, 0, true);
			
			this.jTableDatosGastoEmpleado.scrollRectToVisible(rectangle);
			
			//FILA TOTALES
			if(this.conTotales) {
				this.crearFilaTotales();
				
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
			}

		} catch(Exception e) {									
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoNuevo=false;
			this.estaModoNuevoGuardarCambios=false;
		}
	}		
	
	public void jButtonRecargarInformacionGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try {
			this.iNumeroPaginacionPagina=0;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
	    	this.recargarInformacion();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingGastoEmpleado(false);
			
			//SI ES MANUAL
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualGastoEmpleado();
			}
			
			//this.abrirFrameTreeGastoEmpleado();
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}	
	}
	
	
	public void jButtonGenerarImportacionGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedReader bufferedReader = null;
		String sXmlStringFile="";
		String sPath="";
		this.arrDatoGeneralMinimos= new  ArrayList<DatoGeneralMinimo>();
		DatoGeneralMinimo datoGeneralMinimo=new DatoGeneralMinimo();
		String sLine="";
		
		try {			
			if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR IMPORTACION DE Gasto EmpleadoS ?", "MANTENIMIENTO DE Gasto Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
				bufferedReader = new BufferedReader(new FileReader(this.jInternalFrameImportacionGastoEmpleado.getFileImportacion().getAbsolutePath()));
								
				while ((sLine = bufferedReader.readLine()) != null) {
					datoGeneralMinimo=new DatoGeneralMinimo();
					datoGeneralMinimo.setsDescripcion(sLine);
					
					this.arrDatoGeneralMinimos.add(datoGeneralMinimo);
				}
				
				this.actualizarParametrosGeneralGastoEmpleado();
						
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {						
					this.gastoempleadoReturnGeneral=gastoempleadoLogic.procesarImportacionGastoEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this.arrDatoGeneralMinimos,this.gastoempleadoParameterGeneral);
						
				} else if(Constantes.ISUSAEJBREMOTE) {
						
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
						
				this.procesarGastoEmpleadoReturnGeneral();
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedReader != null) {
				bufferedReader.close();
			}	
		}				
	}
	
	
	
	public void jButtonAbrirImportacionGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    				
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {
			int iReturnArchivo = this.jInternalFrameImportacionGastoEmpleado.getjFileChooserImportacion().showOpenDialog(this);
 
            if (iReturnArchivo == JFileChooser.APPROVE_OPTION) {
            	this.jInternalFrameImportacionGastoEmpleado.setFileImportacion(this.jInternalFrameImportacionGastoEmpleado.getjFileChooserImportacion().getSelectedFile());
            	
				this.jInternalFrameImportacionGastoEmpleado.getjTextFieldPathArchivoImportacion().setText(this.jInternalFrameImportacionGastoEmpleado.getFileImportacion().getName());
				
				//System.out.println("ARCHIVO ESCOGIDO: "+this.fileImportacionGastoEmpleado.getName());
				
            } else {
                //System.out.println("CANCELAR SELECCION");
				this.jInternalFrameImportacionGastoEmpleado.getjTextFieldPathArchivoImportacion().setText("SELECCION CANCELADA");
            }			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}		
	}
	
	
	public void jButtonGenerarReporteDinamicoGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		BufferedWriter bufferedWriter = null;
		String sXmlStringFile="";
		String sPath="";
		
		try {	
		
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		

		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		
		this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();
		
		this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
		
		
		this.sTipoArchivoReporte=this.sTipoArchivoReporteDinamico;
		
		//this.sTipoReporteExtra="Base";
		
			InputStream reportFile=null;
			InputStream imageFile=null;
			
			imageFile=AuxiliarImagenes.class.getResourceAsStream("LogoReporte.jpg");			
				
		
		
			reportFile = AuxiliarReportes.class.getResourceAsStream("GastoEmpleadoBaseDesign.jrxml");	
			
			sPath=this.parametroGeneralUsuario.getpath_exportar()+"GastoEmpleadoBaseDesign.jrxml";
			
			sXmlStringFile=Funciones2.getStringFromInputStream(reportFile);
						
			bufferedWriter = new BufferedWriter(new FileWriter(sPath));
			
			
			sXmlStringFile=this.actualizarReporteDinamico(sXmlStringFile);
			
			
			bufferedWriter.write(sXmlStringFile);
			
			bufferedWriter.close();
			
			try{JasperCompileManager.compileReportToFile(sPath);}catch(Exception e){e.printStackTrace();}
			
			this.actualizarVariablesTipoReporte(false,true,false,sPath);
			
			/*
			this.esReporteDinamico=true;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");
			this.sTipoReporteExtra="";
			*/
			
			this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados );

			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				//DEBE APARECER EL REPORTE DIRECTAMENTE
				//JOptionPane.showMessageDialog(this,"GENERADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {			
			if (bufferedWriter != null) {
				bufferedWriter.close();
			}	
		}
	}		
	
	
	public String actualizarReporteDinamico(String sXmlStringFile) {				
		Reporte reporte=new Reporte();
		Integer iAnchoMaximoVertical=535;//781,782
		Integer iAnchoMaximoHorizontal=782;
		Integer iAnchoSum=0;
		Integer iAnchoColumna=0;
		
		Integer iAnchoMargenes=60;
		String sWidthGrafico="535";
		
		for(int index:this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empresa_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empresa_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empresa_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empresa_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Sucursal_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Sucursal_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Sucursal_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Sucursal_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Empleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Empleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Empleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Empleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ejercicio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ejercicio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ejercicio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ejercicio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDPAIS:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Pais_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Pais_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Pais_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Pais_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Ciudad_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Ciudad_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Ciudad_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Ciudad_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDANIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Anio_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Anio_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Anio_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Anio_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDMES:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Mes_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Mes_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Mes_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Mes_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_DIA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_a_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_a_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_a_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_a_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_Usuario_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_Usuario_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_Usuario_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_Usuario_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO:
					iAnchoColumna=100;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_EstadoGastoEmpleado_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_EstadoGastoEmpleado_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_EstadoGastoEmpleado_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_EstadoGastoEmpleado_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIngresoActual_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIngresoActual_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIngresoActual_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIngresoActual_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIngresoOtro_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIngresoOtro_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIngresoOtro_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIngresoOtro_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talIngreso_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talIngreso_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talIngreso_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talIngreso_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoVivienda_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoVivienda_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoVivienda_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoVivienda_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoEducacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoEducacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoEducacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoEducacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoSalud_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoSalud_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoSalud_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoSalud_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoVestimenta_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoVestimenta_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoVestimenta_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoVestimenta_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_stoAlimentacion_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_stoAlimentacion_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_stoAlimentacion_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_stoAlimentacion_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talGastoActual_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talGastoActual_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talGastoActual_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talGastoActual_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_talGasto_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_talGasto_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_talGasto_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_talGasto_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_FECHA:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_cha_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_cha_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_cha_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_cha_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_rcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_rcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_rcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_rcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorMaximo_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorMaximo_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorMaximo_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorMaximo_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE:
					iAnchoColumna=50;

					if(iAnchoSum+iAnchoColumna<=iAnchoMaximoHorizontal) {
						sXmlStringFile=sXmlStringFile.replace("<!--col_lorMaximoPorcentaje_col", "");
						sXmlStringFile=sXmlStringFile.replace("col_lorMaximoPorcentaje_col-->", "");

						sXmlStringFile=sXmlStringFile.replace("colancho_lorMaximoPorcentaje_colancho", iAnchoColumna.toString());
						sXmlStringFile=sXmlStringFile.replace("colx_lorMaximoPorcentaje_colx", iAnchoSum.toString());

						iAnchoSum+=iAnchoColumna;
					}

					break;
					
				default :
					break;
			}
		}
		
		iAnchoSum+=iAnchoMargenes;
		
		if(iAnchoSum>iAnchoMaximoVertical) {
			sXmlStringFile=sXmlStringFile.replace("595", "842");
			//sXmlStringFile=sXmlStringFile.replace("842", "595");
			sXmlStringFile=sXmlStringFile.replace("535", "782");
			sXmlStringFile=sXmlStringFile.replace("Portrait", "Landscape");			
			sWidthGrafico="782";
		
		} else {
			sXmlStringFile=sXmlStringFile.replace("842", "595");
			//sXmlStringFile=sXmlStringFile.replace("595", "842");
			sXmlStringFile=sXmlStringFile.replace("782", "535");
			sXmlStringFile=sXmlStringFile.replace("Landscape", "Portrait");
			sWidthGrafico="535";
		}
		
		if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjCheckBoxConGraficoDinamico().isSelected()) {
			sXmlStringFile=this.actualizarGraficoReporteDinamico(sXmlStringFile,sWidthGrafico);
		} else {
			sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "30");
		}
		
		return sXmlStringFile;
	}
	
	
	
	public String actualizarGraficoReporteDinamico(String sXmlStringFile,String sWidthGrafico) {		
		String strGrafico="";		
		String sTipo="NORMAL";
		String strCategorySeries="";
		String sNombreCampoCategoria="";
		String sNombreCampoCategoriaValor="";
		Reporte reporte=new Reporte();
		Reporte reporteCategoriaValor=new Reporte();
		Reporte reporteTipoGraficoReporte=new Reporte();
		Boolean existe=false;
		
		sXmlStringFile=sXmlStringFile.replace("colancho_summary_colancho", "280");
		
		//CATEGORIA GRAFICO				
		reporte=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaGrafico().getSelectedItem());
				
		//TIPO GRAFICO REPORTE
		reporteTipoGraficoReporte=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposGraficosReportesDinamico().getSelectedItem());
		
		String sTipoGraficoReporte=reporteTipoGraficoReporte.getsCodigo();
		
		switch(reporte.getsCodigo()) {
			
				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoria="id_empresa";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoria="id_sucursal";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoria="id_empleado";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoria="id_ejercicio";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoria="id_pais";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoria="id_ciudad";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoria="id_anio";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoria="id_mes";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_DIA:
					sNombreCampoCategoria="dia";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoria="id_usuario";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO:
					sNombreCampoCategoria="id_estado_gasto_empleado";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL:
					sNombreCampoCategoria="total_ingreso_actual";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO:
					sNombreCampoCategoria="total_ingreso_otro";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO:
					sNombreCampoCategoria="total_ingreso";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA:
					sNombreCampoCategoria="gasto_vivienda";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION:
					sNombreCampoCategoria="gasto_educacion";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD:
					sNombreCampoCategoria="gasto_salud";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA:
					sNombreCampoCategoria="gasto_vestimenta";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION:
					sNombreCampoCategoria="gasto_alimentacion";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL:
					sNombreCampoCategoria="total_gasto_actual";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO:
					sNombreCampoCategoria="total_gasto";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoria="fecha";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE:
					sNombreCampoCategoria="porcentaje";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO:
					sNombreCampoCategoria="valor_maximo";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE:
					sNombreCampoCategoria="valor_maximo_porcentaje";
					break;
					
			default :
				break;
		}		
		//CATEGORIA GRAFICO
		
		//CATEGORIA VALOR				
		reporteCategoriaValor=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaValor().getSelectedItem());
		
		switch(reporteCategoriaValor.getsCodigo()) {
			
				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA:
					sNombreCampoCategoriaValor="id_empresa";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL:
					sNombreCampoCategoriaValor="id_sucursal";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO:
					sNombreCampoCategoriaValor="id_empleado";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO:
					sNombreCampoCategoriaValor="id_ejercicio";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDPAIS:
					sNombreCampoCategoriaValor="id_pais";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD:
					sNombreCampoCategoriaValor="id_ciudad";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDANIO:
					sNombreCampoCategoriaValor="id_anio";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDMES:
					sNombreCampoCategoriaValor="id_mes";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_DIA:
					sNombreCampoCategoriaValor="dia";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO:
					sNombreCampoCategoriaValor="id_usuario";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO:
					sNombreCampoCategoriaValor="id_estado_gasto_empleado";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL:
					sNombreCampoCategoriaValor="total_ingreso_actual";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO:
					sNombreCampoCategoriaValor="total_ingreso_otro";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO:
					sNombreCampoCategoriaValor="total_ingreso";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA:
					sNombreCampoCategoriaValor="gasto_vivienda";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION:
					sNombreCampoCategoriaValor="gasto_educacion";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD:
					sNombreCampoCategoriaValor="gasto_salud";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA:
					sNombreCampoCategoriaValor="gasto_vestimenta";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION:
					sNombreCampoCategoriaValor="gasto_alimentacion";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL:
					sNombreCampoCategoriaValor="total_gasto_actual";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO:
					sNombreCampoCategoriaValor="total_gasto";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_FECHA:
					sNombreCampoCategoriaValor="fecha";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE:
					sNombreCampoCategoriaValor="porcentaje";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO:
					sNombreCampoCategoriaValor="valor_maximo";
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE:
					sNombreCampoCategoriaValor="valor_maximo_porcentaje";
					break;
					
			default :
				break;
		}	
		//CATEGORIA VALOR
		
		//VALORES GRAFICO
		for(int index:this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasValoresGrafico().getSelectedIndices()) {
			reporte=(Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasValoresGrafico().getModel().getElementAt(index);
			
			switch(reporte.getsCodigo()) {
				
				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empresa",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empresa");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Sucursal",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_sucursal");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_empleado");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ejercicio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ejercicio");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDPAIS:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Pais",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_pais");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Ciudad",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_ciudad");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDANIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Anio",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_anio");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDMES:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Mes",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_mes");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_DIA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Dia",sNombreCampoCategoria,sNombreCampoCategoriaValor,"dia");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Usuario",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_usuario");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Estado Gasto Empleado",sNombreCampoCategoria,sNombreCampoCategoriaValor,"id_estado_gasto_empleado");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Ingreso Actual",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_ingreso_actual");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Ingreso Otro",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_ingreso_otro");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Ingreso",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_ingreso");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Vivienda",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_vivienda");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Educacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_educacion");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Salud",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_salud");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Vestimenta",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_vestimenta");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Gasto Alimentacion",sNombreCampoCategoria,sNombreCampoCategoriaValor,"gasto_alimentacion");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Gasto Actual",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_gasto_actual");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Total Gasto",sNombreCampoCategoria,sNombreCampoCategoriaValor,"total_gasto");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_FECHA:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Fecha",sNombreCampoCategoria,sNombreCampoCategoriaValor,"fecha");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Porcentaje",sNombreCampoCategoria,sNombreCampoCategoriaValor,"porcentaje");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Maximo",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_maximo");
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE:
					strCategorySeries+=FuncionesReporte.getStringCategoryGraficoNormalReporte(sTipoGraficoReporte,"Valor Maximo Porcentaje",sNombreCampoCategoria,sNombreCampoCategoriaValor,"valor_maximo_porcentaje");
					break;
					
				default :
					break;
			}
		}
		//VALORES GRAFICO
		//if(sTipoGraficoReporte.equals("BARRAS") || sTipoGraficoReporte.equals("BARRAS_3D") || sTipoGraficoReporte.equals("BARRAS_XY") ||
		//   sTipoGraficoReporte.equals("PASTEL") || sTipoGraficoReporte.equals("PASTEL_3D") || sTipoGraficoReporte.equals("APILADO")) {
			
			existe=true;
			strGrafico=FuncionesReporte.getStringGraficoReporte(sTipoGraficoReporte,sWidthGrafico,strCategorySeries);			
		//}
		
		if(existe) {
			sXmlStringFile=sXmlStringFile.replace("<!--GRAFICO-->", strGrafico);
		}												
		
		return sXmlStringFile;
	}
	
	
	//@SuppressWarnings("deprecation")
	
	public void jButtonGenerarExcelReporteDinamicoGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {		
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado";//.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		Boolean existeFilas=false;
		
		Workbook workbook = null;
		FileOutputStream fileOutputStream=null;
		Reporte reporte=new Reporte();
		
		try {
			
			if(sTipoArchivoReporte=="EXCEL2") {
				workbook = new HSSFWorkbook();
				sPath+=".xls";
			
			} else if(sTipoArchivoReporte=="EXCEL2_2") {
				workbook = new XSSFWorkbook();
				sPath+=".xlsx";			
			}
		
			Sheet sheet = workbook.createSheet("GastoEmpleados");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			Row row = sheet.createRow(iRow);
			Cell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");
			
			for(int index:this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getSelectedIndices()) {
				reporte=(Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().getModel().getElementAt(index);
				
				switch(reporte.getsCodigo()) {
					
				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getempresa_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getsucursal_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getejercicio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDPAIS:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDPAIS);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getpais_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getciudad_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDANIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDANIO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getanio_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDMES:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDMES);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getmes_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_DIA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_DIA);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getdia());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getusuario_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getestadogastoempleado_descripcion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.gettotal_ingreso_actual());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.gettotal_ingreso_otro());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.gettotal_ingreso());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getgasto_vivienda());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getgasto_educacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getgasto_salud());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getgasto_vestimenta());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getgasto_alimentacion());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.gettotal_gasto_actual());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.gettotal_gasto());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_FECHA:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_FECHA);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getfecha());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getporcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getvalor_maximo());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;

				case GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE:
					iRow=0;

					if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

					cell = row.createCell(iCell);
					cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE);
					iRow++;

					for(GastoEmpleado gastoempleado:gastoempleadosSeleccionados) {
						if(!existeFilas) {row = sheet.createRow(iRow);} else {row=sheet.getRow(iRow);}

						cell = row.createCell(iCell);
						cell.setCellValue(gastoempleado.getvalor_maximo_porcentaje());
						iRow++;
					}

					existeFilas=true;
					iCell++;
					break;
					
					default :
						break;
				}
			}
			
			
			//if(conCabecera) {
			//	this.getFilaCabeceraExportarExcelGastoEmpleado(row);				
			//	iRow++;
			//}				
			
			//for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
			//	row = sheet.createRow(iRow);
				
			//	this.getFilaDatosExportarExcelGastoEmpleado(gastoempleadoAux,row);
				
			//	iRow++;
			//}
			
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}				
	}	
	
	
	
	
	public void buscarPorId(Long idActual) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.idActual=idActual;
			this.iNumeroPaginacionPagina=0;
			
			this.procesarBusqueda("PorId");
				    	
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingGastoEmpleado(false);
			
			//SI ES MANUAL
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				//this.inicializarActualizarBindingManualGastoEmpleado();
			}	
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger);
			
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonAnterioresGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion-=this.iNumeroPaginacion;
			/*
			if(this.iNumeroPaginacion<0) {
				this.iNumeroPaginacion=0;
			}
			*/
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.anteriores();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingGastoEmpleado(false);
			
			//SI ES MANUAL
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualGastoEmpleado();
			}
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void jButtonSiguientesGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {    		
		try	{
			//this.iNumeroPaginacion+=this.iNumeroPaginacion;
			//this.iNumeroPaginacionPagina=10;			
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}
			
			this.siguientes();
			
			//NO FUNCIONA BINDINGS
			this.inicializarActualizarBindingGastoEmpleado(false);
			
			//SI ES MANUAL
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
	    		//this.inicializarActualizarBindingManualGastoEmpleado();
			}		
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
			
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}
	
	public void aumentarTamanioFilaNuevaTablaGastoEmpleado() throws Exception {		
		Dimension dimensionMinimum=this.jTableDatosGastoEmpleado.getMinimumSize();
		Dimension dimensionMaximum=this.jTableDatosGastoEmpleado.getMaximumSize();
		Dimension dimensionPreferred=this.jTableDatosGastoEmpleado.getPreferredSize();
	
		double iHeightConFilaNueva=dimensionPreferred.getHeight();
		
		iHeightConFilaNueva+=this.jTableDatosGastoEmpleado.getRowHeight();
		
		dimensionMinimum.setSize(dimensionMinimum.getWidth(),iHeightConFilaNueva);
		dimensionMaximum.setSize(dimensionMaximum.getWidth(),iHeightConFilaNueva);
		dimensionPreferred.setSize(dimensionPreferred.getWidth(),iHeightConFilaNueva);
		
		this.jTableDatosGastoEmpleado.setMinimumSize(dimensionMinimum);
		this.jTableDatosGastoEmpleado.setMaximumSize(dimensionMaximum);
		this.jTableDatosGastoEmpleado.setPreferredSize(dimensionPreferred);	
	}
	
	public void inicializarActualizarBindingGastoEmpleado(Boolean esInicializar) throws Exception {
		this.inicializarActualizarBindingGastoEmpleado(esInicializar,true);
	}
	
	public void inicializarActualizarBindingGastoEmpleado(Boolean esInicializar,Boolean conTabla) throws Exception {		
		if(conTabla) {
			this.inicializarActualizarBindingTablaGastoEmpleado(esInicializar);
		}
		
		this.inicializarActualizarBindingBotonesGastoEmpleado(esInicializar);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			try{this.inicializarActualizarBindingBusquedasGastoEmpleado(esInicializar);}catch(Exception e){e.printStackTrace();}
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesGastoEmpleado(esInicializar) ;
			
			this.inicializarActualizarBindingParametrosReportesGastoEmpleado(esInicializar) ;
		}
		
		if(esInicializar) {
			if( !GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA ||
			   	!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			   	
			}
		}
	}
	
	public void inicializarActualizarBindingManualGastoEmpleado() throws Exception {		
		//NO SE NECESITA HACER BINDING OTRA VEZ
		//this.inicializarActualizarBindingTablaGastoEmpleado();
		
		this.inicializarActualizarBindingBotonesManualGastoEmpleado(true);
		
		//FUNCIONALIDAD_RELACIONADO
		if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			
			this.inicializarActualizarBindingBusquedasManualGastoEmpleado();			
			
			
			//this.inicializarActualizarBindingtiposArchivosReportesAccionesGastoEmpleado() ;
			
			this.inicializarActualizarBindingParametrosReportesPostAccionesManualGastoEmpleado(false) ;			
			
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesPostAccionesManualGastoEmpleado(Boolean esSetControles) throws Exception {
		try	{					
			if(!esSetControles) {
				this.isSeleccionarTodos=this.jCheckBoxSeleccionarTodosGastoEmpleado.isSelected();
				this.isSeleccionados=this.jCheckBoxSeleccionadosGastoEmpleado.isSelected();
				
				
				this.conGraficoReporte=this.jCheckBoxConGraficoReporteGastoEmpleado.isSelected();															
				
				
				if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
				this.isPostAccionNuevo=this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionNuevoGastoEmpleado.isSelected();
				this.isPostAccionSinCerrar=this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionSinCerrarGastoEmpleado.isSelected();
				this.isPostAccionSinMensaje=this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionSinMensajeGastoEmpleado.isSelected();
				}
			
			} else {
				this.jCheckBoxSeleccionarTodosGastoEmpleado.setSelected(this.isSeleccionarTodos);
				this.jCheckBoxSeleccionadosGastoEmpleado.setSelected(this.isSeleccionados);
				
				
				this.jCheckBoxConGraficoReporteGastoEmpleado.setSelected(this.conGraficoReporte);				
				
				
				if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
				this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionNuevoGastoEmpleado.setSelected(this.isPostAccionNuevo);
				this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionSinCerrarGastoEmpleado.setSelected(this.isPostAccionSinCerrar);
				this.jInternalFrameDetalleFormGastoEmpleado.jCheckBoxPostAccionSinMensajeGastoEmpleado.setSelected(this.isPostAccionSinMensaje);
				}
			}
			
			
			if(this.jComboBoxTiposPaginacionGastoEmpleado.getSelectedItem()!=null) {
				this.sTipoPaginacion=((Reporte)this.jComboBoxTiposPaginacionGastoEmpleado.getSelectedItem()).getsCodigo();			
			}
			
			
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.sTipoAccionFormulario=((Reporte)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.getSelectedItem()).getsCodigo();
			}
			
			
			
			if(!this.conCargarMinimo) {
				this.sTipoArchivoReporte=((Reporte)this.jComboBoxTiposArchivosReportesGastoEmpleado.getSelectedItem()).getsCodigo();			
				
				if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
					this.sTipoArchivoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposArchivosReportesDinamico().getSelectedItem()).getsCodigo();			
				}
				
				this.sTipoRelacion=((Reporte)this.jComboBoxTiposRelacionesGastoEmpleado.getSelectedItem()).getsCodigo();
									
				this.sTipoAccion=((Reporte)this.jComboBoxTiposAccionesGastoEmpleado.getSelectedItem()).getsCodigo();
													
				this.sTipoSeleccionar=((Reporte)this.jComboBoxTiposSeleccionarGastoEmpleado.getSelectedItem()).getsCodigo();
									
				this.sTipoReporte=((Reporte)this.jComboBoxTiposReportesGastoEmpleado.getSelectedItem()).getsCodigo();							
					
				if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
					this.sTipoReporteDinamico=((Reporte)this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposReportesDinamico().getSelectedItem()).getsCodigo();							
				}
				
				this.sTipoGraficoReporte=((Reporte)this.jComboBoxTiposGraficosReportesGastoEmpleado.getSelectedItem()).getsCodigo();											
			}			
			
			this.sValorCampoGeneral=this.jTextFieldValorCampoGeneralGastoEmpleado.getText();						
			
			
			
		} catch(Exception e) {
			throw e;
		}
	}
	
	public void inicializarActualizarBindingParametrosReportesGastoEmpleado(Boolean esInicializar) throws Exception {
		try	{	
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this. inicializarActualizarBindingParametrosReportesPostAccionesManualGastoEmpleado(false);
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	public void inicializarActualizarBindingtiposArchivosReportesAccionesGastoEmpleado() throws Exception {
		try	{
			if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
				this.inicializarActualizarBindingtiposArchivosReportesAccionesManualGastoEmpleado();
			} else {
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleGastoEmpleado() throws Exception {
		//TIPOS ACCIONES FORMULARIO	
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.removeAllItems();
				
		for(Reporte reporte:this.tiposAccionesFormulario) {
			this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.addItem(reporte);
		}
		
		//TIPOS ACCIONES FORMULARIO
	}
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesAccionesManualGastoEmpleado() throws Exception {
		try	{
			
			//TIPOS ARCHIVOS REPORTES
			this.jComboBoxTiposArchivosReportesGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposArchivosReportes) {
				this.jComboBoxTiposArchivosReportesGastoEmpleado.addItem(reporte);
			}
			
			
				
			//TIPOS REPORTES
			this.jComboBoxTiposReportesGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposReportes) {
				this.jComboBoxTiposReportesGastoEmpleado.addItem(reporte);
			}
			
			
			//TIPOS GRAFICOS REPORTES
			this.jComboBoxTiposGraficosReportesGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposGraficosReportes) {
				this.jComboBoxTiposGraficosReportesGastoEmpleado.addItem(reporte);
			}
			
			
			//TIPOS PAGINACION
			this.jComboBoxTiposPaginacionGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposPaginacion) {
				this.jComboBoxTiposPaginacionGastoEmpleado.addItem(reporte);
			}
			
			
			if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				this.jComboBoxTiposPaginacionGastoEmpleado.setSelectedItem(Funciones2.getTipoPaginacionDefecto("NORMAL",this.tiposPaginacion));
			} else {
				this.jComboBoxTiposPaginacionGastoEmpleado.setSelectedItem(Funciones2.getTipoPaginacionDefecto("RELACIONADO",this.tiposPaginacion));
			}
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposRelacionesGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposRelaciones) {
				this.jComboBoxTiposRelacionesGastoEmpleado.addItem(reporte);
			}
			
			//TIPOS ACCIONES
				
				
			//TIPOS ACCIONES	
			this.jComboBoxTiposAccionesGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposAcciones) {
				this.jComboBoxTiposAccionesGastoEmpleado.addItem(reporte);
			}
			
			//TIPOS ACCIONES			
			
			
			
			//TIPOS ACCIONES FORMULARIO	
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
				this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.removeAllItems();
				
				for(Reporte reporte:this.tiposAccionesFormulario) {
					this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.addItem(reporte);
				}
				
			}
			//TIPOS ACCIONES FORMULARIO
			
			
			
			//TIPOS SELECCIONAR
			this.jComboBoxTiposSeleccionarGastoEmpleado.removeAllItems();
				
			for(Reporte reporte:this.tiposSeleccionar) {
				this.jComboBoxTiposSeleccionarGastoEmpleado.addItem(reporte);
			}
			
			
			if(this.tiposSeleccionar!=null && this.tiposSeleccionar.size()>1) {
				this.jComboBoxTiposSeleccionarGastoEmpleado.setSelectedIndex(1);
			}
				
			//REPORTE DINAMICO
			this.inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualGastoEmpleado();
							
			//TIPOS COLUMNAS SELECT
			//TIPOS SELECCIONAR
			
			
		} catch(Exception e) {
			throw e;
		}
	}		
	
	
	@SuppressWarnings("unchecked")
	public void inicializarActualizarBindingtiposArchivosReportesDinamicoAccionesManualGastoEmpleado() throws Exception {
		try	{
			DefaultListModel<Reporte> defaultListModel=new DefaultListModel<Reporte>();
			
			
			//TIPOS ARCHIVOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposArchivosReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposArchivosReportesDinamico) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposArchivosReportesDinamico().addItem(reporte);
				}
				
			}
			
			//TIPOS REPORTES DINAMICO
			if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposReportesDinamico().removeAllItems();
					
				for(Reporte reporte:this.tiposReportesDinamico) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposReportesDinamico().addItem(reporte);
				}
				
			}
			
			defaultListModel=new DefaultListModel<Reporte>();
			
			if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
				
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposColumnasSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasSelectReporte().setModel(defaultListModel);									
						
				}	
					
				//TIPOS RELACIONES SELECT
				//TIPOS SELECCIONAR
				defaultListModel=new DefaultListModel<Reporte>();
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjListRelacionesSelectReporte()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListRelacionesSelectReporte().removeAll();
						
					for(Reporte reporte:this.tiposRelacionesSelect) {
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListRelacionesSelectReporte().setModel(defaultListModel);									
						
				}	
				
				
				//TIPOS COLUMNAS CATEGORIA DINAMICO
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaGrafico()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaGrafico().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoria=GastoEmpleadoConstantesFunciones.getTiposSeleccionarGastoEmpleado(true,true,false,true,true);
						
					for(Reporte reporte:tiposColumnasCategoria) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaGrafico().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS CATEGORIA VALOR DINAMICO
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaValor()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaValor().removeAllItems();
						
					ArrayList<Reporte> tiposColumnasCategoriaValor=GastoEmpleadoConstantesFunciones.getTiposSeleccionarGastoEmpleado(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasCategoriaValor) {//this.tiposSeleccionar
						this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxColumnaCategoriaValor().addItem(reporte);
					}
					
				}
					
				//TIPOS COLUMNAS VALOR
				defaultListModel=new DefaultListModel<Reporte>();
					
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasValoresGrafico()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasValoresGrafico().removeAll();
						
					ArrayList<Reporte> tiposColumnasValor=GastoEmpleadoConstantesFunciones.getTiposSeleccionarGastoEmpleado(false,false,true,false,false);
						
					for(Reporte reporte:tiposColumnasValor) {//this.tiposSeleccionar
						defaultListModel.addElement(reporte);
					}						
						
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjListColumnasValoresGrafico().setModel(defaultListModel);									
						
				}
					
				//TIPOS GRAFICOS REPORTES DINAMICOS
				if(this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposGraficosReportesDinamico()!=null) {
					this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposGraficosReportesDinamico().removeAllItems();
						
					for(Reporte reporte:this.tiposGraficosReportes) {
						this.jInternalFrameReporteDinamicoGastoEmpleado.getjComboBoxTiposGraficosReportesDinamico().addItem(reporte);
					}
					
				}
			
			
			}
		} catch(Exception e) {
			throw e;
		}
	}	
	
	
	
	public void inicializarActualizarBindingBusquedasManualGastoEmpleado()  throws Exception {				
		//BYDAN_BUSQUEDAS		
		
		if(this.jComboBoxid_anioFK_IdAnioGastoEmpleado.getSelectedItem()!=null){this.id_anioFK_IdAnio=((Anio)this.jComboBoxid_anioFK_IdAnioGastoEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.getSelectedItem()!=null){this.id_ciudadFK_IdCiudad=((Ciudad)this.jComboBoxid_ciudadFK_IdCiudadGastoEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.getSelectedItem()!=null){this.id_empleadoFK_IdEmpleado=((Empleado)this.jComboBoxid_empleadoFK_IdEmpleadoGastoEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.getSelectedItem()!=null){this.id_estado_gasto_empleadoFK_IdEstadoGastoEmpleado=((EstadoGastoEmpleado)this.jComboBoxid_estado_gasto_empleadoFK_IdEstadoGastoEmpleadoGastoEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_mesFK_IdMesGastoEmpleado.getSelectedItem()!=null){this.id_mesFK_IdMes=((Mes)this.jComboBoxid_mesFK_IdMesGastoEmpleado.getSelectedItem()).getId();}
		if(this.jComboBoxid_paisFK_IdPaisGastoEmpleado.getSelectedItem()!=null){this.id_paisFK_IdPais=((Pais)this.jComboBoxid_paisFK_IdPaisGastoEmpleado.getSelectedItem()).getId();}
		
	}
	
	
	
	
	public void inicializarActualizarBindingBusquedasGastoEmpleado(Boolean esInicializar) throws Exception {				
		if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			
			this.inicializarActualizarBindingBusquedasManualGastoEmpleado();			
			
		} else {
		}
	}		
		
	public void inicializarActualizarBindingTablaGastoEmpleado() throws Exception {
		this.inicializarActualizarBindingTablaGastoEmpleado(false);
	}
	
	
	public void inicializarActualizarBindingTablaOrderByGastoEmpleado() {
		//TABLA OrderBy	
		TableColumn tableColumn=new TableColumn();
		Integer iWidthTableDefinicionOrderBy=0;			
			
		this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy().setModel(new TablaGeneralOrderByModel(this.arrOrderBy));
					
		//DEFINIR RENDERERS OrderBy
		tableColumn=this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy(),OrderBy.ISSELECTED));			
		//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		iWidthTableDefinicionOrderBy+=50;
					
		tableColumn=this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy(),OrderBy.NOMBRE));
		//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
					
		tableColumn.setPreferredWidth(150); 	 
		tableColumn.setWidth(150); 	 
		tableColumn.setMinWidth(150);
		tableColumn.setMaxWidth(150);
				
		iWidthTableDefinicionOrderBy+=150;
					
		//tableColumn=this.jTableDatosGastoEmpleadoOrderBy.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleadoOrderBy,OrderBy.NOMBREDB));			
		////tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
								
		tableColumn=this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy().getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy(),OrderBy.ESDESC));
		//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
												
		tableColumn.setPreferredWidth(50); 	 
		tableColumn.setWidth(50); 	 
		tableColumn.setMinWidth(50);
		tableColumn.setMaxWidth(50);
				
		((AbstractTableModel) this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy().getModel()).fireTableDataChanged();
				
		iWidthTableDefinicionOrderBy+=50;
	}
	
	
	
	public void inicializarActualizarBindingTablaGastoEmpleado(Boolean esInicializar) throws Exception {
		Boolean isNoExiste=false;
		Integer iCountNumeroColumnasNormal=0;
		Integer iCountNumeroColumnasFk=0;
		
		this.iWidthTableDefinicion=0;
		
		int iSizeTabla=0;
		
		iSizeTabla=this.getSizeTablaDatos();
		
	if(esInicializar || ConstantesSwing.FORZAR_INICIALIZAR_TABLA) {//esInicializar
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			isNoExiste=gastoempleadoLogic.getGastoEmpleados().size()==0;
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
			isNoExiste=gastoempleados.size()==0;
		}
		//ARCHITECTURE
			
		if(isNoExiste) {
			if(this.iNumeroPaginacion-this.iNumeroPaginacion>0) {
				this.iNumeroPaginacion-=this.iNumeroPaginacion;
			}
		}
		
		TableColumn tableColumn=new TableColumn();
		
		if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			
			//ARCHITECTURE
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.jTableDatosGastoEmpleado.setModel(new GastoEmpleadoModel(this.gastoempleadoLogic.getGastoEmpleados(),this));
			} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
				this.jTableDatosGastoEmpleado.setModel(new GastoEmpleadoModel(this.gastoempleados,this));
			}
			//ARCHITECTURE
			
							
			
			
			if(this.jInternalFrameOrderByGastoEmpleado!=null && this.jInternalFrameOrderByGastoEmpleado.getjTableDatosOrderBy()!=null) {
				this.inicializarActualizarBindingTablaOrderByGastoEmpleado();
			}
			
								
			//DEFINIR RENDERERS
			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,Constantes2.S_SELECCIONAR));
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
			tableColumn.setCellRenderer(new BooleanRenderer(true,"Seleccionar "+GastoEmpleadoConstantesFunciones.SCLASSWEBTITULO,gastoempleadoConstantesFunciones.resaltarSeleccionarGastoEmpleado,iSizeTabla,true,false,"","",this));
			tableColumn.setCellEditor(new BooleanEditorRenderer(true,"Seleccionar "+GastoEmpleadoConstantesFunciones.SCLASSWEBTITULO,gastoempleadoConstantesFunciones.resaltarSeleccionarGastoEmpleado,false,"","",this));			
			
			tableColumn.setPreferredWidth(50); 	 
			tableColumn.setWidth(50); 	 
			tableColumn.setMinWidth(50); 
			tableColumn.setMaxWidth(50); 
			
			this.iWidthTableDefinicion+=50;
			
			


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_ID));

		if(this.gastoempleadoConstantesFunciones.mostraridGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_ID,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltaridGastoEmpleado,this.gastoempleadoConstantesFunciones.activaridGastoEmpleado,iSizeTabla,this,true,"idGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltaridGastoEmpleado,this.gastoempleadoConstantesFunciones.activaridGastoEmpleado,this,true,"idGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(50);
			tableColumn.setWidth(50);
			tableColumn.setMinWidth(50);
			tableColumn.setMaxWidth(50);

			this.iWidthTableDefinicion+=50;
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA));

		if(this.gastoempleadoConstantesFunciones.mostrarid_empresaGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EmpresaTableCell(this.empresasForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_empresaGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_empresaGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new EmpresaTableCell(this.empresasForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_empresaGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_empresaGastoEmpleado,false,"id_empresaGastoEmpleado","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL));

		if(this.gastoempleadoConstantesFunciones.mostrarid_sucursalGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new SucursalTableCell(this.sucursalsForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_sucursalGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_sucursalGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new SucursalTableCell(this.sucursalsForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_sucursalGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_sucursalGastoEmpleado,false,"id_sucursalGastoEmpleado","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO));

		if(this.gastoempleadoConstantesFunciones.mostrarid_empleadoGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EmpleadoTableCell(this.empleadosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_empleadoGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_empleadoGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new EmpleadoTableCell(this.empleadosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_empleadoGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_empleadoGastoEmpleado,true,"id_empleadoGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,100);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO));

		if(this.gastoempleadoConstantesFunciones.mostrarid_ejercicioGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new EjercicioTableCell(this.ejerciciosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_ejercicioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_ejercicioGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new EjercicioTableCell(this.ejerciciosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_ejercicioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_ejercicioGastoEmpleado,false,"id_ejercicioGastoEmpleado","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDPAIS));

		if(this.gastoempleadoConstantesFunciones.mostrarid_paisGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDPAIS,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new PaisTableCell(this.paissForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_paisGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_paisGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new PaisTableCell(this.paissForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_paisGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_paisGastoEmpleado,true,"id_paisGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD));

		if(this.gastoempleadoConstantesFunciones.mostrarid_ciudadGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new CiudadTableCell(this.ciudadsForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_ciudadGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_ciudadGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new CiudadTableCell(this.ciudadsForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_ciudadGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_ciudadGastoEmpleado,true,"id_ciudadGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDANIO));

		if(this.gastoempleadoConstantesFunciones.mostrarid_anioGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDANIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new AnioTableCell(this.aniosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_anioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_anioGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new AnioTableCell(this.aniosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_anioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_anioGastoEmpleado,true,"id_anioGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDMES));

		if(this.gastoempleadoConstantesFunciones.mostrarid_mesGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDMES,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new MesTableCell(this.messForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_mesGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_mesGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new MesTableCell(this.messForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_mesGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_mesGastoEmpleado,true,"id_mesGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_DIA));

		if(this.gastoempleadoConstantesFunciones.mostrardiaGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_DIA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltardiaGastoEmpleado,this.gastoempleadoConstantesFunciones.activardiaGastoEmpleado,iSizeTabla,this,true,"diaGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltardiaGastoEmpleado,this.gastoempleadoConstantesFunciones.activardiaGastoEmpleado,this,true,"diaGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO));

		if(this.gastoempleadoConstantesFunciones.mostrarid_usuarioGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++) && Constantes.ISDEVELOPING) {
			tableColumn.setCellRenderer(new UsuarioTableCell(this.usuariosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_usuarioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_usuarioGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new UsuarioTableCell(this.usuariosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_usuarioGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_usuarioGastoEmpleado,false,"id_usuarioGastoEmpleado","GLOBAL"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO));

		if(this.gastoempleadoConstantesFunciones.mostrarid_estado_gasto_empleadoGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO,true,iCountNumeroColumnasNormal,iCountNumeroColumnasFk++)) {
			tableColumn.setCellRenderer(new EstadoGastoEmpleadoTableCell(this.estadogastoempleadosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_estado_gasto_empleadoGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_estado_gasto_empleadoGastoEmpleado,iSizeTabla));
			tableColumn.setCellEditor(new EstadoGastoEmpleadoTableCell(this.estadogastoempleadosForeignKey,this.gastoempleadoConstantesFunciones.resaltarid_estado_gasto_empleadoGastoEmpleado,this,this.gastoempleadoConstantesFunciones.activarid_estado_gasto_empleadoGastoEmpleado,true,"id_estado_gasto_empleadoGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,0);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL));

		if(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_actualGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_actualGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingreso_actualGastoEmpleado,iSizeTabla,this,true,"total_ingreso_actualGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_actualGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingreso_actualGastoEmpleado,this,true,"total_ingreso_actualGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO));

		if(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_otroGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_otroGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingreso_otroGastoEmpleado,iSizeTabla,this,true,"total_ingreso_otroGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_otroGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingreso_otroGastoEmpleado,this,true,"total_ingreso_otroGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO));

		if(this.gastoempleadoConstantesFunciones.mostrartotal_ingresoGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingresoGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingresoGastoEmpleado,iSizeTabla,this,true,"total_ingresoGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_ingresoGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_ingresoGastoEmpleado,this,true,"total_ingresoGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA));

		if(this.gastoempleadoConstantesFunciones.mostrargasto_viviendaGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_viviendaGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_viviendaGastoEmpleado,iSizeTabla,this,true,"gasto_viviendaGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_viviendaGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_viviendaGastoEmpleado,this,true,"gasto_viviendaGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION));

		if(this.gastoempleadoConstantesFunciones.mostrargasto_educacionGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_educacionGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_educacionGastoEmpleado,iSizeTabla,this,true,"gasto_educacionGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_educacionGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_educacionGastoEmpleado,this,true,"gasto_educacionGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD));

		if(this.gastoempleadoConstantesFunciones.mostrargasto_saludGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_saludGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_saludGastoEmpleado,iSizeTabla,this,true,"gasto_saludGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_saludGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_saludGastoEmpleado,this,true,"gasto_saludGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA));

		if(this.gastoempleadoConstantesFunciones.mostrargasto_vestimentaGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_vestimentaGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_vestimentaGastoEmpleado,iSizeTabla,this,true,"gasto_vestimentaGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_vestimentaGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_vestimentaGastoEmpleado,this,true,"gasto_vestimentaGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION));

		if(this.gastoempleadoConstantesFunciones.mostrargasto_alimentacionGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_alimentacionGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_alimentacionGastoEmpleado,iSizeTabla,this,true,"gasto_alimentacionGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltargasto_alimentacionGastoEmpleado,this.gastoempleadoConstantesFunciones.activargasto_alimentacionGastoEmpleado,this,true,"gasto_alimentacionGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL));

		if(this.gastoempleadoConstantesFunciones.mostrartotal_gasto_actualGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_gasto_actualGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_gasto_actualGastoEmpleado,iSizeTabla,this,true,"total_gasto_actualGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_gasto_actualGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_gasto_actualGastoEmpleado,this,true,"total_gasto_actualGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO));

		if(this.gastoempleadoConstantesFunciones.mostrartotal_gastoGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_gastoGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_gastoGastoEmpleado,iSizeTabla,this,true,"total_gastoGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltartotal_gastoGastoEmpleado,this.gastoempleadoConstantesFunciones.activartotal_gastoGastoEmpleado,this,true,"total_gastoGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_FECHA));

		if(this.gastoempleadoConstantesFunciones.mostrarfechaGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_FECHA,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new DateRenderer(this.gastoempleadoConstantesFunciones.resaltarfechaGastoEmpleado,this.gastoempleadoConstantesFunciones.activarfechaGastoEmpleado,iSizeTabla,this,true,"fechaGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new DateEditorRenderer(this.gastoempleadoConstantesFunciones.resaltarfechaGastoEmpleado,this.gastoempleadoConstantesFunciones.activarfechaGastoEmpleado,this,true,"fechaGastoEmpleado","BASICO"));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30));

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA + FuncionesSwing.getValorProporcion(Constantes.ISWING_ANCHO_CONTROL,30);
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE));

		if(this.gastoempleadoConstantesFunciones.mostrarporcentajeGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltarporcentajeGastoEmpleado,this.gastoempleadoConstantesFunciones.activarporcentajeGastoEmpleado,iSizeTabla,this,true,"porcentajeGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltarporcentajeGastoEmpleado,this.gastoempleadoConstantesFunciones.activarporcentajeGastoEmpleado,this,true,"porcentajeGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO));

		if(this.gastoempleadoConstantesFunciones.mostrarvalor_maximoGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltarvalor_maximoGastoEmpleado,this.gastoempleadoConstantesFunciones.activarvalor_maximoGastoEmpleado,iSizeTabla,this,true,"valor_maximoGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltarvalor_maximoGastoEmpleado,this.gastoempleadoConstantesFunciones.activarvalor_maximoGastoEmpleado,this,true,"valor_maximoGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}


			tableColumn=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE));

		if(this.gastoempleadoConstantesFunciones.mostrarvalor_maximo_porcentajeGastoEmpleado && Funciones2.permiteMostarParaBusqueda(this.esParaBusquedaForeignKey,GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE,false,iCountNumeroColumnasNormal++,iCountNumeroColumnasFk)) {
			tableColumn.setCellRenderer(new TextFieldRenderer(this.gastoempleadoConstantesFunciones.resaltarvalor_maximo_porcentajeGastoEmpleado,this.gastoempleadoConstantesFunciones.activarvalor_maximo_porcentajeGastoEmpleado,iSizeTabla,this,true,"valor_maximo_porcentajeGastoEmpleado","BASICO"));
			tableColumn.setCellEditor(new TextFieldEditorRenderer(this.gastoempleadoConstantesFunciones.resaltarvalor_maximo_porcentajeGastoEmpleado,this.gastoempleadoConstantesFunciones.activarvalor_maximo_porcentajeGastoEmpleado,this,true,"valor_maximo_porcentajeGastoEmpleado","BASICO",false));

			tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA);
			tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA);

			this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
			//tableColumn.addPropertyChangeListener(new GastoEmpleadoPropertyChangeListener());
		} else {
			Funciones2.setTableColumnOcultar(tableColumn);
		}
			
		} else {
		}			
					
		if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()
			&& !this.esParaBusquedaForeignKey) {
			
		}
		
		if(true) {
			String sLabelColumnAccion="Editar";
			String sLabelColumnAccionEli="Eli";
			
			if(this.esParaBusquedaForeignKey)  {
				sLabelColumnAccion="Seleccionar";
				
				//LO MISMO QUE ELSE
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
	
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosGastoEmpleado.addColumn(tableColumn);
			
			} else {				
				
				//LO MISMO QUE IF
				
				tableColumn= new TableColumn();
				tableColumn.setIdentifier(sLabelColumnAccion);
				tableColumn.setHeaderValue(sLabelColumnAccion);
				tableColumn.setCellRenderer(new IdTableCell(this,false,false,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
				tableColumn.setCellEditor(new IdTableCell(this,false,false,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
		
				tableColumn.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
				tableColumn.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				tableColumn.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 
				
				this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
				
				this.jTableDatosGastoEmpleado.addColumn(tableColumn);				
					
				//ELIMINAR
				if(this.isPermisoEliminarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado) {
					tableColumn= new TableColumn();
					tableColumn.setIdentifier(Constantes2.S_ELI);
					tableColumn.setHeaderValue(sLabelColumnAccionEli);
					tableColumn.setCellRenderer(new IdTableCell(this,false,true,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
					tableColumn.setCellEditor(new IdTableCell(this,false,true,this.gastoempleadoSessionBean.getEsGuardarRelacionado(),iSizeTabla));
			
					tableColumn.setPreferredWidth(65); 	 
					tableColumn.setWidth(65); 	 
					tableColumn.setMinWidth(65); 
					tableColumn.setMaxWidth(65);
					
					this.iWidthTableDefinicion+=65;
						
					this.jTableDatosGastoEmpleado.addColumn(tableColumn);
				}
			}			
						
			
			/*
			tableColumn= new TableColumn();
			tableColumn.setIdentifier(Constantes2.S_SELECCIONAR);
			tableColumn.setHeaderValue(Constantes2.S_SELECCIONAR);
			tableColumn.setCellRenderer(new IdSeleccionarTableCell(this));
			tableColumn.setCellEditor(new IdSeleccionarTableCell(this));
			
			tableColumn.setPreferredWidth(30); 	 
			tableColumn.setWidth(30); 	 
			tableColumn.setMinWidth(30); 
			
			this.iWidthTableDefinicion+=30;
			
			this.jTableDatosGastoEmpleado.addColumn(tableColumn);
			*/
		}
		
		Integer iUltimaColumna=0;//1
		Integer iNuevaPosicionColumna=0;
		
		
		//PERMITE ELIMINAR SIMPLE
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado) {
				iUltimaColumna++;
			}	
		}
		
		//PERMITE EDITAR SIMPLE
		iUltimaColumna++;	
		
				
		
		//MOVIA SELECCIONAR
		//iUltimaColumna++;
		
		if(!this.esParaBusquedaForeignKey)  {
			if(this.isPermisoEliminarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado) {
				//REUBICA ELIMINAR SIMPLE
				jTableDatosGastoEmpleado.moveColumn(this.jTableDatosGastoEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3
					
				iUltimaColumna--;
			}
		}
		//REUBICA EDITAR SIMPLE
		jTableDatosGastoEmpleado.moveColumn(this.jTableDatosGastoEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1,-2 o -3				
		
		
		
		
		//REUBICABA SELECCIONAR
		/*
		if(iUltimaColumna>1) {
			iUltimaColumna--;
		}
		
		//iNuevaPosicionColumna++;
			
		//REUBICA SELECCIONAR FILA CHECK
		jTableDatosGastoEmpleado.moveColumn(this.jTableDatosGastoEmpleado.getColumnModel().getColumnCount()-iUltimaColumna, iNuevaPosicionColumna++);//-1		
		*/
		
		//DEFINEN HEADERS
		final TableCellRenderer tableHeaderDefaultCellRenderer = this.jTableDatosGastoEmpleado.getTableHeader().getDefaultRenderer();
		
		this.jTableDatosGastoEmpleado.getTableHeader().setDefaultRenderer(new TableCellRendererHeader(this.jTableDatosGastoEmpleado,tableHeaderDefaultCellRenderer));
	    
		TableColumn column=null;
		
		if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
			for(int i = 0; i < this.jTableDatosGastoEmpleado.getColumnModel().getColumnCount(); i++) { 
				column = this.jTableDatosGastoEmpleado.getColumnModel().getColumn(i); 
				
				if(column.getIdentifier()!=null) {
					//SI SE UTILIZA UN HEADER ES GENERICO
					//column.setHeaderRenderer(new HeaderRenderer(column.getIdentifier().toString()));
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_ELI)) {
					continue;
				}
				
				if(column.getIdentifier()!=null && column.getIdentifier().equals(Constantes2.S_SELECCIONAR)) {
					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(50); 	 
						column.setWidth(50); 	 
						column.setMinWidth(50); 	
						column.setMaxWidth(50); 
						
						this.iWidthTableDefinicion+=50;
					}
					
				} else {
					if(!GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
						column.setPreferredWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setWidth(Constantes.ISWING_ANCHO_COLUMNA); 	 
						column.setMinWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						column.setMaxWidth(Constantes.ISWING_ANCHO_COLUMNA); 	
						
						this.iWidthTableDefinicion+=Constantes.ISWING_ANCHO_COLUMNA;
					}
				}
			}
		}
		
		this.jTableDatosGastoEmpleado.setSelectionBackground(FuncionesSwing.getColorSelectedBackground());
		this.jTableDatosGastoEmpleado.setSelectionForeground(FuncionesSwing.getColorSelectedForeground());
		
		/*
		this.jTableDatosGastoEmpleado.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
			private static final long serialVersionUID = 1L;
			
		    @Override
		    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
		        final Component component= super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
		        //POR DEFECTO ES MEJOR, SE PIERDE DATOS AL SELECCIONAR BLANCO LETRAS BLANCAS
				component.setBackground(row % 2 == 0 ? FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR) : Funciones2.getColorFilaTabla2()); //FuncionesSwing.getColorTextFields(Constantes2.S_FONDOCONTROL_COLOR)
				component.setForeground(Funciones2.getColorTextoFilaTabla1());
				
				try {
		        	int iSize=-999;
		        	
		        	if(conTotales) {
						//FILA TOTALES OTRO COLOR, SI TABLA NO ES UNO A UNO
			        	if(Constantes.ISUSAEJBLOGICLAYER) {
							iSize=gastoempleadoLogic.getGastoEmpleados().size()-1;
								
						} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
							iSize=gastoempleados.size()-1;
						}
						
						if(iSize==row) {
							component.setBackground(Funciones2.getColorFilaTablaTotales());
						}
		        	}
					
					//POR EFICIENCIA NO UTILIZAR					
					//if (component instanceof JComponent) {
		            //    JComponent jcomponent = (JComponent) component;		                 		                
		        	//}				
					
				} catch (Exception e) {
					e.printStackTrace();
				}
				
		        return component;
		    }
		});
		*/
		
		//ESTA EN LA DEFINICION DE LA TABLA
		//this.jTableDatosGastoEmpleado.setRowHeight(Constantes.ISWING_ALTO_FILA_TABLA);
		
		/*
		column=this.jTableDatosGastoEmpleado.getColumnModel().getColumn(Funciones2.getColumnIndexByName(this.jTableDatosSistema,Constantes2.S_SELECCIONAR));
		
		if(column!=null) {
			column.setPreferredWidth(25); 	 
			column.setWidth(25); 	 
			column.setMinWidth(25); 	
		}
		*/
			
			//CopyTableToTableTotal();
		} else {
			
			this.actualizarVisualTableDatosGastoEmpleado();
			
		}
	}
	
	/*
	//COPY_TABLES
	/* FALTARIA RESOLVER:
	   1 SOLO SCROLL PARA 2 TABLAS
	   COPIA EXACTA DE COLUMNAS DE UNA TABLA A OTRA, SI SE MODIFICA TAMANIO TAMBIEN LA OTRA
	*/
	
	public void jButtonIdActionPerformed(ActionEvent evt,int rowIndex,Boolean esRelaciones,Boolean esEliminar) { 
		try {
			if(!esEliminar) {
				this.estaModoSeleccionar=true;
				
				//this.isEsNuevoGastoEmpleado=false;
					
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
				if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
					this.dStart=(double)System.currentTimeMillis();
				}
				
				if(this.jInternalFrameDetalleFormGastoEmpleado==null) {
					this.inicializarFormDetalle();
				}
				
				this.inicializarInvalidValues();
				
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosGastoEmpleado.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();	       
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//PUEDE SER PARA DUPLICADO O NUEVO TABLA
				
				if(this.gastoempleado.getsType().equals("DUPLICADO")
				   || this.gastoempleado.getsType().equals("NUEVO_GUARDAR_CAMBIOS")) {
					
					this.isEsNuevoGastoEmpleado=true;
				
				} else {
					this.isEsNuevoGastoEmpleado=false;	
				}
				
				//CONTROL VERSION ANTERIOR
				/*
				if(!this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					if(this.gastoempleado.getId()>=0 && !this.gastoempleado.getIsNew()) {						
						this.isEsNuevoGastoEmpleado=false;
						
					} else {
						this.isEsNuevoGastoEmpleado=true;
					}
					
				} else {
					//CONTROLAR PARA RELACIONADO
				}
				*/
				
				//ESTABLECE SI ES RELACIONADO O NO 
				this.habilitarDeshabilitarTipoMantenimientoGastoEmpleado(esRelaciones);						
				
				this.seleccionarGastoEmpleado(evt,null,rowIndex);
				
				//SELECCIONA ACTUAL PERO AUN NO SE HA INGRESADO AL SISTEMA
				//SE DESHABILITA POR GUARDAR CAMBIOS
				/*
				if(this.gastoempleado.getId()<0) {
					this.isEsNuevoGastoEmpleado=true;
				}
				*/
				
				if(!this.esParaBusquedaForeignKey) {
					this.modificarGastoEmpleado(evt,rowIndex,esRelaciones);
				} else {
					this.seleccionarGastoEmpleado(evt,rowIndex);
				}	
				
				if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
					this.dEnd=(double)System.currentTimeMillis();					
					this.dDif=this.dEnd - this.dStart;
					
					if(Constantes.ISDEVELOPING) {
						System.out.println("Tiempo(ms) Seleccion GastoEmpleado: " + this.dDif); 
					}
				}								
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.FORM,EventoTipo.LOAD,EventoSubTipo.SELECTED,"FORM",this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
			} else {
				this.estaModoEliminarGuardarCambios=true;
				
				this.seleccionarGastoEmpleado(evt,null,rowIndex);
				
				if(this.permiteMantenimiento(this.gastoempleado)) {
					if(this.gastoempleado.getId()>0) {
						this.gastoempleado.setIsDeleted(true);
						
						this.gastoempleadosEliminados.add(this.gastoempleado);
					}
					
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						this.gastoempleadoLogic.getGastoEmpleados().remove(this.gastoempleado);
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						this.gastoempleados.remove(this.gastoempleado);				
					}
					
					
					((GastoEmpleadoModel) this.jTableDatosGastoEmpleado.getModel()).fireTableRowsDeleted(rowIndex,rowIndex);
					
					this.actualizarFilaTotales();
					
					this.inicializarActualizarBindingTablaGastoEmpleado(false);					
				}								
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
			
		} finally {
			this.estaModoSeleccionar=false;				
			this.estaModoEliminarGuardarCambios=false;
		}
	}
	
	
	public void seleccionarGastoEmpleado(ActionEvent evt,javax.swing.event.ListSelectionEvent evt2,int rowIndex) throws Exception { 
		try {
			//SI PUEDE SER NUEVO Y SELECCIONAR (PARA DUPLICAR Y NUEVO TABLA)
			//if(!this.isEsNuevoGastoEmpleado) {
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
				int intSelectedRow = 0;
				
				if(rowIndex>=0) {
					intSelectedRow=rowIndex;
					this.jTableDatosGastoEmpleado.getSelectionModel().setSelectionInterval(intSelectedRow, intSelectedRow);
				} else {	
					intSelectedRow=this.jTableDatosGastoEmpleado.getSelectedRow();	       
				}
				
				//CUANDO SE RECARGA TABLA TAMBIEN SE SELECCIONA PERO CON -1 POR LO QUE SE NECESITA VALIDAR ANTES
				if(intSelectedRow<0) {
					return;
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				
				if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesObjetoActualToFormularioGastoEmpleado(this.gastoempleado);
				}
				
				//ARCHITECTURE
				try {
					

					//Empresa
					if(!this.gastoempleadoConstantesFunciones.cargarid_empresaGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_empresaGastoEmpleado) {
						//this.cargarCombosEmpresasForeignKeyLista(" where id="+this.gastoempleado.getid_empresa());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.empresasForeignKey=new ArrayList<Empresa>();

						if(gastoempleado.getEmpresa()!=null) {
							this.empresasForeignKey.add(gastoempleado.getEmpresa());
						}

						this.addItemDefectoCombosForeignKeyEmpresa();
						this.cargarCombosFrameEmpresasForeignKey("Todos");
					}
					this.setActualEmpresaForeignKey(this.gastoempleado.getid_empresa(),false,"Formulario");

					//Sucursal
					if(!this.gastoempleadoConstantesFunciones.cargarid_sucursalGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_sucursalGastoEmpleado) {
						//this.cargarCombosSucursalsForeignKeyLista(" where id="+this.gastoempleado.getid_sucursal());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.sucursalsForeignKey=new ArrayList<Sucursal>();

						if(gastoempleado.getSucursal()!=null) {
							this.sucursalsForeignKey.add(gastoempleado.getSucursal());
						}

						this.addItemDefectoCombosForeignKeySucursal();
						this.cargarCombosFrameSucursalsForeignKey("Todos");
					}
					this.setActualSucursalForeignKey(this.gastoempleado.getid_sucursal(),false,"Formulario");

					//Empleado
					if(!this.gastoempleadoConstantesFunciones.cargarid_empleadoGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_empleadoGastoEmpleado) {
						//this.cargarCombosEmpleadosForeignKeyLista(" where id="+this.gastoempleado.getid_empleado());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.empleadosForeignKey=new ArrayList<Empleado>();

						if(gastoempleado.getEmpleado()!=null) {
							this.empleadosForeignKey.add(gastoempleado.getEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEmpleado();
						this.cargarCombosFrameEmpleadosForeignKey("Todos");
					}
					this.setActualEmpleadoForeignKey(this.gastoempleado.getid_empleado(),false,"Formulario");

					//Ejercicio
					if(!this.gastoempleadoConstantesFunciones.cargarid_ejercicioGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_ejercicioGastoEmpleado) {
						//this.cargarCombosEjerciciosForeignKeyLista(" where id="+this.gastoempleado.getid_ejercicio());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.ejerciciosForeignKey=new ArrayList<Ejercicio>();

						if(gastoempleado.getEjercicio()!=null) {
							this.ejerciciosForeignKey.add(gastoempleado.getEjercicio());
						}

						this.addItemDefectoCombosForeignKeyEjercicio();
						this.cargarCombosFrameEjerciciosForeignKey("Todos");
					}
					this.setActualEjercicioForeignKey(this.gastoempleado.getid_ejercicio(),false,"Formulario");

					//Pais
					if(!this.gastoempleadoConstantesFunciones.cargarid_paisGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_paisGastoEmpleado) {
						//this.cargarCombosPaissForeignKeyLista(" where id="+this.gastoempleado.getid_pais());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.paissForeignKey=new ArrayList<Pais>();

						if(gastoempleado.getPais()!=null) {
							this.paissForeignKey.add(gastoempleado.getPais());
						}

						this.addItemDefectoCombosForeignKeyPais();
						this.cargarCombosFramePaissForeignKey("Todos");
					}
					this.setActualPaisForeignKey(this.gastoempleado.getid_pais(),false,"Formulario");

					//Ciudad
					if(!this.gastoempleadoConstantesFunciones.cargarid_ciudadGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_ciudadGastoEmpleado) {
						//this.cargarCombosCiudadsForeignKeyLista(" where id="+this.gastoempleado.getid_ciudad());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.ciudadsForeignKey=new ArrayList<Ciudad>();

						if(gastoempleado.getCiudad()!=null) {
							this.ciudadsForeignKey.add(gastoempleado.getCiudad());
						}

						this.addItemDefectoCombosForeignKeyCiudad();
						this.cargarCombosFrameCiudadsForeignKey("Todos");
					}
					this.setActualCiudadForeignKey(this.gastoempleado.getid_ciudad(),false,"Formulario");

					//Anio
					if(!this.gastoempleadoConstantesFunciones.cargarid_anioGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_anioGastoEmpleado) {
						//this.cargarCombosAniosForeignKeyLista(" where id="+this.gastoempleado.getid_anio());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.aniosForeignKey=new ArrayList<Anio>();

						if(gastoempleado.getAnio()!=null) {
							this.aniosForeignKey.add(gastoempleado.getAnio());
						}

						this.addItemDefectoCombosForeignKeyAnio();
						this.cargarCombosFrameAniosForeignKey("Todos");
					}
					this.setActualAnioForeignKey(this.gastoempleado.getid_anio(),false,"Formulario");

					//Mes
					if(!this.gastoempleadoConstantesFunciones.cargarid_mesGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_mesGastoEmpleado) {
						//this.cargarCombosMessForeignKeyLista(" where id="+this.gastoempleado.getid_mes());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.messForeignKey=new ArrayList<Mes>();

						if(gastoempleado.getMes()!=null) {
							this.messForeignKey.add(gastoempleado.getMes());
						}

						this.addItemDefectoCombosForeignKeyMes();
						this.cargarCombosFrameMessForeignKey("Todos");
					}
					this.setActualMesForeignKey(this.gastoempleado.getid_mes(),false,"Formulario");

					//Usuario
					if(!this.gastoempleadoConstantesFunciones.cargarid_usuarioGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_usuarioGastoEmpleado) {
						//this.cargarCombosUsuariosForeignKeyLista(" where id="+this.gastoempleado.getid_usuario());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.usuariosForeignKey=new ArrayList<Usuario>();

						if(gastoempleado.getUsuario()!=null) {
							this.usuariosForeignKey.add(gastoempleado.getUsuario());
						}

						this.addItemDefectoCombosForeignKeyUsuario();
						this.cargarCombosFrameUsuariosForeignKey("Todos");
					}
					this.setActualUsuarioForeignKey(this.gastoempleado.getid_usuario(),false,"Formulario");

					//EstadoGastoEmpleado
					if(!this.gastoempleadoConstantesFunciones.cargarid_estado_gasto_empleadoGastoEmpleado || this.gastoempleadoConstantesFunciones.event_dependid_estado_gasto_empleadoGastoEmpleado) {
						//this.cargarCombosEstadoGastoEmpleadosForeignKeyLista(" where id="+this.gastoempleado.getid_estado_gasto_empleado());
									//this.inicializarActualizarBindingGastoEmpleado(false,false);
						this.estadogastoempleadosForeignKey=new ArrayList<EstadoGastoEmpleado>();

						if(gastoempleado.getEstadoGastoEmpleado()!=null) {
							this.estadogastoempleadosForeignKey.add(gastoempleado.getEstadoGastoEmpleado());
						}

						this.addItemDefectoCombosForeignKeyEstadoGastoEmpleado();
						this.cargarCombosFrameEstadoGastoEmpleadosForeignKey("Todos");
					}
					this.setActualEstadoGastoEmpleadoForeignKey(this.gastoempleado.getid_estado_gasto_empleado(),false,"Formulario");
				} catch(Exception e) {
					throw e;
				}
				
				this.actualizarEstadoCeldasBotonesGastoEmpleado("s", this.isGuardarCambiosEnLote, this.isEsMantenimientoRelacionado);
				
				//NO FUNCIONA BINDING PERO SE MANTIENE
				this.inicializarActualizarBindingBotonesGastoEmpleado(false) ;
				
				//SI ES MANUAL
				//this.inicializarActualizarBindingBotonesManualGastoEmpleado() ;
			//}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesObjetoActualToFormularioTodoGastoEmpleado(GastoEmpleado gastoempleado) throws Exception { 
		this.setVariablesObjetoActualToFormularioTodoGastoEmpleado(gastoempleado,false,"NINGUNO");
	}
	
	public void setVariablesObjetoActualToFormularioTodoGastoEmpleado(GastoEmpleado gastoempleado,Boolean conCargarListasDesdeObjetoActual,String sTipoEvento) throws Exception { 
		this.setVariablesObjetoActualToFormularioGastoEmpleado(gastoempleado);
		
		if(conCargarListasDesdeObjetoActual) {
			this.setVariablesObjetoActualToListasForeignKeyGastoEmpleado(gastoempleado,sTipoEvento);
		}
		
		this.setVariablesObjetoActualToFormularioForeignKeyGastoEmpleado(gastoempleado);
	}
	
	public void setVariablesObjetoActualToFormularioGastoEmpleado(GastoEmpleado gastoempleado) throws Exception { 
		try {			
			Image imageActual=null;
			ImageIcon imageIcon = null;
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			
			this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setText(gastoempleado.getId().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setText(gastoempleado.getdia().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setText(gastoempleado.gettotal_ingreso_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setText(gastoempleado.gettotal_ingreso_otro().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setText(gastoempleado.gettotal_ingreso().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setText(gastoempleado.getgasto_vivienda().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setText(gastoempleado.getgasto_educacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setText(gastoempleado.getgasto_salud().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setText(gastoempleado.getgasto_vestimenta().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setText(gastoempleado.getgasto_alimentacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setText(gastoempleado.gettotal_gasto_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setText(gastoempleado.gettotal_gasto().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setDate(gastoempleado.getfecha());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setText(gastoempleado.getporcentaje().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setText(gastoempleado.getvalor_maximo().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setText(gastoempleado.getvalor_maximo_porcentaje().toString());
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
		
	public void actualizarInformacion(String sTipo,GastoEmpleado gastoempleadoLocal) throws Exception {
		this.actualizarInformacion(sTipo,false,gastoempleadoLocal);
	}	
	
	public void actualizarInformacion(String sTipo,Boolean conParametroObjeto,GastoEmpleado gastoempleadoLocal) throws Exception {
		
		if(!conParametroObjeto) {
			if(!this.getEsControlTabla()) {
				gastoempleadoLocal=this.gastoempleado;
			} else {
				gastoempleadoLocal=this.gastoempleadoAnterior;
			}
		}
		
		if(this.permiteMantenimiento(gastoempleadoLocal)) {
			if(sTipo.equals("EVENTO_CONTROL")) { // || sTipo.equals("EVENTO_NUEVO")
				if(!this.esControlTabla) {
					this.setVariablesFormularioToObjetoActualTodoGastoEmpleado(gastoempleadoLocal,true);
					
					if(gastoempleadoSessionBean.getConGuardarRelaciones()) {
						this.actualizarRelaciones(gastoempleadoLocal);
					}
				}
			
			} else if(sTipo.equals("INFO_PADRE")) {
				
				if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
					this.actualizarRelacionFkPadreActual(gastoempleadoLocal);
				}
			}
		}
	}
	
	public void setVariablesFormularioToObjetoActualTodoGastoEmpleado(GastoEmpleado gastoempleado,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualGastoEmpleado(gastoempleado,conColumnasBase);
		this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(gastoempleado);
	}
	
	public void setVariablesFormularioToObjetoActualGastoEmpleado(GastoEmpleado gastoempleado,Boolean conColumnasBase) throws Exception { 
		this.setVariablesFormularioToObjetoActualGastoEmpleado(gastoempleado,conColumnasBase,true);
	}
	
	public void setVariablesFormularioToObjetoActualGastoEmpleado(GastoEmpleado gastoempleado,Boolean conColumnasBase,Boolean conInicializarInvalidValues) throws Exception { 
		String sMensajeCampoActual="";
		Boolean estaValidado=true;
		try {
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
				this.inicializarFormDetalle();
			}
			
			if(conInicializarInvalidValues) {
				this.inicializarInvalidValues();
			}
			
			

		try {
			if(this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.getText()==null || this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.getText()=="" || this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.getText()=="Id") {
				this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setText("0");
			}

			if(conColumnasBase) {gastoempleado.setId(Long.parseLong(this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.getText()));}
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_ID+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelIdGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setdia(Integer.parseInt(this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_DIA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeldiaGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.settotal_ingreso_actual(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_actualGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.settotal_ingreso_otro(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingreso_otroGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.settotal_ingreso(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_ingresoGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setgasto_vivienda(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_viviendaGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setgasto_educacion(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_educacionGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setgasto_salud(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_saludGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setgasto_vestimenta(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_vestimentaGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setgasto_alimentacion(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelgasto_alimentacionGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.settotal_gasto_actual(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gasto_actualGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.settotal_gasto(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabeltotal_gastoGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setfecha(this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.getDate());
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_FECHA+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelfechaGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setporcentaje(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelporcentajeGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setvalor_maximo(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximoGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}

		try {
			gastoempleado.setvalor_maximo_porcentaje(Double.parseDouble(this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.getText()));
		} catch(Exception e) {
			estaValidado=false;
			sMensajeCampoActual+="\r\n"+GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE+"-->"+ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR;FuncionesSwing.mostrarCampoMensajeInvalido(false,this.jInternalFrameDetalleFormGastoEmpleado.jLabelvalor_maximo_porcentajeGastoEmpleado,ConstantesMensajes.SMENSAJEEXCEPCION_VALIDACIONVALOR);
		}
			
			if(!estaValidado) {
				throw new Exception(sMensajeCampoActual);
			}
		} catch(NumberFormatException e) {
			throw new Exception(sMensajeCampoActual);
			//FuncionesSwing.manageException(this, e,logger,MovimientoInventarioConstantesFunciones.CLASSNAME);
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setVariablesForeignKeyObjetoBeanDefectoActualToObjetoActualGastoEmpleado(GastoEmpleado gastoempleadoBean,GastoEmpleado gastoempleado,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setCopiarVariablesObjetosGastoEmpleado(GastoEmpleado gastoempleadoOrigen,GastoEmpleado gastoempleado,Boolean conDefault,Boolean conColumnasBase) throws Exception { 
		try {
			
			if(conColumnasBase) {if(conDefault || (!conDefault && gastoempleadoOrigen.getId()!=null && !gastoempleadoOrigen.getId().equals(0L))) {gastoempleado.setId(gastoempleadoOrigen.getId());}}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getdia()!=null && !gastoempleadoOrigen.getdia().equals(0))) {gastoempleado.setdia(gastoempleadoOrigen.getdia());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.gettotal_ingreso_actual()!=null && !gastoempleadoOrigen.gettotal_ingreso_actual().equals(0.0))) {gastoempleado.settotal_ingreso_actual(gastoempleadoOrigen.gettotal_ingreso_actual());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.gettotal_ingreso_otro()!=null && !gastoempleadoOrigen.gettotal_ingreso_otro().equals(0.0))) {gastoempleado.settotal_ingreso_otro(gastoempleadoOrigen.gettotal_ingreso_otro());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.gettotal_ingreso()!=null && !gastoempleadoOrigen.gettotal_ingreso().equals(0.0))) {gastoempleado.settotal_ingreso(gastoempleadoOrigen.gettotal_ingreso());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getgasto_vivienda()!=null && !gastoempleadoOrigen.getgasto_vivienda().equals(0.0))) {gastoempleado.setgasto_vivienda(gastoempleadoOrigen.getgasto_vivienda());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getgasto_educacion()!=null && !gastoempleadoOrigen.getgasto_educacion().equals(0.0))) {gastoempleado.setgasto_educacion(gastoempleadoOrigen.getgasto_educacion());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getgasto_salud()!=null && !gastoempleadoOrigen.getgasto_salud().equals(0.0))) {gastoempleado.setgasto_salud(gastoempleadoOrigen.getgasto_salud());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getgasto_vestimenta()!=null && !gastoempleadoOrigen.getgasto_vestimenta().equals(0.0))) {gastoempleado.setgasto_vestimenta(gastoempleadoOrigen.getgasto_vestimenta());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getgasto_alimentacion()!=null && !gastoempleadoOrigen.getgasto_alimentacion().equals(0.0))) {gastoempleado.setgasto_alimentacion(gastoempleadoOrigen.getgasto_alimentacion());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.gettotal_gasto_actual()!=null && !gastoempleadoOrigen.gettotal_gasto_actual().equals(0.0))) {gastoempleado.settotal_gasto_actual(gastoempleadoOrigen.gettotal_gasto_actual());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.gettotal_gasto()!=null && !gastoempleadoOrigen.gettotal_gasto().equals(0.0))) {gastoempleado.settotal_gasto(gastoempleadoOrigen.gettotal_gasto());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getfecha()!=null && !gastoempleadoOrigen.getfecha().equals(new Date()))) {gastoempleado.setfecha(gastoempleadoOrigen.getfecha());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getporcentaje()!=null && !gastoempleadoOrigen.getporcentaje().equals(0.0))) {gastoempleado.setporcentaje(gastoempleadoOrigen.getporcentaje());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getvalor_maximo()!=null && !gastoempleadoOrigen.getvalor_maximo().equals(0.0))) {gastoempleado.setvalor_maximo(gastoempleadoOrigen.getvalor_maximo());}
			if(conDefault || (!conDefault && gastoempleadoOrigen.getvalor_maximo_porcentaje()!=null && !gastoempleadoOrigen.getvalor_maximo_porcentaje().equals(0.0))) {gastoempleado.setvalor_maximo_porcentaje(gastoempleadoOrigen.getvalor_maximo_porcentaje());}
			
		} catch(Exception e) {
			throw e;
			//FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	/*
	public void setVariablesObjetoBeanActualToFormularioGastoEmpleado(GastoEmpleado gastoempleado) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setText(gastoempleado.getId().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setText(gastoempleado.getdia().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setText(gastoempleado.gettotal_ingreso_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setText(gastoempleado.gettotal_ingreso_otro().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setText(gastoempleado.gettotal_ingreso().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setText(gastoempleado.getgasto_vivienda().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setText(gastoempleado.getgasto_educacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setText(gastoempleado.getgasto_salud().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setText(gastoempleado.getgasto_vestimenta().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setText(gastoempleado.getgasto_alimentacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setText(gastoempleado.gettotal_gasto_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setText(gastoempleado.gettotal_gasto().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setDate(gastoempleado.getfecha());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setText(gastoempleado.getporcentaje().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setText(gastoempleado.getvalor_maximo().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setText(gastoempleado.getvalor_maximo_porcentaje().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoBeanActualToFormularioGastoEmpleado(GastoEmpleadoBean gastoempleadoBean) throws Exception { 
		try {
			
			this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setText(gastoempleadoBean.getId().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setText(gastoempleadoBean.getdia().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setText(gastoempleadoBean.gettotal_ingreso_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setText(gastoempleadoBean.gettotal_ingreso_otro().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setText(gastoempleadoBean.gettotal_ingreso().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setText(gastoempleadoBean.getgasto_vivienda().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setText(gastoempleadoBean.getgasto_educacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setText(gastoempleadoBean.getgasto_salud().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setText(gastoempleadoBean.getgasto_vestimenta().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setText(gastoempleadoBean.getgasto_alimentacion().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setText(gastoempleadoBean.gettotal_gasto_actual().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setText(gastoempleadoBean.gettotal_gasto().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setDate(gastoempleadoBean.getfecha());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setText(gastoempleadoBean.getporcentaje().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setText(gastoempleadoBean.getvalor_maximo().toString());
			this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setText(gastoempleadoBean.getvalor_maximo_porcentaje().toString());
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesObjetoReturnGeneralToBeanGastoEmpleado(GastoEmpleadoParameterReturnGeneral gastoempleadoReturnGeneral,GastoEmpleadoBean gastoempleadoBean,Boolean conDefault) throws Exception { 
		try {
			GastoEmpleado gastoempleadoLocal=new GastoEmpleado();
			
			gastoempleadoLocal=gastoempleadoReturnGeneral.getGastoEmpleado();
			
			
			if(conColumnasBase) {if(conDefault || (!conDefault && gastoempleadoLocal.getId()!=null && !gastoempleadoLocal.getId().equals(0L))) {gastoempleadoBean.setId(gastoempleadoLocal.getId());}}
			if(conDefault || (!conDefault && gastoempleadoLocal.getdia()!=null && !gastoempleadoLocal.getdia().equals(0))) {gastoempleadoBean.setdia(gastoempleadoLocal.getdia());}
			if(conDefault || (!conDefault && gastoempleadoLocal.gettotal_ingreso_actual()!=null && !gastoempleadoLocal.gettotal_ingreso_actual().equals(0.0))) {gastoempleadoBean.settotal_ingreso_actual(gastoempleadoLocal.gettotal_ingreso_actual());}
			if(conDefault || (!conDefault && gastoempleadoLocal.gettotal_ingreso_otro()!=null && !gastoempleadoLocal.gettotal_ingreso_otro().equals(0.0))) {gastoempleadoBean.settotal_ingreso_otro(gastoempleadoLocal.gettotal_ingreso_otro());}
			if(conDefault || (!conDefault && gastoempleadoLocal.gettotal_ingreso()!=null && !gastoempleadoLocal.gettotal_ingreso().equals(0.0))) {gastoempleadoBean.settotal_ingreso(gastoempleadoLocal.gettotal_ingreso());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getgasto_vivienda()!=null && !gastoempleadoLocal.getgasto_vivienda().equals(0.0))) {gastoempleadoBean.setgasto_vivienda(gastoempleadoLocal.getgasto_vivienda());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getgasto_educacion()!=null && !gastoempleadoLocal.getgasto_educacion().equals(0.0))) {gastoempleadoBean.setgasto_educacion(gastoempleadoLocal.getgasto_educacion());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getgasto_salud()!=null && !gastoempleadoLocal.getgasto_salud().equals(0.0))) {gastoempleadoBean.setgasto_salud(gastoempleadoLocal.getgasto_salud());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getgasto_vestimenta()!=null && !gastoempleadoLocal.getgasto_vestimenta().equals(0.0))) {gastoempleadoBean.setgasto_vestimenta(gastoempleadoLocal.getgasto_vestimenta());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getgasto_alimentacion()!=null && !gastoempleadoLocal.getgasto_alimentacion().equals(0.0))) {gastoempleadoBean.setgasto_alimentacion(gastoempleadoLocal.getgasto_alimentacion());}
			if(conDefault || (!conDefault && gastoempleadoLocal.gettotal_gasto_actual()!=null && !gastoempleadoLocal.gettotal_gasto_actual().equals(0.0))) {gastoempleadoBean.settotal_gasto_actual(gastoempleadoLocal.gettotal_gasto_actual());}
			if(conDefault || (!conDefault && gastoempleadoLocal.gettotal_gasto()!=null && !gastoempleadoLocal.gettotal_gasto().equals(0.0))) {gastoempleadoBean.settotal_gasto(gastoempleadoLocal.gettotal_gasto());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getfecha()!=null && !gastoempleadoLocal.getfecha().equals(new Date()))) {gastoempleadoBean.setfecha(gastoempleadoLocal.getfecha());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getporcentaje()!=null && !gastoempleadoLocal.getporcentaje().equals(0.0))) {gastoempleadoBean.setporcentaje(gastoempleadoLocal.getporcentaje());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getvalor_maximo()!=null && !gastoempleadoLocal.getvalor_maximo().equals(0.0))) {gastoempleadoBean.setvalor_maximo(gastoempleadoLocal.getvalor_maximo());}
			if(conDefault || (!conDefault && gastoempleadoLocal.getvalor_maximo_porcentaje()!=null && !gastoempleadoLocal.getvalor_maximo_porcentaje().equals(0.0))) {gastoempleadoBean.setvalor_maximo_porcentaje(gastoempleadoLocal.getvalor_maximo_porcentaje());}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	@SuppressWarnings("rawtypes")
	public static void setActualComboBoxGastoEmpleadoGenerico(Long idGastoEmpleadoSeleccionado,JComboBox jComboBoxGastoEmpleado,List<GastoEmpleado> gastoempleadosLocal)throws Exception {
		try {
			GastoEmpleado  gastoempleadoTemp=null;

			for(GastoEmpleado gastoempleadoAux:gastoempleadosLocal) {
				if(gastoempleadoAux.getId()!=null && gastoempleadoAux.getId().equals(idGastoEmpleadoSeleccionado)) {
					gastoempleadoTemp=gastoempleadoAux;
					break;
				}
			}

			jComboBoxGastoEmpleado.setSelectedItem(gastoempleadoTemp);

		} catch(Exception e) {
			throw e;
		}
	}
	
	@SuppressWarnings("rawtypes")
	public static void setHotKeysComboBoxGastoEmpleadoGenerico(JComboBox jComboBoxGastoEmpleado,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda)throws Exception {
		try {
			//GLOBAL(id_empresa,id_sucursal,id_ejercicio)
			//BASICO(normal)
			//CON_BUSQUEDA(Permite buscar Fk)
			
			String sKeyStrokeName="";
			KeyStroke keyStrokeControl=null;
			
			if(!sTipoBusqueda.equals("GLOBAL")) {
				
				//BUSCAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSCAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSCAR");
				
				jComboBoxGastoEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxGastoEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Busqueda"));
				//BUSCAR
				
				
				//ACTUALIZAR
				sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_ACTUALIZAR");
				keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_ACTUALIZAR");
				
				jComboBoxGastoEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
				jComboBoxGastoEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction+"Update"));
				//ACTUALIZAR
				
				if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxGastoEmpleado.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
						jComboBoxGastoEmpleado.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));						
					}
					
					/*
					if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
						jComboBoxGastoEmpleado.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					} else {
						jComboBoxGastoEmpleado.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
					}
					*/
				}								
				
				//CON_BUSQUEDA								
				if(sTipoBusqueda.contains("CON_BUSQUEDA")) {
					sKeyStrokeName = FuncionesSwing.getKeyNameControl("CONTROL_BUSQUEDA");
					keyStrokeControl=FuncionesSwing.getKeyStrokeControl("CONTROL_BUSQUEDA");
							
					jComboBoxGastoEmpleado.getInputMap().put(keyStrokeControl, sKeyStrokeName);
					jComboBoxGastoEmpleado.getActionMap().put(sKeyStrokeName, new ButtonAbstractAction(jInternalFrameBase,sNombreHotKeyAbstractAction));
				}
				//CON_BUSQUEDA
				
				
			}
		} catch(Exception e) {
			throw e;
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	@SuppressWarnings("rawtypes")
	public void setHotKeysComboBoxGenerico(JComboBox jComboBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		if(sTipoBusqueda.contains("CON_EVENT_CHANGE")) {
			if(Constantes2.CON_COMBOBOX_ITEMLISTENER) {
				jComboBox.addItemListener(new ComboBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			} else {
				jComboBox.addActionListener(new ComboBoxActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
				jComboBox.addFocusListener(new ComboBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
			}
		}
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextFieldGenerico(JTextField jTextField,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextField.addFocusListener(new TextFieldFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		jTextField.addActionListener(new TextFieldActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJTextAreaGenerico(JTextArea jTextArea,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jTextArea.addFocusListener(new TextAreaFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jTextArea.addActionListener(new TextAreaActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJLabelGenerico(JLabel jLabel,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jLabel.addFocusListener(new LabelFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//NO EXISTE
		//jLabel.addActionListener(new LabelActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJCheckBoxGenerico(JCheckBox jCheckBox,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jCheckBox.addFocusListener(new CheckBoxFocusListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
		
		//SI SE DEFINE AL CAMBIAR VALOR, ESTE NUEVO VALOR NO SE ENVIA AL EVENTO
		//jCheckBox.addItemListener(new CheckBoxItemListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJDateChooserGenerico(JDateChooser jDateChooser,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		FuncionesSwing.addDateListener(jDateChooser, jInternalFrameBase, sNombreHotKeyAbstractAction);
	}
	
	//PARA INICIALIZAR CONTROLES DE TABLA
	public void setHotKeysJButtonGenerico(JButton jButton,JInternalFrameBase jInternalFrameBase,String sNombreHotKeyAbstractAction,String sTipoBusqueda) {
		jButton.addActionListener(new ButtonActionListener(jInternalFrameBase,sNombreHotKeyAbstractAction));
	}
	
	public void jButtonRelacionActionPerformed(String sTipo,ActionEvent evt,int rowIndex,Boolean conInicializar,Boolean esRelacionado) {
		//ABRIR RELACIONES
		try {
			
		} catch (Exception e) {
			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public String getDescripcionFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		String sDescripcion="";
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			gastoempleado=(GastoEmpleado) gastoempleadoLogic.getGastoEmpleados().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			gastoempleado =(GastoEmpleado) gastoempleados.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		if(sTipo.equals("Empresa")) {
			//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getempresa_descripcion();
			} else {
				//sDescripcion=this.getActualEmpresaForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getempresa_descripcion();
			}
		}

		if(sTipo.equals("Sucursal")) {
			//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getsucursal_descripcion();
			} else {
				//sDescripcion=this.getActualSucursalForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getsucursal_descripcion();
			}
		}

		if(sTipo.equals("Empleado")) {
			//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getempleado_descripcion();
			}
		}

		if(sTipo.equals("Ejercicio")) {
			//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getejercicio_descripcion();
			} else {
				//sDescripcion=this.getActualEjercicioForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getejercicio_descripcion();
			}
		}

		if(sTipo.equals("Pais")) {
			//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getpais_descripcion();
			} else {
				//sDescripcion=this.getActualPaisForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getpais_descripcion();
			}
		}

		if(sTipo.equals("Ciudad")) {
			//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getciudad_descripcion();
			} else {
				//sDescripcion=this.getActualCiudadForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getciudad_descripcion();
			}
		}

		if(sTipo.equals("Anio")) {
			//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getanio_descripcion();
			} else {
				//sDescripcion=this.getActualAnioForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getanio_descripcion();
			}
		}

		if(sTipo.equals("Mes")) {
			//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getmes_descripcion();
			} else {
				//sDescripcion=this.getActualMesForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getmes_descripcion();
			}
		}

		if(sTipo.equals("Usuario")) {
			//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getusuario_descripcion();
			} else {
				//sDescripcion=this.getActualUsuarioForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getusuario_descripcion();
			}
		}

		if(sTipo.equals("EstadoGastoEmpleado")) {
			//sDescripcion=this.getActualEstadoGastoEmpleadoForeignKeyDescripcion((Long)value);
			if(!gastoempleado.getIsNew() && !gastoempleado.getIsChanged() && !gastoempleado.getIsDeleted()) {
				sDescripcion=gastoempleado.getestadogastoempleado_descripcion();
			} else {
				//sDescripcion=this.getActualEstadoGastoEmpleadoForeignKeyDescripcion((Long)value);
				sDescripcion=gastoempleado.getestadogastoempleado_descripcion();
			}
		}

		
		return sDescripcion;
	}
	
	public Color getColorFk(String sTipo,JTable table,Object value,int intSelectedRow) throws Exception {
		//DESCRIPCIONES FK		
		Color color=Color.WHITE;
		
		GastoEmpleado gastoempleadoRow=new GastoEmpleado();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			gastoempleadoRow=(GastoEmpleado) gastoempleadoLogic.getGastoEmpleados().toArray()[table.convertRowIndexToModel(intSelectedRow)];
		} else if(Constantes.ISUSAEJBREMOTE) {
			gastoempleadoRow=(GastoEmpleado) gastoempleados.toArray()[table.convertRowIndexToModel(intSelectedRow)];
		}
					
		
		
		return color;
	}
	
	
	
	
	
	
	
	public void refrescarBindingTabla(Boolean blnSoloTabla) {
	}
	
	public void inicializarActualizarBindingBotonesManualGastoEmpleado(Boolean esSetControles) {						
		if(esSetControles) {
			this.jButtonNuevoGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado));			
			this.jButtonDuplicarGastoEmpleado.setVisible((this.isVisibilidadCeldaDuplicarGastoEmpleado && this.isPermisoDuplicarGastoEmpleado));			
			this.jButtonCopiarGastoEmpleado.setVisible((this.isVisibilidadCeldaCopiarGastoEmpleado && this.isPermisoCopiarGastoEmpleado));
			this.jButtonVerFormGastoEmpleado.setVisible((this.isVisibilidadCeldaVerFormGastoEmpleado && this.isPermisoVerFormGastoEmpleado));
			
			this.jButtonAbrirOrderByGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));			
			
			this.jButtonNuevoRelacionesGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado && this.isPermisoNuevoGastoEmpleado));			
			this.jButtonNuevoGuardarCambiosGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarGastoEmpleado.setVisible((this.isVisibilidadCeldaModificarGastoEmpleado && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.setVisible((this.isVisibilidadCeldaActualizarGastoEmpleado && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.setVisible((this.isVisibilidadCeldaEliminarGastoEmpleado && this.isPermisoEliminarGastoEmpleado));
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.setVisible(this.isVisibilidadCeldaCancelarGastoEmpleado);							
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));			
			
			}
						
			this.jButtonGuardarCambiosTablaGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));							
			
			//TOOLBAR
			
			this.jButtonNuevoToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado));						
			this.jButtonDuplicarToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaDuplicarGastoEmpleado && this.isPermisoDuplicarGastoEmpleado));						
			this.jButtonCopiarToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaCopiarGastoEmpleado && this.isPermisoCopiarGastoEmpleado));			
			this.jButtonVerFormToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaVerFormGastoEmpleado && this.isPermisoVerFormGastoEmpleado));			
			this.jButtonAbrirOrderByToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));
			this.jButtonNuevoRelacionesToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado && this.isPermisoNuevoGastoEmpleado));			
			this.jButtonNuevoGuardarCambiosToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));			
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaModificarGastoEmpleado && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaActualizarGastoEmpleado  && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaEliminarGastoEmpleado && this.isPermisoEliminarGastoEmpleado));
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarToolBarGastoEmpleado.setVisible(this.isVisibilidadCeldaCancelarGastoEmpleado);				
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));									
			}
			
			this.jButtonGuardarCambiosTablaToolBarGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));									
			
			//TOOLBAR
			
			//MENUS
			
			this.jMenuItemNuevoGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado));			
			this.jMenuItemDuplicarGastoEmpleado.setVisible((this.isVisibilidadCeldaDuplicarGastoEmpleado && this.isPermisoDuplicarGastoEmpleado));			
			this.jMenuItemCopiarGastoEmpleado.setVisible((this.isVisibilidadCeldaCopiarGastoEmpleado && this.isPermisoCopiarGastoEmpleado));			
			this.jMenuItemVerFormGastoEmpleado.setVisible((this.isVisibilidadCeldaVerFormGastoEmpleado && this.isPermisoVerFormGastoEmpleado));			
			this.jMenuItemAbrirOrderByGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));			
			//this.jMenuItemMostrarOcultarGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));
			this.jMenuItemDetalleAbrirOrderByGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));			
			//this.jMenuItemDetalleMostrarOcultarGastoEmpleado.setVisible((this.isVisibilidadCeldaOrdenGastoEmpleado && this.isPermisoOrdenGastoEmpleado));			
			this.jMenuItemNuevoRelacionesGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado && this.isPermisoNuevoGastoEmpleado));			
			this.jMenuItemNuevoGuardarCambiosGastoEmpleado.setVisible((this.isVisibilidadCeldaNuevoGastoEmpleado && this.isPermisoNuevoGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));									
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemModificarGastoEmpleado.setVisible((this.isVisibilidadCeldaModificarGastoEmpleado && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemActualizarGastoEmpleado.setVisible((this.isVisibilidadCeldaActualizarGastoEmpleado && this.isPermisoActualizarGastoEmpleado));	
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemEliminarGastoEmpleado.setVisible((this.isVisibilidadCeldaEliminarGastoEmpleado && this.isPermisoEliminarGastoEmpleado));
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemCancelarGastoEmpleado.setVisible(this.isVisibilidadCeldaCancelarGastoEmpleado);				
			}
			
			this.jMenuItemGuardarCambiosGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));						
			this.jMenuItemGuardarCambiosTablaGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarCambiosGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));						
			
			//MENUS
			
		} else {
			this.isVisibilidadCeldaNuevoGastoEmpleado=this.jButtonNuevoGastoEmpleado.isVisible();
			this.isVisibilidadCeldaDuplicarGastoEmpleado=this.jButtonDuplicarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaCopiarGastoEmpleado=this.jButtonCopiarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaVerFormGastoEmpleado=this.jButtonVerFormGastoEmpleado.isVisible();
			
			this.isVisibilidadCeldaOrdenGastoEmpleado=this.jButtonAbrirOrderByGastoEmpleado.isVisible();			
			
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=this.jButtonNuevoRelacionesGastoEmpleado.isVisible();
			this.isVisibilidadCeldaModificarGastoEmpleado=this.jButtonModificarGastoEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.isVisibilidadCeldaActualizarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.isVisible();			
			}
			
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=this.jButtonGuardarCambiosTablaGastoEmpleado.isVisible();
			
			//TOOLBAR
			
			this.isVisibilidadCeldaNuevoGastoEmpleado=this.jButtonNuevoToolBarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=this.jButtonNuevoRelacionesToolBarGastoEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.isVisibilidadCeldaModificarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarToolBarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaActualizarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarToolBarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarToolBarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarToolBarGastoEmpleado.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarGastoEmpleado=this.jButtonGuardarCambiosToolBarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=this.jButtonGuardarCambiosTablaToolBarGastoEmpleado.isVisible();						
			
			//TOOLBAR
			
			//MENUS
			
			this.isVisibilidadCeldaNuevoGastoEmpleado=this.jMenuItemNuevoGastoEmpleado.isVisible();
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=this.jMenuItemNuevoRelacionesGastoEmpleado.isVisible();
			
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.isVisibilidadCeldaModificarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemModificarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaActualizarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemActualizarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaEliminarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemEliminarGastoEmpleado.isVisible();
			this.isVisibilidadCeldaCancelarGastoEmpleado=this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemCancelarGastoEmpleado.isVisible();
			}
			
			this.isVisibilidadCeldaGuardarGastoEmpleado=this.jMenuItemGuardarCambiosGastoEmpleado.isVisible();
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=this.jMenuItemGuardarCambiosTablaGastoEmpleado.isVisible();						
			
			//MENUS
		}
	}
	
	public void inicializarActualizarBindingBotonesGastoEmpleado(Boolean esInicializar) {
		if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {			
			if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
				//if(this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
				
				this.actualizarEstadoCeldasBotonesConGuardarRelacionesGastoEmpleado();
			}
			
			this.inicializarActualizarBindingBotonesManualGastoEmpleado(true);
			
		} else {	
		}
	}		
	
	public void inicializarActualizarBindingBotonesPermisosManualGastoEmpleado() {
		this.jButtonNuevoGastoEmpleado.setVisible(this.isPermisoNuevoGastoEmpleado);			
		this.jButtonDuplicarGastoEmpleado.setVisible(this.isPermisoDuplicarGastoEmpleado);			
		this.jButtonCopiarGastoEmpleado.setVisible(this.isPermisoCopiarGastoEmpleado);			
		this.jButtonVerFormGastoEmpleado.setVisible(this.isPermisoVerFormGastoEmpleado);			
		
		this.jButtonAbrirOrderByGastoEmpleado.setVisible(this.isPermisoOrdenGastoEmpleado);					
		
		this.jButtonNuevoRelacionesGastoEmpleado.setVisible(this.isPermisoNuevoGastoEmpleado);			
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarGastoEmpleado.setVisible(this.isPermisoActualizarGastoEmpleado);	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.setVisible(this.isPermisoActualizarGastoEmpleado);	
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.setVisible(this.isPermisoEliminarGastoEmpleado);
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.setVisible(this.isVisibilidadCeldaCancelarGastoEmpleado);						
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.setVisible(this.isPermisoGuardarCambiosGastoEmpleado);							
		}
		
		this.jButtonGuardarCambiosTablaGastoEmpleado.setVisible(this.isPermisoActualizarGastoEmpleado);
	}
	
	public void inicializarActualizarBindingBotonesPermisosManualFormDetalleGastoEmpleado() {
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarGastoEmpleado.setVisible(this.isPermisoActualizarGastoEmpleado);	
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.setVisible(this.isPermisoActualizarGastoEmpleado);	
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.setVisible(this.isPermisoEliminarGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.setVisible(this.isVisibilidadCeldaCancelarGastoEmpleado);							
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.setVisible((this.isVisibilidadCeldaGuardarGastoEmpleado && this.isPermisoGuardarCambiosGastoEmpleado));			
	}
	
	public void inicializarActualizarBindingBotonesPermisosGastoEmpleado() {
		if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL) {
			this.inicializarActualizarBindingBotonesPermisosManualGastoEmpleado();
		} else {
		}
	}
	
	
	public void refrescarBindingBotonesGastoEmpleado() {
	}
	
	public void jTableDatosGastoEmpleadoListSelectionListener(javax.swing.event.ListSelectionEvent evt) throws Exception { 
		try {
			this.seleccionarGastoEmpleado(null,evt,-1);
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void jButtonidGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getId()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id = "+this.gastoempleado.getId().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empresaGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempresa=true;

			idTienePermisoempresa=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(EmpresaConstantesFunciones.CLASSNAME);

			if(idTienePermisoempresa) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.empresaBeanSwingJInternalFrame=new EmpresaBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empresaBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empresaBeanSwingJInternalFrame.getEmpresaLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_empresa()!=null) {
					this.empresaBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empresaBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_empresa());
					this.empresaBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empresaBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpresa();
				}

				JInternalFrameBase jinternalFrame =this.empresaBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderempresa=(TitledBorder)this.empresaBeanSwingJInternalFrame.jScrollPanelDatosEmpresa.getBorder();

				titledBorderempresa.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Empresa");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empresaGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_empresa()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empresa = "+this.gastoempleado.getid_empresa().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_sucursalGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisosucursal=true;

			idTienePermisosucursal=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(SucursalConstantesFunciones.CLASSNAME);

			if(idTienePermisosucursal) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.sucursalBeanSwingJInternalFrame=new SucursalBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.sucursalBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.sucursalBeanSwingJInternalFrame.getSucursalLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_sucursal()!=null) {
					this.sucursalBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.sucursalBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_sucursal());
					this.sucursalBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.sucursalBeanSwingJInternalFrame.inicializarActualizarBindingTablaSucursal();
				}

				JInternalFrameBase jinternalFrame =this.sucursalBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBordersucursal=(TitledBorder)this.sucursalBeanSwingJInternalFrame.jScrollPanelDatosSucursal.getBorder();

				titledBordersucursal.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Sucursal");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_sucursalGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_sucursal()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_sucursal = "+this.gastoempleado.getid_sucursal().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_empleadoGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoempleado=true;

			idTienePermisoempleado=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(EmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.empleadoBeanSwingJInternalFrame=new EmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.empleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.empleadoBeanSwingJInternalFrame.getEmpleadoLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_empleado()!=null) {
					this.empleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.empleadoBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_empleado());
					this.empleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.empleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.empleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderempleado=(TitledBorder)this.empleadoBeanSwingJInternalFrame.jScrollPanelDatosEmpleado.getBorder();

				titledBorderempleado.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_empleadoGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_empleado = "+this.gastoempleado.getid_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ejercicioGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoejercicio=true;

			idTienePermisoejercicio=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(EjercicioConstantesFunciones.CLASSNAME);

			if(idTienePermisoejercicio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.ejercicioBeanSwingJInternalFrame=new EjercicioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ejercicioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ejercicioBeanSwingJInternalFrame.getEjercicioLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_ejercicio()!=null) {
					this.ejercicioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ejercicioBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_ejercicio());
					this.ejercicioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ejercicioBeanSwingJInternalFrame.inicializarActualizarBindingTablaEjercicio();
				}

				JInternalFrameBase jinternalFrame =this.ejercicioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderejercicio=(TitledBorder)this.ejercicioBeanSwingJInternalFrame.jScrollPanelDatosEjercicio.getBorder();

				titledBorderejercicio.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Ejercicio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ejercicioGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_ejercicio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ejercicio = "+this.gastoempleado.getid_ejercicio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_paisGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisopais=true;

			idTienePermisopais=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(PaisConstantesFunciones.CLASSNAME);

			if(idTienePermisopais) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.paisBeanSwingJInternalFrame=new PaisBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.paisBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.paisBeanSwingJInternalFrame.getPaisLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_pais()!=null) {
					this.paisBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.paisBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_pais());
					this.paisBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.paisBeanSwingJInternalFrame.inicializarActualizarBindingTablaPais();
				}

				JInternalFrameBase jinternalFrame =this.paisBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderpais=(TitledBorder)this.paisBeanSwingJInternalFrame.jScrollPanelDatosPais.getBorder();

				titledBorderpais.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Pais");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_paisGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_pais()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_pais = "+this.gastoempleado.getid_pais().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_ciudadGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisociudad=true;

			idTienePermisociudad=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(CiudadConstantesFunciones.CLASSNAME);

			if(idTienePermisociudad) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.ciudadBeanSwingJInternalFrame=new CiudadBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.ciudadBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.ciudadBeanSwingJInternalFrame.getCiudadLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_ciudad()!=null) {
					this.ciudadBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.ciudadBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_ciudad());
					this.ciudadBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.ciudadBeanSwingJInternalFrame.inicializarActualizarBindingTablaCiudad();
				}

				JInternalFrameBase jinternalFrame =this.ciudadBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderciudad=(TitledBorder)this.ciudadBeanSwingJInternalFrame.jScrollPanelDatosCiudad.getBorder();

				titledBorderciudad.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Ciudad");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_ciudadGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_ciudad()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_ciudad = "+this.gastoempleado.getid_ciudad().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_anioGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoanio=true;

			idTienePermisoanio=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(AnioConstantesFunciones.CLASSNAME);

			if(idTienePermisoanio) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.anioBeanSwingJInternalFrame=new AnioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.anioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.anioBeanSwingJInternalFrame.getAnioLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_anio()!=null) {
					this.anioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.anioBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_anio());
					this.anioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.anioBeanSwingJInternalFrame.inicializarActualizarBindingTablaAnio();
				}

				JInternalFrameBase jinternalFrame =this.anioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderanio=(TitledBorder)this.anioBeanSwingJInternalFrame.jScrollPanelDatosAnio.getBorder();

				titledBorderanio.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Anio");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_anioGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_anio()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_anio = "+this.gastoempleado.getid_anio().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_mesGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisomes=true;

			idTienePermisomes=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(MesConstantesFunciones.CLASSNAME);

			if(idTienePermisomes) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.mesBeanSwingJInternalFrame=new MesBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.mesBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.mesBeanSwingJInternalFrame.getMesLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_mes()!=null) {
					this.mesBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.mesBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_mes());
					this.mesBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.mesBeanSwingJInternalFrame.inicializarActualizarBindingTablaMes();
				}

				JInternalFrameBase jinternalFrame =this.mesBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBordermes=(TitledBorder)this.mesBeanSwingJInternalFrame.jScrollPanelDatosMes.getBorder();

				titledBordermes.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Mes");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_mesGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_mes()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_mes = "+this.gastoempleado.getid_mes().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtondiaGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getdia()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where dia = "+this.gastoempleado.getdia().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_usuarioGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisousuario=true;

			idTienePermisousuario=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(UsuarioConstantesFunciones.CLASSNAME);

			if(idTienePermisousuario) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.usuarioBeanSwingJInternalFrame=new UsuarioBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.usuarioBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.usuarioBeanSwingJInternalFrame.getUsuarioLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_usuario()!=null) {
					this.usuarioBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.usuarioBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_usuario());
					this.usuarioBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.usuarioBeanSwingJInternalFrame.inicializarActualizarBindingTablaUsuario();
				}

				JInternalFrameBase jinternalFrame =this.usuarioBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderusuario=(TitledBorder)this.usuarioBeanSwingJInternalFrame.jScrollPanelDatosUsuario.getBorder();

				titledBorderusuario.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Usuario");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_usuarioGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_usuario()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_usuario = "+this.gastoempleado.getid_usuario().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonid_estado_gasto_empleadoGastoEmpleadoUpdateActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			Boolean idTienePermisoestadogastoempleado=true;

			idTienePermisoestadogastoempleado=this.tienePermisosUsuarioEnPaginaWebGastoEmpleado(EstadoGastoEmpleadoConstantesFunciones.CLASSNAME);

			if(idTienePermisoestadogastoempleado) {
				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow<0 && this.jTableDatosGastoEmpleado.getRowCount()>0) {
					intSelectedRow =0;
					this.jTableDatosGastoEmpleado.setRowSelectionInterval(intSelectedRow,intSelectedRow);
				}
				//ARCHITECTURE
				/*
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				*/
				//ARCHITECTURE

				this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
				this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);

				this.estadogastoempleadoBeanSwingJInternalFrame=new EstadoGastoEmpleadoBeanSwingJInternalFrame(true,true,this.jDesktopPane,this.usuarioActual,this.resumenUsuarioActual,this.moduloActual,this.opcionActual,this.parametroGeneralSg,this.parametroGeneralUsuario,PaginaTipo.AUXILIAR,false,false,false,true);
				this.estadogastoempleadoBeanSwingJInternalFrame.setJInternalFrameParent(this);

				this.estadogastoempleadoBeanSwingJInternalFrame.getEstadoGastoEmpleadoLogic().setConnexion(this.gastoempleadoLogic.getConnexion());

				if(this.gastoempleado.getid_estado_gasto_empleado()!=null) {
					this.estadogastoempleadoBeanSwingJInternalFrame.sTipoBusqueda="PorId";
					this.estadogastoempleadoBeanSwingJInternalFrame.setIdActual(this.gastoempleado.getid_estado_gasto_empleado());
					this.estadogastoempleadoBeanSwingJInternalFrame.procesarBusqueda("PorId");
					this.estadogastoempleadoBeanSwingJInternalFrame.setsAccionBusqueda("PorId");
					this.estadogastoempleadoBeanSwingJInternalFrame.inicializarActualizarBindingTablaEstadoGastoEmpleado();
				}

				JInternalFrameBase jinternalFrame =this.estadogastoempleadoBeanSwingJInternalFrame;
				jinternalFrame.setAutoscrolls(true);
				//frame.setSize(screenSize.width-inset*7 , screenSize.height-inset*9);
				jinternalFrame.setVisible(true); 


				TitledBorder titledBorderGastoEmpleado=(TitledBorder)this.jScrollPanelDatosGastoEmpleado.getBorder();
				TitledBorder titledBorderestadogastoempleado=(TitledBorder)this.estadogastoempleadoBeanSwingJInternalFrame.jScrollPanelDatosEstadoGastoEmpleado.getBorder();

				titledBorderestadogastoempleado.setTitle(titledBorderGastoEmpleado.getTitle() + " -> Estado Gasto Empleado");


				if(!Constantes.CON_VARIAS_VENTANAS) {
					MainJFrame.cerrarJInternalFramesExistentes(this.jDesktopPane,jinternalFrame);
				}

				this.jDesktopPane.add(jinternalFrame);

				jinternalFrame.setSelected(true);
			} else {
				throw new Exception("NO TIENE PERMISO PARA TRABAJAR CON ESTA INFORMACION");
			}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}


		} catch(Exception e) {

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}

		}
	}

	public void jButtonid_estado_gasto_empleadoGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getid_estado_gasto_empleado()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where id_estado_gasto_empleado = "+this.gastoempleado.getid_estado_gasto_empleado().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ingreso_actualGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.gettotal_ingreso_actual()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_ingreso_actual = "+this.gastoempleado.gettotal_ingreso_actual().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ingreso_otroGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.gettotal_ingreso_otro()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_ingreso_otro = "+this.gastoempleado.gettotal_ingreso_otro().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_ingresoGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.gettotal_ingreso()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_ingreso = "+this.gastoempleado.gettotal_ingreso().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_viviendaGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getgasto_vivienda()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_vivienda = "+this.gastoempleado.getgasto_vivienda().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_educacionGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getgasto_educacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_educacion = "+this.gastoempleado.getgasto_educacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_saludGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getgasto_salud()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_salud = "+this.gastoempleado.getgasto_salud().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_vestimentaGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getgasto_vestimenta()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_vestimenta = "+this.gastoempleado.getgasto_vestimenta().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtongasto_alimentacionGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getgasto_alimentacion()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where gasto_alimentacion = "+this.gastoempleado.getgasto_alimentacion().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_gasto_actualGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.gettotal_gasto_actual()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_gasto_actual = "+this.gastoempleado.gettotal_gasto_actual().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtontotal_gastoGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.gettotal_gasto()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where total_gasto = "+this.gastoempleado.gettotal_gasto().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonfechaGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getfecha()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where fecha = '"+Funciones2.getStringPostgresDate(this.gastoempleado.getfecha())+"' ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonporcentajeGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getporcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where porcentaje = "+this.gastoempleado.getporcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_maximoGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getvalor_maximo()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_maximo = "+this.gastoempleado.getvalor_maximo().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	public void jButtonvalor_maximo_porcentajeGastoEmpleadoBusquedaActionPerformed(java.awt.event.ActionEvent evt) throws Exception {
		try {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.getNewConnexionToDeep("");
				}

				//TOCA TRAER NUEVAMENTE, YA QUE SE PIERDE REGISTRO ACTUAL
				int intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();

				if(intSelectedRow>-1) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.getgastoempleado(),true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
					//ARCHITECTURE
					/*
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
						this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					*/
					//ARCHITECTURE

				} else {
					if(this.gastoempleado==null) {
						this.gastoempleado = new GastoEmpleado();
					}

					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);
				}

				if(this.gastoempleado.getvalor_maximo_porcentaje()!=null) {

					this.sAccionBusqueda="Query";

					this.sFinalQueryGeneral=" where valor_maximo_porcentaje = "+this.gastoempleado.getvalor_maximo_porcentaje().toString()+" ";

					if(Constantes.ISDEVELOPING) {
						System.out.println(this.sFinalQueryGeneral);
					}

					this.procesarBusqueda(this.sAccionBusqueda);

					this.inicializarActualizarBindingGastoEmpleado(false);
				}

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.commitNewConnexionToDeep();
				}

			} catch(Exception e) {

				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.rollbackNewConnexionToDeep();
				}

				FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

			} finally {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoLogic.closeNewConnexionToDeep();
				}

			}
		}

	
	
	public void jButtonFK_IdAnioGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdAnio();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdCiudadGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdCiudad();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEjercicioGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdEjercicio();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpleadoGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdEmpleado();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEmpresaGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdEmpresa();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdEstadoGastoEmpleadoGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdEstadoGastoEmpleado();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdMesGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdMes();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdPaisGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdPais();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdSucursalGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdSucursal();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	public void jButtonFK_IdUsuarioGastoEmpleadoActionPerformed(ActionEvent evt) throws Exception {
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.getNewConnexionToDeep("");
			}

			this.iNumeroPaginacionPagina=0;
			this.inicializarActualizarBindingGastoEmpleado(false,false);

			this.getGastoEmpleadosFK_IdUsuario();

			this.inicializarActualizarBindingGastoEmpleado(false);

			//if(GastoEmpleadoBeanSwingJInternalFrame.ISBINDING_MANUAL) {
			//this.inicializarActualizarBindingGastoEmpleado(false,false);
			//}

			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.commitNewConnexionToDeep();
			}
		} catch(Exception e) {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.rollbackNewConnexionToDeep();
			}

			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);

		} finally {
			if(Constantes.ISUSAEJBLOGICLAYER) {
				this.gastoempleadoLogic.closeNewConnexionToDeep();
			}
		}
	}

	
	public void closingInternalFrameGastoEmpleado() {
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			
		
		
		}
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
			this.jInternalFrameDetalleFormGastoEmpleado.setVisible(false);	    			
			this.jInternalFrameDetalleFormGastoEmpleado.dispose();
			this.jInternalFrameDetalleFormGastoEmpleado=null;
		}
		
		
		if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
			this.jInternalFrameReporteDinamicoGastoEmpleado.setVisible(false);	    			
			this.jInternalFrameReporteDinamicoGastoEmpleado.dispose();
			this.jInternalFrameReporteDinamicoGastoEmpleado=null;
		}
		
		if(this.jInternalFrameImportacionGastoEmpleado!=null) {
			this.jInternalFrameImportacionGastoEmpleado.setVisible(false);	    			
			this.jInternalFrameImportacionGastoEmpleado.dispose();
			this.jInternalFrameImportacionGastoEmpleado=null;
		}		
		
		
		this.setVisible(false);
		this.dispose();
		//this=null;
	}
	
	
	
	public void jButtonActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {			
			this.startProcessGastoEmpleado();
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			
			if(sTipo.equals("NuevoGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarGastoEmpleado")) {
				jButtonDuplicarGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("CopiarGastoEmpleado")) {
				jButtonCopiarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("VerFormGastoEmpleado")) {
				jButtonVerFormGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoToolBarGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("DuplicarToolBarGastoEmpleado")) {
				jButtonDuplicarGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemNuevoGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("MenuItemDuplicarGastoEmpleado")) {
				jButtonDuplicarGastoEmpleadoActionPerformed(evt,false);
			} else if(sTipo.equals("NuevoRelacionesGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("NuevoRelacionesToolBarGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("MenuItemNuevoRelacionesGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,true);
			} else if(sTipo.equals("ModificarGastoEmpleado")) {
				jButtonModificarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ModificarToolBarGastoEmpleado")) {
				jButtonModificarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemModificarGastoEmpleado")) {
				jButtonModificarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarGastoEmpleado")) {
				jButtonActualizarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("ActualizarToolBarGastoEmpleado")) {
				jButtonActualizarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemActualizarGastoEmpleado")) {
				jButtonActualizarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("EliminarGastoEmpleado")) {
				jButtonEliminarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("EliminarToolBarGastoEmpleado")) {
				jButtonEliminarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemEliminarGastoEmpleado")) {
				jButtonEliminarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CancelarGastoEmpleado")) {
				jButtonCancelarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CancelarToolBarGastoEmpleado")) {
				jButtonCancelarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCancelarGastoEmpleado")) {
				jButtonCancelarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CerrarGastoEmpleado")) {
				jButtonCerrarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CerrarToolBarGastoEmpleado")) {
				jButtonCerrarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCerrarGastoEmpleado")) {
				jButtonCerrarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MostrarOcultarToolBarGastoEmpleado")) {
				jButtonMostrarOcultarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemDetalleCerrarGastoEmpleado")) {
				jButtonCancelarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosToolBarGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("CopiarToolBarGastoEmpleado")) {
				jButtonCopiarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("VerFormToolBarGastoEmpleado")) {
				jButtonVerFormGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemCopiarGastoEmpleado")) {
				jButtonCopiarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemVerFormGastoEmpleado")) {
				jButtonVerFormGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GuardarCambiosTablaToolBarGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemGuardarCambiosTablaGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionGastoEmpleado")) {
				jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("RecargarInformacionToolBarGastoEmpleado")) {
				jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemRecargarInformacionGastoEmpleado")) {
				jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("AnterioresGastoEmpleado")) {
				jButtonAnterioresGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("AnterioresToolBarGastoEmpleado")) {
				jButtonAnterioresGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAnterioreGastoEmpleado")) {
				jButtonAnterioresGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesGastoEmpleado")) {
				jButtonSiguientesGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("SiguientesToolBarGastoEmpleado")) {
				jButtonSiguientesGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemSiguientesGastoEmpleado")) {
				jButtonSiguientesGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemAbrirOrderByGastoEmpleado") || sTipo.equals("MenuItemDetalleAbrirOrderByGastoEmpleado")) {
				jButtonAbrirOrderByGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemMostrarOcultarGastoEmpleado") || sTipo.equals("MenuItemDetalleMostrarOcultarGastoEmpleado")) {
				jButtonMostrarOcultarGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosGastoEmpleado")) {
				jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("NuevoGuardarCambiosToolBarGastoEmpleado")) {
				jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("MenuItemNuevoGuardarCambiosGastoEmpleado")) {
				jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);
			} 
			else if(sTipo.equals("CerrarReporteDinamicoGastoEmpleado")) {
				jButtonCerrarReporteDinamicoGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarReporteDinamicoGastoEmpleado")) {
				jButtonGenerarReporteDinamicoGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarExcelReporteDinamicoGastoEmpleado")) {
				
				jButtonGenerarExcelReporteDinamicoGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarImportacionGastoEmpleado")) {
				jButtonCerrarImportacionGastoEmpleadoActionPerformed(evt);
			} else if(sTipo.equals("GenerarImportacionGastoEmpleado")) {
				
				jButtonGenerarImportacionGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirImportacionGastoEmpleado")) {
				
				jButtonAbrirImportacionGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("TiposAccionesGastoEmpleado")) {
				jComboBoxTiposAccionesGastoEmpleadoActionListener(evt,false);
			} else if(sTipo.equals("TiposRelacionesGastoEmpleado")) {
				jComboBoxTiposRelacionesGastoEmpleadoActionListener(evt);
			} else if(sTipo.equals("TiposAccionesFormularioGastoEmpleado")) {
				jComboBoxTiposAccionesGastoEmpleadoActionListener(evt,true);
			} else if(sTipo.equals("TiposSeleccionarGastoEmpleado")) {
				
				jComboBoxTiposSeleccionarGastoEmpleadoActionListener(evt);
				
			} else if(sTipo.equals("ValorCampoGeneralGastoEmpleado")) {
				jTextFieldValorCampoGeneralGastoEmpleadoActionListener(evt);
			}
			
			
			else if(sTipo.equals("AbrirOrderByGastoEmpleado")) {
				jButtonAbrirOrderByGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("AbrirOrderByToolBarGastoEmpleado")) {
				jButtonAbrirOrderByGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarOrderByGastoEmpleado")) {
				jButtonCerrarOrderByGastoEmpleadoActionPerformed(evt);
			} 
						
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idGastoEmpleadoBusqueda")) {
				this.jButtonidGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaGastoEmpleadoUpdate")) {
				this.jButtonid_empresaGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaGastoEmpleadoBusqueda")) {
				this.jButtonid_empresaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalGastoEmpleadoUpdate")) {
				this.jButtonid_sucursalGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalGastoEmpleadoBusqueda")) {
				this.jButtonid_sucursalGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoGastoEmpleadoUpdate")) {
				this.jButtonid_empleadoGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoGastoEmpleadoBusqueda")) {
				this.jButtonid_empleadoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioGastoEmpleadoUpdate")) {
				this.jButtonid_ejercicioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioGastoEmpleadoBusqueda")) {
				this.jButtonid_ejercicioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisGastoEmpleadoUpdate")) {
				this.jButtonid_paisGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisGastoEmpleadoBusqueda")) {
				this.jButtonid_paisGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadGastoEmpleadoUpdate")) {
				this.jButtonid_ciudadGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadGastoEmpleadoBusqueda")) {
				this.jButtonid_ciudadGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioGastoEmpleadoUpdate")) {
				this.jButtonid_anioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioGastoEmpleadoBusqueda")) {
				this.jButtonid_anioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesGastoEmpleadoUpdate")) {
				this.jButtonid_mesGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesGastoEmpleadoBusqueda")) {
				this.jButtonid_mesGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("diaGastoEmpleadoBusqueda")) {
				this.jButtondiaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioGastoEmpleadoUpdate")) {
				this.jButtonid_usuarioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioGastoEmpleadoBusqueda")) {
				this.jButtonid_usuarioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_gasto_empleadoGastoEmpleadoUpdate")) {
				this.jButtonid_estado_gasto_empleadoGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_gasto_empleadoGastoEmpleadoBusqueda")) {
				this.jButtonid_estado_gasto_empleadoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingreso_actualGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingreso_actualGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingreso_otroGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingreso_otroGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingresoGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingresoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_viviendaGastoEmpleadoBusqueda")) {
				this.jButtongasto_viviendaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_educacionGastoEmpleadoBusqueda")) {
				this.jButtongasto_educacionGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_saludGastoEmpleadoBusqueda")) {
				this.jButtongasto_saludGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_vestimentaGastoEmpleadoBusqueda")) {
				this.jButtongasto_vestimentaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_alimentacionGastoEmpleadoBusqueda")) {
				this.jButtongasto_alimentacionGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_gasto_actualGastoEmpleadoBusqueda")) {
				this.jButtontotal_gasto_actualGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_gastoGastoEmpleadoBusqueda")) {
				this.jButtontotal_gastoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaGastoEmpleadoBusqueda")) {
				this.jButtonfechaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentajeGastoEmpleadoBusqueda")) {
				this.jButtonporcentajeGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_maximoGastoEmpleadoBusqueda")) {
				this.jButtonvalor_maximoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_maximo_porcentajeGastoEmpleadoBusqueda")) {
				this.jButtonvalor_maximo_porcentajeGastoEmpleadoBusquedaActionPerformed(evt);
			}
			
			
			
			
			else if(sTipo.equals("FK_IdAnioGastoEmpleado")) {
				this.jButtonFK_IdAnioGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdCiudadGastoEmpleado")) {
				this.jButtonFK_IdCiudadGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEmpleadoGastoEmpleado")) {
				this.jButtonFK_IdEmpleadoGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdEstadoGastoEmpleadoGastoEmpleado")) {
				this.jButtonFK_IdEstadoGastoEmpleadoGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdMesGastoEmpleado")) {
				this.jButtonFK_IdMesGastoEmpleadoActionPerformed(evt);
			}
			else if(sTipo.equals("FK_IdPaisGastoEmpleado")) {
				this.jButtonFK_IdPaisGastoEmpleadoActionPerformed(evt);
			}
			
			;
			
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.BUTTON,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
			
  		} finally {
      		this.finishProcessGastoEmpleado();
      	}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				JTextField jTextField=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				if(containerParent!=null && containerParent.getClass().equals(JTableMe.class)) {
					esControlTabla=true;
				}
						
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
				}
				
			} catch(Exception e) {
  				FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  			}
    }
	
	public Boolean existeCambioValor(ControlTipo controlTipo,String sTipo) throws Exception {
		Boolean existeCambio=true;
		
		try {
			GastoEmpleado gastoempleadoLocal=null;
			
			if(!this.getEsControlTabla()) {
				gastoempleadoLocal=this.gastoempleado;
			} else {
				gastoempleadoLocal=this.gastoempleadoAnterior;
			}
			
			if(controlTipo.equals(ControlTipo.TEXTBOX)) {
				


			}
		
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
		
		return existeCambio;
	}
	
	public void jTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParent=jTextField.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
							
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	//CUANDO SE CAMBIA ALGUN FORMATO(TIPO DE LETRA,NEGRILLA,ETC)
	public void jTextFieldChangedUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextField jTextField=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextField=(JTextField)evt.getSource();
			
			containerParent=jTextField.getParent();
					
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {					
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE QUITA ALGUN CARACTER
	public void jTextFieldRemoveUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//CUANDO SE INGRESA ALGUN CARACTER
	public void jTextFieldInsertUpdateGeneral(String sTipo,JTextField jTextField,DocumentEvent evt) { 	  
		try {
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//FUNCIONA AL APLASTAR ENTER
	public void jFormattedTextFieldActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				Container containerParent=null;
				Container containerParentAux=null;
				JFormattedTextField JFormattedTextField=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JFormattedTextField=(JFormattedTextField)evt.getSource();
				
				containerParentAux=JFormattedTextField.getParent();
				
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
								
						
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"DATE",esControlTabla,conIrServidorAplicacionParent,
							id,JFormattedTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextField jTextField=null;
				Container containerParent=null;
				Container containerParentAux=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextField=(JTextField)evt.getSource();
				
				containerParentAux=jTextField.getParent();
						
				if(containerParentAux!=null && containerParentAux.getClass().equals(JDateChooser.class)) {
					containerParent=containerParentAux.getParent();
				}
				
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
								
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.DATE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jTextField, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jFormattedTextFieldFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.DATE,sTipo)) {
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
			}	
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jDateChooserActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }	
	
	public void jTextAreaFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.TEXTAREA,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JTextArea jTextArea=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jTextArea=(JTextArea)evt.getSource();
				
				containerParent=jTextArea.getParent();
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
							
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTAREA",esControlTabla,conIrServidorAplicacionParent,
							id,jTextArea, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaChangedUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			/*
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			//System.out.println("UPDATE");
			
			Boolean esControlTabla=false;
			//JTextArea jTextArea=null;
			Container containerParent=null;
			Component componentOpposite=null;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			//jTextArea=(JTextArea)evt.getSource();
			
			containerParent=jTextArea.getParent();
			componentOpposite=null;//evt.getOppositeComponent();
			
			if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
				|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
			) {
				esControlTabla=true;
			}
			
			this.esControlTabla=esControlTabla;
			
			


			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTAREA,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			*/
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaRemoveUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			//System.out.println("REMOVE");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jTextAreaInsertUpdateGeneral(String sTipo,JTextArea jTextArea,DocumentEvent evt) { 	  
		try {
			
			//System.out.println("INSERT");
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jTextAreaActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JLabel jLabel=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jLabel=(JLabel)evt.getSource();
				
				containerParent=jLabel.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
								
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jLabel, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.TEXTBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jLabelFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO EXISTE O NO ES APLICABLE
	public void jLabelActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
				
			this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
			
			this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxItemListenerGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
				
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
							
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
												
				
				if(sTipo.equals("SeleccionarTodosGastoEmpleado")) {
					jCheckBoxSeleccionarTodosGastoEmpleadoItemListener(evt);
				
				} else if(sTipo.equals("SeleccionadosGastoEmpleado")) {
					jCheckBoxSeleccionadosGastoEmpleadoItemListener(evt);
				
				} else if(sTipo.equals("NuevoToolBarGastoEmpleado")) {
					
				}
				
				


				
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}	
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl() && this.existeCambioValor(ControlTipo.CHECKBOX,sTipo)) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				Boolean esControlTabla=false;
				JCheckBox jCheckBox=null;
				Container containerParent=null;
				Component componentOpposite=null;
				
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
				
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				jCheckBox=(JCheckBox)evt.getSource();
				
				containerParent=jCheckBox.getParent();
						
				componentOpposite=evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
				
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				//this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				//this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
												
				
				


				
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
					
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jCheckBox, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
			
				//SELECCIONA FILA A OBJETO ANTERIOR
				Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
						
				if(intSelectedRow!=null && intSelectedRow>-1) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {
						this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
						this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
					}
					//ARCHITECTURE
					
					//System.out.println(this.banco);
				}
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void jCheckBoxActionPerformedGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.CHECKBOX,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//NO SE UTILIZA, SE USA EL DE ABAJO, IGUAL SE DEJA EL CODIGO COMO RESPALDO Y ES CASI IGUAL
	//ERROR:SI SE USA,AL HACER CLIC EN EL MISMO ELEMENTO O EJECUTAR SELECTEDITEM, SIEMPRE SE EJECUTA COMO SI ESCOGIERA OTRO ELEMENTO(NO DEBERIA)
	//@SuppressWarnings("rawtypes")
	public void jComboBoxActionPerformedGeneral(String sTipo,ActionEvent evt) {		
		try {
			/*		
			EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
			
			if(this.esUsoDesdeHijo) {
				eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
			}
			
			Container containerParent=null;
			Component componentOpposite=null;
			Boolean esControlTabla=false;
				
			ArrayList<Classe> classes=new ArrayList<Classe>();
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			JComboBox jComboBoxGenerico=null;						
			
			if(evt.getSource().getClass().equals(JComboBox.class)
				|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
					
				jComboBoxGenerico=(JComboBox)evt.getSource();
				
				containerParent=jComboBoxGenerico.getParent();
				
				componentOpposite=null;//evt.getOppositeComponent();
				
				if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
				) {					
					esControlTabla=true;
				}
				
				this.esControlTabla=esControlTabla;
			}
			
			String sFinalQueryCombo="";
			
			


			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			*/						
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}		
    }
	
	@SuppressWarnings("rawtypes")
	public void jComboBoxItemStateChangedGeneral(String sTipo,ItemEvent evt) { 	  
		try {
			if (evt.getStateChange() == ItemEvent.SELECTED && this.permiteManejarEventosControl()) {
				//SELECCIONA FILA A OBJETO ACTUAL			
				this.seleccionarFilaTablaGastoEmpleadoActual();
			
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
			
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				/*
				if(this.esUsoDesdeHijo) {
					eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				}
				*/
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=null;//evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}		
					
					this.esControlTabla=esControlTabla;
				}
				
				
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				String sFinalQueryCombo="";
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
				
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
								
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"COMBOBOX",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	//@SuppressWarnings("rawtypes")
	public void jComboBoxFocusLostGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		//MANEJADO EN ITEMLISTENER
		/*
		try {
			if(this.permiteManejarEventosControl()) {
				EventoGlobalTipo eventoGlobalTipo=EventoGlobalTipo.CONTROL_CHANGE;
				
				
				//if(this.esUsoDesdeHijo) {
				//	eventoGlobalTipo=EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				//}
				
				
				Container containerParent=null;
				Component componentOpposite=null;
				Boolean esControlTabla=false;
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				//PARAMETROS LLAMAR FUNCION PARENT
				GeneralEntityParameterGeneral generalEntityParameterGeneral=new GeneralEntityParameterGeneral();			
				Boolean esUsoDesdeHijoLocal=false;
				Boolean conIrServidorAplicacionParent=false;	
				ArrayList<String> arrClasses=new ArrayList<String>();			
				//PARAMETROS LLAMAR FUNCION PARENT_FIN
			
				this.actualizarInformacion("EVENTO_CONTROL",false,this.gastoempleado);
				
				this.actualizarInformacion("INFO_PADRE",false,this.gastoempleado);
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				JComboBox jComboBoxGenerico=null;						
				
				if(evt.getSource().getClass().equals(JComboBox.class)
					|| evt.getSource().getClass().equals(JComboBoxMe.class)) {
						
					jComboBoxGenerico=(JComboBox)evt.getSource();
					
					containerParent=jComboBoxGenerico.getParent();
					
					componentOpposite=evt.getOppositeComponent();
					
					if((containerParent!=null && containerParent.getClass().equals(JTableMe.class))
					|| (componentOpposite!=null && componentOpposite.getClass().equals(JTableMe.class))
					) {					
						esControlTabla=true;
					}
					
					this.esControlTabla=esControlTabla;
				}
				
				String sFinalQueryCombo="";
				
				


				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				
				if(esUsoDesdeHijoLocal) {
					Long id=0L;
					
					generalEntityParameterGeneral.setEventoGlobalTipo(EventoGlobalTipo.FORM_HIJO_ACTUALIZAR);
					generalEntityParameterGeneral.setsDominio("Formulario");
					generalEntityParameterGeneral.setsDominioTipo(GastoEmpleado.class.getName());
				
					if(this.jInternalFrameParent!=null) {
						this.jInternalFrameParent.setEventoParentGeneral(esUsoDesdeHijoLocal,"Formulario",GastoEmpleado.class.getName(),sTipo,"TEXTFIELD",esControlTabla,conIrServidorAplicacionParent,
							id,jComboBoxGenerico, EventoGlobalTipo.FORM_HIJO_ACTUALIZAR,ControlTipo.COMBOBOX,EventoTipo.CHANGE,EventoSubTipo.CHANGED,arrClasses,
							evt,generalEntityParameterGeneral,null);
					}
				}			
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
		
		*/
    }
	
	public void jComboBoxFocusGainedGeneral(String sTipo,java.awt.event.FocusEvent evt) { 	  
		try {
			//SELECCIONA FILA A OBJETO ACTUAL			
			this.seleccionarFilaTablaGastoEmpleadoActual();
			
			//SELECCIONA FILA A OBJETO ANTERIOR
			Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
					
			if(intSelectedRow!=null && intSelectedRow>-1) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
					this.gastoempleadoAnterior =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
				}
				//ARCHITECTURE
				
				//System.out.println(this.banco);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }		
	
	public void tableValueChangedGeneral(String sTipo,ListSelectionEvent evt) { 	  
		try {
			if(this.permiteManejarEventosControl()) {
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
				
				if(sTipo.equals("TableDatosSeleccionarGastoEmpleado")) {
					//BYDAN_DESHABILITADO
					//try {jTableDatosGastoEmpleadoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
					
					//SOLO CUANDO MOUSE ES SOLTADO
					if (!evt.getValueIsAdjusting()) {
						//SELECCIONA FILA A OBJETO ACTUAL
						Integer intSelectedRow = this.jTableDatosGastoEmpleado.getSelectedRow();
						
						if(intSelectedRow!=null && intSelectedRow>-1) {
							//ARCHITECTURE
							if(Constantes.ISUSAEJBLOGICLAYER) {
								this.gastoempleado =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
							} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
								this.gastoempleado =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(intSelectedRow)];
							}
							//ARCHITECTURE
							
							//System.out.println(this.gastoempleado);
						}
					}
					
				} else if(sTipo.equals("jButtonCancelarGastoEmpleado")) {
				
				}
				
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.CHANGE,EventoSubTipo.CHANGED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			}
			
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void tableMouseAdapterGeneral(String sTipo,MouseEvent evt) { 	  
		try {
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			if(sTipo.equals("DatosSeleccionarGastoEmpleado")) {
				if (evt.getClickCount() == 2) {
					jButtonIdActionPerformed(null,jTableDatosGastoEmpleado.getSelectedRow(),false,false);
				}	
			} else if(sTipo.equals("jButtonCancelarGastoEmpleado")) {
			
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.TABLE,EventoTipo.MOUSE,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	;
	
	public void jButtonActionPerformedTecladoGeneral(String sTipo,ActionEvent evt) { 	  
		try {
			this.startProcessGastoEmpleado();
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			if(sTipo.equals("NuevoGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,false);
				
			} else if(sTipo.equals("DuplicarGastoEmpleado")) {
				jButtonDuplicarGastoEmpleadoActionPerformed(evt,false);
				
			} else if(sTipo.equals("CopiarGastoEmpleado")) {
				jButtonCopiarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("VerFormGastoEmpleado")) {
				jButtonVerFormGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("NuevoRelacionesGastoEmpleado")) {
				jButtonNuevoGastoEmpleadoActionPerformed(evt,true);
				
			} else if(sTipo.equals("ModificarGastoEmpleado")) {
				jButtonModificarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("ActualizarGastoEmpleado")) {
				jButtonActualizarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("EliminarGastoEmpleado")) {
				jButtonEliminarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosTablaGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CancelarGastoEmpleado")) {
				jButtonCancelarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("CerrarGastoEmpleado")) {
				jButtonCerrarGastoEmpleadoActionPerformed(evt);
				
			} else if(sTipo.equals("GuardarCambiosGastoEmpleado")) {
				jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("NuevoGuardarCambiosGastoEmpleado")) {
				jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("AbrirOrderByGastoEmpleado")) {
				jButtonAbrirOrderByGastoEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("RecargarInformacionGastoEmpleado")) {
				jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);
			
			} else if(sTipo.equals("AnterioresGastoEmpleado")) {
				jButtonAnterioresGastoEmpleadoActionPerformed(evt);			
			
			}  else if(sTipo.equals("SiguientesGastoEmpleado")) {
				jButtonSiguientesGastoEmpleadoActionPerformed(evt);			
			} 
			
			
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("idGastoEmpleadoBusqueda")) {
				this.jButtonidGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empresaGastoEmpleadoUpdate")) {
				this.jButtonid_empresaGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empresaGastoEmpleadoBusqueda")) {
				this.jButtonid_empresaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_sucursalGastoEmpleadoUpdate")) {
				this.jButtonid_sucursalGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_sucursalGastoEmpleadoBusqueda")) {
				this.jButtonid_sucursalGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_empleadoGastoEmpleadoUpdate")) {
				this.jButtonid_empleadoGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_empleadoGastoEmpleadoBusqueda")) {
				this.jButtonid_empleadoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ejercicioGastoEmpleadoUpdate")) {
				this.jButtonid_ejercicioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ejercicioGastoEmpleadoBusqueda")) {
				this.jButtonid_ejercicioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_paisGastoEmpleadoUpdate")) {
				this.jButtonid_paisGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_paisGastoEmpleadoBusqueda")) {
				this.jButtonid_paisGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_ciudadGastoEmpleadoUpdate")) {
				this.jButtonid_ciudadGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_ciudadGastoEmpleadoBusqueda")) {
				this.jButtonid_ciudadGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_anioGastoEmpleadoUpdate")) {
				this.jButtonid_anioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_anioGastoEmpleadoBusqueda")) {
				this.jButtonid_anioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_mesGastoEmpleadoUpdate")) {
				this.jButtonid_mesGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_mesGastoEmpleadoBusqueda")) {
				this.jButtonid_mesGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("diaGastoEmpleadoBusqueda")) {
				this.jButtondiaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_usuarioGastoEmpleadoUpdate")) {
				this.jButtonid_usuarioGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_usuarioGastoEmpleadoBusqueda")) {
				this.jButtonid_usuarioGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//ACTUALIZAR CAMPO
			else if(sTipo.equals("id_estado_gasto_empleadoGastoEmpleadoUpdate")) {
				this.jButtonid_estado_gasto_empleadoGastoEmpleadoUpdateActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("id_estado_gasto_empleadoGastoEmpleadoBusqueda")) {
				this.jButtonid_estado_gasto_empleadoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingreso_actualGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingreso_actualGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingreso_otroGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingreso_otroGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_ingresoGastoEmpleadoBusqueda")) {
				this.jButtontotal_ingresoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_viviendaGastoEmpleadoBusqueda")) {
				this.jButtongasto_viviendaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_educacionGastoEmpleadoBusqueda")) {
				this.jButtongasto_educacionGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_saludGastoEmpleadoBusqueda")) {
				this.jButtongasto_saludGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_vestimentaGastoEmpleadoBusqueda")) {
				this.jButtongasto_vestimentaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("gasto_alimentacionGastoEmpleadoBusqueda")) {
				this.jButtongasto_alimentacionGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_gasto_actualGastoEmpleadoBusqueda")) {
				this.jButtontotal_gasto_actualGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("total_gastoGastoEmpleadoBusqueda")) {
				this.jButtontotal_gastoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("fechaGastoEmpleadoBusqueda")) {
				this.jButtonfechaGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("porcentajeGastoEmpleadoBusqueda")) {
				this.jButtonporcentajeGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_maximoGastoEmpleadoBusqueda")) {
				this.jButtonvalor_maximoGastoEmpleadoBusquedaActionPerformed(evt);
			}
			//BUSQUEDA GENERAL CAMPO
			else if(sTipo.equals("valor_maximo_porcentajeGastoEmpleadoBusqueda")) {
				this.jButtonvalor_maximo_porcentajeGastoEmpleadoBusquedaActionPerformed(evt);
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.KEY,EventoTipo.CLIC,EventoSubTipo.CLICKED,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
			
  		}  finally {
      		this.finishProcessGastoEmpleado();
      	}
    }
	
	public void internalFrameClosingInternalFrameGeneral(String sTipo,InternalFrameEvent evt) { 	  
		try {
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
			
			if(sTipo.equals("CloseInternalFrameGastoEmpleado")) {
				closingInternalFrameGastoEmpleado();
				
			} else if(sTipo.equals("jButtonCancelarGastoEmpleado")) {
				JInternalFrameBase jInternalFrameDetalleFormGastoEmpleado = (JInternalFrameBase)evt.getSource();
	            	
	            GastoEmpleadoBeanSwingJInternalFrame jInternalFrameParent=(GastoEmpleadoBeanSwingJInternalFrame)jInternalFrameDetalleFormGastoEmpleado.getjInternalFrameParent();
	            
				jInternalFrameParent.jButtonCancelarGastoEmpleadoActionPerformed(null);
			}
			
			GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,ControlTipo.WINDOW,EventoTipo.CLIC,EventoSubTipo.CLOSING,sTipo,this.gastoempleado,new Object(),this.gastoempleadoParameterGeneral,this.gastoempleadoReturnGeneral);
  		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	public void recargarFormGastoEmpleado(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion) throws Exception {
		this.recargarFormGastoEmpleado(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,false);
	}
	
	public void recargarFormGastoEmpleado(String sTipo,String sDominio,EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,String sTipoGeneral,ArrayList<Classe> classes,Boolean conIrServidorAplicacion,Boolean esControlTabla) throws Exception {
		if(this.permiteRecargarForm && this.permiteMantenimiento(this.gastoempleado)) {
			if(!esControlTabla) {
				if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {			
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);			
				}
				
				if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones()) {
					this.setVariablesFormularioRelacionesToObjetoActualGastoEmpleado(this.gastoempleado,classes);				
				}
			
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.gastoempleadoReturnGeneral=gastoempleadoLogic.procesarEventosGastoEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.gastoempleadoLogic.getGastoEmpleados(),this.gastoempleado,this.gastoempleadoParameterGeneral,this.isEsNuevoGastoEmpleado,classes);//this.gastoempleadoLogic.getGastoEmpleado()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
					
					//ACTUALIZA VARIABLES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					//this.setVariablesObjetoReturnGeneralToBeanGastoEmpleado(this.gastoempleadoReturnGeneral,this.gastoempleadoBean,false);
						
					//ACTUALIZA VARIABLES RELACIONES DEFECTO DESDE LOGIC A RETURN GENERAL Y LUEGO A BEAN
					if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones()) {
						//this.setVariablesRelacionesObjetoReturnGeneralToBeanGastoEmpleado(classes,this.gastoempleadoReturnGeneral,this.gastoempleadoBean,false);
					}
						
					if(this.gastoempleadoReturnGeneral.getConRecargarPropiedades()) {
						//INICIALIZA VARIABLES COMBOS NORMALES (FK)
						this.setVariablesObjetoActualToFormularioForeignKeyGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado());
							
						//INICIALIZA VARIABLES NORMALES A FORMULARIO(SIN FK)
						this.setVariablesObjetoActualToFormularioGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado());	
					}
						
					if(this.gastoempleadoReturnGeneral.getConRecargarRelaciones()) {
						//INICIALIZA VARIABLES RELACIONES A FORMULARIO
						this.setVariablesRelacionesObjetoActualToFormularioGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado(),classes);//this.gastoempleadoBean);	
					}									
					
				} else {				
					//INICIALIZA VARIABLES RELACIONES A FORMULARIO
					this.setVariablesRelacionesObjetoActualToFormularioGastoEmpleado(this.gastoempleado,classes);//this.gastoempleadoBean);									
				}
			
				if(GastoEmpleadoJInternalFrame.ISBINDING_MANUAL_TABLA) {
					this.setVariablesFormularioToObjetoActualGastoEmpleado(this.gastoempleado,true,false);
					this.setVariablesFormularioToObjetoActualForeignKeysGastoEmpleado(this.gastoempleado);				
				}
				
			} else {
				
				if(((controlTipo.equals(ControlTipo.TEXTBOX) || controlTipo.equals(ControlTipo.DATE)
					|| controlTipo.equals(ControlTipo.TEXTAREA) || controlTipo.equals(ControlTipo.COMBOBOX)
					)				
					&& eventoTipo.equals(EventoTipo.CHANGE)
					)
					
					|| (controlTipo.equals(ControlTipo.CHECKBOX) && eventoTipo.equals(EventoTipo.CLIC))
					
				) { // && sTipoGeneral.equals("TEXTBOX")
					
					if(this.gastoempleadoAnterior!=null) {
						this.gastoempleado=this.gastoempleadoAnterior;
					}
				}
				
				if(conIrServidorAplicacion) {
					//ARCHITECTURE
					if(Constantes.ISUSAEJBLOGICLAYER) {						
						this.gastoempleadoReturnGeneral=gastoempleadoLogic.procesarEventosGastoEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.gastoempleadoLogic.getGastoEmpleados(),this.gastoempleado,this.gastoempleadoParameterGeneral,this.isEsNuevoGastoEmpleado,classes);//this.gastoempleadoLogic.getGastoEmpleado()//sTipoGeneral
									
					} else if(Constantes.ISUSAEJBREMOTE) {
									
					} else if(Constantes.ISUSAEJBHOME) {
					}
					//ARCHITECTURE
				}
				
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {
					//NO ENTENDIBLE PORQUE PONER
					//if(this.gastoempleadoSessionBean.getEstaModoGuardarRelaciones() 
					//	|| this.gastoempleadoSessionBean.getEsGuardarRelacionado())	{
						actualizarLista(this.gastoempleadoReturnGeneral.getGastoEmpleado(),gastoempleadoLogic.getGastoEmpleados());
					//}
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					actualizarLista(this.gastoempleadoReturnGeneral.getGastoEmpleado(),this.gastoempleados);
				}
				//ARCHITECTURE
				
				//this.jTableDatosGastoEmpleado.repaint();
				
				//((AbstractTableModel) this.jTableDatosGastoEmpleado.getModel()).fireTableDataChanged();
				
				this.actualizarVisualTableDatosGastoEmpleado();
			}
		}
	}
	
	public void actualizarVisualTableDatosGastoEmpleado() throws Exception {
		
		GastoEmpleadoModel gastoempleadoModel=(GastoEmpleadoModel)this.jTableDatosGastoEmpleado.getModel();
		
		if(Constantes.ISUSAEJBLOGICLAYER) {
			gastoempleadoModel.gastoempleados=this.gastoempleadoLogic.getGastoEmpleados();
		
		} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME ) {
			gastoempleadoModel.gastoempleados=this.gastoempleados;
		}
		
		
		((GastoEmpleadoModel) this.jTableDatosGastoEmpleado.getModel()).fireTableDataChanged();
	}
	
	public void actualizarVisualTableDatosEventosVistaGastoEmpleado() throws Exception {
		
		//ARCHITECTURE
		if(Constantes.ISUSAEJBLOGICLAYER) {
			this.actualizarLista(this.getgastoempleadoAnterior(),this.gastoempleadoLogic.getGastoEmpleados());
					
		} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
			this.actualizarLista(this.getgastoempleadoAnterior(),this.gastoempleados);
		}
		//ARCHITECTURE
						
		this.actualizarFilaTotales();
						
		this.actualizarVisualTableDatosGastoEmpleado();	
	}
	
	public void setVariablesRelacionesObjetoActualToFormularioGastoEmpleado(GastoEmpleado gastoempleado,ArrayList<Classe> classes) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void setEventoParentGeneral(Boolean esUsoDesdeHijo,String sDominio,String sDominioTipo,String sTipo,String sTipoGeneral,Boolean esControlTabla,Boolean conIrServidorAplicacion,
						Long id,Component control, EventoGlobalTipo eventoGlobalTipo,ControlTipo controlTipo,EventoTipo eventoTipo,EventoSubTipo eventoSubTipo,ArrayList<String> arrClasses,
						Object evt,GeneralEntityParameterReturnGeneral generalEntityParameterGeneral,Object otro) { 	  
		try {
			
			if(this.permiteManejarEventosControl()) {
				
				//BASE COPIADO DESDE TEXTFIELLOSTFOCUS
				
				//EventoGlobalTipo.FORM_HIJO_ACTUALIZAR;
				Boolean conTodasRelaciones=false;
				
				this.esUsoDesdeHijo=esUsoDesdeHijo;
										
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.BEFORE,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.gastoempleado,new Object(),generalEntityParameterGeneral,this.gastoempleadoReturnGeneral);
				
				ArrayList<Classe> classes=new ArrayList<Classe>();
				
				for(String sClasse:arrClasses) {
					if(sClasse.equals("TODOS")) {
						conTodasRelaciones=true;
						break;
					}
				}
				
				if(this.gastoempleadoSessionBean.getConGuardarRelaciones()) {
					if(conTodasRelaciones) {
						classes=GastoEmpleadoConstantesFunciones.getClassesRelationshipsOfGastoEmpleado(new ArrayList<Classe>(),DeepLoadType.NONE);
					} else {
						classes=GastoEmpleadoConstantesFunciones.getClassesRelationshipsFromStringsOfGastoEmpleado(arrClasses,DeepLoadType.NONE);
					}
				}
	
				this.classesActual=new ArrayList<Classe>();
				this.classesActual.addAll(classes);
	
				this.recargarFormGastoEmpleado(sTipo,sDominio,eventoGlobalTipo,controlTipo,eventoTipo,eventoSubTipo,sTipoGeneral,classes,conIrServidorAplicacion,esControlTabla);
										
				GastoEmpleadoBeanSwingJInternalFrameAdditional.procesarEventosVista(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,this,FuncionTipo.AFTER,controlTipo,eventoTipo,eventoSubTipo,sTipo,this.gastoempleado,new Object(),generalEntityParameterGeneral,this.gastoempleadoReturnGeneral);
			}
			
		} catch(Exception e) {
  			FuncionesSwing.manageException2(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
  		}
    }
	
	/*
	public void setVariablesRelacionesObjetoBeanActualToFormularioGastoEmpleado(GastoEmpleadoBean gastoempleadoBean) throws Exception { 
		try {
			
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	*/
	
	/*
	public void setVariablesRelacionesObjetoReturnGeneralToBeanGastoEmpleado(ArrayList<Classe> classes,GastoEmpleadoReturnGeneral gastoempleadoReturnGeneral,GastoEmpleadoBean gastoempleadoBean,Boolean conDefault) throws Exception {
		
	}
	*/
	
	public void setVariablesFormularioRelacionesToObjetoActualGastoEmpleado(GastoEmpleado gastoempleado,ArrayList<Classe> classes) throws Exception {
		
	}
	
	public Boolean permiteManejarEventosControl() {
		Boolean permite=true;				
		
		if(this.estaModoNuevo || this.estaModoSeleccionar || this.estaModoEliminarGuardarCambios) {
			permite=false;
			
		} 
		
		//NO DEBE MEZCLARSE CONCEPTOS
		/*	
		if(!paraTabla && !this.permiteMantenimiento(this.gastoempleado)) {
			System.out.println("ERROR:EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES");
				
			//JOptionPane.showMessageDialog(this,"EL OBJETO ACTUAL NO PUEDE SER FILA TOTALES","EVENTO",JOptionPane.ERROR_MESSAGE);			
		}
		*/
		
		return permite;
	}
	
	public void inicializarFormDetalle() throws Exception {
		
		this.jInternalFrameDetalleFormGastoEmpleado = new GastoEmpleadoDetalleFormJInternalFrame(jDesktopPane,this.gastoempleadoSessionBean.getConGuardarRelaciones(),this.gastoempleadoSessionBean.getEsGuardarRelacionado(),this.cargarRelaciones,usuarioActual,resumenUsuarioActual,moduloActual,opcionActual,parametroGeneralSg,parametroGeneralUsuario,paginaTipo);
		
		this.jDesktopPane.add(this.jInternalFrameDetalleFormGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.setVisible(false);
		this.jInternalFrameDetalleFormGastoEmpleado.setSelected(false);						
		
		this.jInternalFrameDetalleFormGastoEmpleado.setJInternalFrameParent(this);
		
		this.jInternalFrameDetalleFormGastoEmpleado.gastoempleadoLogic=this.gastoempleadoLogic;
		
		this.cargarCombosFrameForeignKeyGastoEmpleado("Formulario");
		
		this.inicializarActualizarBindingBotonesPermisosManualFormDetalleGastoEmpleado();
		this.inicializarActualizarBindingtiposArchivosReportesAccionesManualFormDetalleGastoEmpleado();
		
		this.initActionsFormDetalle();		
		
		this.initActionsCombosTodosForeignKeyGastoEmpleado("Formulario");
		
		//TALVEZ conSetVariablesGlobales COMO if() 
		this.setVariablesGlobalesCombosForeignKeyGastoEmpleado();
		
		this.cargarMenuRelaciones();
		
	}
	
	public void initActionsFormDetalle() {	
		
		this.jInternalFrameDetalleFormGastoEmpleado.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarGastoEmpleado"));
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ModificarGastoEmpleado"));

		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ModificarToolBarGastoEmpleado"));
					
		this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemModificarGastoEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemModificarGastoEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.addActionListener (new ButtonActionListener(this,"ActualizarGastoEmpleado"));
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ActualizarToolBarGastoEmpleado"));
						
		this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemActualizarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemActualizarGastoEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.addActionListener (new ButtonActionListener(this,"EliminarGastoEmpleado"));
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"EliminarToolBarGastoEmpleado"));
								
		this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemEliminarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemEliminarGastoEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CancelarGastoEmpleado"));
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CancelarToolBarGastoEmpleado"));
					
		this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemCancelarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCancelarGastoEmpleado"));		
		
		
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemDetalleCerrarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarGastoEmpleado"));		
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarGastoEmpleado"));
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarGastoEmpleado"));
		
		
		
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioGastoEmpleado"));
		
		
				
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonidGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"idGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtondiaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"diaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_otroGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_otroGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingresoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingresoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_viviendaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_viviendaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_educacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_educacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_saludGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_saludGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_vestimentaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_vestimentaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_alimentacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_alimentacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gasto_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gasto_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gastoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gastoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonfechaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fechaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonporcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximo_porcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximo_porcentajeGastoEmpleadoBusqueda"));
		
		
		;

		//TABBED PANE RELACIONES
		this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesGastoEmpleado"));
		
		;		
		//TABBED PANE RELACIONES FIN(EXTRA TAB)	
	}
	
	public void initActions() {				
		this.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"CloseInternalFrameGastoEmpleado"));
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.addInternalFrameListener(new InternalFrameInternalFrameAdapter(this,"jButtonCancelarGastoEmpleado"));
		}
		
		this.jTableDatosGastoEmpleado.getSelectionModel().addListSelectionListener(new TableListSelectionListener(this,"TableDatosSeleccionarGastoEmpleado"));
		
		this.jTableDatosGastoEmpleado.addMouseListener(new TableMouseAdapter(this,"DatosSeleccionarGastoEmpleado"));
		
		this.jButtonNuevoGastoEmpleado.addActionListener(new ButtonActionListener(this,"NuevoGastoEmpleado"));
		
		this.jButtonDuplicarGastoEmpleado.addActionListener(new ButtonActionListener(this,"DuplicarGastoEmpleado"));
		
		this.jButtonCopiarGastoEmpleado.addActionListener(new ButtonActionListener(this,"CopiarGastoEmpleado"));
		
		this.jButtonVerFormGastoEmpleado.addActionListener(new ButtonActionListener(this,"VerFormGastoEmpleado"));
		
		
		this.jButtonNuevoToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"NuevoToolBarGastoEmpleado"));
			
		this.jButtonDuplicarToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"DuplicarToolBarGastoEmpleado"));
			
		this.jMenuItemNuevoGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGastoEmpleado"));
			
		this.jMenuItemDuplicarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDuplicarGastoEmpleado"));		
		
		
		this.jButtonNuevoRelacionesGastoEmpleado.addActionListener (new ButtonActionListener(this,"NuevoRelacionesGastoEmpleado"));
		
		
		this.jButtonNuevoRelacionesToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"NuevoRelacionesToolBarGastoEmpleado"));
			
		this.jMenuItemNuevoRelacionesGastoEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemNuevoRelacionesGastoEmpleado"));		
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ModificarGastoEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonModificarToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ModificarToolBarGastoEmpleado"));
			
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemModificarGastoEmpleado.addActionListener(new ButtonActionListener(this,"MenuItemModificarGastoEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {			
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarGastoEmpleado.addActionListener (new ButtonActionListener(this,"ActualizarGastoEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonActualizarToolBarGastoEmpleado.addActionListener(new ButtonActionListener(this,"ActualizarToolBarGastoEmpleado"));
				
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemActualizarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemActualizarGastoEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarGastoEmpleado.addActionListener (new ButtonActionListener(this,"EliminarGastoEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonEliminarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"EliminarToolBarGastoEmpleado"));
						
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemEliminarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemEliminarGastoEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CancelarGastoEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonCancelarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CancelarToolBarGastoEmpleado"));
			
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemCancelarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCancelarGastoEmpleado"));		
		}
		
		this.jButtonMostrarOcultarTablaToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MostrarOcultarToolBarGastoEmpleado"));		
		
		
		this.jButtonCerrarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CerrarGastoEmpleado"));
		
		
		this.jButtonCerrarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CerrarToolBarGastoEmpleado"));
			
		this.jMenuItemCerrarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCerrarGastoEmpleado"));
			
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jMenuItemDetalleCerrarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleCerrarGastoEmpleado"));		
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosGastoEmpleado"));
		}
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosToolBarGastoEmpleado"));
		}
		
		this.jButtonCopiarToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"CopiarToolBarGastoEmpleado"));
			
		this.jButtonVerFormToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"VerFormToolBarGastoEmpleado"));
		
		this.jMenuItemGuardarCambiosGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemGuardarCambiosGastoEmpleado"));
			
		this.jMenuItemCopiarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemCopiarGastoEmpleado"));		
		
		this.jMenuItemVerFormGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemVerFormGastoEmpleado"));		
		
		
		this.jButtonGuardarCambiosTablaGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaGastoEmpleado"));
		
		
		this.jButtonGuardarCambiosTablaToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaToolBarGastoEmpleado"));
			
		this.jMenuItemGuardarCambiosTablaGastoEmpleado.addActionListener (new ButtonActionListener(this,"GuardarCambiosTablaGastoEmpleado"));		
		
		
		
		this.jButtonRecargarInformacionGastoEmpleado.addActionListener (new ButtonActionListener(this,"RecargarInformacionGastoEmpleado"));
					
		this.jButtonRecargarInformacionToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"RecargarInformacionToolBarGastoEmpleado"));
		
		this.jMenuItemRecargarInformacionGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemRecargarInformacionGastoEmpleado"));		
		
		
		
		this.jButtonAnterioresGastoEmpleado.addActionListener (new ButtonActionListener(this,"AnterioresGastoEmpleado"));
		
		
		this.jButtonAnterioresToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"AnterioresToolBarGastoEmpleado"));
		
		this.jMenuItemAnterioresGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemAnterioresGastoEmpleado"));		
		
		
		this.jButtonSiguientesGastoEmpleado.addActionListener (new ButtonActionListener(this,"SiguientesGastoEmpleado"));
		
		
		this.jButtonSiguientesToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"SiguientesToolBarGastoEmpleado"));
			
		this.jMenuItemSiguientesGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemSiguientesGastoEmpleado"));
			
		this.jMenuItemAbrirOrderByGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemAbrirOrderByGastoEmpleado"));
			
		this.jMenuItemMostrarOcultarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemMostrarOcultarGastoEmpleado"));
			
		this.jMenuItemDetalleAbrirOrderByGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleAbrirOrderByGastoEmpleado"));
			
		this.jMenuItemDetalleMostarOcultarGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemDetalleMostrarOcultarGastoEmpleado"));		
		
		
		this.jButtonNuevoGuardarCambiosGastoEmpleado.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosGastoEmpleado"));
		
		
		this.jButtonNuevoGuardarCambiosToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"NuevoGuardarCambiosToolBarGastoEmpleado"));
			
		this.jMenuItemNuevoGuardarCambiosGastoEmpleado.addActionListener (new ButtonActionListener(this,"MenuItemNuevoGuardarCambiosGastoEmpleado"));		
		
		
		
		//SELECCIONAR TODOS
		
		this.jCheckBoxSeleccionarTodosGastoEmpleado.addItemListener(new CheckBoxItemListener(this,"SeleccionarTodosGastoEmpleado"));

		this.jCheckBoxSeleccionadosGastoEmpleado.addItemListener(new CheckBoxItemListener(this,"SeleccionadosGastoEmpleado"));
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesFormularioGastoEmpleado"));
		}
		
		
		this.jComboBoxTiposRelacionesGastoEmpleado.addActionListener (new ButtonActionListener(this,"TiposRelacionesGastoEmpleado"));
			
		this.jComboBoxTiposAccionesGastoEmpleado.addActionListener (new ButtonActionListener(this,"TiposAccionesGastoEmpleado"));
					
		this.jComboBoxTiposSeleccionarGastoEmpleado.addActionListener (new ButtonActionListener(this,"TiposSeleccionarGastoEmpleado"));
			
		this.jTextFieldValorCampoGeneralGastoEmpleado.addActionListener (new ButtonActionListener(this,"ValorCampoGeneralGastoEmpleado"));		
		
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
		
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonidGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"idGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtondiaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"diaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_otroGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_otroGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingresoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingresoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_viviendaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_viviendaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_educacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_educacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_saludGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_saludGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_vestimentaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_vestimentaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_alimentacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_alimentacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gasto_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gasto_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gastoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gastoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonfechaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fechaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonporcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximo_porcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximo_porcentajeGastoEmpleadoBusqueda"));
		}
		
		if(!this.conCargarMinimo) {
		//BYDAN_BUSQUEDAS
		
		
			this.jButtonFK_IdAnioGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdAnioGastoEmpleado"));

			this.jButtonFK_IdCiudadGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdCiudadGastoEmpleado"));

			this.jButtonFK_IdEmpleadoGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoGastoEmpleado"));

			this.jButtonFK_IdEstadoGastoEmpleadoGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEstadoGastoEmpleadoGastoEmpleado"));

			this.jButtonFK_IdMesGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdMesGastoEmpleado"));

			this.jButtonFK_IdPaisGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdPaisGastoEmpleado"));
		
		
		
			//REPORTE DINAMICO
			
			if(this.jInternalFrameReporteDinamicoGastoEmpleado!=null) {
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonCerrarReporteDinamico().addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoGastoEmpleado"));
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonGenerarReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoGastoEmpleado"));
				this.jInternalFrameReporteDinamicoGastoEmpleado.getjButtonGenerarExcelReporteDinamico().addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoGastoEmpleado"));
			}
			
			//this.jButtonCerrarReporteDinamicoGastoEmpleado.addActionListener (new ButtonActionListener(this,"CerrarReporteDinamicoGastoEmpleado"));				
			//this.jButtonGenerarReporteDinamicoGastoEmpleado.addActionListener (new ButtonActionListener(this,"GenerarReporteDinamicoGastoEmpleado"));
			//this.jButtonGenerarExcelReporteDinamicoGastoEmpleado.addActionListener (new ButtonActionListener(this,"GenerarExcelReporteDinamicoGastoEmpleado"));
				
				
			//IMPORTACION			
			if(this.jInternalFrameImportacionGastoEmpleado!=null) {
				this.jInternalFrameImportacionGastoEmpleado.getjButtonCerrarImportacion().addActionListener (new ButtonActionListener(this,"CerrarImportacionGastoEmpleado"));
				this.jInternalFrameImportacionGastoEmpleado.getjButtonGenerarImportacion().addActionListener (new ButtonActionListener(this,"GenerarImportacionGastoEmpleado"));
				this.jInternalFrameImportacionGastoEmpleado.getjButtonAbrirImportacion().addActionListener (new ButtonActionListener(this,"AbrirImportacionGastoEmpleado"));
			}
			
			//ORDER BY
			this.jButtonAbrirOrderByGastoEmpleado.addActionListener (new ButtonActionListener(this,"AbrirOrderByGastoEmpleado"));
			
			this.jButtonAbrirOrderByToolBarGastoEmpleado.addActionListener (new ButtonActionListener(this,"AbrirOrderByToolBarGastoEmpleado"));			
			
			if(this.jInternalFrameOrderByGastoEmpleado!=null) {
				this.jInternalFrameOrderByGastoEmpleado.getjButtonCerrarOrderBy().addActionListener (new ButtonActionListener(this,"CerrarOrderByGastoEmpleado"));				
			}
			
			
		}
		
		
		
		if(!this.conCargarMinimo) {
			if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			;
			}
		}
		
		
		//TABBED PANE RELACIONES
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) { //if(this.conCargarFormDetalle) {
			this.jInternalFrameDetalleFormGastoEmpleado.jTabbedPaneRelacionesGastoEmpleado.addChangeListener(new TabbedPaneChangeListener(this,"RelacionesGastoEmpleado"));
		
		;
		}
		//TABBED PANE RELACIONES FIN(EXTRA TAB)		
	}
	
	/*
	public void initActions() {
		String sMapKey = "";
		InputMap inputMap =null;
		
		this.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
            public void internalFrameClosing(InternalFrameEvent event) {          	
            	try {
            		closingInternalFrameGastoEmpleado();
				} catch (Exception e) {
					e.printStackTrace();
				}
            }
        });
		
		this.jInternalFrameDetalleFormGastoEmpleado.addInternalFrameListener(new javax.swing.event.InternalFrameAdapter() {
	        public void internalFrameClosing(InternalFrameEvent event) {
	            JInternalFrameBase jInternalFrameDetalleFormGastoEmpleado = (JInternalFrameBase)event.getSource();
	            	
	            GastoEmpleadoBeanSwingJInternalFrame jInternalFrameParent=(GastoEmpleadoBeanSwingJInternalFrame)jInternalFrameDetalleFormGastoEmpleado.getjInternalFrameParent();
	                
	            try {
					jInternalFrameParent.jButtonCancelarGastoEmpleadoActionPerformed(null);
					
					//jInternalFrameParent.dispose();
					//jInternalFrameParent=null;
					
				} catch (Exception e) {
					e.printStackTrace();
				}
	        }
	    });
			
		this.jTableDatosGastoEmpleado.getSelectionModel().addListSelectionListener (
	                new ListSelectionListener() {
	                    public void valueChanged(ListSelectionEvent e) {
							//BYDAN_DESHABILITADO
	                    	//try {jTableDatosGastoEmpleadoListSelectionListener(e);}catch(Exception e1){e1.printStackTrace();}
	                    }
	                }
	     );
		
		this.jTableDatosGastoEmpleado.addMouseListener(new MouseAdapter() {
			   public void mouseClicked(MouseEvent evt) {
				      if (evt.getClickCount() == 2) {
				    	  jButtonIdActionPerformed(null,jTableDatosGastoEmpleado.getSelectedRow(),false,false);
				      }
				   }
		});
		
		this.jButtonNuevoGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,false);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoGastoEmpleado";
		inputMap = this.jButtonNuevoGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_N , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoGastoEmpleadoActionPerformed(evt,false);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonNuevoRelacionesGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoRelacionesToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoRelacionesGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGastoEmpleadoActionPerformed(evt,true);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "NuevoRelacionesGastoEmpleado";
		inputMap = this.jButtonNuevoRelacionesGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_R , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonNuevoRelacionesGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonNuevoGastoEmpleadoActionPerformed(evt,true);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonModificarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonModificarToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemModificarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonModificarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ModificarGastoEmpleado";
		inputMap = this.jButtonModificarGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_M , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonModificarGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonModificarGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonActualizarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonActualizarToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemActualizarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonActualizarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "ActualizarGastoEmpleado";
		inputMap = this.jButtonActualizarGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonActualizarGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonActualizarGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonEliminarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonEliminarToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
				
		this.jMenuItemEliminarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonEliminarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "EliminarGastoEmpleado";
		inputMap = this.jButtonEliminarGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_E , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonEliminarGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonEliminarGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCancelarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCancelarToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCancelarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCancelarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CancelarGastoEmpleado";
		inputMap = this.jButtonCancelarGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_Q , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jButtonCancelarGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCancelarGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonCerrarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonCerrarToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemCerrarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemDetalleCerrarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  //try {jButtonCerrarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
					try {jButtonCancelarGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "CerrarGastoEmpleado";
		inputMap = this.jButtonCerrarGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_C , KeyEvent.ALT_MASK), sMapKey);
			
		this.jButtonCerrarGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonCerrarGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGuardarCambiosTablaToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemGuardarCambiosTablaGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		sMapKey = "GuardarCambiosGastoEmpleado";
		inputMap = this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
		inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_G , KeyEvent.CTRL_MASK), sMapKey);
			
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonGuardarCambiosGastoEmpleado.getActionMap().put(sMapKey, new AbstractAction() {
			public static final long serialVersionUID = 1L;
			public void actionPerformed(ActionEvent evt) {
			    try {jButtonGuardarCambiosGastoEmpleadoActionPerformed(evt);} catch (Exception e) {e.printStackTrace();}
			}
		});
		
		this.jButtonRecargarInformacionGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonRecargarInformacionToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemRecargarInformacionGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonRecargarInformacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		this.jButtonAnterioresGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAnterioresToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemAnterioresGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAnterioresGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonSiguientesToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemSiguientesGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonSiguientesGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonNuevoGuardarCambiosToolBarGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jMenuItemNuevoGuardarCambiosGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonNuevoGuardarCambiosGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		
		//SELECCIONAR TODOS
		this.jCheckBoxSeleccionarTodosGastoEmpleado.addItemListener(new ItemListener() {		
			public void itemStateChanged(ItemEvent evt) {
				try {jCheckBoxSeleccionarTodosGastoEmpleadoItemListener(evt);}catch(Exception e){e.printStackTrace();}
			}
		});

		this.jComboBoxTiposAccionesGastoEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposAccionesGastoEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jComboBoxTiposSeleccionarGastoEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jComboBoxTiposSeleccionarGastoEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		this.jTextFieldValorCampoGeneralGastoEmpleado.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {
				try {jTextFieldValorCampoGeneralGastoEmpleadoActionListener(e);} catch (Exception e1) { e1.printStackTrace();}
			};
		});
		
		
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonidGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"idGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empresaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empresaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_sucursalGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_sucursalGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_empleadoGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ejercicioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ejercicioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_paisGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_paisGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_ciudadGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_ciudadGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_anioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_anioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_mesGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_mesGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtondiaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"diaGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_usuarioGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_usuarioGastoEmpleadoBusqueda"));
		//ACTUALIZAR FK
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoUpdate.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoUpdate"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonid_estado_gasto_empleadoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"id_estado_gasto_empleadoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingreso_otroGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingreso_otroGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_ingresoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_ingresoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_viviendaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_viviendaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_educacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_educacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_saludGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_saludGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_vestimentaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_vestimentaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtongasto_alimentacionGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"gasto_alimentacionGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gasto_actualGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gasto_actualGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtontotal_gastoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"total_gastoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonfechaGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"fechaGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonporcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"porcentajeGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximoGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximoGastoEmpleadoBusqueda"));
		//BUSQUEDA GENERAL
		this.jInternalFrameDetalleFormGastoEmpleado.jButtonvalor_maximo_porcentajeGastoEmpleadoBusqueda.addActionListener(new ButtonActionListener(this,"valor_maximo_porcentajeGastoEmpleadoBusqueda"));
		
		
		this.jButtonFK_IdAnioGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdAnioGastoEmpleado"));

		this.jButtonFK_IdCiudadGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdCiudadGastoEmpleado"));

		this.jButtonFK_IdEmpleadoGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEmpleadoGastoEmpleado"));

		this.jButtonFK_IdEstadoGastoEmpleadoGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdEstadoGastoEmpleadoGastoEmpleado"));

		this.jButtonFK_IdMesGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdMesGastoEmpleado"));

		this.jButtonFK_IdPaisGastoEmpleado.addActionListener(new ButtonActionListener(this,"FK_IdPaisGastoEmpleado"));

		
		//REPORTE DINAMICO
		this.jButtonCerrarReporteDinamicoGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarReporteDinamicoGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarReporteDinamicoGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarReporteDinamicoGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarExcelReporteDinamicoGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarExcelReporteDinamicoGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		//IMPORTACION
		this.jButtonCerrarImportacionGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonCerrarImportacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonGenerarImportacionGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonGenerarImportacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
		
		this.jButtonAbrirImportacionGastoEmpleado.addActionListener (
	          new java.awt.event.ActionListener() {
	              public void actionPerformed(ActionEvent evt) {
	            	  try {jButtonAbrirImportacionGastoEmpleadoActionPerformed(evt);}catch(Exception e){e.printStackTrace();}
	              }
	          }
        );
	}
	*/
	
	
	public void jComboBoxTiposSeleccionarGastoEmpleadoActionListener(ActionEvent evt) throws Exception {    		
		try {			
			Reporte reporte=(Reporte)this.jComboBoxTiposSeleccionarGastoEmpleado.getSelectedItem();
			
			//if(reporte.getsCodigo().equals("SELECCIONAR")) {
			//}					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}	
	
	
	
	public void seleccionarTodosGastoEmpleado(Boolean conSeleccionarTodos) throws Exception {    		
		try {
			if(Constantes.ISUSAEJBLOGICLAYER) {				
				for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
					gastoempleadoAux.setIsSelected(conSeleccionarTodos);
				}			
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(GastoEmpleado gastoempleadoAux:gastoempleados) {
					gastoempleadoAux.setIsSelected(conSeleccionarTodos);
				}
			}
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarTodosGastoEmpleadoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			
			if(sTipoSeleccionar.equals("COLUMNAS")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
						gastoempleadoAux.setIsSelected(this.isSeleccionarTodos);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(GastoEmpleado gastoempleadoAux:gastoempleados) {
						gastoempleadoAux.setIsSelected(this.isSeleccionarTodos);
					}
				}
			} else {
				if(Constantes.ISUSAEJBLOGICLAYER) {
					for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
					
					}	
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(GastoEmpleado gastoempleadoAux:gastoempleados) {
						
					}
				}
			}
					
			if(existe) {
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosGastoEmpleado.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosGastoEmpleado.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionadosGastoEmpleadoItemListener(ItemEvent evt) throws Exception {    		
		try {			
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
			//JCheckBox jCheckBox=(JCheckBox)evt.getSource();			
			//System.out.println("ok");		
			
			Boolean existe=false;
			int[] arrNumRowsSeleccionados=null;
			
			arrNumRowsSeleccionados=this.jTableDatosGastoEmpleado.getSelectedRows();
			
			GastoEmpleado gastoempleadoLocal=new GastoEmpleado();
			
			//this.seleccionarTodosGastoEmpleado(false);
			
			for(Integer iNumRowSeleccionado:arrNumRowsSeleccionados) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {
					gastoempleadoLocal =(GastoEmpleado) this.gastoempleadoLogic.getGastoEmpleados().toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(iNumRowSeleccionado)];
				} else if(Constantes.ISUSAEJBREMOTE || Constantes.ISUSAEJBHOME) {
					gastoempleadoLocal =(GastoEmpleado) this.gastoempleados.toArray()[this.jTableDatosGastoEmpleado.convertRowIndexToModel(iNumRowSeleccionado)];
				}
				
				gastoempleadoLocal.setIsSelected(this.isSeleccionados);
			}
			
			/*
			if(sTipoSeleccionar.equals("SELECCIONAR")) {
				existe=true;
				
				if(Constantes.ISUSAEJBLOGICLAYER) {				
					for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
						gastoempleadoAux.setIsSelected(this.isSeleccionados);
					}			
				} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
					for(GastoEmpleado gastoempleadoAux:gastoempleados) {
						gastoempleadoAux.setIsSelected(this.isSeleccionados);
					}
				}
			}
			*/
			
			//if(existe) {
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
			/*
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}	
			*/
			
			
			//TableCellRenderer tableCellRenderer=null;			
			
			//TableCellEditor tableCellEditor=null;						
						
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			/*
			for(int i = 0; i < this.jTableDatosGastoEmpleado.getRowCount(); i++) {				
				tableCellRenderer=this.jTableDatosSistema.getCellRenderer(i, 2);
				tableCellEditor=this.jTableDatosSistema.getCellEditor(i, 2);
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellRenderer;				
				idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				
				idSeleccionarTableCell=(IdSeleccionarTableCell)tableCellEditor;
				
				if(idSeleccionarTableCell.jCheckBoxId!=null) {
					idSeleccionarTableCell.jCheckBoxId.setSelected(jCheckBox.isSelected());
				}
				
				//System.out.println(idSeleccionarTableCell.valor);
				
				//this.jTableDatosGastoEmpleado.getModel().setValueAt(jCheckBox.isSelected(), i, Funciones2.getColumnIndexByName(this.jTableDatosGastoEmpleado,Constantes2.S_SELECCIONAR));
		    } 
			*/
					
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jCheckBoxSeleccionarActualGastoEmpleadoItemListener(ItemEvent evt,Long idActual) throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void ejecutarAuxiliarGastoEmpleadoParaAjaxPostBack() throws Exception {    		
		try {
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jTextFieldValorCampoGeneralGastoEmpleadoActionListener(ActionEvent evt) throws Exception {    		
		try {
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
			//System.out.println(this.jTextFieldValorCampoGeneralGastoEmpleado.getText());		
			
			Boolean existe=false;
			
			if(Constantes.ISUSAEJBLOGICLAYER) {
				for(GastoEmpleado gastoempleadoAux:this.gastoempleadoLogic.getGastoEmpleados()) {
				
						if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_DIA)) {
							existe=true;
							gastoempleadoAux.setdia(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso_actual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA)) {
							existe=true;
							gastoempleadoAux.setgasto_vivienda(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION)) {
							existe=true;
							gastoempleadoAux.setgasto_educacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD)) {
							existe=true;
							gastoempleadoAux.setgasto_salud(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA)) {
							existe=true;
							gastoempleadoAux.setgasto_vestimenta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION)) {
							existe=true;
							gastoempleadoAux.setgasto_alimentacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL)) {
							existe=true;
							gastoempleadoAux.settotal_gasto_actual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO)) {
							existe=true;
							gastoempleadoAux.settotal_gasto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							gastoempleadoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE)) {
							existe=true;
							gastoempleadoAux.setporcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO)) {
							existe=true;
							gastoempleadoAux.setvalor_maximo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE)) {
							existe=true;
							gastoempleadoAux.setvalor_maximo_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
				}	
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(GastoEmpleado gastoempleadoAux:gastoempleados) {
					
						if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_DIA)) {
							existe=true;
							gastoempleadoAux.setdia(Integer.parseInt(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso_actual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso_otro(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO)) {
							existe=true;
							gastoempleadoAux.settotal_ingreso(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA)) {
							existe=true;
							gastoempleadoAux.setgasto_vivienda(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION)) {
							existe=true;
							gastoempleadoAux.setgasto_educacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD)) {
							existe=true;
							gastoempleadoAux.setgasto_salud(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA)) {
							existe=true;
							gastoempleadoAux.setgasto_vestimenta(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION)) {
							existe=true;
							gastoempleadoAux.setgasto_alimentacion(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL)) {
							existe=true;
							gastoempleadoAux.settotal_gasto_actual(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO)) {
							existe=true;
							gastoempleadoAux.settotal_gasto(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_FECHA)) {
							existe=true;
							gastoempleadoAux.setfecha(Funciones.ConvertToDate(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE)) {
							existe=true;
							gastoempleadoAux.setporcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO)) {
							existe=true;
							gastoempleadoAux.setvalor_maximo(Double.parseDouble(this.sValorCampoGeneral));
						}
						 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE)) {
							existe=true;
							gastoempleadoAux.setvalor_maximo_porcentaje(Double.parseDouble(this.sValorCampoGeneral));
						}
				}
			}
								
			if(existe) {
				this.inicializarActualizarBindingTablaGastoEmpleado(false);
			} else {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	public void jComboBoxTiposAccionesGastoEmpleadoActionListener(ActionEvent evt,Boolean esParaAccionDesdeFormulario) throws Exception {    				
		Boolean conSplash=true;
		
		try {							
		
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
			Reporte reporte=new Reporte();
			
			this.esParaAccionDesdeFormularioGastoEmpleado=esParaAccionDesdeFormulario;
			
			if(!esParaAccionDesdeFormulario) {
				
				reporte=(Reporte)this.jComboBoxTiposAccionesGastoEmpleado.getSelectedItem();
				
			} else {
				reporte=(Reporte)this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.getSelectedItem();
			}
			String sTipoAccionLocal=this.sTipoAccion;
			
			if(!esParaAccionDesdeFormulario) {
				sTipoAccionLocal=this.sTipoAccion;
			} else {
				sTipoAccionLocal=this.sTipoAccionFormulario;
			}
			
			if(sTipoAccionLocal.equals("GENERAR REPORTE")) {//reporte.getsCodigo().equals("GENERAR REPORTE")) {
				if(this.isPermisoReporteGastoEmpleado) {				
					conSplash=true;//false;										
					
					//this.startProcessGastoEmpleado(conSplash);
				
					this.generarReporteGastoEmpleadosSeleccionados();
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
				}
			} else if(sTipoAccionLocal.equals("GENERAR REPORTE DINAMICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.mostrarReporteDinamicoGastoEmpleadosSeleccionados();
				//this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("GENERAR_REPORTE_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoGastoEmpleadosSeleccionados(false);
				//this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("GENERAR_REPORTE_TOTALES_GROUP_GENERICO")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//SE GENERA REPORTE SEGUN TIPO REPORTE SELECCIONADO
				//this.generarReporteGroupGenericoGastoEmpleadosSeleccionados(true);
				//this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessGastoEmpleado();
				
				this.exportarGastoEmpleadosSeleccionados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("IMPORTAR_DATOS")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				this.mostrarImportacionGastoEmpleados();
				//this.importarGastoEmpleados();
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
				}					
			} else if(sTipoAccionLocal.equals("EXPORTAR_DATOS_EXCEL")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {
				//this.startProcessGastoEmpleado();
				//SE EXPORTA SEGUN TIPO ARCHIVO SELECCIONADO
				//this.exportarExcelGastoEmpleadosSeleccionados();
				//this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
			}  else if(sTipoAccionLocal.equals("RECARGAR_FK")) {//reporte.getsCodigo().equals("GENERAR_REPORTE_GROUP_GENERICO")) {								
				if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE RECARGAR REFERENCIAS ?", "MANTENIMIENTO DE Gasto Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
				
				//this.startProcessGastoEmpleado();
				
					if(!esParaAccionDesdeFormulario || (esParaAccionDesdeFormulario && this.isEsNuevoGastoEmpleado)) {
						this.esRecargarFks=true;
						this.cargarCombosForeignKeyGastoEmpleado(false,false,false);
						this.esRecargarFks=false;
						
						JOptionPane.showMessageDialog(this,"PROCESO EJECUTADO CORRECTAMENTE","MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
					} else {
						JOptionPane.showMessageDialog(this,"ESTE PROCESO SOLO FUNCIONA AL INGRESAR UN NUEVO ELEMENTO","MANTENIMIENTO",JOptionPane.ERROR_MESSAGE);	
					}
					
					
				}
				
				if(!esParaAccionDesdeFormulario) {
					
					this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
					
				} else {
					this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
				}	
			} 			
			else if(GastoEmpleadoBeanSwingJInternalFrame.EsProcesoReporte(reporte.getsCodigo())){
				if(this.isPermisoReporteGastoEmpleado) {				
					if(this.tieneElementosSeleccionados()) {
						this.quitarFilaTotales();
						
						conSplash=false;
						
						//this.startProcessGastoEmpleado(conSplash);
					
						//this.actualizarParametrosGeneralGastoEmpleado();
						
						this.generarReporteProcesoAccionGastoEmpleadosSeleccionados(reporte.getsCodigo());
						
						if(!esParaAccionDesdeFormulario) {
							
							this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
							
						} else {
							this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
						}
					} else {
						JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO TIENE PERMISO PARA GENERAR REPORTES","REPORTE",JOptionPane.ERROR_MESSAGE);					
				}
			} 
			else if(GastoEmpleadoBeanSwingJInternalFrameAdditional.EsProcesoAccionNormal(reporte.getsCodigo())){
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					if(JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE PROCESAR "+reporte.getsDescripcion()+" EN PROCESO Gasto EmpleadoS SELECCIONADOS?", "MANTENIMIENTO DE Gasto Empleado", JOptionPane.OK_CANCEL_OPTION) == 0) {
						//this.startProcessGastoEmpleado();
				
						this.actualizarParametrosGeneralGastoEmpleado();
						
						//ARCHITECTURE
						if(Constantes.ISUSAEJBLOGICLAYER) {						
							this.gastoempleadoReturnGeneral=gastoempleadoLogic.procesarAccionGastoEmpleadosWithConnection(this.parametroGeneralUsuario,this.moduloActual,this.opcionActual,this.usuarioActual,sTipoAccionLocal,this.gastoempleadoLogic.getGastoEmpleados(),this.gastoempleadoParameterGeneral);
						
						} else if(Constantes.ISUSAEJBREMOTE) {
						
						} else if(Constantes.ISUSAEJBHOME) {
						}
						//ARCHITECTURE
						
						this.procesarGastoEmpleadoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
					}
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}				
			} 
			else {
				if(this.tieneElementosSeleccionados()) {
					this.quitarFilaTotales();
					
					this.actualizarParametrosGeneralGastoEmpleado();
					
					GastoEmpleadoBeanSwingJInternalFrameAdditional.ProcesarAccion(reporte.getsCodigo(),reporte.getsDescripcion(),this);
					
					this.procesarGastoEmpleadoReturnGeneral();
					
					if(!esParaAccionDesdeFormulario) {
						
						this.jComboBoxTiposAccionesGastoEmpleado.setSelectedIndex(0);					
						
					} else {
						this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxTiposAccionesFormularioGastoEmpleado.setSelectedIndex(0);					
					}
				} else {
					JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUN ELEMENTO","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
				}
			}
		} catch(Exception e) {
			this.esRecargarFks=false;
			
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
      		//this.finishProcessGastoEmpleado(conSplash);
      	}
	}
	
	public void jComboBoxTiposRelacionesGastoEmpleadoActionListener(ActionEvent evt) throws Exception {    				
		Boolean conSplash=true;
		
		try {			
			this.startProcessGastoEmpleado();
			
			if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {			
				this.inicializarFormDetalle();
			}
			
			ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
			GastoEmpleado gastoempleado=new GastoEmpleado();
			
			int rowIndex=-1;//CON ESTO SE DESHABILITA SELECCION POR INDICE
			
			this.inicializarActualizarBindingGastoEmpleado(false,false);
			
			Reporte reporte=new Reporte();
			
			
			reporte=(Reporte)this.jComboBoxTiposRelacionesGastoEmpleado.getSelectedItem();
			
			
			
			
			gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
			//this.sTipoAccion;
			
			if(gastoempleadosSeleccionados.size()==1) {
				for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
					gastoempleado=gastoempleadoAux;
				}
				
				if(this.sTipoAccion.equals("NONE")) {
				
				}
				
			} else {
				JOptionPane.showMessageDialog(this,"SELECCIONE SOLO UN REGISTRO","RELACIONES",JOptionPane.ERROR_MESSAGE);
			}
			
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		
		}  finally {
			this.finishProcessGastoEmpleado();
			
      		//this.finishProcessGastoEmpleado(conSplash);
      	}
	}
			
	public static Boolean EsProcesoReporte(String sTipoProceso) throws Exception {
		Boolean esProcesoAccionRepoorte=false;

		if(sTipoProceso.contains("REPORTE_")) {
			 esProcesoAccionRepoorte=true;
		}

		return esProcesoAccionRepoorte;
	}
	
	public void procesarGastoEmpleadoReturnGeneral() throws Exception {
		if(this.gastoempleadoReturnGeneral.getConRetornoEstaProcesado()) {
			JOptionPane.showMessageDialog(this,this.gastoempleadoReturnGeneral.getsMensajeProceso(),"PROCESO",JOptionPane.INFORMATION_MESSAGE);
		}
		
		if(this.gastoempleadoReturnGeneral.getConMostrarMensaje()) {
			JOptionPane.showMessageDialog(this,this.gastoempleadoReturnGeneral.getsMensajeProceso(),"PROCESO",FuncionesSwing.getColorSelectedBackground(this.gastoempleadoReturnGeneral.getsTipoMensaje()));
		}
		
		if(this.gastoempleadoReturnGeneral.getConRecargarInformacion()) {
			this.procesarBusqueda(this.sAccionBusqueda);
			
			this.inicializarActualizarBindingGastoEmpleado(false);
		}
		
		if(this.gastoempleadoReturnGeneral.getConRetornoLista() || this.gastoempleadoReturnGeneral.getConRetornoObjeto()) {
			if(this.gastoempleadoReturnGeneral.getConRetornoLista()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.gastoempleadoLogic.setGastoEmpleados(this.gastoempleadoReturnGeneral.getGastoEmpleados());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			if(this.gastoempleadoReturnGeneral.getConRetornoObjeto()) {
				//ARCHITECTURE
				if(Constantes.ISUSAEJBLOGICLAYER) {	
					this.gastoempleadoLogic.setGastoEmpleado(this.gastoempleadoReturnGeneral.getGastoEmpleado());
				} else if(Constantes.ISUSAEJBREMOTE) {
				} else if(Constantes.ISUSAEJBHOME) {
				}
				//ARCHITECTURE
			}
			
			this.inicializarActualizarBindingGastoEmpleado(false);
		}
	}
	
	public void actualizarParametrosGeneralGastoEmpleado() throws Exception {
		
		
	}
	
	public ArrayList<GastoEmpleado> getGastoEmpleadosSeleccionados(Boolean conSeleccionarTodosAutomatico) throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();
		Boolean existe=false;
		
		if(!this.esParaAccionDesdeFormularioGastoEmpleado) {
			if(Constantes.ISUSAEJBLOGICLAYER) {	
				
				for(GastoEmpleado gastoempleadoAux:gastoempleadoLogic.getGastoEmpleados()) {
					if(gastoempleadoAux.getIsSelected()) {
						gastoempleadosSeleccionados.add(gastoempleadoAux);				
					}
				}
				
			} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
				for(GastoEmpleado gastoempleadoAux:this.gastoempleados) {
					if(gastoempleadoAux.getIsSelected()) {
						gastoempleadosSeleccionados.add(gastoempleadoAux);				
					}
				}
			}
			
			if(gastoempleadosSeleccionados.size()>0) {
				existe=true;
			}
			
			//SI NO ESTA NINGUNO SELECCIONADO SE SELECCIONA TODOS
			if(!existe) {
				if(conSeleccionarTodosAutomatico) {
					if(Constantes.ISUSAEJBLOGICLAYER) {				
						gastoempleadosSeleccionados.addAll(this.gastoempleadoLogic.getGastoEmpleados());
					} else if(Constantes.ISUSAEJBREMOTE||Constantes.ISUSAEJBHOME) {
						gastoempleadosSeleccionados.addAll(this.gastoempleados);				
					}
				}
			}
		} else {
			gastoempleadosSeleccionados.add(this.gastoempleado);
		}
		
		return gastoempleadosSeleccionados;
	}
	
	public void actualizarVariablesTipoReporte(Boolean esReporteNormal,Boolean esReporteDinamico,Boolean esReporteAccionProceso,String sPath) {
		if(esReporteNormal) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=false;
			
		} else if(esReporteAccionProceso) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=false;
			this.sPathReporteDinamico="";
			this.esReporteAccionProceso=true;
			
		} else if(esReporteDinamico) {
			this.sTipoReporteExtra="";
			this.esReporteDinamico=true;
			this.esReporteAccionProceso=false;
			this.sPathReporteDinamico=sPath.replace(".jrxml",".jasper");			
		}
	}
	
	public void generarReporteGastoEmpleadosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoReporte.equals("NORMAL") || this.sTipoReporte.equals("FORMULARIO")) {
			existe=true;								
			this.generarReporteNormalGastoEmpleadosSeleccionados();
			
		} else if(this.sTipoReporte.equals("DINAMICO")) {
			existe=true;
			this.mostrarReporteDinamicoGastoEmpleadosSeleccionados();
			
		} else if(this.sTipoReporte.equals("GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoGastoEmpleadosSeleccionados(false);
			
		} else if(this.sTipoReporte.equals("TOTALES_GRUPO_GENERICO")) {
			existe=true;
			this.generarReporteGroupGenericoGastoEmpleadosSeleccionados(true);
		}
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE REPORTE VALIDO","REPORTE DE Gasto Empleado",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void generarReporteRelacionesGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
					
		//this.sTipoReporteExtra="MasterRelaciones";
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		
		this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados);
		
	}	
	
	public void generarReporteNormalGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
								
		if(this.sTipoReporte.equals("FORMULARIO")) {
			this.sTipoReporteExtra="Vertical";					
		}
		
		/*
		this.sTipoReporteExtra="";
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados);
	}		
	
	public void generarReporteProcesoAccionGastoEmpleadosSeleccionados(String sProcesoReporte) throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(false,false,true,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		this.sTipoReporteExtra=sProcesoReporte.toLowerCase();
		
		this.esReporteAccionProceso=true;
		this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados);
		this.esReporteAccionProceso=false;
	}
	
	
	public void mostrarReporteDinamicoGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		
		this.abrirInicializarFrameReporteDinamicoGastoEmpleado();
		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirFrameReporteDinamicoGastoEmpleado();
		
		
		//this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados ,gastoempleadoImplementable,gastoempleadoImplementableHome);
	}
	
	public void mostrarImportacionGastoEmpleados() throws Exception {
		//this.sTipoReporteExtra="";
		//this.actualizarVariablesTipoReporte(true,false,false,"");
		
		
		this.abrirInicializarFrameImportacionGastoEmpleado();
		
		this.abrirFrameImportacionGastoEmpleado();		
		
			
		//this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados ,gastoempleadoImplementable,gastoempleadoImplementableHome);
	}
	
	public void importarGastoEmpleados() throws Exception {		
	
	}
	
	public void exportarGastoEmpleadosSeleccionados() throws Exception {
		Boolean existe=false;
		
		if(this.sTipoArchivoReporte.equals("EXCEL")) {
			existe=true;
			this.exportarExcelGastoEmpleadosSeleccionados();
			
		} else if(this.sTipoArchivoReporte.equals("TEXTO")) {
			existe=true;
			this.exportarTextoGastoEmpleadosSeleccionados();
		
		} else if(this.sTipoArchivoReporte.equals("XML")) {
			existe=true;
			this.exportarXmlGastoEmpleadosSeleccionados();
		} 
		
		if(!existe) {
			JOptionPane.showMessageDialog(this,"SELECCIONE UN TIPO DE ARCHIVO VALIDO","EXPORTACION DE Gasto Empleado",JOptionPane.ERROR_MESSAGE);
		}
	}
	
	public void exportarTextoGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado."+"txt";//Funciones2.getTipoExtensionArchivoExportar(this.parametroGeneralUsuario);
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		BufferedWriter bufferedWriter = null;
		FileWriter fileWriter=null;
		
		fileWriter=new FileWriter(sPath);
		
		bufferedWriter = new BufferedWriter(fileWriter);
		
		try {
			if(conCabecera) {
				sFilaCabecera=this.getFilaCabeceraExportarGastoEmpleado(sDelimiter);
				
				bufferedWriter.write(sFilaCabecera);
			}				
			
			for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
				sFilaDatos=this.getFilaDatosExportarGastoEmpleado(gastoempleadoAux,sDelimiter);
				
				bufferedWriter.write(sFilaDatos);
				
				//gastoempleadoAux.setsDetalleGeneralEntityReporte(gastoempleadoAux.toString());			
			}
			
			bufferedWriter.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {
       		if (bufferedWriter != null) {
				bufferedWriter.close();
			}
		}
	}
	
	public String getFilaCabeceraExportarGastoEmpleado(String sDelimiter) {
		String sFilaCabecera="";
		
		
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_ID;

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_VERSIONROW;
		}

		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDPAIS;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDANIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDMES;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_DIA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_FECHA;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO;
		sFilaCabecera+=sDelimiter;
		sFilaCabecera+=GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE;
		
		return sFilaCabecera;
	}
	
	public String getFilaDatosExportarGastoEmpleado(GastoEmpleado gastoempleado,String sDelimiter) {
		String sFilaDatos="";
		
		sFilaDatos+="\r\n";
		
		
		sFilaDatos+=gastoempleado.getId().toString();

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
			sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getVersionRow().toString();
		}

		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getempresa_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getsucursal_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getejercicio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getpais_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getciudad_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getanio_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getmes_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getdia().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getusuario_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getestadogastoempleado_descripcion();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.gettotal_ingreso_actual().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.gettotal_ingreso_otro().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.gettotal_ingreso().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getgasto_vivienda().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getgasto_educacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getgasto_salud().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getgasto_vestimenta().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getgasto_alimentacion().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.gettotal_gasto_actual().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.gettotal_gasto().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getfecha().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getporcentaje().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getvalor_maximo().toString();
		sFilaDatos+=sDelimiter;
		sFilaDatos+=gastoempleado.getvalor_maximo_porcentaje().toString();
		
		return sFilaDatos;
	}
	
	//@SuppressWarnings("deprecation")
	public void exportarExcelGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado.xls";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		FileOutputStream fileOutputStream=null;
		
		try {
			HSSFWorkbook workbook = new HSSFWorkbook();
			HSSFSheet sheet = workbook.createSheet("GastoEmpleados");
						
		    			
			Integer iRow=0;
			Integer iCell=0;
			
			HSSFRow row = sheet.createRow(iRow);
			HSSFCell cell = row.createCell(iCell);
			//cell.setCellValue("Blahblah");

			if(conCabecera) {
				this.getFilaCabeceraExportarExcelGastoEmpleado(row);				
				iRow++;
			}				
			
			for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
				row = sheet.createRow(iRow);
				
				this.getFilaDatosExportarExcelGastoEmpleado(gastoempleadoAux,row);
				
				iRow++;
			}
			
			
			fileOutputStream = new FileOutputStream(new File(sPath));
		    
			workbook.write(fileOutputStream);
			
			//fileOutputStream.close();
			
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			
       		if (fileOutputStream != null) {
				fileOutputStream.close();
			}			
		}
	}		
	
	public void exportarXmlGastoEmpleadosSeleccionados() throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();		
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		//String sTipo=Funciones2.getTipoExportar(this.parametroGeneralUsuario);
		//Boolean conCabecera=this.parametroGeneralUsuario.getcon_exportar_cabecera();
		//String sDelimiter=Funciones2.getTipoDelimiter(this.parametroGeneralUsuario);
		String sPath=this.parametroGeneralUsuario.getpath_exportar()+"gastoempleado.xml";
		
		String sFilaCabecera="";
		String sFilaDatos="";
		
		DocumentBuilderFactory documentBuilderFactory=null;
		DocumentBuilder documentBuilder =null;
		
		try {
			documentBuilderFactory = DocumentBuilderFactory.newInstance();
			documentBuilder = documentBuilderFactory.newDocumentBuilder();
	
			Document document = documentBuilder.newDocument();
			Element elementRoot = document.createElement("gastoempleados");
			
			document.appendChild(elementRoot);
		    			
												
			Element element = null;//document.createElement("gastoempleado");
			//elementRoot.appendChild(element);
		
			for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
				element = document.createElement("gastoempleado");
				elementRoot.appendChild(element);
			
				this.setFilaDatosExportarXmlGastoEmpleado(gastoempleadoAux,document,element);
			}
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource domSource = new DOMSource(document);
			
			StreamResult streamResult = new StreamResult(new File(sPath));
	
			transformer.transform(domSource, streamResult);
						
			Constantes2.S_PATH_ULTIMO_ARCHIVO=sPath;
			
			if(this.parametroGeneralUsuario.getcon_mensaje_confirmacion() && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {//Constantes.ISMOSTRARMENSAJESMANTENIMIENTO && 
				JOptionPane.showMessageDialog(this,"EXPORTADO CORRECTAMENTE:"+sPath,"MANTENIMIENTO DE Gasto Empleado",JOptionPane.INFORMATION_MESSAGE);
			}
		} catch (Exception e) {
			throw e;
			
		} finally {			       				
		}
	}	
	
	//@SuppressWarnings("deprecation")
	public void getFilaCabeceraExportarExcelGastoEmpleado(HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_ID);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VERSIONROW);
		}

		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDPAIS);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDANIO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDMES);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_DIA);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOACTUAL);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESOOTRO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALINGRESO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVIVIENDA);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOEDUCACION);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOSALUD);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOVESTIMENTA);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_GASTOALIMENTACION);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTOACTUAL);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_TOTALGASTO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_FECHA);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_PORCENTAJE);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMO);
		cell = row.createCell(iColumn++);cell.setCellValue(GastoEmpleadoConstantesFunciones.LABEL_VALORMAXIMOPORCENTAJE);
	}
	
	//@SuppressWarnings("deprecation")
	public void getFilaDatosExportarExcelGastoEmpleado(GastoEmpleado gastoempleado,HSSFRow row) {
		Integer iColumn=0;
		
		
		HSSFCell cell =null;
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getId());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getempresa_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getsucursal_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getejercicio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getpais_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getciudad_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getanio_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getmes_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getdia());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getusuario_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getestadogastoempleado_descripcion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.gettotal_ingreso_actual());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.gettotal_ingreso_otro());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.gettotal_ingreso());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getgasto_vivienda());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getgasto_educacion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getgasto_salud());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getgasto_vestimenta());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getgasto_alimentacion());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.gettotal_gasto_actual());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.gettotal_gasto());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getfecha());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getporcentaje());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getvalor_maximo());
		cell = row.createCell(iColumn++);cell.setCellValue(gastoempleado.getvalor_maximo_porcentaje());				
	}
	
	public void setFilaDatosExportarXmlGastoEmpleado(GastoEmpleado gastoempleado,Document document,Element element) {
		/*
		Element lastname = document.createElement("lastname");
		lastname.appendChild(document.createTextNode("mook kim"));
		element.appendChild(lastname);
		*/
		

		Element elementId = document.createElement(GastoEmpleadoConstantesFunciones.ID);
		elementId.appendChild(document.createTextNode(gastoempleado.getId().toString().trim()));
		element.appendChild(elementId);

		if(parametroGeneralUsuario.getcon_exportar_campo_version()){

		Element elementVersionRow = document.createElement(GastoEmpleadoConstantesFunciones.VERSIONROW);
		elementVersionRow.appendChild(document.createTextNode(gastoempleado.getVersionRow().toString().trim()));
		element.appendChild(elementVersionRow);
		}


		Element elementempresa_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDEMPRESA);
		elementempresa_descripcion.appendChild(document.createTextNode(gastoempleado.getempresa_descripcion()));
		element.appendChild(elementempresa_descripcion);

		Element elementsucursal_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDSUCURSAL);
		elementsucursal_descripcion.appendChild(document.createTextNode(gastoempleado.getsucursal_descripcion()));
		element.appendChild(elementsucursal_descripcion);

		Element elementempleado_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDEMPLEADO);
		elementempleado_descripcion.appendChild(document.createTextNode(gastoempleado.getempleado_descripcion()));
		element.appendChild(elementempleado_descripcion);

		Element elementejercicio_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDEJERCICIO);
		elementejercicio_descripcion.appendChild(document.createTextNode(gastoempleado.getejercicio_descripcion()));
		element.appendChild(elementejercicio_descripcion);

		Element elementpais_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDPAIS);
		elementpais_descripcion.appendChild(document.createTextNode(gastoempleado.getpais_descripcion()));
		element.appendChild(elementpais_descripcion);

		Element elementciudad_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDCIUDAD);
		elementciudad_descripcion.appendChild(document.createTextNode(gastoempleado.getciudad_descripcion()));
		element.appendChild(elementciudad_descripcion);

		Element elementanio_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDANIO);
		elementanio_descripcion.appendChild(document.createTextNode(gastoempleado.getanio_descripcion()));
		element.appendChild(elementanio_descripcion);

		Element elementmes_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDMES);
		elementmes_descripcion.appendChild(document.createTextNode(gastoempleado.getmes_descripcion()));
		element.appendChild(elementmes_descripcion);

		Element elementdia = document.createElement(GastoEmpleadoConstantesFunciones.DIA);
		elementdia.appendChild(document.createTextNode(gastoempleado.getdia().toString().trim()));
		element.appendChild(elementdia);

		Element elementusuario_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDUSUARIO);
		elementusuario_descripcion.appendChild(document.createTextNode(gastoempleado.getusuario_descripcion()));
		element.appendChild(elementusuario_descripcion);

		Element elementestadogastoempleado_descripcion = document.createElement(GastoEmpleadoConstantesFunciones.IDESTADOGASTOEMPLEADO);
		elementestadogastoempleado_descripcion.appendChild(document.createTextNode(gastoempleado.getestadogastoempleado_descripcion()));
		element.appendChild(elementestadogastoempleado_descripcion);

		Element elementtotal_ingreso_actual = document.createElement(GastoEmpleadoConstantesFunciones.TOTALINGRESOACTUAL);
		elementtotal_ingreso_actual.appendChild(document.createTextNode(gastoempleado.gettotal_ingreso_actual().toString().trim()));
		element.appendChild(elementtotal_ingreso_actual);

		Element elementtotal_ingreso_otro = document.createElement(GastoEmpleadoConstantesFunciones.TOTALINGRESOOTRO);
		elementtotal_ingreso_otro.appendChild(document.createTextNode(gastoempleado.gettotal_ingreso_otro().toString().trim()));
		element.appendChild(elementtotal_ingreso_otro);

		Element elementtotal_ingreso = document.createElement(GastoEmpleadoConstantesFunciones.TOTALINGRESO);
		elementtotal_ingreso.appendChild(document.createTextNode(gastoempleado.gettotal_ingreso().toString().trim()));
		element.appendChild(elementtotal_ingreso);

		Element elementgasto_vivienda = document.createElement(GastoEmpleadoConstantesFunciones.GASTOVIVIENDA);
		elementgasto_vivienda.appendChild(document.createTextNode(gastoempleado.getgasto_vivienda().toString().trim()));
		element.appendChild(elementgasto_vivienda);

		Element elementgasto_educacion = document.createElement(GastoEmpleadoConstantesFunciones.GASTOEDUCACION);
		elementgasto_educacion.appendChild(document.createTextNode(gastoempleado.getgasto_educacion().toString().trim()));
		element.appendChild(elementgasto_educacion);

		Element elementgasto_salud = document.createElement(GastoEmpleadoConstantesFunciones.GASTOSALUD);
		elementgasto_salud.appendChild(document.createTextNode(gastoempleado.getgasto_salud().toString().trim()));
		element.appendChild(elementgasto_salud);

		Element elementgasto_vestimenta = document.createElement(GastoEmpleadoConstantesFunciones.GASTOVESTIMENTA);
		elementgasto_vestimenta.appendChild(document.createTextNode(gastoempleado.getgasto_vestimenta().toString().trim()));
		element.appendChild(elementgasto_vestimenta);

		Element elementgasto_alimentacion = document.createElement(GastoEmpleadoConstantesFunciones.GASTOALIMENTACION);
		elementgasto_alimentacion.appendChild(document.createTextNode(gastoempleado.getgasto_alimentacion().toString().trim()));
		element.appendChild(elementgasto_alimentacion);

		Element elementtotal_gasto_actual = document.createElement(GastoEmpleadoConstantesFunciones.TOTALGASTOACTUAL);
		elementtotal_gasto_actual.appendChild(document.createTextNode(gastoempleado.gettotal_gasto_actual().toString().trim()));
		element.appendChild(elementtotal_gasto_actual);

		Element elementtotal_gasto = document.createElement(GastoEmpleadoConstantesFunciones.TOTALGASTO);
		elementtotal_gasto.appendChild(document.createTextNode(gastoempleado.gettotal_gasto().toString().trim()));
		element.appendChild(elementtotal_gasto);

		Element elementfecha = document.createElement(GastoEmpleadoConstantesFunciones.FECHA);
		elementfecha.appendChild(document.createTextNode(gastoempleado.getfecha().toString().trim()));
		element.appendChild(elementfecha);

		Element elementporcentaje = document.createElement(GastoEmpleadoConstantesFunciones.PORCENTAJE);
		elementporcentaje.appendChild(document.createTextNode(gastoempleado.getporcentaje().toString().trim()));
		element.appendChild(elementporcentaje);

		Element elementvalor_maximo = document.createElement(GastoEmpleadoConstantesFunciones.VALORMAXIMO);
		elementvalor_maximo.appendChild(document.createTextNode(gastoempleado.getvalor_maximo().toString().trim()));
		element.appendChild(elementvalor_maximo);

		Element elementvalor_maximo_porcentaje = document.createElement(GastoEmpleadoConstantesFunciones.VALORMAXIMOPORCENTAJE);
		elementvalor_maximo_porcentaje.appendChild(document.createTextNode(gastoempleado.getvalor_maximo_porcentaje().toString().trim()));
		element.appendChild(elementvalor_maximo_porcentaje);
	}
	
	public void generarReporteGroupGenericoGastoEmpleadosSeleccionados(Boolean soloTotales) throws Exception {
		ArrayList<GastoEmpleado> gastoempleadosSeleccionados=new ArrayList<GastoEmpleado>();
		
		gastoempleadosSeleccionados=this.getGastoEmpleadosSeleccionados(true);
		
		this.actualizarVariablesTipoReporte(true,false,false,"");
		
		/*
		this.esReporteDinamico=false;
		this.sPathReporteDinamico="";
		*/
		
		if(!soloTotales) {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_GENERICO;
		} else {
			this.sTipoReporteExtra=Constantes2.S_REPORTE_EXTRA_GROUP_TOTALES_GENERICO;
		}
		
		this.setColumnaDescripcionReporteGroupGenericoGastoEmpleado(gastoempleadosSeleccionados);
		
		this.generarReporteGastoEmpleados("Todos",gastoempleadosSeleccionados);
	}
	
	public void setColumnaDescripcionReporteGroupGenericoGastoEmpleado(ArrayList<GastoEmpleado> gastoempleadosSeleccionados) throws Exception {    		
		try {
			//FUNCIONA CON MODEL PERO SE DANA MANTENIMIENTO
			
			Boolean existe=false;
			
			for(GastoEmpleado gastoempleadoAux:gastoempleadosSeleccionados) {
				gastoempleadoAux.setsDetalleGeneralEntityReporte(gastoempleadoAux.toString());
			
				if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDEMPRESA)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getempresa_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDSUCURSAL)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getsucursal_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDEMPLEADO)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDEJERCICIO)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getejercicio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDPAIS)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getpais_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDCIUDAD)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getciudad_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDANIO)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getanio_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDMES)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getmes_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_DIA)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getdia().toString());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDUSUARIO)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getusuario_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_IDESTADOGASTOEMPLEADO)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(gastoempleadoAux.getestadogastoempleado_descripcion());
				}
				 else if(sTipoSeleccionar.equals(GastoEmpleadoConstantesFunciones.LABEL_FECHA)) {
					existe=true;
					gastoempleadoAux.setsDescripcionGeneralEntityReporte1(Funciones2.getStringPostgresDate(gastoempleadoAux.getfecha()));
				}
			}	
											
			if(!existe) {
				JOptionPane.showMessageDialog(this,"NO SE HA SELECCIONADO ALGUNA COLUMNA VALIDA","SELECCIONAR",JOptionPane.ERROR_MESSAGE);
			}										
		} catch(Exception e) {
			FuncionesSwing.manageException(this, e,logger,GastoEmpleadoConstantesFunciones.CLASSNAME);
		}
	}
	
	
	public void actualizarEstadoCeldasBotonesGastoEmpleado(String sAccion,Boolean isGuardarCambiosEnLote,Boolean isEsMantenimientoRelacionado) throws Exception {
		if(sAccion=="n") {
			if(!this.esParaBusquedaForeignKey) {
				this.isVisibilidadCeldaNuevoGastoEmpleado=true;
				this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=true;
				this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=true;
			}
			
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		} else if(sAccion=="a") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=true;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		} else if(sAccion=="ae") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=true;
			this.isVisibilidadCeldaEliminarGastoEmpleado=true;
			this.isVisibilidadCeldaCancelarGastoEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=true;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		} else if(sAccion=="c") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=true;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=true;
			this.isVisibilidadCeldaModificarGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=true;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		} else if(sAccion=="t") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=false;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		}  else if(sAccion=="s"||sAccion=="s2") {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
			this.isVisibilidadCeldaModificarGastoEmpleado=true;
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
			this.isVisibilidadCeldaCancelarGastoEmpleado=true;
			
			if(isEsMantenimientoRelacionado==false) {
				if(isGuardarCambiosEnLote==true) {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				} else {
					this.isVisibilidadCeldaGuardarGastoEmpleado=false;
				}
			}
		}
		
		//ACTUALIZA VISIBILIDAD PANELES
		if(GastoEmpleadoJInternalFrame.CON_DATOS_FRAME && !this.esParaBusquedaForeignKey) {
			//SIEMPRE VISIBLE
			this.isVisibilidadCeldaNuevoGastoEmpleado=true;
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=true;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=true;
		} else {
			this.actualizarEstadoPanelsGastoEmpleado(sAccion);						
		}
		
		if(this.esParaBusquedaForeignKey) {
			this.isVisibilidadCeldaCopiarGastoEmpleado=false;
			//this.isVisibilidadCeldaVerFormGastoEmpleado=false;
			this.isVisibilidadCeldaDuplicarGastoEmpleado=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONES
		if(!gastoempleadoSessionBean.getConGuardarRelaciones()) {
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
		} else {
			this.isVisibilidadCeldaNuevoGastoEmpleado=false;
			this.isVisibilidadCeldaGuardarCambiosGastoEmpleado=false;
		}
		
		//SI ES MANTENIMIENTO RELACIONADO
		if(gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			if(!gastoempleadoSessionBean.getConGuardarRelaciones()) {	
				this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;												
			}
			
			this.jButtonCerrarGastoEmpleado.setVisible(false);
		}
		
		//SI NO TIENE MAXIMO DE RELACIONES PERMITIDAS
		if(!this.conMaximoRelaciones) {
			this.isVisibilidadCeldaNuevoRelacionesGastoEmpleado=false;
		}
		
		if(!this.permiteMantenimiento(this.gastoempleado)) {
			this.isVisibilidadCeldaActualizarGastoEmpleado=false;
			this.isVisibilidadCeldaEliminarGastoEmpleado=false;
		}
		
		
		
	}
	
	public void actualizarEstadoCeldasBotonesConGuardarRelacionesGastoEmpleado() {
	}
	
	public void actualizarEstadoPanelsGastoEmpleado(String sAccion) {
		if(sAccion=="n") {
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(true);		    
			}
			
		} else if(sAccion=="a") {				
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(false);			
			}
			
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(false);
			}
						
		} else if(sAccion=="ae") {		
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(true);		
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(false);
			}
						
		}
		//Para Mantenimientos de tablas relacionados con mas de columnas minimas
		else if(sAccion=="ae2") {	
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(true);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(false);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(false);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(false);
			}
						
		} else if(sAccion=="c") {	
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(false);			
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(true);
			}
						
		} else if(sAccion=="t") {
			
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(true);
			}
						
		}  else if(sAccion=="s"||sAccion=="s2") {
			if(this.jScrollPanelDatosEdicionGastoEmpleado!=null) {
				this.jScrollPanelDatosEdicionGastoEmpleado.setVisible(false);
			}
			
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(true);			
			}
			
			
			if(this.jScrollPanelDatosGastoEmpleado!=null) {
				this.jScrollPanelDatosGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelPaginacionGastoEmpleado!=null) {
				this.jPanelPaginacionGastoEmpleado.setVisible(true);
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(true);
			}
			
		} 
		
		if(sAccion.equals("relacionado") || this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			if(!this.conCargarMinimo) {
				//BYDAN_BUSQUEDAS
				
				if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
					this.jTabbedPaneBusquedasGastoEmpleado.setVisible(false);				
				}
				
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(false);
			}
		
		} else if(sAccion.equals("no_relacionado") && !this.gastoempleadoSessionBean.getEsGuardarRelacionado()) {
			//BYDAN_BUSQUEDAS
			
			if(this.jTabbedPaneBusquedasGastoEmpleado!=null) {
				this.jTabbedPaneBusquedasGastoEmpleado.setVisible(true);			
			}
			
			if(this.jPanelParametrosReportesGastoEmpleado!=null) {
				this.jPanelParametrosReportesGastoEmpleado.setVisible(true);
			}
		}
	}	
	
	

	public void setVisibilidadBusquedasParaEmpresa(Boolean isParaEmpresa){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpresaNegation=!isParaEmpresa;

			this.isVisibilidadFK_IdAnio=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaEmpresaNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaSucursal(Boolean isParaSucursal){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaSucursalNegation=!isParaSucursal;

			this.isVisibilidadFK_IdAnio=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaSucursalNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaEmpleado(Boolean isParaEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEmpleadoNegation=!isParaEmpleado;

			this.isVisibilidadFK_IdAnio=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaEmpleado;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaEjercicio(Boolean isParaEjercicio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEjercicioNegation=!isParaEjercicio;

			this.isVisibilidadFK_IdAnio=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaEjercicioNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaPais(Boolean isParaPais){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaPaisNegation=!isParaPais;

			this.isVisibilidadFK_IdAnio=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaPaisNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaPais;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaCiudad(Boolean isParaCiudad){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaCiudadNegation=!isParaCiudad;

			this.isVisibilidadFK_IdAnio=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaCiudad;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaCiudadNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaAnio(Boolean isParaAnio){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaAnioNegation=!isParaAnio;

			this.isVisibilidadFK_IdAnio=isParaAnio;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaAnioNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaMes(Boolean isParaMes){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaMesNegation=!isParaMes;

			this.isVisibilidadFK_IdAnio=isParaMesNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaMesNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaMesNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaMes;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaMesNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaUsuario(Boolean isParaUsuario){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaUsuarioNegation=!isParaUsuario;

			this.isVisibilidadFK_IdAnio=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaUsuarioNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}

	public void setVisibilidadBusquedasParaEstadoGastoEmpleado(Boolean isParaEstadoGastoEmpleado){
		//BYDAN_BUSQUEDAS
		
		if(!this.conCargarMinimo) {

			Boolean isParaEstadoGastoEmpleadoNegation=!isParaEstadoGastoEmpleado;

			this.isVisibilidadFK_IdAnio=isParaEstadoGastoEmpleadoNegation;
			if(!this.isVisibilidadFK_IdAnio) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdAnioGastoEmpleado);}

			this.isVisibilidadFK_IdCiudad=isParaEstadoGastoEmpleadoNegation;
			if(!this.isVisibilidadFK_IdCiudad) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdCiudadGastoEmpleado);}

			this.isVisibilidadFK_IdEmpleado=isParaEstadoGastoEmpleadoNegation;
			if(!this.isVisibilidadFK_IdEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdEstadoGastoEmpleado=isParaEstadoGastoEmpleado;
			if(!this.isVisibilidadFK_IdEstadoGastoEmpleado) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);}

			this.isVisibilidadFK_IdMes=isParaEstadoGastoEmpleadoNegation;
			if(!this.isVisibilidadFK_IdMes) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdMesGastoEmpleado);}

			this.isVisibilidadFK_IdPais=isParaEstadoGastoEmpleadoNegation;
			if(!this.isVisibilidadFK_IdPais) {this.jTabbedPaneBusquedasGastoEmpleado.remove(jPanelFK_IdPaisGastoEmpleado);}
		}
		
	}
	
	
	
	
	
	
	public void guardarDatosBusquedaSession() throws Exception {
		
		//GastoEmpleadoSessionBean gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
		
		if(this.gastoempleadoSessionBean==null) {
			this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
		}
		
		this.gastoempleadoSessionBean.setsUltimaBusquedaGastoEmpleado(this.getsAccionBusqueda());
		this.gastoempleadoSessionBean.setiNumeroPaginacion(this.getiNumeroPaginacion());
		this.gastoempleadoSessionBean.setiNumeroPaginacionPagina(this.getiNumeroPaginacionPagina());
		
		if(this.getsAccionBusqueda().equals("Todos")) {
			;
		}
		

		else if(this.getsAccionBusqueda().equals("FK_IdAnio")) {
			gastoempleadoSessionBean.setid_anio(this.getid_anioFK_IdAnio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
			gastoempleadoSessionBean.setid_ciudad(this.getid_ciudadFK_IdCiudad());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
			gastoempleadoSessionBean.setid_ejercicio(this.getid_ejercicioFK_IdEjercicio());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
			gastoempleadoSessionBean.setid_empleado(this.getid_empleadoFK_IdEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
			gastoempleadoSessionBean.setid_empresa(this.getid_empresaFK_IdEmpresa());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdEstadoGastoEmpleado")) {
			gastoempleadoSessionBean.setid_estado_gasto_empleado(this.getid_estado_gasto_empleadoFK_IdEstadoGastoEmpleado());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdMes")) {
			gastoempleadoSessionBean.setid_mes(this.getid_mesFK_IdMes());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
			gastoempleadoSessionBean.setid_pais(this.getid_paisFK_IdPais());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
			gastoempleadoSessionBean.setid_sucursal(this.getid_sucursalFK_IdSucursal());	
		}
		else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
			gastoempleadoSessionBean.setid_usuario(this.getid_usuarioFK_IdUsuario());	
		}
		
	}
	
	public void traerDatosBusquedaDesdeSession() throws Exception {
		//GastoEmpleadoSessionBean gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
		
		if(this.gastoempleadoSessionBean==null) {
			this.gastoempleadoSessionBean=new GastoEmpleadoSessionBean();
		}
		
		if(this.gastoempleadoSessionBean.getsUltimaBusquedaGastoEmpleado()!=null&&!this.gastoempleadoSessionBean.getsUltimaBusquedaGastoEmpleado().equals("")) {
			this.setsAccionBusqueda(gastoempleadoSessionBean.getsUltimaBusquedaGastoEmpleado());
			this.setiNumeroPaginacion(gastoempleadoSessionBean.getiNumeroPaginacion());
			this.setiNumeroPaginacionPagina(gastoempleadoSessionBean.getiNumeroPaginacionPagina());		
				
			if(this.getsAccionBusqueda().equals("Todos")) {
				;
			}
			

			 else if(this.getsAccionBusqueda().equals("FK_IdAnio")) {
				this.setid_anioFK_IdAnio(gastoempleadoSessionBean.getid_anio());
				gastoempleadoSessionBean.setid_anio(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdCiudad")) {
				this.setid_ciudadFK_IdCiudad(gastoempleadoSessionBean.getid_ciudad());
				gastoempleadoSessionBean.setid_ciudad(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEjercicio")) {
				this.setid_ejercicioFK_IdEjercicio(gastoempleadoSessionBean.getid_ejercicio());
				gastoempleadoSessionBean.setid_ejercicio(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpleado")) {
				this.setid_empleadoFK_IdEmpleado(gastoempleadoSessionBean.getid_empleado());
				gastoempleadoSessionBean.setid_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEmpresa")) {
				this.setid_empresaFK_IdEmpresa(gastoempleadoSessionBean.getid_empresa());
				gastoempleadoSessionBean.setid_empresa(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdEstadoGastoEmpleado")) {
				this.setid_estado_gasto_empleadoFK_IdEstadoGastoEmpleado(gastoempleadoSessionBean.getid_estado_gasto_empleado());
				gastoempleadoSessionBean.setid_estado_gasto_empleado(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdMes")) {
				this.setid_mesFK_IdMes(gastoempleadoSessionBean.getid_mes());
				gastoempleadoSessionBean.setid_mes(null);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdPais")) {
				this.setid_paisFK_IdPais(gastoempleadoSessionBean.getid_pais());
				gastoempleadoSessionBean.setid_pais(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdSucursal")) {
				this.setid_sucursalFK_IdSucursal(gastoempleadoSessionBean.getid_sucursal());
				gastoempleadoSessionBean.setid_sucursal(-1L);
			}
			 else if(this.getsAccionBusqueda().equals("FK_IdUsuario")) {
				this.setid_usuarioFK_IdUsuario(gastoempleadoSessionBean.getid_usuario());
				gastoempleadoSessionBean.setid_usuario(-1L);
			}
		}
		
		this.gastoempleadoSessionBean.setsUltimaBusquedaGastoEmpleado("");
		this.gastoempleadoSessionBean.setiNumeroPaginacion(GastoEmpleadoConstantesFunciones.INUMEROPAGINACION);
		this.gastoempleadoSessionBean.setiNumeroPaginacionPagina(0);
		
	}
	
	public void procesoActualizarFilaTotales(Boolean esCampoValor,String sTipo) {
		try {
			this.actualizarFilaTotales();
				
			this.traerValoresTablaTotales();
			
			this.inicializarActualizarBindingTablaGastoEmpleado(false);
			
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	
	public void updateBusquedasFormularioGastoEmpleado() {
		this.updateBorderResaltarBusquedasFormularioGastoEmpleado();
		this.updateVisibilidadBusquedasFormularioGastoEmpleado();
		this.updateHabilitarBusquedasFormularioGastoEmpleado();
	}
	
	public void updateBorderResaltarBusquedasFormularioGastoEmpleado() {					
	//BYDAN_BUSQUEDAS
		
	int index=0;
		
	if(this.jTabbedPaneBusquedasGastoEmpleado.getComponents().length>0) {
	

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdAnioGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdAnioGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdAnioGastoEmpleado);
			}
		}

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdCiudadGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdCiudadGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdCiudadGastoEmpleado);
			}
		}

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdEmpleadoGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdEmpleadoGastoEmpleado);
			}
		}

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdEstadoGastoEmpleadoGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdEstadoGastoEmpleadoGastoEmpleado);
			}
		}

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdMesGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdMesGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdMesGastoEmpleado);
			}
		}

		if(this.gastoempleadoConstantesFunciones.resaltarFK_IdPaisGastoEmpleado!=null) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdPaisGastoEmpleado);
			if(index>-1) {
				JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdPaisGastoEmpleado);
			}
		}
	}	
	
	}
	
	public void updateVisibilidadBusquedasFormularioGastoEmpleado() {
	//BYDAN_BUSQUEDAS
	
	int index=0;
	JPanel jPanel=null;
		
	if(this.jTabbedPaneBusquedasGastoEmpleado.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdAnioGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdAnioGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdAnioGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdCiudadGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdCiudadGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdCiudadGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdEmpleadoGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdEmpleadoGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdEstadoGastoEmpleadoGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdEstadoGastoEmpleadoGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdMesGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdMesGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdMesGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdPaisGastoEmpleado);
			jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
			//NO VALE SOLO PONIENDO VISIBLE=FALSE, HAY QUE USAR REMOVE
			jPanel.setVisible(this.gastoempleadoConstantesFunciones.mostrarFK_IdPaisGastoEmpleado);
			if(!this.gastoempleadoConstantesFunciones.mostrarFK_IdPaisGastoEmpleado && index>-1) {
				this.jTabbedPaneBusquedasGastoEmpleado.remove(index);
			}
	}	
	
	}
	
	public void updateHabilitarBusquedasFormularioGastoEmpleado() {
	
	//BYDAN_BUSQUEDAS		
		int index=0;
		JPanel jPanel=null;
			
		if(this.jTabbedPaneBusquedasGastoEmpleado.getComponents().length>0) {
	

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdAnioGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdAnioGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdAnioGastoEmpleado);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdCiudadGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdCiudadGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdCiudadGastoEmpleado);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdEmpleadoGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdEmpleadoGastoEmpleado);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdEstadoGastoEmpleadoGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdEstadoGastoEmpleadoGastoEmpleado);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdMesGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdMesGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdMesGastoEmpleado);
			}

			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdPaisGastoEmpleado);
			if(index>-1) {
				jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);
				//ENABLE PANE=FALSE NO FUNCIONA, ENABLEAT SI
				jPanel.setEnabled(this.gastoempleadoConstantesFunciones.activarFK_IdPaisGastoEmpleado);
				this.jTabbedPaneBusquedasGastoEmpleado.setEnabledAt(index,this.gastoempleadoConstantesFunciones.activarFK_IdPaisGastoEmpleado);
			}
		}	
	
	}
	
	
	public void resaltarPanelBusquedaGastoEmpleado(String sTipoBusqueda) {
		Boolean existe=false;
		//BYDAN_BUSQUEDAS
		
		int index=0;
		Border resaltar = Funciones2.getBorderResaltar(this.parametroGeneralUsuario,"TAB");

		if(sTipoBusqueda.equals("FK_IdAnio")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdAnioGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdAnioGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdAnioGastoEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdCiudad")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdCiudadGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdCiudadGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdCiudadGastoEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEmpleado")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEmpleadoGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdEmpleadoGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdEmpleadoGastoEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdEstadoGastoEmpleado")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdEstadoGastoEmpleadoGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdEstadoGastoEmpleadoGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdEstadoGastoEmpleadoGastoEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdMes")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdMesGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdMesGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdMesGastoEmpleado);
			existe=true;
		}
		else if(sTipoBusqueda.equals("FK_IdPais")) {
			index= this.jTabbedPaneBusquedasGastoEmpleado.indexOfComponent(this.jPanelFK_IdPaisGastoEmpleado);

			this.jTabbedPaneBusquedasGastoEmpleado.setSelectedIndex(index);

			JPanel jPanel=(JPanel)this.jTabbedPaneBusquedasGastoEmpleado.getComponent(index);

			this.gastoempleadoConstantesFunciones.setResaltarFK_IdPaisGastoEmpleado(resaltar);

			jPanel.setBorder(this.gastoempleadoConstantesFunciones.resaltarFK_IdPaisGastoEmpleado);
			existe=true;
		}
		

		if(existe) {
			
			this.jTtoolBarGastoEmpleado.setBorder(resaltar);
			
		}
	}	
	
	//NO FUNCIONA
	public void windowClosed(WindowEvent e) {	
	}
		
	public void windowClosing(WindowEvent e) {	    	    
	}

	public void windowOpened(WindowEvent e) {	    
	}

	public void windowIconified(WindowEvent e) {	    
	}

	public void windowDeiconified(WindowEvent e) {	    
	}

	public void windowActivated(WindowEvent e) {	    
	}

	public void windowDeactivated(WindowEvent e) {	    
	}

	public void windowGainedFocus(WindowEvent e) {	    
	}

	public void windowLostFocus(WindowEvent e) {	    
	}
	
	public void updateControlesFormularioGastoEmpleado() throws Exception {

		if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {			
			this.inicializarFormDetalle();
		}
		
		this.updateBorderResaltarControlesFormularioGastoEmpleado();
		this.updateVisibilidadResaltarControlesFormularioGastoEmpleado();
		this.updateHabilitarResaltarControlesFormularioGastoEmpleado();
		
	}
	
	public void updateBorderResaltarControlesFormularioGastoEmpleado() throws Exception {
		if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
	
		if(this.gastoempleadoConstantesFunciones.resaltaridGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltaridGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_empresaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_empresaGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_sucursalGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_sucursalGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_empleadoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_empleadoGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_ejercicioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_ejercicioGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_paisGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_paisGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_ciudadGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_ciudadGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_anioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_anioGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_mesGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_mesGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltardiaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltardiaGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_usuarioGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_usuarioGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarid_estado_gasto_empleadoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarid_estado_gasto_empleadoGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_actualGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_actualGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_otroGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltartotal_ingreso_otroGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltartotal_ingresoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltartotal_ingresoGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltargasto_viviendaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltargasto_viviendaGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltargasto_educacionGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltargasto_educacionGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltargasto_saludGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltargasto_saludGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltargasto_vestimentaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltargasto_vestimentaGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltargasto_alimentacionGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltargasto_alimentacionGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltartotal_gasto_actualGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltartotal_gasto_actualGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltartotal_gastoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltartotal_gastoGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarfechaGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarfechaGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarporcentajeGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarporcentajeGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarvalor_maximoGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarvalor_maximoGastoEmpleado);}
		if(this.gastoempleadoConstantesFunciones.resaltarvalor_maximo_porcentajeGastoEmpleado!=null && this.jInternalFrameDetalleFormGastoEmpleado!=null) {this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setBorder(this.gastoempleadoConstantesFunciones.resaltarvalor_maximo_porcentajeGastoEmpleado);}
	}
	
	public void updateVisibilidadResaltarControlesFormularioGastoEmpleado() throws Exception {		
		if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
	
		//this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostraridGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelidGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostraridGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_empresaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_empresaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_empresaGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_sucursalGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_sucursalGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_sucursalGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_empleadoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_empleadoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_empleadoGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_ejercicioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_ejercicioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_ejercicioGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_paisGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_paisGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_paisGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_ciudadGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_ciudadGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_ciudadGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_anioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_anioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_anioGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_mesGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_mesGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_mesGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrardiaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneldiaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrardiaGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_usuarioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_usuarioGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_usuarioGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_estado_gasto_empleadoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelid_estado_gasto_empleadoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarid_estado_gasto_empleadoGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneltotal_ingreso_actualGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_actualGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_otroGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneltotal_ingreso_otroGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingreso_otroGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingresoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneltotal_ingresoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_ingresoGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_viviendaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelgasto_viviendaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_viviendaGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_educacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelgasto_educacionGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_educacionGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_saludGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelgasto_saludGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_saludGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_vestimentaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelgasto_vestimentaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_vestimentaGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_alimentacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelgasto_alimentacionGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrargasto_alimentacionGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_gasto_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneltotal_gasto_actualGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_gasto_actualGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_gastoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPaneltotal_gastoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrartotal_gastoGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarfechaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelfechaGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarfechaGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarporcentajeGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelporcentajeGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarporcentajeGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarvalor_maximoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelvalor_maximoGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarvalor_maximoGastoEmpleado);
		//this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarvalor_maximo_porcentajeGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jPanelvalor_maximo_porcentajeGastoEmpleado.setVisible(this.gastoempleadoConstantesFunciones.mostrarvalor_maximo_porcentajeGastoEmpleado);
		}
	}
	
	public void updateHabilitarResaltarControlesFormularioGastoEmpleado() throws Exception {
		if(this.jInternalFrameDetalleFormGastoEmpleado==null) { //if(!this.conCargarFormDetalle) {
			this.inicializarFormDetalle();
		}
		
		if(this.jInternalFrameDetalleFormGastoEmpleado!=null) {
	
		this.jInternalFrameDetalleFormGastoEmpleado.jLabelidGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activaridGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empresaGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_empresaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_sucursalGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_sucursalGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_empleadoGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_empleadoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ejercicioGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_ejercicioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_paisGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_paisGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_ciudadGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_ciudadGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_anioGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_anioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_mesGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_mesGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFielddiaGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activardiaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_usuarioGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_usuarioGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jComboBoxid_estado_gasto_empleadoGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarid_estado_gasto_empleadoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_actualGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activartotal_ingreso_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingreso_otroGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activartotal_ingreso_otroGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_ingresoGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activartotal_ingresoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_viviendaGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activargasto_viviendaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_educacionGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activargasto_educacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_saludGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activargasto_saludGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_vestimentaGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activargasto_vestimentaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldgasto_alimentacionGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activargasto_alimentacionGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gasto_actualGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activartotal_gasto_actualGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldtotal_gastoGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activartotal_gastoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jDateChooserfechaGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarfechaGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldporcentajeGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarporcentajeGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximoGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarvalor_maximoGastoEmpleado);
		this.jInternalFrameDetalleFormGastoEmpleado.jTextFieldvalor_maximo_porcentajeGastoEmpleado.setEnabled(this.gastoempleadoConstantesFunciones.activarvalor_maximo_porcentajeGastoEmpleado);
		}
	}
	
		
}